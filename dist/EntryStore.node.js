module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=195)}([function(e,t,n){var r=n(2),a=n(15).f,i=n(13),o=n(16),s=n(95),c=n(130),u=n(59);e.exports=function(e,t){var n,l,p,d,f,h=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[h]||s(h,{}):(r[h]||{}).prototype)for(l in t){if(d=t[l],p=e.noTargetGet?(f=a(n,l))&&f.value:n[l],!u(m?l:h+(v?".":"#")+l,e.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(e.sham||p&&p.sham)&&i(d,"sham",!0),o(n,l,d,e)}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n="object",r=function(e){return e&&e.Math==Math&&e};e.exports=r(typeof globalThis==n&&globalThis)||r(typeof window==n&&window)||r(typeof self==n&&self)||r(typeof global==n&&global)||Function("return this")()},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";var r,a=n(6),i=n(2),o=n(3),s=n(11),c=n(66),u=n(13),l=n(16),p=n(9).f,d=n(27),f=n(48),h=n(7),m=n(56),v=i.DataView,g=v&&v.prototype,y=i.Int8Array,x=y&&y.prototype,b=i.Uint8ClampedArray,w=b&&b.prototype,_=y&&d(y),k=x&&d(x),E=Object.prototype,S=E.isPrototypeOf,R=h("toStringTag"),T=m("TYPED_ARRAY_TAG"),A=!(!i.ArrayBuffer||!v),D=A&&!!f,O=!1,I={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},j=function(e){return o(e)&&s(I,c(e))};for(r in I)i[r]||(D=!1);if((!D||"function"!=typeof _||_===Function.prototype)&&(_=function(){throw TypeError("Incorrect invocation")},D))for(r in I)i[r]&&f(i[r],_);if((!D||!k||k===E)&&(k=_.prototype,D))for(r in I)i[r]&&f(i[r].prototype,k);if(D&&d(w)!==k&&f(w,k),a&&!s(k,R))for(r in O=!0,p(k,R,{get:function(){return o(this)?this[T]:void 0}}),I)i[r]&&u(i[r],T,r);A&&f&&d(g)!==E&&f(g,E),e.exports={NATIVE_ARRAY_BUFFER:A,NATIVE_ARRAY_BUFFER_VIEWS:D,TYPED_ARRAY_TAG:O&&T,aTypedArray:function(e){if(j(e))return e;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(e){if(f){if(S.call(_,e))return e}else for(var t in I)if(s(I,r)){var n=i[t];if(n&&(e===n||S.call(n,e)))return e}throw TypeError("Target is not a typed array constructor")},exportProto:function(e,t,n){if(a){if(n)for(var r in I){var o=i[r];o&&s(o.prototype,e)&&delete o.prototype[e]}k[e]&&!n||l(k,e,n?t:D&&x[e]||t)}},exportStatic:function(e,t,n){var r,o;if(a){if(f){if(n)for(r in I)(o=i[r])&&s(o,e)&&delete o[e];if(_[e]&&!n)return;try{return l(_,e,n?t:D&&y[e]||t)}catch(e){}}for(r in I)!(o=i[r])||o[e]&&!n||l(o,e,t)}},isView:function(e){var t=c(e);return"DataView"===t||s(I,t)},isTypedArray:j,TypedArray:_,TypedArrayPrototype:k}},function(e,t,n){var r=n(1);e.exports=!r(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(2),a=n(55),i=n(56),o=n(132),s=r.Symbol,c=a("wks");e.exports=function(e){return c[e]||(c[e]=o&&s[e]||(o?s:i)("Symbol."+e))}},function(e,t,n){var r=n(23),a=Math.min;e.exports=function(e){return e>0?a(r(e),9007199254740991):0}},function(e,t,n){var r=n(6),a=n(127),i=n(4),o=n(25),s=Object.defineProperty;t.f=r?s:function(e,t,n){if(i(e),t=o(t,!0),i(n),a)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(14);e.exports=function(e){return Object(r(e))}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(36),a=n(54),i=n(10),o=n(8),s=n(61),c=[].push,u=function(e){var t=1==e,n=2==e,u=3==e,l=4==e,p=6==e,d=5==e||p;return function(f,h,m,v){for(var g,y,x=i(f),b=a(x),w=r(h,m,3),_=o(b.length),k=0,E=v||s,S=t?E(f,_):n?E(f,0):void 0;_>k;k++)if((d||k in b)&&(y=w(g=b[k],k,x),e))if(t)S[k]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return k;case 2:c.call(S,g)}else if(l)return!1;return p?-1:u||l?l:S}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(e,t,n){var r=n(6),a=n(9),i=n(42);e.exports=r?function(e,t,n){return a.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(6),a=n(72),i=n(42),o=n(18),s=n(25),c=n(11),u=n(127),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=o(e),t=s(t,!0),u)try{return l(e,t)}catch(e){}if(c(e,t))return i(!a.f.call(e,t),e[t])}},function(e,t,n){var r=n(2),a=n(55),i=n(13),o=n(11),s=n(95),c=n(128),u=n(19),l=u.get,p=u.enforce,d=String(c).split("toString");a("inspectSource",function(e){return c.call(e)}),(e.exports=function(e,t,n,a){var c=!!a&&!!a.unsafe,u=!!a&&!!a.enumerable,l=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||i(n,"name",t),p(n).source=d.join("string"==typeof t?t:"")),e!==r?(c?!l&&e[t]&&(u=!0):delete e[t],u?e[t]=n:i(e,t,n)):u?e[t]=n:s(t,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&l(this).source||c.call(this)})},function(e,t,n){var r=n(47),a=n(11),i=n(135),o=n(9).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});a(t,e)||o(t,e,{value:i.f(e)})}},function(e,t,n){var r=n(54),a=n(14);e.exports=function(e){return r(a(e))}},function(e,t,n){var r,a,i,o=n(129),s=n(2),c=n(3),u=n(13),l=n(11),p=n(73),d=n(57),f=s.WeakMap;if(o){var h=new f,m=h.get,v=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},a=function(e){return m.call(h,e)||{}},i=function(e){return v.call(h,e)}}else{var y=p("state");d[y]=!0,r=function(e,t){return u(e,y,t),t},a=function(e){return l(e,y)?e[y]:{}},i=function(e){return l(e,y)}}e.exports={set:r,get:a,has:i,enforce:function(e){return i(e)?a(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!c(t)||(n=a(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(14),a=/"/g;e.exports=function(e,t,n,i){var o=String(r(e)),s="<"+t;return""!==n&&(s+=" "+n+'="'+String(i).replace(a,"&quot;")+'"'),s+">"+o+"</"+t+">"}},function(e,t,n){var r=n(1);e.exports=function(e){return r(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(3);e.exports=function(e,t){if(!r(e))return e;var n,a;if(t&&"function"==typeof(n=e.toString)&&!r(a=n.call(e)))return a;if("function"==typeof(n=e.valueOf)&&!r(a=n.call(e)))return a;if(!t&&"function"==typeof(n=e.toString)&&!r(a=n.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(9).f,a=n(11),i=n(7)("toStringTag");e.exports=function(e,t,n){e&&!a(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(11),a=n(10),i=n(73),o=n(101),s=i("IE_PROTO"),c=Object.prototype;e.exports=o?Object.getPrototypeOf:function(e){return e=a(e),r(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){var n=[][e];return!n||!r(function(){n.call(null,t||function(){throw 1},1)})}},function(e,t,n){var r=n(4),a=n(20),i=n(7)("species");e.exports=function(e,t){var n,o=r(e).constructor;return void 0===o||null==(n=r(o)[i])?t:a(n)}},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(6),o=n(114),s=n(5),c=n(87),u=n(38),l=n(42),p=n(13),d=n(8),f=n(160),h=n(161),m=n(25),v=n(11),g=n(66),y=n(3),x=n(35),b=n(48),w=n(43).f,_=n(162),k=n(12).forEach,E=n(49),S=n(9),R=n(15),T=n(19),A=T.get,D=T.set,O=S.f,I=R.f,j=Math.round,C=a.RangeError,N=c.ArrayBuffer,L=c.DataView,q=s.NATIVE_ARRAY_BUFFER_VIEWS,U=s.TYPED_ARRAY_TAG,P=s.TypedArray,M=s.TypedArrayPrototype,F=s.aTypedArrayConstructor,z=s.isTypedArray,B=function(e,t){for(var n=0,r=t.length,a=new(F(e))(r);r>n;)a[n]=t[n++];return a},V=function(e,t){O(e,t,{get:function(){return A(this)[t]}})},G=function(e){var t;return e instanceof N||"ArrayBuffer"==(t=g(e))||"SharedArrayBuffer"==t},Y=function(e,t){return z(e)&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},H=function(e,t){return Y(e,t=m(t,!0))?l(2,e[t]):I(e,t)},W=function(e,t,n){return!(Y(e,t=m(t,!0))&&y(n)&&v(n,"value"))||v(n,"get")||v(n,"set")||n.configurable||v(n,"writable")&&!n.writable||v(n,"enumerable")&&!n.enumerable?O(e,t,n):(e[t]=n.value,e)};i?(q||(R.f=H,S.f=W,V(M,"buffer"),V(M,"byteOffset"),V(M,"byteLength"),V(M,"length")),r({target:"Object",stat:!0,forced:!q},{getOwnPropertyDescriptor:H,defineProperty:W}),e.exports=function(e,t,n,i){var s=e+(i?"Clamped":"")+"Array",c="get"+e,l="set"+e,m=a[s],v=m,g=v&&v.prototype,S={},R=function(e,n){O(e,n,{get:function(){return function(e,n){var r=A(e);return r.view[c](n*t+r.byteOffset,!0)}(this,n)},set:function(e){return function(e,n,r){var a=A(e);i&&(r=(r=j(r))<0?0:r>255?255:255&r),a.view[l](n*t+a.byteOffset,r,!0)}(this,n,e)},enumerable:!0})};q?o&&(v=n(function(e,n,r,a){return u(e,v,s),y(n)?G(n)?void 0!==a?new m(n,h(r,t),a):void 0!==r?new m(n,h(r,t)):new m(n):z(n)?B(v,n):_.call(v,n):new m(f(n))}),b&&b(v,P),k(w(m),function(e){e in v||p(v,e,m[e])}),v.prototype=g):(v=n(function(e,n,r,a){u(e,v,s);var i,o,c,l=0,p=0;if(y(n)){if(!G(n))return z(n)?B(v,n):_.call(v,n);i=n,p=h(r,t);var m=n.byteLength;if(void 0===a){if(m%t)throw C("Wrong length");if((o=m-p)<0)throw C("Wrong length")}else if((o=d(a)*t)+p>m)throw C("Wrong length");c=o/t}else c=f(n),i=new N(o=c*t);for(D(e,{buffer:i,byteOffset:p,byteLength:o,length:c,view:new L(i)});l<c;)R(e,l++)}),b&&b(v,P),g=v.prototype=x(M)),g.constructor!==v&&p(g,"constructor",v),U&&p(g,U,s),S[s]=v,r({global:!0,forced:v!=m,sham:!q},S),"BYTES_PER_ELEMENT"in v||p(v,"BYTES_PER_ELEMENT",t),"BYTES_PER_ELEMENT"in g||p(g,"BYTES_PER_ELEMENT",t),E(s)}):e.exports=function(){}},function(e,t){e.exports=require("util")},function(e,t){e.exports=!1},function(e,t,n){var r=n(47),a=n(2),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(a[e]):r[e]&&r[e][t]||a[e]&&a[e][t]}},function(e,t,n){var r=n(23),a=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?a(n+t,0):i(n,t)}},function(e,t,n){var r=n(4),a=n(99),i=n(97),o=n(57),s=n(133),c=n(94),u=n(73)("IE_PROTO"),l=function(){},p=function(){var e,t=c("iframe"),n=i.length;for(t.style.display="none",s.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),p=e.F;n--;)delete p.prototype[i[n]];return p()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[u]=e):n=p(),void 0===t?n:a(n,t)},o[u]=!0},function(e,t,n){var r=n(20);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,a){return e.call(t,n,r,a)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(7),a=n(35),i=n(13),o=r("unscopables"),s=Array.prototype;null==s[o]&&i(s,o,a(null)),e.exports=function(e){s[o][e]=!0}},function(e,t){e.exports=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(41),a=v(n(115)),i=v(n(118)),o=v(n(124)),s=v(n(193)),c=v(n(88)),u=v(n(194)),l=v(n(92)),p=v(n(116)),d=v(n(122)),f=v(n(125)),h=v(n(52)),m=v(n(123));function v(e){return e&&e.__esModule?e:{default:e}}var g={sortBy:"title",prio:"List"},y=50,x=function(e,t){var n=t.getBaseURI(),r=e.substr(n.length,e.indexOf("/",n.length)-n.length),i=t.getCachedContextsIdx(),o=i[r];return o||(o=new a.default("".concat(n,"_contexts/entry/").concat(r),n+r,t),i[r]=o),o},b=function(e,t){var n=t.resource;null!=e&&(n&&"string"==typeof n.name&&(e instanceof m.default?(e._data=e._data||{},e._data.name=n.name):e._name=n.name),e instanceof m.default&&(e._data=e._data||{},n&&"boolean"==typeof n.disabled&&(e._data.disabled=n.disabled)))},w=function(e,t,n){var r=t||{},a=e.getResource(!0),i=e.getURI(),o=e.getResourceURI(),d=e.getContext().getResourceURI(),v=e.getEntryStore(),g=e.getEntryInfo();if(!a&&g.getEntryType()===h.default.ET_LOCAL&&g.getResourceType()===h.default.RT_INFORMATIONRESOURCE){switch(e.getEntryInfo().getGraphType()){case h.default.GT_CONTEXT:(a=x("".concat(v.getBaseURI()+e.getId(),"/"),e.getEntryStore()))._update(r);break;case h.default.GT_LIST:case h.default.GT_GROUP:a=e.isGroup()?new u.default(i,o,v):new l.default(i,o,v),r.resource&&r.resource.children&&a._update(r.resource,r.resource.children.map(function(e){return k("".concat(d,"/entry/").concat(e.entryId),e,v)}));break;case h.default.GT_USER:(n||null!=r.resource)&&(a=new m.default(i,o,v,r.resource||{}));break;case h.default.GT_STRING:(n||null!=r.resource)&&(a=new f.default(i,o,v,r.resource||""));break;case h.default.GT_GRAPH:(n||null!=r.resource)&&(a=new c.default(i,o,v,r.resource||{}));break;case h.default.GT_PIPELINE:(n||null!=r.resource)&&(a=new p.default(i,o,v,r.resource||{}));break;case h.default.GT_PIPELINERESULT:case h.default.GT_NONE:a=new s.default(i,o,v)}return e._resource=a,void b(a,r)}null!=a&&null!=r.resource?a._update&&(e.isList()||e.isGroup()?r.resource&&r.resource.children&&a._update(r.resource,r.resource.children.map(function(t){return k("".concat(d,"/entry/").concat(t.entryId),t,e.getEntryStore())})):a._update(r.resource)):b(a,r)},_=function(e,t){(e._metadata=t.metadata?new r.Graph(t.metadata):null,e._cachedExternalMetadata=t["cached-external-metadata"]?new r.Graph(t["cached-external-metadata"]):null,e._inferredMetadata=t.inferred?new r.Graph(t.inferred):null,e._extractedMetadata=t["extracted-metadata"]?new r.Graph(t["extracted-metadata"]):null,e._relation=t.relations?new r.Graph(t.relations):new r.Graph,e._rights=function(e){for(var t={},n=e||[],r=0;r<n.length;r++)t[n[r]]=!0;return t}(t.rights),t.name||t.resource&&t.resource.name)&&(e.getEntryInfo()._name=t.name||t.resource.name);(t.disabled||t.resource&&t.resource.disabled)&&(e.getEntryInfo()._disabled=t.disabled||t.resource.disabled);return e},k=function(e,t,n){var a=n.getCache(),s=a.get(e);if(s)s.getEntryInfo().setGraph(new r.Graph(t.info));else{var c=new o.default(e,new r.Graph(t.info),n),u=x(e,n);s=new i.default(u,c)}return _(s,t),w(s,t),a.cache(s),s},E=function(e,t){var n=e;t&&(n=n.substr(t.length-1));var r=n.match(/\/([^\/]+)\/(entry|resource|metadata|relation)\/([^?\/]+)(\?.*)?$/);return r?r[3]:0===n.lastIndexOf("/")?n.substr(1):t?void 0:n.substr(n.lastIndexOf("/")+1)},S=function(e,t){var n=e;t&&(n=n.substr(t.length-1));var r=n.match(/\/([^\/]+)\/(entry|resource|metadata|relation)\/([^?\/]+)(\?.*)?$/);return r?r[1]:-1!==n.indexOf("/")&&t?void 0:"_contexts"},R={getContext:function(e,t){var n=e.getBaseURI(),r="".concat(n,"_contexts/entry/"),i=t.substr(r.length),o=e.getCachedContextsIdx(),s=o[i];return s||(s=new a.default(t,n+i,e),o[i]=s),s},getList:function(e,t){var n=e.getCache(),a=n.get(t);if(!a){var s=new o.default(t,new r.Graph,e),c=x(t,e);a=new i.default(c,s);var u=t.replace("/entry/","/resource/");a._resource=new l.default(t,u,e),n.cache(a,!0),a.setRefreshNeeded(!0)}return a._resource},updateOrCreate:k,updateOrCreateResource:w,update:function(e,t){e.getEntryInfo().setGraph(new r.Graph(t.info)),w(e,t),_(e,t),e.getEntryStore().getCache().cache(e)},createSearchList:function(e,t){return new d.default(e,t)},extractSearchResults:function(e,t,n){e.resource.offset=e.resource.offset||e.offset,e.resource.size=e.resource.size||e.results;var r=n.getBaseURI(),a=e.resource.children.map(function(e){return k("".concat(r+e.contextId,"/entry/").concat(e.entryId),e,n)});return t._update(e.resource,a),a},getCachedExternalMetadataURI:function(e){return e.replace("/entry/","/cached-external-metadata/")},getId:function(e){return e.substr(e.lastIndexOf("/")+1)},getEntryId:E,getContextId:S,getEntryURIFromURI:function(e,t){var n=e.getBaseURI();return"".concat(n+S(t,n),"/entry/").concat(E(t,n))},getEntryURI:function(e,t,n){return"".concat(e.getBaseURI()).concat(t,"/entry/").concat(n)},getMetadataURIFromURI:function(e,t){var n=e.getBaseURI();return"".concat(n+S(t,n),"/metadata/").concat(E(t,n))},getMetadataURI:function(e,t,n){return"".concat(e.getBaseURI()).concat(t,"/entry/").concat(n)},getResourceBase:function(e,t){return"".concat(e.getBaseURI()+t,"/resource/")},getResourceURI:function(e,t,n){return"_contexts"===t?e.getBaseURI()+n:"".concat(e.getBaseURI()+t,"/resource/").concat(n)},getURIFromCreated:function(e,t){return"".concat(t.getResourceURI(),"/entry/").concat(e.entryId)},getEntryLoadURI:function(e,t){var n=t||{},r="";r=n.limit>0||-1===n.limit?"&limit=".concat(n.limit):"&limit=".concat(y);var a=null==n.offset||0===n.offset?"":"&offset=".concat(n.offset),i=null==n.sort?g:n.sort,o="",s="",c="";return null!=i&&(o=null==i.sortBy?"":"&sort=".concat(i.sortBy),s=!0===i.descending?"&order=desc":"",c=null==i.prio?"":"&prio=".concat(i.prio)),"".concat(e,"?includeAll").concat(r).concat(a).concat(o).concat(s).concat(c)},getEntryCreateURI:function(e,t){var n="".concat(e.getContext().getResourceURI(),"?");if(e){var r=e.getEntryInfo();null!=e.getSpecificId()&&(n="".concat(n,"id=").concat(e.getSpecificId(),"&")),e.isLink()&&(n="".concat(n,"resource=").concat(encodeURIComponent(e.getResourceURI()),"&")),(e.isReference()||e.isLinkReference())&&(n="".concat(n,"resource=").concat(encodeURIComponent(e.getResourceURI()),"&"),n="".concat(n,"cached-external-metadata=").concat(encodeURIComponent(r.getExternalMetadataURI()),"&")),r.getEntryType()!==h.default.ET_LOCAL&&(n="".concat(n,"entrytype=").concat(r.getEntryType().toLowerCase(),"&")),r.getResourceType()!==h.default.RT_INFORMATIONRESOURCE&&(n="".concat(n,"informationresource=false&")),r.getGraphType()!==h.default.GT_NONE&&(n="".concat(n,"graphtype=").concat(r.getGraphType().toLowerCase(),"&"))}return t&&(n="".concat(n,"list=").concat(t.getResourceURI(),"&")),n.slice(0,-1)},getEntryCreatePostData:function(e){var t={},n=!0,r=e.getMetadata();null==r||r.isEmpty()||(t.metadata=r.exportRDFJSON(),n=!1);var a=e.getResource(!0);null!=a&&null!=a.getSource&&(t.resource=a.getSource(),n=!1);var i=e.getEntryInfo().getGraph();null==i||i.isEmpty()||(t.info=i.exportRDFJSON(),n=!1);var o=e.getCachedExternalMetadata();return null==o||o.isEmpty()||(t["cached-external-metadata"]=o.exportRDFJSON(),n=!1),n?"":JSON.stringify(t)},getMoveURI:function(e,t,n,r){var a=e.getURI().substr(r.length),i=t.getResourceURI().substr(r.length);return"".concat(n.getResourceURI(),"?moveEntry=").concat(a,"&fromList=").concat(i)},getProxyURI:function(e,t,n){var r="".concat(e,"proxy?url=").concat(encodeURIComponent(t));return null!=n&&(r+="&fromFormat=".concat(n)),r},getPutFileURI:function(e){return"".concat(e+(e.indexOf("?")<0?"?":"&"),"method=put&textarea=true")},setSort:function(e){g=e},getSort:function(){return g},getDefaultLimit:function(){return y},setDefaultLimit:function(e){y=e}};t.default=R},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(39))&&r.__esModule?r:{default:r};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryURI=t,this._resourceURI=n,this._entryStore=r}var t,n,r;return t=e,(n=[{key:"getEntryStore",value:function(){return this._entryStore}},{key:"getEntry",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._entryStore.getEntry(this._entryURI,{direct:e})}},{key:"getResourceURI",value:function(){return this._resourceURI}},{key:"getEntryURI",value:function(){return this._entryURI}},{key:"getId",value:function(){return a.default.getEntryId(this._entryURI)}},{key:"_update",value:function(e){this._data=e}},{key:"getSource",value:function(){return this._data}}])&&i(t.prototype,n),r&&i(t,r),e}();t.default=o},function(e,t,n){"use strict";n.r(t);const r={ical:"http://www.w3.org/2002/12/cal/ical#",vcard:"http://www.w3.org/2006/vcard/ns#",dcterms:"http://purl.org/dc/terms/",skos:"http://www.w3.org/2004/02/skos/core#",rdfs:"http://www.w3.org/2000/01/rdf-schema#",rdf:"http://www.w3.org/1999/02/22-rdf-syntax-ns#",owl:"http://www.w3.org/2002/07/owl#",vs:"http://www.w3.org/2003/06/sw-vocab-status/ns#",foaf:"http://xmlns.com/foaf/0.1/",wot:"http://xmlns.com/wot/0.1/",dc:"http://purl.org/dc/elements/1.1/",xsd:"http://www.w3.org/2001/XMLSchema#",dcat:"http://www.w3.org/ns/dcat#",org:"http://www.w3.org/ns/org#",gn:"http://www.geonames.org/ontology#",locn:"http://www.w3.org/ns/locn#",schema:"http://schema.org/",ex:"http://example.com/",gsp:"http://www.opengis.net/ont/geosparql#",odrs:"http://schema.theodi.org/odrs#"};let a=0;const i=(e,t,n)=>(r[e]||(r[e]=t),{abbrev:e,ns:t,localname:n,full:t+n,pretty:`${e}:${n}`}),o=e=>{const t=Object.keys(r).find(t=>0===e.indexOf(r[t]));if(t)return i(t,r[t],e.substring(r[t].length));let n=e.lastIndexOf("/");const o=e.lastIndexOf("#");return o>n&&(n=o),i(`ns${a+=1}`,e.substring(0,n+1),e.substring(n+1))};var s={nsify:o,shortenKnown:e=>{const t=Object.keys(r).find(t=>0===e.indexOf(r[t]));return t?i(t,r[t],e.substring(r[t].length)).pretty:e},shorten:e=>o(e).pretty,expand:e=>{const t=e.split(":");return 2===t.length&&r.hasOwnProperty(t[0])?r[t[0]]+t[1]:e},add:(e,t)=>{"string"==typeof e?r[e]=t:"object"==typeof e&&Object.keys(e).forEach(t=>{r[t]=e[t]})},registry:()=>r},c=n(93),u=n.n(c);const l=e=>void 0!==e&&(null===e||"object"==typeof e||Array.isArray(e)||"function"==typeof e),p=e=>"string"==typeof e||e instanceof String,d=(e,t,n)=>{0===e[t][n].length&&(delete e[t][n],0===Object.keys(e[t]).length&&delete e[t])},f=e=>{if(!l(e[0]))throw new Error("Graph is not a object.");if(!p(e[1]))throw new Error("Subject is not a string.");if(!p(e[2]))throw new Error("Predicate is not a string.");if(!l(e[3]))throw new Error("Object is not a object.");if(void 0===e[3].type)throw new Error("Object has no type attribute, must be one of 'uri', 'literal', or 'bnode'");if(void 0===e[3].value)throw new Error("Object has no value attribute corresponding to the lexical value of the object.")},h=(e,t)=>e===t||null==e&&e===t||(p(e)?p(t)?e===t:e===t.value:p(t)?e.value===t:e.type===t.type&&e.value===t.value&&e.lang===t.lang&&e.datatype===t.datatype);var m={isObject:l,isString:p,isFunction:e=>"[object Function]"===Object.prototype.toString.call(e),statementEquals:(e,t)=>e.s===t.s&&e.p===t.p&&h(e.o,t.o),add:(e,t,n,r)=>{if(f([e,t,n,r]),void 0===e[t])return e[t]={},e[t][n]=[r],r;if(void 0===e[t][n])return e[t][n]=[r],r;let a;const i=e[t][n];for(a=i.length-1;a>=0;a--)if(h(r,i[a]))return i[a];return i.push(r),r},remove:(e,t,n,r)=>{if(f([e,t,n,r]),void 0===e[t]||void 0===e[t][n])return;let a;const i=e[t][n];for(a=i.length-1;a>=0;a--)if(h(r,i[a])){const r=i[a];return i.splice(a,1),d(e,t,n),r}},contains:(e,t,n,r)=>{if(f([e,t,n,r]),void 0===e[t]||void 0===e[t][n])return;let a;const i=e[t][n];for(a=i.length-1;a>=0;a--)if(h(r,i[a]))return i[a]},cleanup:d,checkForWrongArgs:f,objectEquals:h,findDirectOrRDFValue:(e,t,n)=>{const r=e.find(t,n);if(r.length>0)return"bnode"!==r[0].getType()?r[0].getValue():e.findFirstValue(r[0].getValue(),"http://www.w3.org/1999/02/22-rdf-syntax-ns#value")}};class v{constructor(e,t,n,r,a){this._graph=e,this._s=t,this._p=n,this._o=r,this._o._statement=this,this._asserted=a}getGraph(){return this._graph}setAsserted(e){e!==this._asserted&&(e?this._graph.add(this,void 0,void 0,this._silentValue):this._graph.remove(this,this._silentValue),this._asserted=e)}isAsserted(){return this._asserted}getSubject(){return this._s}isSubjectBlank(){return!0!==this._sIsBlank&&!1!==this._sIsBlank&&(this._sIsBlank=0===this._s.indexOf("_:")),this._sIsBlank}isObjectBlank(){return"bnode"===this.getType()}setSubject(e){this._silentValue=!1;const t=s.expand(e);this._asserted?(this._graph.remove(this),this._s=t,this._graph.add(this),delete this._sIsBlank):this._s=t}getPredicate(){return this._p}setPredicate(e){this._silentValue=!1;const t=s.expand(e);this._asserted?(this._graph.remove(this),this._p=t,this._graph.add(this)):this._p=t}getNamedGraph(){return this._o.ng}setNamedGraph(e){this._o.ng=e}getObject(){return this._o}getCleanObject(){const e=this._o,t={value:e.value,type:e.type};return this._o.ng&&(t.ng=e.ng),e.lang&&(t.lang=e.lang),this._o.datatype&&(t.datatype=e.datatype),t}getType(){return this._o.type}setType(e){throw new Error("Changing the type of an object is not supported, create a new statement instead.")}getValue(){return this._o.value}setValue(e,t=!1){this._silentValue=!0===t,e!==this._o.value&&(this._o.value=e,this.isAsserted()&&!0!==t&&this._graph.setChanged())}getLanguage(){return this._o.lang}setLanguage(e,t){if(this._silentValue=!0===t,"literal"!==this._o.type)throw new Error("Cannot set the language for a resource, has to be a literal");this._o.lang!==e&&(this._o.lang=e,this.isAsserted()&&!0!==t&&this._graph.setChanged())}getDatatype(){return this._o.datatype}setDatatype(e,t){if(this._silentValue=!0===t,"literal"!==this._o.type||null!=this._o.lang)throw new Error("Cannot set the datatype for a resource, has to be a literal");this._o.datatype!==e&&(this._o.datatype=e,this.isAsserted()&&!0!==t&&this._graph.setChanged())}}var g=n(126),y=n.n(g);const x=(e,t,n,r,a)=>{t||new E;const i=r||{};return e.find(n,null,null).forEach(n=>{i[n.getPredicate()]?a&&t.add(n):(t.add(n),"bnode"===n.getType()&&x(e,t,n.getValue(),i))}),t},b=(e,t,n)=>{const r=n||{};e.find(t,null,null).forEach(t=>{e.remove(t),r[t.getPredicate()]||"bnode"===t.getType()&&b(e,t.getValue(),r)})};var w={extract:x,remove:b,fingerprint:(e,t)=>{const n=[],r=new Set((t||[]).map(e=>s.expand(e))),a=[],i={},o=e=>{let t=e.getValue();return e.getLanguage()&&(t+=`@${e.getLanguage()}`),e.getDatatype()&&(t+=`^^${e.getDatatype()}`),t},c=(e,t)=>{const n=i[e]||{rels:[]};i[e]=n,n.rels.push(t)};return e.find().forEach(e=>{const t=e.getSubject(),i=e.getPredicate();if(r.has(i))return;const s="bnode"===e.getType(),u=e.isSubjectBlank();if(u||s)return a.push(e),u&&c(e.getSubject(),s?i:i+o(e)),void("bnode"===e.getType()&&c(e.getValue(),u?i:t+i));n.push(t+i+o(e))}),Object.values(i).forEach(e=>{e.rels.sort(),e.hash=y()(e.rels.join(""))}),a.forEach(e=>{const t=[];t.push(e.isSubjectBlank()?i[e.getSubject()].hash:e.getSubject()),t.push(e.getPredicate()),t.push("bnode"===e.getType()?i[e.getValue()].hash:o(e)),n.push(t.join(""))}),n.sort(),y()(n.join(""))}};const _=e=>0===e.length?e:[e[0]],k=(e,t,n)=>({object(r){for(let a=0;a<t.length;a++){let i;if(n)i=t[a].getSubject();else{const e=t[a].getType();if("uri"===e||"bnode"===e)continue;i=t[a].getValue()}const o=e.find(i,r);o.length>0&&k(e,[o[0]])}return k(e,[])},objects(r){let a,i=[];if(!0===n)for(a=0;a<t.length;a++)i=i.concat(e.find(t[a].getSubject(),r));else for(a=0;a<t.length;a++){const n=t[a].getType();"uri"!==n&&"bnode"!==n||(i=i.concat(e.find(t[a].getValue(),r)))}return k(e,i)},constr(r,a){let i=a;m.isString(i)&&(i={type:"uri",value:i});const o=[];for(let a=0;a<t.length;a++){const s=n?t[a].getSubject():t[a].getValue();e.find(s,r,i).length>0&&o.push(t[a])}return k(e,o,n)},each(r,a){if(!0===n)for(let i=0;i<t.length;i++){const o="_:"===t[i].getSubject().substring(0,2)?"bnode":"uri";null!=a&&a!==o||r(k(e,t[i],n))}else for(let a=0;a<t.length;a++)r(k(e,t[a],n))},nodes(e){const r=[];if(!0===n)for(let n=0;n<t.length;n++){const a="_:"===t[n].getSubject().substring(0,2)?"bnode":"uri";null!=e&&e!==a||r.push({type:a,value:t[n].getSubject()})}else for(let n=0;n<t.length;n++)null!=e&&e!==t[n].getType()||r.push(t[n].getObject());return r},values(e){const r=[];if(!0===n)for(let n=0;n<t.length;n++){const a="_:"===t[n].getSubject().substring(0,2)?"bnode":"uri";null!=e&&e!==a||r.push(t[n].getSubject())}else for(let n=0;n<t.length;n++)null!=e&&e!==t[n].getType()||r.push(t[n].getValue());return r},firstValue(e){if(!0===n)for(let n=0;n<t.length;n++){const r="_:"===t[n].getSubject().substring(0,2)?"bnode":"uri";if(null==e||e===r)return t[n].getSubject()}else for(let n=0;n<t.length;n++)if(null==e||e===t[n].getType())return t[n].getValue()}});class E{constructor(e=null,t){this._graph=e||{},this._bnodes={},this._bnodesIndexed=!1,!1!==t&&this.validate(),this._changed=!1}isEmpty(){return!Object.keys(this._graph).find(e=>{const t=this._graph[e];return Object.keys(t).find(e=>t[e].find(e=>null==e._statement||e._statement.isAsserted()))})}onChange(){}setChanged(e){this._changed=!(!0!==e&&null!=e),this._changed&&this.onChange()}isChanged(){return this._changed}addAll(e,t){const n={};let r;const a=e.find();for(let e=0;e<a.length;e++){const i=a[e];let o=i.getSubject(),s=i.getPredicate();const c=i.getCleanObject();t&&(c.ng=t),0===o.indexOf("_:")&&(r=n[o]||this._newBNode(),n[o]=r,o=r),0===s.indexOf("_:")&&(r=n[s]||this._newBNode(),n[s]=r,s=r),"bnode"===c.type&&(r=n[c.value]||this._newBNode(),n[c.value]=r,c.value=r),this.add(o,s,c)}}add(e,t=null,n=null,r=!1){if(e instanceof v){const t=e.getPredicate(),n=e.getObject(),a=e.getSubject();this._trackBNodes(a,t,n);const i=this._graphObject(n),o=m.add(this._graph,a,t,i);return!0!==r&&this.setChanged(),this._get(a,t,o,!0)}return this.create(e,t,n,!0,r)}addL(e,t,n,r){const a={type:"literal",value:n};return"string"==typeof r&&(a.lang=r),this.create(e,t,a,!0)}addD(e,t,n,r){const a={type:"literal",value:n};return"string"==typeof r&&(a.datatype=s.expand(r)),this.create(e,t,a,!0)}create(e=null,t=null,n=null,r=!0,a=!1){let i=e,o=t,c=n;if(i=null==i?this._newBNode():s.expand(i),o=null==o?this._newBNode():s.expand(o),null==c?c={type:"bnode",value:this._newBNode()}:m.isString(c)?c={type:"uri",value:s.expand(c)}:("uri"===(c={type:c.type,value:c.value,lang:c.lang,datatype:c.datatype}).type&&null!=c.value&&(c.value=s.expand(c.value)),c.datatype&&(c.datatype=s.expand(c.datatype))),!1!==r){const e=m.add(this._graph,i,o,c);return!0!==a&&this.setChanged(),this._getOrCreate(i,o,e,!0)}return new v(this,i,o,c,!1)}findAndRemove(e,t,n,r=!1){const a=this.find(e,t,n);for(let e=0;e<a.length;e++)this.remove(a[e],r)}remove(e,t=!1){const n=e.getSubject(),r=e.getPredicate(),a=e.getObject();this._trackBNodes(n,r,a),null!=m.remove(this._graph,n,r,a)&&!0!==t&&this.setChanged()}find(e,t,n){let r=e,a=t,i=n;if("string"==typeof r&&(r=s.expand(r)),"string"==typeof a&&(a=s.expand(a)),"object"==typeof i&&null!==i&&"uri"===i.type?i.value=s.expand(i.value):"string"==typeof i&&(i={type:"uri",value:s.expand(i)}),null==i)return null==a?null==r?this._find():this._findS(r):null==r?this._findP(a):this._findSP(r,a);if(null==a)return null==r?this._findO(i):this._findSO(r,i);if(null==r)return this._findPO(a,i);const o=this._get(r,a,m.contains(this._graph,r,a,i),!0);return null==o?[]:[o]}findFirstValue(e,t){const n=this.find(e,t);if(n.length>0)return n[0].getValue()}projection(e,t,n){const r={};return Object.keys(t).forEach(a=>{const i=t[a],o=this.find(e,i);if(o.length>0)switch("*"===a[0]?r[a.substr(1)]=o.map(e=>e.getValue()):r[a]=o[0].getValue(),n||"none"){case"statement":r[`*${a}`]=o;break;case"objects":r[`*${a}`]=o.map(e=>e.getCleanObject());break;case"values":r[`*${a}`]=o.map(e=>e.getValue())}}),r}subjects(e,t){return k(this,this.find(null,e,t),!0)}subject(e,t){return k(this,_(this.find(null,e,t)),!0)}objects(e,t){return k(this,this.find(e,t,null))}object(e,t){return k(this,_(this.find(e,t,null)))}addList(e){return this._addList(e,"add")}addListL(e,t){return this._addList(e,"addL",t)}addListD(e,t){return this._addList(e,"addD",t)}_addList(e,t,n){let r;if(Array.isArray(e)&&0!==e.length){let a=r=this._newBNode();const i=e.length-1;e.forEach((e,r)=>{this[t](a,"rdf:first",e,n),r!==i?a=this.add(a,"rdf:rest").getValue():this.add(a,"rdf:rest","rdf:nil")})}else r=s.expand("rdf:nil");return r}removeList(e){let t=!1,n="object"==typeof e?e.value:e;try{const e=s.expand("rdf:nil");for(t=n===e;n!==e&&null!=n;){const e=this.findFirstValue(n,"rdf:rest");this.findAndRemove(n),t=null!=(n=e)}}catch(e){return console.warn(`Invalid list for object: ${n}`),!1}return t}getList(e){let t="object"==typeof e?e.value:e;const n=[];try{const e=s.expand("rdf:nil");for(;t!==e&&null!=t;)n.push(this.find(t,"rdf:first")[0].getObject()),t=this.findFirstValue(t,"rdf:rest")}catch(e){console.warn(`Invalid list for object: ${t}`)}return n}findFirstListAsValues(e,t){return this.getList(this.findFirstValue(e,t)).map(e=>e.value)}findAndRemoveLists(e,t){let n=!1;return this.find(e,t).forEach(e=>{this.removeList(e.getValue())&&(this.remove(e),n=!0)}),n}exportRDFJSON(){const e=this._graph,t={};return Object.keys(e).forEach(n=>{const r=e[n];t[n]={},Object.keys(r).forEach(e=>{const a=[];t[n][e]=a,r[e].forEach(e=>{const t={type:e.type,value:e.value};null!=e.ng&&(t.ng=e.ng),null!=e.lang&&(t.lang=e.lang),null!=e.datatype&&(t.datatype=e.datatype),a.push(t)})})}),t}replaceSubject(e,t){return this.replaceURI(e,t)}replaceURI(e,t){const n=this._graph;if(n.hasOwnProperty(e)){if(n.hasOwnProperty(t))throw new Error("Cannot replace subject with target URI since it already exists.");n[t]=n[e],delete n[e],this.forEach((n,r,a)=>{"uri"===a.type&&a.value===e&&(a.value=t),n===t&&a._statement&&(a._statement._s=t)})}return this}replaceBlankWithURI(e,t){const n=this._graph;if(n.hasOwnProperty(e)){if(n.hasOwnProperty(t))throw new Error("Cannot replace subject with target URI since it already exists.");n[t]=n[e],delete n[e],this.forEach((n,r,a)=>{"bnode"===a.type&&a.value===e&&(a.value=t,a.type="uri"),n===t&&a._statement&&(a._statement._s=t)})}return delete this._bnodes[e],this}clone(){return new E(this.exportRDFJSON())}findProperties(e){return Object.keys(this._graph[e]||{})}validate(){if(this.report=this._validate(),!this.report.valid)throw this.report;return this.report}registerBNode(e){this._bnodes[e]=!0}forEach(e){const t=this._graph;Object.keys(t).forEach(n=>{const r=t[n];Object.keys(r).forEach(t=>{r[t].forEach(r=>{e(n,t,r)})})})}map(e){const t=[];return this.forEach(n=>{t.push(e(n))}),t}equals(e,t){return w.fingerprint(this,t)===w.fingerprint(e,t)}size(){let e=0;return Object.values(this._graph).forEach(t=>{Object.values(t).forEach(t=>{e+=t.length})}),e}_get(e,t,n,r){if(null!=n)return this._getOrCreate(e,t,n,r)}_getOrCreate(e,t,n,r){return null==n._statement&&(n._statement=new v(this,e,t,n,r)),n._statement}_graphObject(e){return null==e._statement||e._statement._graph===this?e:{type:e.type,value:e.value,lang:e.lang,datatype:e.datatype}}_findSP(e,t){return null==this._graph[e]||null==this._graph[e][t]?[]:this._graph[e][t].map(n=>this._get(e,t,n,!0))}_findS(e){const t=this._graph[e],n=Object.keys(t||{}).map(t=>this._findSP(e,t));return Array.prototype.concat.apply([],n)}_find(){const e=[];return this.forEach((t,n,r)=>{e.push(this._get(t,n,r,!0))}),e}_findP(e){const t=[];return this.forEach((n,r,a)=>{e===r&&t.push(this._get(n,r,a,!0))}),t}_findO(e){const t=[];return this.forEach((n,r,a)=>{m.objectEquals(e,a)&&t.push(this._get(n,r,a,!0))}),t}_findSO(e,t){const n=[];return this.forEach((r,a,i)=>{e===r&&m.objectEquals(t,i)&&n.push(this._get(r,a,i,!0))}),n}_findPO(e,t){const n=[];return this.forEach((r,a,i)=>{e===a&&m.objectEquals(t,i)&&n.push(this._get(r,a,i,!0))}),n}_validate(){const e=this._graph,t={valid:!0,errors:[],nr:0};return Object.keys(e).forEach(n=>{const r=e[n];m.isObject(r)?Object.keys(r).forEach(e=>{const a=r[e];Array.isArray(a)?a.forEach((r,a)=>{m.isObject(r)?null!=r.type?m.isString(r.value)?t.nr+=1:(t.errors.push({s:n,p:e,oindex:a+1,message:`Object ${a+1} in object array must have the 'value' attribute pointing to a string.`}),t.valid=!1):(t.errors.push({s:n,p:e,oindex:a+1,message:`Object ${a+1} in object array lacks the attribute type, must be either 'literal', 'resource' or 'bnode'.`}),t.valid=!1):(t.errors.push({s:n,p:e,oindex:a+1,message:`Element ${a+1} in object array is not an object.`}),t.valid=!1)}):(t.errors.push({s:n,p:e,message:"Predicate must point to an array of objects."}),t.valid=!1)}):(t.errors.push({s:n,message:"Subject must point to an object."}),t.valid=!1)}),t}_newBNode(){let e,t,n;for(this._indexBNodes(),e=1;e<20;e++)for(t=1;t<=e;t++)if(n=`_:${Math.floor(Math.random()*(Math.pow(10,e)+1))}`,!0!==this._bnodes[n])return this._bnodes[n]=!0,n;throw new Error("Failed creating a new blank node, increadible unprobable...")}_indexBNodes(){if(this._bnodesIndexed)return;const e=this._graph;Object.keys(e).forEach(t=>{0===t.indexOf("_:")&&(this._bnodes[t]=!0);const n=e[t];Object.keys(n).forEach(e=>{0===e.indexOf("_:")&&(this._bnodes[e]=!0),n[e].forEach(e=>{"bnode"===e.type&&(this._bnodes[e.value]=!0)})})}),this._bnodesIndexed=!0}_trackBNodes(e,t,n){0===e.indexOf("_:")&&(this._bnodes[e]=!0),0===t.indexOf("_:")&&(this._bnodes[t]=!0),"bnode"===n.type&&(this._bnodes[n.value]=!0)}}const S=(e,t)=>{var n=t.indexOf("#");if(n>0&&(t=t.slice(0,n)),0==e.length)return t;if(0==e.indexOf("#"))return t+e;if(e.indexOf(":")>=0)return e;var r=t.indexOf(":");if(r<0)return console.log("Invalid base URL "+t),e;var a,i=t.slice(0,r+1);if(0==e.indexOf("//"))return i+e;if(t.indexOf("//",r)==r+1){if((a=t.indexOf("/",r+3))<0)return t.length-r-3>0?t+"/"+e:i+e}else if((a=t.indexOf("/",r+1))<0)return t.length-r-1>0?t+"/"+e:i+e;if(0==e.indexOf("/"))return t.slice(0,a)+e;var o=t.slice(a),s=o.lastIndexOf("/");if(s<0)return i+e;for(s>=0&&s<o.length-1&&(o=o.slice(0,s+1)),o+=e;o.match(/[^\/]*\/\.\.\//);)o=o.replace(/[^\/]*\/\.\.\//,"");return o=o.replace(/\.\//g,""),t.slice(0,a)+o};var R,T=R=function(e){R.ns={RDF:"http://www.w3.org/1999/02/22-rdf-syntax-ns#",RDFS:"http://www.w3.org/2000/01/rdf-schema#"},R.nodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12},this.frameFactory=function(e,t,n){return{NODE:1,ARC:2,parent:t,parser:e,store:e.store,element:n,lastChild:0,base:null,lang:null,node:null,nodeType:null,listIndex:1,rdfid:null,datatype:null,collection:!1,terminateFrame:function(){this.collection&&this.node.close()},addSymbol:function(e,t){t=S(t,this.base),this.node=this.store.sym(t),this.nodeType=e},loadTriple:function(){if(this.parent.parent.collection?this.parent.parent.node.append(this.node):this.store.add(this.parent.parent.node,this.parent.node,this.node,this.parser.why),null!=this.parent.rdfid){var e=this.store.sym(S("#"+this.parent.rdfid,this.base));this.store.add(e,this.store.sym(R.ns.RDF+"type"),this.store.sym(R.ns.RDF+"Statement"),this.parser.why),this.store.add(e,this.store.sym(R.ns.RDF+"subject"),this.parent.parent.node,this.parser.why),this.store.add(e,this.store.sym(R.ns.RDF+"predicate"),this.parent.node,this.parser.why),this.store.add(e,this.store.sym(R.ns.RDF+"object"),this.node,this.parser.why)}},isTripleToLoad:function(){return null!=this.parent&&null!=this.parent.parent&&this.nodeType==this.NODE&&this.parent.nodeType==this.ARC&&this.parent.parent.nodeType==this.NODE},addNode:function(e){this.addSymbol(this.NODE,e),this.isTripleToLoad()&&this.loadTriple()},addCollection:function(){this.nodeType=this.NODE,this.node=this.store.collection(),this.collection=!0,this.isTripleToLoad()&&this.loadTriple()},addCollectionArc:function(){this.nodeType=this.ARC},addBNode:function(e){null!=e?null!=this.parser.bnodes[e]?this.node=this.parser.bnodes[e]:this.node=this.parser.bnodes[e]=this.store.bnode():this.node=this.store.bnode(),this.nodeType=this.NODE,this.isTripleToLoad()&&this.loadTriple()},addArc:function(e){e==R.ns.RDF+"li"&&(e=R.ns.RDF+"_"+this.parent.listIndex++),this.addSymbol(this.ARC,e)},addLiteral:function(e){this.parent.datatype?this.node=this.store.literal(e,"",this.store.sym(this.parent.datatype)):this.node=this.store.literal(e,this.lang),this.nodeType=this.NODE,this.isTripleToLoad()&&this.loadTriple()}}},this.store=e,this.bnodes={},this.why=null,this.reify=!1,this.parse=function(e,t,n){var r,a=e.childNodes;if(this.cleanParser(),e.nodeType==R.nodeType.DOCUMENT){for(var i=0;i<a.length;i++)if(a[i].nodeType==R.nodeType.ELEMENT){r=a[i];break}}else{if(e.nodeType!=R.nodeType.ELEMENT)throw new Error("RDFParser: can't find root in "+t+". Halting. ");r=e}this.why=n;var o=this.frameFactory(this);return o.base=t,o.lang="",this.parseDOM(this.buildFrame(o,r)),!0},this.parseDOM=function(e){for(var t=function(e){return e.namespaceURI+e.localName},n=!0;e.parent;){var r,a,i=e.element,o=i.attributes;if(i.nodeType==R.nodeType.TEXT||i.nodeType==R.nodeType.CDATA_SECTION)e.addLiteral(i.nodeValue);else if(t(i)!=R.ns.RDF+"RDF")if(e.parent&&e.parent.collection&&(e.addCollectionArc(),(e=this.buildFrame(e,e.element)).parent.element=null),e.parent&&e.parent.nodeType&&e.parent.nodeType!=e.ARC){e.addArc(t(i)),this.reify&&(r=i.getAttributeNodeNS(R.ns.RDF,"ID"))&&(e.rdfid=r.nodeValue,i.removeAttributeNode(r));var s=i.getAttributeNodeNS(R.ns.RDF,"parseType"),c=i.getAttributeNodeNS(R.ns.RDF,"datatype");if(c&&(e.datatype=c.nodeValue,i.removeAttributeNode(c)),s){var u=s.nodeValue;"Literal"==u?(e.datatype=R.ns.RDF+"XMLLiteral",(e=this.buildFrame(e)).addLiteral(i),n=!1):"Resource"==u?((e=this.buildFrame(e,e.element)).parent.element=null,e.addBNode()):"Collection"==u&&((e=this.buildFrame(e,e.element)).parent.element=null,e.addCollection()),i.removeAttributeNode(s)}if(0!=o.length){var l=i.getAttributeNodeNS(R.ns.RDF,"resource");for(a=i.getAttributeNodeNS(R.ns.RDF,"nodeID"),e=this.buildFrame(e),l?(e.addNode(l.nodeValue),i.removeAttributeNode(l)):a?(e.addBNode(a.nodeValue),i.removeAttributeNode(a)):e.addBNode(),h=o.length-1;h>=0;h--){var p=this.buildFrame(e);p.addArc(t(o[h])),t(o[h])==R.ns.RDF+"type"?this.buildFrame(p).addNode(o[h].nodeValue):this.buildFrame(p).addLiteral(o[h].nodeValue)}}else 0==i.childNodes.length&&this.buildFrame(e).addLiteral("")}else{var d=i.getAttributeNodeNS(R.ns.RDF,"about");if(r=i.getAttributeNodeNS(R.ns.RDF,"ID"),d&&r)throw new Error("RDFParser: "+i.nodeName+" has both rdf:id and rdf:about. Halting. Only one of these properties may be specified on a node.");null==d&&r?(e.addNode("#"+r.nodeValue),i.removeAttributeNode(r)):null==d&&null==r?(a=i.getAttributeNodeNS(R.ns.RDF,"nodeID"))?(e.addBNode(a.nodeValue),i.removeAttributeNode(a)):e.addBNode():(e.addNode(d.nodeValue),i.removeAttributeNode(d));var f=i.getAttributeNodeNS(R.ns.RDF,"type");R.ns.RDF+"Description"!=t(i)&&(f={nodeValue:t(i)}),null!=f&&(this.store.add(e.node,this.store.sym(R.ns.RDF+"type"),this.store.sym(S(f.nodeValue,e.base)),this.why),f.nodeName&&i.removeAttributeNode(f));for(var h=o.length-1;h>=0;h--)this.store.add(e.node,this.store.sym(t(o[h])),this.store.literal(o[h].nodeValue,e.lang),this.why)}for(i=e.element;e.parent;){for(var m=e;null==i;)i=(e=e.parent).element;var v=i.childNodes,g=null!=v?v[e.lastChild]:null;if(null!=g&&n){if((g.nodeType==R.nodeType.ELEMENT||g.nodeType==R.nodeType.TEXT||g.nodeType==R.nodeType.CDATA_SECTION)&&(g.nodeType!=R.nodeType.TEXT&&g.nodeType!=R.nodeType.CDATA_SECTION||1==i.childNodes.length)){e.lastChild++,e=this.buildFrame(m,i.childNodes[e.lastChild-1]);break}e.lastChild++}else{if(e.terminateFrame(),!(e=e.parent))break;i=e.element,n=!0}}}},this.cleanParser=function(){this.bnodes={},this.why=null},this.buildFrame=function(e,t){var n=this.frameFactory(this,e,t);if(e&&(n.base=e.base,n.lang=e.lang),null==t||t.nodeType==R.nodeType.TEXT||t.nodeType==R.nodeType.CDATA_SECTION)return n;var r=t.attributes,a=t.getAttributeNode("xml:base");null!=a&&(n.base=a.nodeValue,t.removeAttribute("xml:base"));var i=t.getAttributeNode("xml:lang");null!=i&&(n.lang=i.nodeValue,t.removeAttribute("xml:lang"));for(var o=r.length-1;o>=0;o--)"xml"==r[o].nodeName.substr(0,3)&&t.removeAttributeNode(r[o]);return n}};const A=e=>"object"==typeof e?e:"string"==typeof e?new N(e):void(void 0!==e&&alert(`Can't make term from ${e} of type ${typeof e}`)),D=function(){return this};D.prototype.termType="empty",D.prototype.toString=function(){return""},D.prototype.toNT=function(){return""};const O=function(){return"<"+this.uri+">"},I=function(e){return this.uri=e,this};I.prototype.termType="symbol",I.prototype.toString=O,I.prototype.toNT=O;let j=0;const C=function(){return this.id=j++,this};C.prototype.termType="bnode",C.prototype.toNT=function(){return"_:n"+this.id},C.prototype.toString=C.prototype.toNT;const N=function(e,t,n){return this.value=e,this.lang=t,this.datatype=n,this};N.prototype.termType="literal",N.prototype.toNT=function(){const e=this.value;if("string"!=typeof e)throw Error("Value of RDF literal is not string: "+e);return e=e.replace(/\\/g,"\\\\"),e=e.replace(/"/g,'\\"'),e='"'+e+'"',this.datatype&&(e=e+"^^"+this.datatype),this.lang&&(e=e+"@"+this.lang),e},N.prototype.toString=function(){return this.value};const L=function(){this.id=j++,this.elements=[],this.closed=!1};L.prototype.termType="collection",L.prototype.toNT=function(){return"_:n"+this.id},L.prototype.toString=L.prototype.toNT,L.prototype.append=function(e){this.elements.push(e)},L.prototype.close=function(){this.closed=!0};const q=function(){return this.subject.toNT()+" "+this.predicate.toNT()+" "+this.object.toNT()+" ."},U=function(e,t,n,r){return this.subject=A(e),this.predicate=A(t),this.object=A(n),void 0!==r&&(this.why=r),this};U.prototype.toNT=q,U.prototype.toString=q;const P=function(){return this.statements=[],this.constraints=[],this.initBindings=[],this.optional=[],this},M=function(){return"{\n"+this.statements.join("\n")+"}"};P.prototype.termType="formula",P.prototype.toNT=M,P.prototype.toString=M,P.prototype.add=function(e,t,n,r){this.statements.push(new U(e,t,n,r))},P.prototype.sym=function(e,t){return null!=t&&(e=this.namespaces[e]+t),new I(e)},P.prototype.literal=function(e,t,n){return new N(e.toString(),t,n)},P.prototype.bnode=function(){return new C},P.prototype.formula=function(){return new P},P.prototype.collection=function(){return new L};const F=function(e){return this.uri=S(e,"varid:"),this};F.prototype.termType="variable",F.prototype.toNT=function(){return"varid:"==this.uri.slice(0,"varid:".length)?`?${this.uri.slice("varid:".length)}`:`?${this.uri}`},F.prototype.toString=F.prototype.toNT,F.prototype.classOrder=7,P.prototype.variable=function(e){return new F(e)},F.prototype.hashString=F.prototype.toNT,P.prototype.fromNT=function(e){const t=e.length,n=e.slice(0,1);if("<"===n)return this.sym(e.slice(1,t-1));if("_"===n){const t=new C;return t.id=parseInt(e.slice(3)),j--,t}alert(`Can't yet convert from NT: '${e}', ${e[0]}`)};let z,B;if("undefined"==typeof window||void 0===window.DOMParser&&"undefined"==typeof ActiveXObject){z=e=>(new XMLSerializer).serializeToString(e);const e=u.a.DOMParser;B=t=>(new e).parseFromString(t,"text/xml")}else z=e=>e.xml,B=e=>{let t;try{if(window.DOMParser){t=(new DOMParser).parseFromString(e,"text/xml")}else(t=new ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e)}catch(e){t=null}if(!t||!t.documentElement||t.getElementsByTagName("parsererror").length)throw new Error("Could not parse text as xml");return t};const V=e=>{if(/["<>^`{|}]/i.test(e))throw Error({message:`URL "${e}" is not allowed to contain special characters " < > \\ ^ \` { | or }.`,character:!0});if(!/^(?:[a-z][a-z0-9+.-]*:)/i.test(e))throw Error({message:`Relative URL not supported: ${e}`,relative:!0});if(/ /i.test(e)){if(exports.convertSpacesInURIs)return e.replace(/ /g,"%20");throw Error({message:`Spaces inside of URL not supported: ${e}`,space:!0})}return e},G=(e,t=null)=>{let n=e;m.isString(n)&&(n=B(n));const r=t||new E({}),a=new P;return a.add=(e,t,n)=>{let a,i;const o={};e instanceof C?(a=e.toString(),r.registerBNode(a)):(e.uri=V(e.uri),a=e.uri),t instanceof C?(i=t.toString(),r.registerBNode(i)):(t.uri=V(t.uri),i=t.uri),n instanceof N?(o.type="literal",o.value=n.value,n.lang&&(o.lang=n.lang),n.datatype&&(o.datatype=n.datatype.uri)):n instanceof I?(n.uri=V(n.uri),o.type="uri",o.value=n.uri):n instanceof C&&(o.value=n.toString(),r.registerBNode(o.value),o.type="bnode"),r.create(a,i,o,!0)},new T(a).parse(n,"",""),r},Y=e=>encodeURI(decodeURI(e)).replace(/&/g,"&amp;");var H={xml2string:z,string2xml:B,rdfxml2graph:G,rdfjson2rdfxml:e=>{const t=e instanceof E?e._graph:e||{},n=[],r={},a=[];Object.keys(t).forEach(e=>{"_:"===e.substr(0,2)?a.push(`  <rdf:Description rdf:nodeID="_${e.substring(2)}">\n`):a.push(`  <rdf:Description rdf:about="${Y(e)}">\n`);const i=t[e];Object.keys(i).forEach(e=>{const t=function(e){const t=s.nsify(e);return r[t.abbrev]||(n.push(t.abbrev),r[t.abbrev]=t.ns),t.pretty}(e);i[e].forEach(e=>{let n;switch(e.type){case"literal":n=e.value.replace("&","&amp;").replace("<","&lt;"),null!=e.lang?a.push(`    <${t} xml:lang="${e.lang}">${n}</${t}>\n`):null!=e.datatype?a.push(`    <${t} rdf:datatype="${e.datatype}">${n}</${t}>\n`):a.push(`    <${t}>${n}</${t}>\n`);break;case"uri":a.push(`    <${t} rdf:resource="${Y(e.value)}"/>\n`);break;case"bnode":"_:"===e.value.substr(0,2)?a.push(`    <${t} rdf:nodeID="_${e.value.substring(2)}"/>\n`):a.push(`    <${t} rdf:nodeID="${e.value}"/>\n`)}})}),a.push("  </rdf:Description>\n")});const i=['<?xml version="1.0"?>\n<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"'];for(let e=0;e<n.length;e++)"rdf"!==n[e]&&i.push(`\n\txmlns:${n[e]}="${r[n[e]]}"`);return i.push(">\n"),a.unshift(i.join("")),a.push("</rdf:RDF>"),a.join("")},detect:e=>{const t={};if("string"==typeof e){if(-1!==e.substr(0,200).toLowerCase().indexOf("<rdf:rdf")){t.format="rdf/xml";try{t.graph=G(e)}catch(e){e.relative||e.space||e.character?(t.error=e.message,t.errorCode=1):(t.error="Invalid rdf/xml",t.errorCode=2)}}else if('{"'===e.substring(0,2)){t.format="rdf/json";try{const e=JSON.parse((void 0).rdfjson);t.graph=new E(e)}catch(e){t.error="Invalid json.",t.errorCode=3}}else t.error="No RDF detected.",t.errorCode=4}else e instanceof E?(t.format="rdf/json",t.graph=e):"object"==typeof e?(t.format="rdf/json",t.graph=new E(e)):(t.error="unknown format",t.errorCode=5);if(!t.error){t.graph.validate().valid||(t.error="RDF/JSON is not valid.",t.errorCode=6)}return t}};const W=(e,t,n)=>{const r=n||{},a=e?e.find(t):[],i=[];for(let t=0;t<a.length;t++){const n=a[t];if("literal"===n.getType())i.push({stmt:n});else{const t={stmt:n},a=n.getValue();r[a]||(r[a]=!0,t.children=W(e,a,r))}}return i},$=(e,t)=>{const n=W(e,t),r=[],a=(e,t)=>{for(let n=0;n<e.length;n++){const i=e[n];i.indent=t,r.push(i),i.children&&(a(i.children,t+1),delete i.children)}};return a(n,1),r};var J={pretty:(e,t)=>{const n={},r=e.find(t);for(let e=0;e<r.length;e++){const t=r[e];"bnode"!==t.getType()&&(n[s.shorten(t.getPredicate())]=t.getValue())}return n},statementList:$,statementTree:W,prettyTree:(e,t)=>{const n=$(e,t);for(let e=0;e<n.length;e++){const t=n[e],r=t.stmt;r.isSubjectBlank()?t.s=r.getSubject():t.s=s.shorten(r.getSubject()),t.p=s.shorten(r.getPredicate());const a=r.getType();if("uri"===a){t.o=s.shorten(r.getValue());const e=r.getLanguage(),n=r.getDatatype();null!=e?t.o+=`@@${e}`:null!=n&&(t.o+=`^^${n}`)}else t.o=`"${r.getValue()}"`}return n}};n.d(t,"namespaces",function(){return s}),n.d(t,"converters",function(){return H}),n.d(t,"Graph",function(){return E}),n.d(t,"Statement",function(){return v}),n.d(t,"utils",function(){return w}),n.d(t,"print",function(){return J})},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(131),a=n(97).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,a)}},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(57),a=n(3),i=n(11),o=n(9).f,s=n(56),c=n(62),u=s("meta"),l=0,p=Object.isExtensible||function(){return!0},d=function(e){o(e,u,{value:{objectID:"O"+ ++l,weakData:{}}})},f=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,u)){if(!p(e))return"F";if(!t)return"E";d(e)}return e[u].objectID},getWeakData:function(e,t){if(!i(e,u)){if(!p(e))return!0;if(!t)return!1;d(e)}return e[u].weakData},onFreeze:function(e){return c&&f.REQUIRED&&p(e)&&!i(e,u)&&d(e),e}};r[u]=!0},function(e,t,n){"use strict";var r=n(25),a=n(9),i=n(42);e.exports=function(e,t,n){var o=r(t);o in e?a.f(e,o,i(0,n)):e[o]=n}},function(e,t,n){e.exports=n(2)},function(e,t,n){var r=n(4),a=n(140);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,i){return r(n),a(i),t?e.call(n,i):n.__proto__=i,n}}():void 0)},function(e,t,n){"use strict";var r=n(33),a=n(9),i=n(7),o=n(6),s=i("species");e.exports=function(e){var t=r(e),n=a.f;o&&t&&!t[s]&&n(t,s,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(14),a="["+n(84)+"]",i=RegExp("^"+a+a+"*"),o=RegExp(a+a+"*$"),s=function(e){return function(t){var n=String(r(t));return 1&e&&(n=n.replace(i,"")),2&e&&(n=n.replace(o,"")),n}};e.exports={start:s(1),end:s(2),trim:s(3)}},function(e,t,n){var r=n(16);e.exports=function(e,t,n){for(var a in t)r(e,a,t[a],n);return e}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={ET_LOCAL:"Local",ET_LINK:"Link",ET_REF:"Reference",ET_LINKREF:"Linkreference",GT_NONE:"None",GT_CONTEXT:"Context",GT_SYSTEMCONTEXT:"Systemcontext",GT_USER:"User",GT_GROUP:"Group",GT_LIST:"List",GT_RESULTLIST:"Resultlist",GT_GRAPH:"Graph",GT_STRING:"String",GT_PIPELINE:"Pipeline",GT_PIPELINERESULT:"PipelineResult",RT_INFORMATIONRESOURCE:"Information",RT_RESOLVABLEINFORMATIONRESOURCE:"Resolvable",RT_NAMEDRESOURCE:"Named",RT_UNKNOWN:"Unknown"};t.default=n},function(e,t){e.exports=require("stream")},function(e,t,n){var r=n(1),a=n(24),i="".split;e.exports=r(function(){return!Object("z").propertyIsEnumerable(0)})?function(e){return"String"==a(e)?i.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(2),a=n(95),i=n(32),o=r["__core-js_shared__"]||a("__core-js_shared__",{});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.1.3",mode:i?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t){e.exports={}},function(e,t,n){var r=n(18),a=n(8),i=n(34),o=function(e){return function(t,n,o){var s,c=r(t),u=a(c.length),l=i(o,u);if(e&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:o(!0),indexOf:o(!1)}},function(e,t,n){var r=n(1),a=/#|\.prototype\./,i=function(e,t){var n=s[o(e)];return n==u||n!=c&&("function"==typeof t?r(t):!!t)},o=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},function(e,t,n){var r=n(131),a=n(97);e.exports=Object.keys||function(e){return r(e,a)}},function(e,t,n){var r=n(3),a=n(44),i=n(7)("species");e.exports=function(e,t){var n;return a(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!a(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(1);e.exports=!r(function(){return Object.isExtensible(Object.preventExtensions({}))})},function(e,t,n){var r=n(4),a=n(100),i=n(8),o=n(36),s=n(65),c=n(138),u=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,t,n,l,p){var d,f,h,m,v,g,y=o(t,n,l?2:1);if(p)d=e;else{if("function"!=typeof(f=s(e)))throw TypeError("Target is not iterable");if(a(f)){for(h=0,m=i(e.length);m>h;h++)if((v=l?y(r(g=e[h])[0],g[1]):y(e[h]))&&v instanceof u)return v;return new u(!1)}d=f.call(e)}for(;!(g=d.next()).done;)if((v=c(d,y,g.value,l))&&v instanceof u)return v;return new u(!1)}).stop=function(e){return new u(!0,e)}},function(e,t){e.exports={}},function(e,t,n){var r=n(66),a=n(64),i=n(7)("iterator");e.exports=function(e){if(null!=e)return e[i]||e["@@iterator"]||a[r(e)]}},function(e,t,n){var r=n(24),a=n(7)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?n:i?r(t):"Object"==(o=r(t))&&"function"==typeof t.callee?"Arguments":o}},function(e,t,n){var r=n(1),a=n(7)("species");e.exports=function(e){return!r(function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=n(41),i=(r=n(52))&&r.__esModule?r:{default:r};var o=function(e){var t={};return Object.keys(e).forEach(function(n){t[e[n]]=n}),t},s="http://entrystore.org/terms/",c="http://www.w3.org/2001/XMLSchema#";a.namespaces.add("prov","http://www.w3.org/ns/prov#"),a.namespaces.add("store",s),a.namespaces.add("storepr","http://entrystore.org/terms/pipelineresult#");var u={homeContext:"".concat(s,"homeContext"),resource:"".concat(s,"resource"),metadata:"".concat(s,"metadata"),externalMetadata:"".concat(s,"externalMetadata"),reasoningFacts:"".concat(s,"reasoningFacts"),status:{property:"".concat(s,"status"),InProgress:"".concat(s,"InProgress"),Pending:"".concat(s,"Pending"),Succeeded:"".concat(s,"Success"),Failed:"".concat(s,"Failed")},rdf:{type:"".concat("http://www.w3.org/1999/02/22-rdf-syntax-ns#","type")},pipeline:{pipeline:"".concat(s,"pipeline"),pipelineData:"".concat(s,"pipelineData"),transform:"".concat(s,"transform"),transformPriority:"".concat(s,"transformPriority"),transformType:"".concat(s,"transformType"),transformArgument:"".concat(s,"transformArgument"),transformArgumentKey:"".concat(s,"transformArgumentKey"),transformArgumentValue:"".concat(s,"transformArgumentValue"),transformDestination:"".concat(s,"transformDestination"),transformDetectDestination:"".concat(s,"transformDetectDestination")},acl:{read:"".concat(s,"read"),write:"".concat(s,"write")},xsd:{integer:"".concat(c,"integer"),float:"".concat(c,"float"),boolean:"".concat(c,"boolean")}},l={};l["".concat(s,"Local")]=i.default.ET_LOCAL,l["".concat(s,"Link")]=i.default.ET_LINK,l["".concat(s,"LinkReference")]=i.default.ET_LINKREF,l["".concat(s,"Reference")]=i.default.ET_REF,l.default=i.default.ET_LOCAL,u.entryType=l,u.invEntryType=o(l);var p={};p["".concat(s,"None")]=i.default.GT_NONE,p["".concat(s,"Context")]=i.default.GT_CONTEXT,p["".concat(s,"SystemContext")]=i.default.GT_SYSTEMCONTEXT,p["".concat(s,"User")]=i.default.GT_USER,p["".concat(s,"Group")]=i.default.GT_GROUP,p["".concat(s,"List")]=i.default.GT_LIST,p["".concat(s,"ResultList")]=i.default.GT_RESULTLIST,p["".concat(s,"Graph")]=i.default.GT_GRAPH,p["".concat(s,"Pipeline")]=i.default.GT_PIPELINE,p["".concat(s,"PipelineResult")]=i.default.GT_PIPELINERESULT,p["".concat(s,"String")]=i.default.GT_STRING,p.default=i.default.GT_NONE,u.graphType=p,u.invGraphType=o(p);var d={};d["".concat(s,"InformationResource")]=i.default.RT_INFORMATIONRESOURCE,d["".concat(s,"ResolvableInformationResource")]=i.default.RT_RESOLVABLEINFORMATIONRESOURCE,d["".concat(s,"NamedResource")]=i.default.RT_NAMEDRESOURCE,d["".concat(s,"Unknown")]=i.default.RT_UNKNOWN,d.default=i.default.RT_INFORMATIONRESOURCE,u.resourceType=d,u.invResourceType=o(d);var f=u;t.default=f},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("url")},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);t.f=i?function(e){var t=a(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(55),a=n(56),i=r("keys");e.exports=function(e){return i[e]||(i[e]=a(e))}},function(e,t,n){"use strict";var r=n(32),a=n(2),i=n(1);e.exports=r||!i(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete a[e]})},function(e,t,n){var r=n(7)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},function(e,t,n){var r=n(20),a=n(10),i=n(54),o=n(8),s=function(e){return function(t,n,s,c){r(n);var u=a(t),l=i(u),p=o(u.length),d=e?p-1:0,f=e?-1:1;if(s<2)for(;;){if(d in l){c=l[d],d+=f;break}if(d+=f,e?d<0:p<=d)throw TypeError("Reduce of empty array with no initial value")}for(;e?d>=0:p>d;d+=f)d in l&&(c=n(c,l[d],d,u));return c}};e.exports={left:s(!1),right:s(!0)}},function(e,t,n){"use strict";var r=n(18),a=n(37),i=n(64),o=n(19),s=n(103),c=o.set,u=o.getterFor("Array Iterator");e.exports=s(Array,"Array",function(e,t){c(this,{type:"Array Iterator",target:r(e),index:0,kind:t})},function(){var e=u(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}},"values"),i.Arguments=i.Array,a("keys"),a("values"),a("entries")},function(e,t,n){var r=n(23),a=n(14),i=function(e){return function(t,n){var i,o,s=String(a(t)),c=r(n),u=s.length;return c<0||c>=u?e?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(o=s.charCodeAt(c+1))<56320||o>57343?e?s.charAt(c):i:e?s.slice(c,c+2):o-56320+(i-55296<<10)+65536}};e.exports={codeAt:i(!1),charAt:i(!0)}},function(e,t,n){"use strict";var r=n(13),a=n(16),i=n(1),o=n(7),s=n(80),c=o("species"),u=!i(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),l=!i(function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]});e.exports=function(e,t,n,p){var d=o(e),f=!i(function(){var t={};return t[d]=function(){return 7},7!=""[e](t)}),h=f&&!i(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!t});if(!f||!h||"replace"===e&&!u||"split"===e&&!l){var m=/./[d],v=n(d,""[e],function(e,t,n,r,a){return t.exec===s?f&&!a?{done:!0,value:m.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),g=v[0],y=v[1];a(String.prototype,e,g),a(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)}),p&&r(RegExp.prototype[d],"sham",!0)}}},function(e,t,n){"use strict";var r,a,i=n(68),o=RegExp.prototype.exec,s=String.prototype.replace,c=o,u=(r=/a/,a=/b*/g,o.call(r,"a"),o.call(a,"a"),0!==r.lastIndex||0!==a.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(c=function(e){var t,n,r,a,c=this;return l&&(n=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),u&&(t=c.lastIndex),r=o.call(c,e),u&&r&&(c.lastIndex=c.global?r.index+r[0].length:t),l&&r&&r.length>1&&s.call(r[0],n,function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(r[a]=void 0)}),r}),e.exports=c},function(e,t,n){"use strict";var r=n(78).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r=n(24),a=n(80);e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw TypeError("RegExp#exec called on incompatible receiver");return a.call(e,t)}},function(e,t,n){var r=n(33);e.exports=r("navigator","userAgent")||""},function(e,t){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,t){var n=Math.expm1,r=Math.exp;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:r(e)-1}:n},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(59),o=n(16),s=n(45),c=n(63),u=n(38),l=n(3),p=n(1),d=n(75),f=n(26),h=n(111);e.exports=function(e,t,n,m,v){var g=a[e],y=g&&g.prototype,x=g,b=m?"set":"add",w={},_=function(e){var t=y[e];o(y,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!l(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!l(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!l(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this})};if(i(e,"function"!=typeof g||!(v||y.forEach&&!p(function(){(new g).entries().next()}))))x=n.getConstructor(t,e,m,b),s.REQUIRED=!0;else if(i(e,!0)){var k=new x,E=k[b](v?{}:-0,1)!=k,S=p(function(){k.has(1)}),R=d(function(e){new g(e)}),T=!v&&p(function(){for(var e=new g,t=5;t--;)e[b](t,t);return!e.has(-0)});R||((x=t(function(t,n){u(t,x,e);var r=h(new g,t,x);return null!=n&&c(n,r[b],r,m),r})).prototype=y,y.constructor=x),(S||T)&&(_("delete"),_("has"),m&&_("get")),(T||E)&&_(b),v&&y.clear&&delete y.clear}return w[e]=x,r({global:!0,forced:x!=g},w),f(x,e),v||n.setStrong(x,e,m),x}},function(e,t,n){"use strict";var r=n(2),a=n(6),i=n(5).NATIVE_ARRAY_BUFFER,o=n(13),s=n(51),c=n(1),u=n(38),l=n(23),p=n(8),d=n(160),f=n(43).f,h=n(9).f,m=n(102),v=n(26),g=n(19),y=g.get,x=g.set,b=r.ArrayBuffer,w=b,_=r.DataView,k=r.Math,E=r.RangeError,S=k.abs,R=k.pow,T=k.floor,A=k.log,D=k.LN2,O=function(e,t,n){var r,a,i,o=new Array(n),s=8*n-t-1,c=(1<<s)-1,u=c>>1,l=23===t?R(2,-24)-R(2,-77):0,p=e<0||0===e&&1/e<0?1:0,d=0;for((e=S(e))!=e||e===1/0?(a=e!=e?1:0,r=c):(r=T(A(e)/D),e*(i=R(2,-r))<1&&(r--,i*=2),(e+=r+u>=1?l/i:l*R(2,1-u))*i>=2&&(r++,i/=2),r+u>=c?(a=0,r=c):r+u>=1?(a=(e*i-1)*R(2,t),r+=u):(a=e*R(2,u-1)*R(2,t),r=0));t>=8;o[d++]=255&a,a/=256,t-=8);for(r=r<<t|a,s+=t;s>0;o[d++]=255&r,r/=256,s-=8);return o[--d]|=128*p,o},I=function(e,t){var n,r=e.length,a=8*r-t-1,i=(1<<a)-1,o=i>>1,s=a-7,c=r-1,u=e[c--],l=127&u;for(u>>=7;s>0;l=256*l+e[c],c--,s-=8);for(n=l&(1<<-s)-1,l>>=-s,s+=t;s>0;n=256*n+e[c],c--,s-=8);if(0===l)l=1-o;else{if(l===i)return n?NaN:u?-1/0:1/0;n+=R(2,t),l-=o}return(u?-1:1)*n*R(2,l-t)},j=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},C=function(e){return[255&e]},N=function(e){return[255&e,e>>8&255]},L=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},q=function(e){return O(e,23,4)},U=function(e){return O(e,52,8)},P=function(e,t){h(e.prototype,t,{get:function(){return y(this)[t]}})},M=function(e,t,n,r){var a=d(+n),i=y(e);if(a+t>i.byteLength)throw E("Wrong index");var o=y(i.buffer).bytes,s=a+i.byteOffset,c=o.slice(s,s+t);return r?c:c.reverse()},F=function(e,t,n,r,a,i){var o=d(+n),s=y(e);if(o+t>s.byteLength)throw E("Wrong index");for(var c=y(s.buffer).bytes,u=o+s.byteOffset,l=r(+a),p=0;p<t;p++)c[u+p]=l[i?p:t-p-1]};if(i){if(!c(function(){b(1)})||!c(function(){new b(-1)})||c(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var z,B=(w=function(e){return u(this,w),new b(d(e))}).prototype=b.prototype,V=f(b),G=0;V.length>G;)(z=V[G++])in w||o(w,z,b[z]);B.constructor=w}var Y=new _(new w(2)),H=_.prototype.setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||s(_.prototype,{setInt8:function(e,t){H.call(this,e,t<<24>>24)},setUint8:function(e,t){H.call(this,e,t<<24>>24)}},{unsafe:!0})}else w=function(e){u(this,w,"ArrayBuffer");var t=d(e);x(this,{bytes:m.call(new Array(t),0),byteLength:t}),a||(this.byteLength=t)},_=function(e,t,n){u(this,_,"DataView"),u(e,w,"DataView");var r=y(e).byteLength,i=l(t);if(i<0||i>r)throw E("Wrong offset");if(i+(n=void 0===n?r-i:p(n))>r)throw E("Wrong length");x(this,{buffer:e,byteLength:n,byteOffset:i}),a||(this.buffer=e,this.byteLength=n,this.byteOffset=i)},a&&(P(w,"byteLength"),P(_,"buffer"),P(_,"byteLength"),P(_,"byteOffset")),s(_.prototype,{getInt8:function(e){return M(this,1,e)[0]<<24>>24},getUint8:function(e){return M(this,1,e)[0]},getInt16:function(e){var t=M(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=M(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return j(M(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return j(M(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return I(M(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return I(M(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){F(this,1,e,C,t)},setUint8:function(e,t){F(this,1,e,C,t)},setInt16:function(e,t){F(this,2,e,N,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){F(this,2,e,N,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){F(this,4,e,L,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){F(this,4,e,L,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){F(this,4,e,q,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){F(this,8,e,U,t,arguments.length>2?arguments[2]:void 0)}});v(w,"ArrayBuffer"),v(_,"DataView"),t.ArrayBuffer=w,t.DataView=_},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=n(41),i=(r=n(40))&&r.__esModule?r:{default:r};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(e,n,r,i){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(o=c(this,u(t).call(this,e,n,r)))._graph=i&&i._graph?i:new a.Graph(i),o}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,i.default),n=t,(r=[{key:"getGraph",value:function(){return this._graph}},{key:"setGraph",value:function(e){return this._graph=e||new a.Graph,this}},{key:"commit",value:function(){return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify(this._graph.exportRDFJSON())),"commitGraph")}},{key:"getSource",value:function(){return this._graph.exportRDFJSON()}},{key:"_update",value:function(e){this._graph=new a.Graph(e)}}])&&s(n.prototype,r),o&&s(n,o),t}();t.default=p},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=f(n(168)),a=f(n(169)),i=f(n(39)),o=f(n(117)),s=f(n(40)),c=f(n(170)),u=f(n(191)),l=f(n(52)),p=f(n(123)),d=n(91);function f(e){return e&&e.__esModule?e:{default:e}}function h(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=n(465),g=function(){function e(t,n){var i;(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),(0,d.isBrowser)()&&null==t?this._baseURI="".concat(window.location.origin,"/store/"):(this._baseURI=t,"/"!==this._baseURI[this._baseURI.length-1]&&(this._baseURI="".concat(this._baseURI,"/"))),this._cache=new a.default,this._auth=new r.default(this),n)&&(i=this._auth).login.apply(i,h(n));this._contexts={},this._rest=new c.default}var t,f,g;return t=e,g=[{key:"info",value:function(){return{version:n(466).version}}}],(f=[{key:"addAsyncListener",value:function(e){this.asyncListeners?this.asyncListeners.push(e):this.asyncListeners=[e]}},{key:"removeAsyncListener",value:function(e){this.asyncListeners&&this.asyncListeners.splice(this.asyncListeners.indexOf(e),1)}},{key:"handleAsync",value:function(e,t){if(this.asyncListeners)for(var n=0;n<this.asyncListeners.length;n++)this.asyncListeners[n](e,t);return e}},{key:"getAuth",value:function(){return this._auth}},{key:"getUserInfo",value:function(){return this._auth.getUserInfo()}},{key:"getUserEntry",value:function(){return this._auth.getUserEntry()}},{key:"auth",value:function(e){return null==e?this._auth.logout():this._auth.login(e.user,e.password,e.maxAge)}},{key:"logout",value:function(){return this._auth.logout()}},{key:"getEntry",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!!t&&!0===t.forceLoad,r=this._cache.get(e),a="getEntry";if(null!=t&&(t.asyncContext&&(a=t.asyncContext),!0===t.direct))return r;var o=function(e){return null!=t&&t.loadResource&&null==e.getResource()?e.getResource().then(function(){return e}):e};if(r&&!n){if((r.isList()||r.isGroup())&&null!=t){var s=r.getResource(!0);s.setLimit(t.limit),s.setSort(t.sort)}return this.handleAsync(r.refresh().then(o),a)}var c=this,u=i.default.getEntryLoadURI(e,t);return this.handleAsync(this._rest.get(u).then(function(t){var n=i.default.updateOrCreate(e,t,c);return o(n)},function(e){throw new Error("Failed fetching entry. ".concat(e))}),a)}},{key:"getListEntries",value:function(e,t,n,r){var a=this;return new Promise(function(o,s){var c={};null!=t&&(c.sort=t),n%1==0&&(c.limit=n),r%1==0&&(c.offset=n%1==0?n*r:i.default.getDefaultLimit()*r),a.getEntryStore().getEntry(e,c).then(function(e){e.getResource(!0).getEntries(r).then(o,s)},s)})}},{key:"getContextById",value:function(e){return i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/").concat(e))}},{key:"getContext",value:function(e){return i.default.getContext(this,e)}},{key:"getContextList",value:function(){return this.newSolrQuery().graphType(l.default.GT_CONTEXT).list()}},{key:"getPrincipalList",value:function(){return this.newSolrQuery().graphType([l.default.GT_USER,l.default.GT_GROUP]).list()}},{key:"createEntry",value:function(e){var t=this,n=i.default.getEntryCreateURI(e,e.getParentList()),r=i.default.getEntryCreatePostData(e);return this.handleAsync(this._rest.create(n,r).then(function(n){var r=e.getParentList();if(null!=r){var a=r.getResource(!0);null!=a&&a.needRefresh&&r.getResource(!0).needRefresh()}return t.getEntry(n)}),"createEntry")}},{key:"newContext",value:function(e,t){var n=i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/_contexts")),r=new o.default(n,t).setGraphType(l.default.GT_CONTEXT);if(null!=e){var a=r.getEntryInfo(),c=new s.default(a.getEntryURI(),a.getResourceURI(),this);c._update({name:e}),r._resource=c}return r}},{key:"createGroupAndContext",value:function(e){var t=this,n="".concat(this._baseURI,"_principals/groups");return null!=e&&(n+="?name=".concat(encodeURIComponent(e))),this.handleAsync(this._rest.create(n).then(function(e){return t.getEntry(e)}),"createGroupAndContext")}},{key:"newUser",value:function(e,t,n,r){var a=i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/_principals")),s=new o.default(a,r).setGraphType(l.default.GT_USER),c=s.getEntryInfo(),u={};return null!=e&&(u.name=e),null!=t&&(u.password=t),null!=n&&(u.homecontext=n),s._resource=new p.default(c.getEntryURI(),c.getResourceURI(),this,u),s}},{key:"newGroup",value:function(e,t){var n=i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/_principals")),r=new o.default(n,t).setGraphType(l.default.GT_GROUP);if(null!=e){var a=r.getEntryInfo(),c=new s.default(a.getEntryURI(),a.getResourceURI(),this);c._update({name:e}),r._resource=c}return r}},{key:"moveEntry",value:function(e,t,n){var r=i.default.getMoveURI(e,t,n,this._baseURI);return this.handleAsync(this.getREST().post(r,""),"moveEntry")}},{key:"loadViaProxy",value:function(e,t){var n=i.default.getProxyURI(this._baseURI,e);return this.handleAsync(this.getREST().get(n,t,!0),"loadViaProxy")}},{key:"echoFile",value:function(e){if(!(e instanceof Node))throw new Error("Argument needs to be an input element.");if(null==e.name||""===e.name)throw new Error("Failure, cannot upload resource from input element unless a name attribute is provided.");return this.handleAsync(this.getREST().putFile("".concat(this.getBaseURI(),"echo"),e,"text").then(function(e){var t=e.text;if(t){var n=t.indexOf("\n"),r=parseInt(t.substr(0,n).split(":")[1],10);if(200!==r){var a=new Error("HTTP status code: ".concat(r));throw a.status=r,a}var i=t.substr(n+1).replace("</textarea>","");return v.decode(i)}return t}),"echoFile")}},{key:"newSolrQuery",value:function(){return new u.default(this)}},{key:"createSearchList",value:function(e){return i.default.createSearchList(this,e)}},{key:"getMetadataURI",value:function(e,t){return i.default.getMetadataURI(this,e,t)}},{key:"getEntryURI",value:function(e,t){return i.default.getEntryURI(this,e,t)}},{key:"getEntryURIFromURI",value:function(e){return i.default.getEntryURIFromURI(this,e)}},{key:"getResourceURI",value:function(e,t){return i.default.getResourceURI(this,e,t)}},{key:"getBaseURI",value:function(){return this._baseURI}},{key:"getEntryId",value:function(e){return i.default.getEntryId(e,this.getBaseURI())}},{key:"getContextId",value:function(e){return i.default.getContextId(e,this.getBaseURI())}},{key:"getStatus",value:function(){var e="".concat(this._baseURI,"management/status?extended");return this.handleAsync(this.getREST().get(e))}},{key:"getCache",value:function(){return this._cache}},{key:"getREST",value:function(){return this._rest}},{key:"getCachedContextsIdx",value:function(){return this._contexts}}])&&m(t.prototype,f),g&&m(t,g),e}();t.default=g},function(e,t){e.exports=require("path")},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isIE=t.isNode=t.isBrowser=t.utils=void 0;var r={};t.utils=r,r.getRelatedToEntryURIs=function(e){var t=e.getEntryStore(),n=e.getEntryStore().getBaseURI(),r=[];return e.getMetadata().find().forEach(function(e){if("uri"===e.getType()){var a=e.getValue();if(0===a.indexOf(n)){var i=t.getEntryURI(t.getContextId(a),t.getEntryId(a));r.push(i)}}}),r},r.getRelatedToEntries=function(e){var t=e.getEntryStore();return Promise.all(r.getRelatedToEntryURIs(e).map(function(e){return t.getEntry(e)}))},r.remove=function(e){var t=e.getEntryStore(),n=t.getCache(),a=e.getReferrersGraph().find(),i=a.map(function(e){var n=e.getSubject(),r=t.getEntryURI(t.getContextId(n),t.getEntryId(n));return t.getEntry(r)});return e.del().then(function(){return Promise.all(i).then(function(t){var i=a.map(function(e,n){return t[n].getMetadata().remove(e),t[n].commitMetadata()});return r.getRelatedToEntryURIs(e).forEach(function(e){var t=n.get(e);null!=t&&(t.setRefreshNeeded(),i.push(t.refresh()))}),Promise.all(i)})})},r.addRelation=function(e,t,n){return e.getMetadata().add(e.getResourceURI(),t,n.getResourceURI()),e.commitMetadata().then(function(){return n.setRefreshNeeded(),n.refresh()})},r.removeRelation=function(e,t,n){return e.getMetadata().remove(e.getResourceURI(),t,{type:"uri",value:n.getResourceURI()}),e.commitMetadata().then(function(){return n.setRefreshNeeded(),n.refresh()})};var a=function(){return"undefined"!=typeof window&&void 0!==window.document};t.isBrowser=a,r.isBrowser=a;var i=function(){return void 0!==e.exports};t.isNode=i,r.isNode=i;var o=function(){return window&&null!==window.navigator.userAgent.match(/MSIE/)};t.isIE=o,r.isIE=o;var s=r;t.default=s},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(40)),a=i(n(39));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function c(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){s(i,r,a,o,c,"next",e)}function c(e){s(i,r,a,o,c,"throw",e)}o(void 0)})}}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(e,n,r){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=l(this,p(t).call(this,e,n,r)))._cache=r.getCache(),a._sortedChildren=[],a}var n,i,o,s,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,r.default),n=t,(i=[{key:"setLimit",value:function(e){return this._limit=e,this}},{key:"getLimit",value:function(){return this._limit||a.default.getDefaultLimit()}},{key:"setSort",value:function(e){return this._clearSortedEntries(),this._sortParams=e,this}},{key:"getEntries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=this._getEntries(e);return null!=t?Promise.resolve(t):this._forceLoadEntries(e)}},{key:"forEach",value:function(e){var t,n,r=0,a=0,i=this.getLimit(),o=this;return this.getEntries(0).then(function s(c){var u=c.length;return t=function(e){return!1===e?Promise.resolve(!1):n()},(n=function(){if(0===c.length)return Promise.resolve(!0);var n=e(c.pop(),a);return a+=1,void 0!==n&&"function"==typeof n.then?n.then(t):t(n)})().then(function(e){return!1!==e&&u===i?(r+=1,o.getEntries(r).then(s)):Promise.resolve(a)})})}},{key:"addEntry",value:(f=c(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllEntryIds();case 2:return(n=e.sent).push(t.getId()),e.next=6,this.setAllEntryIds(n,"addToList");case 6:return t.setRefreshNeeded(),e.abrupt("return",this.getEntry());case 8:case"end":return e.stop()}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"removeEntry",value:(s=c(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllEntryIds();case 2:return(n=e.sent).splice(n.indexOf(t.getId()),1),e.next=6,this.setAllEntryIds(n,"removeFromList");case 6:t.setRefreshNeeded();case 7:case"end":return e.stop()}},e,this)})),function(e){return s.apply(this,arguments)})},{key:"needRefresh",value:function(){delete this._unsortedChildren,this._sortedChildren=[],delete this._size}},{key:"getAllEntryIds",value:function(){var e=this;return null!=this._unsortedChildren?Promise.resolve(this._unsortedChildren):this.getEntries().then(function(){return e._unsortedChildren})}},{key:"setAllEntryIds",value:function(e,t){var n=this;return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify(e)).then(function(){return n.needRefresh(),n._entryStore.getEntry(n.getEntryURI()).then(function(e){return e.setRefreshNeeded(),e})}),t||"setList")}},{key:"getSize",value:function(){return"number"==typeof this._size?this._size:-1}},{key:"_clearSortedEntries",value:function(){this._sortedChildren=[]}},{key:"_getEntries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(null==this._size)return null;for(var n,r=this.getLimit(),a=e*r,i=!1,o=[],s=a;s<a+r&&s<this._size;s++){if(!(n=this._sortedChildren[s])){i=!0;break}var c=this._entryStore.getCache().get(n);if(!1!==t&&(null==c||c.needRefresh())){i=!0;break}o.push(c)}return i?null:o}},{key:"_forceLoadEntries",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=this.getLimit(),r=t*n;return this._entryStore.getEntry(this._entryURI,{forceLoad:!0,offset:r,limit:n,sort:this._sort,asyncContext:"loadListEntries"}).then(function(){return e._getEntries(t,!1)})}},{key:"_update",value:function(e,t){for(var n=e.offset||0,r=0;r<t.length;r++)this._sortedChildren[n+r]=t[r].getURI();this._size=e.size||t.length,this._unsortedChildren=e.allUnsorted||t.map(function(e){return e.getId()})}}])&&u(n.prototype,i),o&&u(n,o),t}();t.default=f},function(e,t,n){function r(e){this.options=e||{locator:{}}}function a(){this.cdata=!1}function i(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function o(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function s(e,t,n){return"string"==typeof e?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}function c(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}r.prototype.parseFromString=function(e,t){var n=this.options,r=new u,i=n.domBuilder||new a,s=n.errorHandler,c=n.locator,l=n.xmlns||{},p={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return c&&i.setDocumentLocator(c),r.errorHandler=function(e,t,n){if(!e){if(t instanceof a)return t;e=t}var r={},i=e instanceof Function;function s(t){var a=e[t];!a&&i&&(a=2==e.length?function(n){e(t,n)}:e),r[t]=a&&function(e){a("[xmldom "+t+"]\t"+e+o(n))}||function(){}}return n=n||{},s("warning"),s("error"),s("fatalError"),r}(s,i,c),r.domBuilder=n.domBuilder||i,/\/x?html?$/.test(t)&&(p.nbsp=" ",p.copy="©",l[""]="http://www.w3.org/1999/xhtml"),l.xml=l.xml||"http://www.w3.org/XML/1998/namespace",e?r.parse(e,l,p):r.errorHandler.error("invalid doc source"),i.doc},a.prototype={startDocument:function(){this.doc=(new l).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var a=this.doc,o=a.createElementNS(e,n||t),s=r.length;c(this,o),this.currentElement=o,this.locator&&i(this.locator,o);for(var u=0;u<s;u++){e=r.getURI(u);var l=r.getValue(u),p=(n=r.getQName(u),a.createAttributeNS(e,n));this.locator&&i(r.getLocator(u),p),p.value=p.nodeValue=l,o.setAttributeNode(p)}},endElement:function(e,t,n){var r=this.currentElement;r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&i(this.locator,n),c(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=s.apply(this,arguments)){if(this.cdata)var r=this.doc.createCDATASection(e);else r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&i(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=s.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&i(this.locator,r),c(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var a=r.createDocumentType(e,t,n);this.locator&&i(this.locator,a),c(this,a)}},warning:function(e){console.warn("[xmldom warning]\t"+e,o(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,o(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,o(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(e){a.prototype[e]=function(){return null}});var u=n(416).XMLReader,l=t.DOMImplementation=n(166).DOMImplementation;t.XMLSerializer=n(166).XMLSerializer,t.DOMParser=r},function(e,t,n){var r=n(2),a=n(3),i=r.document,o=a(i)&&a(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t,n){var r=n(2),a=n(13);e.exports=function(e,t){try{a(r,e,t)}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(33),a=n(43),i=n(98),o=n(4);e.exports=r("Reflect","ownKeys")||function(e){var t=a.f(o(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(6),a=n(9),i=n(4),o=n(60);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=o(t),s=r.length,c=0;s>c;)a.f(e,n=r[c++],t[n]);return e}},function(e,t,n){var r=n(7),a=n(64),i=r("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||o[i]===e)}},function(e,t,n){var r=n(1);e.exports=!r(function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})},function(e,t,n){"use strict";var r=n(10),a=n(34),i=n(8);e.exports=function(e){for(var t=r(this),n=i(t.length),o=arguments.length,s=a(o>1?arguments[1]:void 0,n),c=o>2?arguments[2]:void 0,u=void 0===c?n:a(c,n);u>s;)t[s++]=e;return t}},function(e,t,n){"use strict";var r=n(0),a=n(104),i=n(27),o=n(48),s=n(26),c=n(13),u=n(16),l=n(7),p=n(32),d=n(64),f=n(147),h=f.IteratorPrototype,m=f.BUGGY_SAFARI_ITERATORS,v=l("iterator"),g=function(){return this};e.exports=function(e,t,n,l,f,y,x){a(n,t,l);var b,w,_,k=function(e){if(e===f&&A)return A;if(!m&&e in R)return R[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},E=t+" Iterator",S=!1,R=e.prototype,T=R[v]||R["@@iterator"]||f&&R[f],A=!m&&T||k(f),D="Array"==t&&R.entries||T;if(D&&(b=i(D.call(new e)),h!==Object.prototype&&b.next&&(p||i(b)===h||(o?o(b,h):"function"!=typeof b[v]&&c(b,v,g)),s(b,E,!0,!0),p&&(d[E]=g))),"values"==f&&T&&"values"!==T.name&&(S=!0,A=function(){return T.call(this)}),p&&!x||R[v]===A||c(R,v,A),d[t]=A,f)if(w={values:k("values"),keys:y?A:k("keys"),entries:k("entries")},x)for(_ in w)!m&&!S&&_ in R||u(R,_,w[_]);else r({target:t,proto:!0,forced:m||S},w);return w}},function(e,t,n){"use strict";var r=n(147).IteratorPrototype,a=n(35),i=n(42),o=n(26),s=n(64),c=function(){return this};e.exports=function(e,t,n){var u=t+" Iterator";return e.prototype=a(r,{next:i(1,n)}),o(e,u,!1,!0),s[u]=c,e}},function(e,t,n){var r=n(106);e.exports=function(e){if(r(e))throw TypeError("The method doesn't accept regular expressions");return e}},function(e,t,n){var r=n(3),a=n(24),i=n(7)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==a(e))}},function(e,t,n){var r=n(7)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,"/./"[e](t)}catch(e){}}return!1}},function(e,t,n){var r=n(8),a=n(109),i=n(14),o=Math.ceil,s=function(e){return function(t,n,s){var c,u,l=String(i(t)),p=l.length,d=void 0===s?" ":String(s),f=r(n);return f<=p||""==d?l:(c=f-p,(u=a.call(d,o(c/d.length))).length>c&&(u=u.slice(0,c)),e?l+u:u+l)}};e.exports={start:s(!1),end:s(!0)}},function(e,t,n){"use strict";var r=n(23),a=n(14);e.exports="".repeat||function(e){var t=String(a(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Wrong number of repetitions");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t,n){var r=n(1),a=n(84);e.exports=function(e){return r(function(){return!!a[e]()||"​᠎"!="​᠎"[e]()||a[e].name!==e})}},function(e,t,n){var r=n(3),a=n(48);e.exports=function(e,t,n){var i,o;return a&&"function"==typeof(i=t.constructor)&&i!==n&&r(o=i.prototype)&&o!==n.prototype&&a(e,o),e}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t,n){var r,a,i,o=n(2),s=n(1),c=n(24),u=n(36),l=n(133),p=n(94),d=o.location,f=o.setImmediate,h=o.clearImmediate,m=o.process,v=o.MessageChannel,g=o.Dispatch,y=0,x={},b=function(e){if(x.hasOwnProperty(e)){var t=x[e];delete x[e],t()}},w=function(e){return function(){b(e)}},_=function(e){b(e.data)},k=function(e){o.postMessage(e+"",d.protocol+"//"+d.host)};f&&h||(f=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return x[++y]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},r(y),y},h=function(e){delete x[e]},"process"==c(m)?r=function(e){m.nextTick(w(e))}:g&&g.now?r=function(e){g.now(w(e))}:v?(i=(a=new v).port2,a.port1.onmessage=_,r=u(i.postMessage,i,1)):!o.addEventListener||"function"!=typeof postMessage||o.importScripts||s(k)?r="onreadystatechange"in p("script")?function(e){l.appendChild(p("script")).onreadystatechange=function(){l.removeChild(this),b(e)}}:function(e){setTimeout(w(e),0)}:(r=k,o.addEventListener("message",_,!1))),e.exports={set:f,clear:h}},function(e,t,n){var r=n(2),a=n(1),i=n(75),o=n(5).NATIVE_ARRAY_BUFFER_VIEWS,s=r.ArrayBuffer,c=r.Int8Array;e.exports=!o||!a(function(){c(1)})||!a(function(){new c(-1)})||!i(function(e){new c,new c(null),new c(1.5),new c(e)},!0)||a(function(){return 1!==new c(new s(2),1,void 0).length})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(88)),a=u(n(116)),i=u(n(117)),o=u(n(40)),s=u(n(125)),c=u(n(52));function u(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),f(this,h(t).apply(this,arguments))}var n,u,l,v,g;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,o.default),n=t,(u=[{key:"listEntries",value:function(e,t,n){return this.getEntryStore().getListEntries("".concat(this._resourceURI,"/entry/_all"),e,t,n)}},{key:"getEntryById",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.getEntryStore().getEntry(this.getEntryURIbyId(e),t)}},{key:"getEntryURIbyId",value:function(e){return this.getEntryStore().getEntryURI(this.getId(),e)}},{key:"newEntry",value:function(e){return new i.default(this,e)}},{key:"newNamedEntry",value:function(e){return new i.default(this,e).setResourceType(c.default.RT_NAMEDRESOURCE)}},{key:"newLink",value:function(e,t){return new i.default(this,t).setResourceURI(e).setEntryType(c.default.ET_LINK)}},{key:"newLinkRef",value:function(e,t,n){return new i.default(this,n).setResourceURI(e).setExternalMetadataURI(t).setEntryType(c.default.ET_LINKREF)}},{key:"newRef",value:function(e,t,n){return new i.default(this,n).setResourceURI(e).setExternalMetadataURI(t).setEntryType(c.default.ET_REF)}},{key:"newList",value:function(e){return new i.default(this,e).setGraphType(c.default.GT_LIST)}},{key:"newGraph",value:function(e,t){var n=new i.default(this,t).setGraphType(c.default.GT_GRAPH),a=n.getEntryInfo();return n._resource=new r.default(a.getEntryURI(),a.getResourceURI(),this.getEntryStore(),e||{}),n}},{key:"newString",value:function(e,t){var n=new i.default(this,t).setGraphType(c.default.GT_STRING),r=n.getEntryInfo();return n._resource=new s.default(r.getEntryURI(),r.getResourceURI(),this.getEntryStore(),e),n}},{key:"newPipeline",value:function(e){var t=new i.default(this,e).setGraphType(c.default.GT_PIPELINE),n=t.getEntryInfo();return t._resource=new a.default(n.getEntryURI(),n.getResourceURI(),this.getEntryStore(),{}),t}},{key:"getName",value:function(){return this._name}},{key:"setName",value:function(e){var t=this,n=this._name;return this._name=e,this.getEntryStore().handleAsync(this.getEntryStore().getREST().put("".concat(this.getEntryURI(),"/name"),JSON.stringify({name:e})).then(function(e){var n=t.getEntry(!0);return n&&(n.getEntryInfo()._name=e),e},function(e){throw t._name=n,e}),"setContextName")}},{key:"getHomeContextOf",value:(v=regeneratorRuntime.mark(function e(){var t,n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getEntry();case 2:if(t=e.sent,n=t.getEntryStore(),!((r=t.getReferrers("store:homeContext")).length>0)){e.next=7;break}return e.abrupt("return",n.getEntry(n.getEntryURIFromURI(r[0])));case 7:throw new Error("No user or group that has this context as home context");case 8:case"end":return e.stop()}},e,this)}),g=function(){var e=this,t=arguments;return new Promise(function(n,r){var a=v.apply(e,t);function i(e){p(a,n,r,i,o,"next",e)}function o(e){p(a,n,r,i,o,"throw",e)}i(void 0)})},function(){return g.apply(this,arguments)})},{key:"_update",value:function(e){this._name=e.alias||e.name}}])&&d(n.prototype,u),l&&d(n,l),t}();t.default=v},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(88)),a=i(n(69));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,u(t).apply(this,arguments))}var n,i,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,r.default),n=t,(i=[{key:"getDestination",value:function(){return this._graph.findFirstValue(null,a.default.pipeline.transformDestination)}},{key:"setDestination",value:function(e){this._graph.findAndRemove(null,a.default.pipeline.transformDestination);var t="object"===o(e)&&e.getURI?e.getURI():e;this._graph.add(this._resourceURI,a.default.pipeline.transformDestination,t)}},{key:"getDetectDestination",value:function(){var e=this._graph.findFirstValue(null,a.default.pipeline.transformDetectDestination);return void 0!==e&&0===e.toLowerCase().indexOf("true")}},{key:"setDetectDestination",value:function(e){this._graph.findAndRemove(null,a.default.pipeline.transformDetectDestination),!0===e&&this._graph.add(this._resourceURI,a.default.pipeline.transformDetectDestination,{type:"literal",value:"true",datatype:a.default.xsd.boolean})}},{key:"getTransforms",value:function(){var e=this._graph.find(null,a.default.pipeline.transform).map(function(e){return e.getValue()}),t=this;return e.sort(function(e,n){return t.getPriority(e)-t.getPriority(n)}),e}},{key:"getTransformForType",value:function(e){var t,n=this;return this.getTransforms().forEach(function(r){n.getTransformType(r)===e&&(t=r)},this),t}},{key:"addTransform",value:function(e,t){var n=this.getTransforms(),r=n.length>0?this.getPriority(n[n.length-1]):0,i=this._graph.add(this._resourceURI,a.default.pipeline.transform).getValue();return this.setTransformType(i,e),this.setPriority(i,r+1),this.setTransformArguments(i,t),i}},{key:"removeTransform",value:function(e){this.setTransformArguments(e,{}),this._graph.findAndRemove(e),this._graph.findAndRemove(null,null,{type:"bnode",value:e})}},{key:"setOrderOfTransforms",value:function(e){for(var t=0;t<e.length;t++)this._graph.findAndRemove(e[t],a.default.pipeline.transformPriority),this._graph.add(e[t],a.default.pipeline.transformPriority,{type:"literal",value:"".concat(t),datatype:a.default.xsd.integer})}},{key:"getPriority",value:function(e){var t=this._graph.findFirstValue(e,a.default.pipeline.transformPriority);return"string"!=typeof t||(t=parseFloat(t),isNaN(t))?0:t}},{key:"setPriority",value:function(e,t){this._graph.findAndRemove(e,a.default.pipeline.transformPriority),this._graph.add(e,a.default.pipeline.transformPriority,{type:"literal",value:"".concat(t),datatype:a.default.xsd.integer})}},{key:"getTransformType",value:function(e){return this._graph.findFirstValue(e,a.default.pipeline.transformType)}},{key:"setTransformType",value:function(e,t){this._graph.findAndRemove(e,a.default.pipeline.transformType),this._graph.addL(e,a.default.pipeline.transformType,t)}},{key:"getTransformArguments",value:function(e){var t,n=this;return this._graph.find(e,a.default.pipeline.transformArgument).forEach(function(e){var r=n._graph.findFirstValue(e.getValue(),a.default.pipeline.transformArgumentKey),i=n._graph.findFirstValue(e.getValue(),a.default.pipeline.transformArgumentValue);(t=t||{})[r]=i},this),t}},{key:"getTransformArgumentsKeys",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=[];if(t){var r=this._graph.find(t,a.default.pipeline.transformArgument);r.forEach(function(t){var r=e._graph.find(t.getValue(),a.default.pipeline.transformArgumentKey);n.push(r.map(function(e){return e.getValue()}))},this)}return n}},{key:"setTransformArguments",value:function(e,t){var n=this;this._graph.find(e,a.default.pipeline.transformArgument).forEach(function(e){n._graph.findAndRemove(e.getValue(),a.default.pipeline.transformArgumentKey),n._graph.findAndRemove(e.getValue(),a.default.pipeline.transformArgumentValue),n._graph.remove(e)},this),Object.keys(t).forEach(function(r){var i=n._graph.add(e,a.default.pipeline.transformArgument);n._graph.addL(i.getValue(),a.default.pipeline.transformArgumentKey,r),n._graph.addL(i.getValue(),a.default.pipeline.transformArgumentValue,t[r])})}},{key:"getTransformProperty",value:function(e,t){var n=this.getTransformForType(e);if(n){var r=this.getTransformArguments(n);if(r&&t in r)return r[t]}}},{key:"setTransformProperty",value:function(e,t,n){var r=this.getTransformArguments(e);if(null!=r)r[t]=n,this.setTransformArguments(e,r);else{var a=this.getTransformForType(e);null!=(r=this.getTransformArguments(a))&&(r[t]=n,this.setTransformArguments(a,r))}}},{key:"execute",value:function(e,t){var n,r=this.getEntryStore(),a=t||{};return a.pipeline=this.getEntryURI(),null==e?n="".concat(r.getBaseURI()+r.getContextId(this.getEntryURI()),"/execute"):(a.source=e.getURI(),n="".concat(e.getContext().getResourceURI(),"/execute")),r.handleAsync(r.getREST().post(n,JSON.stringify(a)),"execute").then(function(e){return e.body.result},function(e){throw e})}}])&&s(n.prototype,i),p&&s(n,p),t}();t.default=p,p.prototype.transformTypes={TABULAR:"tabular",ROWSTORE:"rowstore",EMPTY:"empty",FETCH:"fetch",VALIDATE:"validate",MERGE:"merge"}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(118)),a=o(n(124)),i=o(n(69));function o(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e,n){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=n||"_newId",o=e.getResourceURI(),s=new a.default("".concat(o,"/entry/").concat(i),null,e.getEntryStore());"_contexts"===e.getId()?s._resourceURI=e.getEntryStore().getBaseURI()+i:s._resourceURI="".concat(o,"/resource/").concat(i);var c=s.setResourceURI;return s.setResourceURI=function(e){this._resourceURI=e,c.call(this,e)},s.getResourceURI=function(){return this._resourceURI},r=u(this,l(t).call(this,e,s)),null!=n&&(r.specificId=i),r}var n,o,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,r.default),n=t,(o=[{key:"getResource",value:function(){return this._resource}},{key:"setACL",value:function(){return a.default.prototype.setACL.apply(this._entryInfo,arguments),this}},{key:"setResourceURI",value:function(){var e;return(e=this._entryInfo).setResourceURI.apply(e,arguments),this}},{key:"setExternalMetadataURI",value:function(){return a.default.prototype.setExternalMetadataURI.apply(this._entryInfo,arguments),this}},{key:"setEntryType",value:function(e){var t=i.default.invEntryType[e];return t&&this._entryInfo.getGraph().create(this._entryInfo.getEntryURI(),i.default.rdf.type,{type:"uri",value:t}),this}},{key:"setGraphType",value:function(e){this._gt=e;var t=i.default.invGraphType[e];return t&&this._entryInfo.getGraph().create(this._entryInfo.getResourceURI(),i.default.rdf.type,{type:"uri",value:t}),this}},{key:"setResourceType",value:function(e){var t=i.default.invResourceType[e];return t&&this._entryInfo.getGraph().create(this._entryInfo.getResourceURI(),i.default.rdf.type,{type:"uri",value:t}),this}},{key:"setParentList",value:function(e){return this.parentListEntry=e,this}},{key:"getParentList",value:function(){return this.parentListEntry}},{key:"getSpecificId",value:function(){return this.specificId}},{key:"commitMetadata",value:function(){if(!this.specificId)throw new Error("The entryId must have been specified for allowing metadata to be saved.");var e=this.getEntryStore();return e.handleAsync(e.getREST().put(this.getEntryInfo().getMetadataURI(),JSON.stringify(this.getMetadata().exportRDFJSON())),"commitMetadata")}},{key:"commitCachedExternalMetadata",value:function(){if(!this.specificId)throw new Error("The entryId must have been specified for allowing cached external metadata to be saved.");var e=this.getEntryStore();return e.handleAsync(e.getREST().put(this.getEntryInfo().getCachedExternalMetadataURI(),JSON.stringify(this._cachedExternalMetadata.exportRDFJSON())),"commitCachedExternalMetadata")}},{key:"create",value:function(){return this._context.getEntryStore().createEntry(this)}},{key:"commit",value:function(){return this._context.getEntryStore().createEntry(this)}}])&&c(n.prototype,o),s&&c(n,s),t}();t.default=d},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(41),a=o(n(52)),i=(o(n(89)),o(n(39)));function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._context=t,this._entryInfo=n,this._entryInfo._entry=this}var t,n,o;return t=e,(n=[{key:"getEntryStore",value:function(){return this._context.getEntryStore()}},{key:"getEntryInfo",value:function(){return this._entryInfo}},{key:"getURI",value:function(){return this._entryInfo.getEntryURI()}},{key:"getId",value:function(){return this._entryInfo.getId()}},{key:"getResourceURI",value:function(){return this._entryInfo.getResourceURI()}},{key:"getContext",value:function(){return this._context}},{key:"getMetadata",value:function(){return null==this._metadata&&(this._metadata=new r.Graph),this._metadata}},{key:"setMetadata",value:function(e){return this._metadata=e,this}},{key:"commitMetadata",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=this.getEntryStore();if(this.isReference())e=Promise.reject('Entry "'.concat(this.getURI(),'" is a reference and have no local metadata that can be saved.'));else if(this.canWriteMetadata())if(this.needRefresh())e=Promise.reject('The entry "'.concat(this.getURI(),'" need to be refreshed before its local metadata can be saved.\n')+"This message indicates that the client is written poorly, this case should have been taken into account.");else if(null==this._metadata)e=Promise.reject('The entry "'.concat(this.getURI(),'" should allow local metadata to be saved, but there is no local metadata.\nThis message is a bug in the storejs API.'));else if(n)e=r.getREST().put(this.getEntryInfo().getMetadataURI(),JSON.stringify(this._metadata.exportRDFJSON())).then(function(){return t});else{var a=this.getEntryInfo().getModificationDate();e=r.getREST().put(this.getEntryInfo().getMetadataURI(),JSON.stringify(this._metadata.exportRDFJSON()),a).then(function(){return t.setRefreshNeeded(!0),t.refresh().then(function(){return t},function(){return t.getEntryStore().getCache().message("refreshed",t),t})})}else e=Promise.reject('You do not have sufficient access rights to save metadata on entry "'.concat(this.getURI(),'".'));return r.handleAsync(e,"commitMetadata")}},{key:"add",value:function(e,t){return this.getMetadata().add(this.getResourceURI(),e,t),this}},{key:"addL",value:function(e,t,n){return this.getMetadata().addL(this.getResourceURI(),e,t,n),this}},{key:"addD",value:function(e,t,n){return this.getMetadata().addD(this.getResourceURI(),e,t,n),this}},{key:"getCachedExternalMetadata",value:function(){return null==this._cachedExternalMetadata&&(this._cachedExternalMetadata=new r.Graph),this._cachedExternalMetadata}},{key:"getInferredMetadata",value:function(){return this._inferredMetadata}},{key:"setCachedExternalMetadata",value:function(e){return e&&(this._cachedExternalMetadata=e),this}},{key:"commitCachedExternalMetadata",value:function(){var e=this,t=this.getEntryStore(),n=this.getEntryInfo().getModificationDate(),r=t.getREST().put(this.getEntryInfo().getCachedExternalMetadataURI(),JSON.stringify(this._cachedExternalMetadata.exportRDFJSON()),n).then(function(){return e.setRefreshNeeded(!0),e.refresh().then(function(){return e},function(){return e.getEntryStore().getCache().message("refreshed",e),e})});return t.handleAsync(r,"commitCachedExternalMetadata")}},{key:"getExtractedMetadata",value:function(){return null==this._extractedMetadata&&(this._extractedMetadata=new r.Graph),this._extractedMetadata}},{key:"getResource",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(t)return this._resource;var n,r=this.getEntryStore();if(this._resource)n=Promise.resolve(this._resource);else{var a=this.isString()?"text":null;n=r.getREST().get(this.getResourceURI(),a).then(function(t){return i.default.updateOrCreateResource(e,{resource:t},!0),e._resource})}return r.handleAsync(n,"getResource")}},{key:"getReferrersGraph",value:function(){return this._relation}},{key:"getReferrers",value:function(e){return this._relation.find(null,e,null).map(function(e){return e.getSubject()})}},{key:"getParentLists",value:function(){var e=this;return this.getReferrers("http://entrystore.org/terms/hasListMember").map(function(t){return i.default.getEntryURIFromURI(e.getEntryStore(),t)},this)}},{key:"getParentGroups",value:function(){var e=this;return this.getReferrers("http://entrystore.org/terms/hasGroupMember").map(function(t){return i.default.getEntryURIFromURI(e.getEntryStore(),t)},this)}},{key:"getComments",value:function(){return this.getReferrers("http://ontologi.es/like#regarding")}},{key:"isList",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_LIST}},{key:"isResultList",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_RESULTLIST}},{key:"isContext",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_CONTEXT}},{key:"isSystemContext",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_SYSTEMCONTEXT}},{key:"isUser",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_USER}},{key:"isGroup",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_GROUP}},{key:"isGraph",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_GRAPH}},{key:"isPipeline",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_PIPELINE}},{key:"isPipelineResult",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_PIPELINERESULT}},{key:"isString",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_STRING}},{key:"isNone",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_NONE}},{key:"isLink",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_LINK}},{key:"isReference",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_REF}},{key:"isLinkReference",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_LINKREF}},{key:"isExternal",value:function(){return this.getEntryInfo().getEntryType()!==a.default.ET_LOCAL}},{key:"isLocal",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_LOCAL}},{key:"isLinkToEntry",value:function(){var e=this.getEntryStore().getBaseURI();return this.isExternal()&&this.getResourceURI().substr(0,e.length)===e}},{key:"getLinkedEntry",value:function(){if(this.isLinkToEntry()){var e=this.getEntryStore(),t=this.getResourceURI(),n=e.getEntryId(t),r=e.getContextId(t),a=e.getEntryURI(r,n);return e.handleAsync(this.getEntryStore().getEntry(a),"getLinkedEntry")}}},{key:"isInformationResource",value:function(){return this.getEntryInfo().getResourceType()===a.default.RT_INFORMATIONRESOURCE}},{key:"isNamedResource",value:function(){return this.getEntryInfo().getResourceType()===a.default.RT_NAMEDRESOURCE}},{key:"canAdministerEntry",value:function(){return this._rights.administer||!1}},{key:"canReadResource",value:function(){return this._rights.administer||this._rights.readresource||this._rights.writeresource||!1}},{key:"canWriteResource",value:function(){return this._rights.administer||this._rights.writeresource||!1}},{key:"canReadMetadata",value:function(){return this._rights.administer||this._rights.readmetadata||this._rights.writemetadata||!1}},{key:"canWriteMetadata",value:function(){return this._rights.administer||this._rights.writemetadata||!1}},{key:"isPublic",value:function(){var e=this.getEntryStore().getResourceURI("_principals","_guest"),t=this.getEntryInfo().getACL();if(t.contextOverride)return["rwrite","rread","mwrite","mread"].some(function(n){return-1!==t[n].indexOf(e)});var n=this.getContext().getEntry(!0);return null!=n?(t=n.getEntryInfo().getACL(),["rwrite","rread"].some(function(n){return-1!==t[n].indexOf(e)})):void 0}},{key:"isPrivateTo",value:function(e){var t=e.getResourceURI(),n=this.getEntryInfo().getACL(),r=this.getContext().getEntry(!0);if(null!=r)return 1===r.getEntryInfo().getACL().admin.length&&n.admin[0]===t&&(!n.contextOverride||1===n.admin.length&&n.admin[0]===t)}},{key:"del",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=this.getEntryStore(),r=function(){return n.getCache().unCache(e)};return!0===t?n.handleAsync(n.getREST().del("".concat(this.getURI(),"?recursive=true")).then(r),"delEntry"):n.handleAsync(n.getREST().del(this.getURI()).then(r),"delEntry")}},{key:"setRefreshNeeded",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.getEntryStore().getCache().setRefreshNeeded(this,e)}},{key:"needRefresh",value:function(){return this.getEntryStore().getCache().needRefresh(this)}},{key:"refresh",value:function(){var e,t=this,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=this.getEntryStore();if(!0===r||a.getCache().needRefresh(this)){var o=this.getURI();e=a.getREST().get(i.default.getEntryLoadURI(o)).then(function(e){return i.default.update(t,e),a.getCache().cache(t,n),t})}else e=Promise.resolve(this);return a.handleAsync(e,"refresh")}}])&&s(t.prototype,n),o&&s(t,o),e}();t.default=c},function(e,t){e.exports=require("events")},function(e,t){e.exports=require("http")},function(e,t){!function(){"use strict";function e(t,n,r,a){return this instanceof e?(this.domain=t||void 0,this.path=n||"/",this.secure=!!r,this.script=!!a,this):new e(t,n,r,a)}function n(e,t,r){return e instanceof n?e:this instanceof n?(this.name=null,this.value=null,this.expiration_date=1/0,this.path=String(r||"/"),this.explicit_path=!1,this.domain=t||null,this.explicit_domain=!1,this.secure=!1,this.noscript=!1,e&&this.parse(e,t,r),this):new n(e,t,r)}e.All=Object.freeze(Object.create(null)),t.CookieAccessInfo=e,t.Cookie=n,n.prototype.toString=function(){var e=[this.name+"="+this.value];return this.expiration_date!==1/0&&e.push("expires="+new Date(this.expiration_date).toGMTString()),this.domain&&e.push("domain="+this.domain),this.path&&e.push("path="+this.path),this.secure&&e.push("secure"),this.noscript&&e.push("httponly"),e.join("; ")},n.prototype.toValueString=function(){return this.name+"="+this.value};var r=/[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;function a(){var e,t;return this instanceof a?(e=Object.create(null),this.setCookie=function(r,a,i){var o,s;if(o=(r=new n(r,a,i)).expiration_date<=Date.now(),void 0!==e[r.name]){for(t=e[r.name],s=0;s<t.length;s+=1)if(t[s].collidesWith(r))return o?(t.splice(s,1),0===t.length&&delete e[r.name],!1):(t[s]=r,r);return!o&&(t.push(r),r)}return!o&&(e[r.name]=[r],e[r.name])},this.getCookie=function(n,r){var a,i;if(t=e[n])for(i=0;i<t.length;i+=1)if((a=t[i]).expiration_date<=Date.now())0===t.length&&delete e[a.name];else if(a.matches(r))return a},this.getCookies=function(t){var n,r,a=[];for(n in e)(r=this.getCookie(n,t))&&a.push(r);return a.toString=function(){return a.join(":")},a.toValueString=function(){return a.map(function(e){return e.toValueString()}).join(";")},a},this):new a}n.prototype.parse=function(e,t,r){if(this instanceof n){var a,i=e.split(";").filter(function(e){return!!e}),o=i[0].match(/([^=]+)=([\s\S]*)/);if(!o)return void console.warn("Invalid cookie header encountered. Header: '"+e+"'");var s=o[1],c=o[2];if("string"!=typeof s||0===s.length||"string"!=typeof c)return void console.warn("Unable to extract values from cookie header. Cookie: '"+e+"'");for(this.name=s,this.value=c,a=1;a<i.length;a+=1)switch(s=(o=i[a].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(),c=o[2],s){case"httponly":this.noscript=!0;break;case"expires":this.expiration_date=c?Number(Date.parse(c)):1/0;break;case"path":this.path=c?c.trim():"",this.explicit_path=!0;break;case"domain":this.domain=c?c.trim():"",this.explicit_domain=!!this.domain;break;case"secure":this.secure=!0}return this.explicit_path||(this.path=r||"/"),this.explicit_domain||(this.domain=t),this}return(new n).parse(e,t,r)},n.prototype.matches=function(t){return t===e.All||!(this.noscript&&t.script||this.secure&&!t.secure||!this.collidesWith(t))},n.prototype.collidesWith=function(e){if(this.path&&!e.path||this.domain&&!e.domain)return!1;if(this.path&&0!==e.path.indexOf(this.path))return!1;if(this.explicit_path&&0!==e.path.indexOf(this.path))return!1;var t=e.domain&&e.domain.replace(/^[\.]/,""),n=this.domain&&this.domain.replace(/^[\.]/,"");if(n===t)return!0;if(n){if(!this.explicit_domain)return!1;var r=t.indexOf(n);return-1!==r&&r===t.length-n.length}return!0},t.CookieJar=a,a.prototype.setCookies=function(e,t,a){var i,o,s=[];for(e=(e=Array.isArray(e)?e:e.split(r)).map(function(e){return new n(e,t,a)}),i=0;i<e.length;i+=1)o=e[i],this.setCookie(o,t,a)&&s.push(o);return s}}()},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;i(n(89));var r=i(n(92)),a=i(n(39));function i(e){return e&&e.__esModule?e:{default:e}}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryStore=t,this._query=n,this._callType=r||"search",this._sortedChildren=[]}var t,n,r;return t=e,(n=[{key:"getQuery",value:function(){return this._query}},{key:"setLimit",value:function(e){this._query.limit(e)}},{key:"getLimit",value:function(){return this._query.getLimit()||a.default.getDefaultLimit()}},{key:"getFacets",value:function(){return this.facets}},{key:"setFacets",value:function(e){if(Array.isArray(e)&&0!==e.length){this.facets=e;var t=this._query.facet2predicate;e.forEach(function(e){t&&t[e.name]&&(e.predicate=t[e.name]),e.name.startsWith("metadata.predicate")?e.type=e.name.split(".")[2]:e.name.startsWith("related.metadata.predicate")&&(e.type=e.name.split(".")[3])})}else this.facets=[]}},{key:"_forceLoadEntries",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=t*this.getLimit();return this._query.offset(n),this._entryStore.handleAsync(this._entryStore.getREST().get(this._query.getQuery(this._entryStore)).then(function(t){return e.setFacets(t.facetFields),a.default.extractSearchResults(t,e,e._entryStore)}),this._callType)}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=s,s.prototype.getEntries=r.default.prototype.getEntries,s.prototype.forEach=r.default.prototype.forEach,s.prototype._getEntries=r.default.prototype._getEntries,s.prototype._update=r.default.prototype._update},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(40))&&r.__esModule?r:{default:r};function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(e,n,r,a){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=s(this,c(t).call(this,e,n,r)))._data=a,i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,a.default),n=t,(r=[{key:"getName",value:function(){return this._data.name}},{key:"setName",value:function(e){var t=this,n=this._data.name;return this._data.name=e,this._entryStore.handleAsync(es.getREST().put(this._resourceURI,JSON.stringify({name:e})).then(function(n){var r=t.getEntry(!0);return r&&(r.getEntryInfo()._name=e),n},function(e){throw t._data.name=n,e}),"setUserName")}},{key:"getLanguage",value:function(){return this._data.language}},{key:"setLanguage",value:function(e){var t=this,n=this._data.language;return this._data.language=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({language:e})).then(function(e){return e},function(e){throw t._data.language=n,e}),"setUserLanguage")}},{key:"setPassword",value:function(e){return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({password:e})),"setUserPassword")}},{key:"isDisabled",value:function(){return!0===this._data.disabled}},{key:"setDisabled",value:function(e){var t=this;if(e===this.isDisabled())return Promise.resolve(!0);var n=!0===this._data.disabled;return this._data.disabled=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({disabled:e})).then(function(n){var r=t.getEntry(!0);return r&&(r.getEntryInfo()._disabled=e),n},function(e){throw t._data.disabled=n,e}),"setUserDisabled")}},{key:"getHomeContext",value:function(){return this._data.homecontext}},{key:"setHomeContext",value:function(e){var t=this,n=this._data.homecontext;return this._data.homecontext=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({homecontext:e})).then(function(e){return e},function(e){throw t._data.homecontext=n,e}),"setUserHomeContext")}},{key:"getCustomProperties",value:function(){return this._data.customProperties||{}}},{key:"setCustomProperties",value:function(e){var t=this,n=this._data.customProperties;return this._data.customProperties=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({customProperties:e})).then(function(e){return e},function(e){throw t._data.customProperties=n,e}),"setUserCustomProperties")}},{key:"getSource",value:function(){return this._data}}])&&o(n.prototype,r),i&&o(n,i),t}();t.default=l},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(467)),a=n(41),i=s(n(39)),o=s(n(69));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryURI=t||n.find(null,o.default.resource)[0].getSubject(),this._graph=n||new a.Graph,this._entryStore=r}var t,n,s,l,p;return t=e,n=[{key:"getEntry",value:function(){return this._entry}},{key:"setGraph",value:function(e){this._graph=e}},{key:"getGraph",value:function(){return this._graph}},{key:"commit",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=this._entry.getEntryStore();!0===n&&(e=this.getModificationDate());var a=r.getREST().put(this.getEntryURI(),JSON.stringify(this._graph.exportRDFJSON()),e).then(function(){return!0!==n?(t._entry.setRefreshNeeded(!0),t._entry.refresh().then(function(){return t},function(){return r.getCache().message("refreshed",t),t})):t});return r.handleAsync(a,"commitEntryInfo")}},{key:"getEntryURI",value:function(){return this._entryURI}},{key:"getId",value:function(){return i.default.getEntryId(this._entryURI)}},{key:"getName",value:function(){return this._name}},{key:"isDisabled",value:function(){return this._disabled}},{key:"getMetadataURI",value:function(){return i.default.getMetadataURIFromURI(this._entryStore,this._entryURI)}},{key:"getExternalMetadataURI",value:function(){return this._graph.findFirstValue(this._entryURI,o.default.externalMetadata)}},{key:"setExternalMetadataURI",value:function(e){this._graph.findAndRemove(this._entryURI,o.default.externalMetadata),this._graph.create(this._entryURI,o.default.externalMetadata,{type:"uri",value:e})}},{key:"getCachedExternalMetadataURI",value:function(){return i.default.getCachedExternalMetadataURI(this._entryURI)}},{key:"getResourceURI",value:function(){return this._graph.findFirstValue(this._entryURI,o.default.resource)}},{key:"setResourceURI",value:function(e){var t=this.getResourceURI();if(this._graph.findAndRemove(this._entryURI,o.default.resource),this._graph.create(this._entryURI,o.default.resource,{type:"uri",value:e}),t)for(var n=this._graph.find(t),r=0;r<n.length;r++)n[r].setSubject(e)}},{key:"getEntryType",value:function(){var e=this._graph.findFirstValue(this._entryURI,o.default.rdf.type);return o.default.entryType[e||"default"]}},{key:"getResourceType",value:function(){return this.constructor.getResourceTypeHelper(this,o.default.resourceType)}},{key:"getGraphType",value:function(){return this.constructor.getResourceTypeHelper(this,o.default.graphType)}},{key:"getACL",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=function(t){return e?i.default.getEntryId(t.getValue()):t.getValue()},n=this.getResourceURI(),r=this.getMetadataURI(),a={admin:this._graph.find(this._entryURI,o.default.acl.write).map(t),rread:this._graph.find(n,o.default.acl.read).map(t),rwrite:this._graph.find(n,o.default.acl.write).map(t),mread:this._graph.find(r,o.default.acl.read).map(t),mwrite:this._graph.find(r,o.default.acl.write).map(t)};return a.contextOverride=0!==a.admin.length||0!==a.rread.length||0!==a.rwrite.length||0!==a.mread.length||0!==a.mwrite.length,a}},{key:"hasACL",value:function(){return this.getACL().contextOverride}},{key:"setACL",value:function(e){var t=this._graph,n=function(e,n,r,a){t.findAndRemove(e,n),(r||[]).forEach(function(r){r.length<a.length||0!==r.indexOf(a)?t.add(e,n,{type:"uri",value:a+r}):t.add(e,n,{type:"uri",value:r})})},r=e||{},a=this.getResourceURI(),s=this.getMetadataURI(),c=i.default.getResourceBase(this._entry.getEntryStore(),"_principals");n(this._entryURI,o.default.acl.write,r.admin,c),n(a,o.default.acl.read,r.rread,c),n(a,o.default.acl.write,r.rwrite,c),n(s,o.default.acl.read,r.mread,c),n(s,o.default.acl.write,r.mwrite,c)}},{key:"hasMetadataRevisions",value:function(){return null!=this._graph.findFirstValue(null,"owl:sameAs")}},{key:"getMetadataRevisions",value:function(){var e=[],t=this.getMetadataURI(),n=this._graph.find(null,"owl:sameAs",t);if(1!==n.length)return e;for(var a=n[0].getSubject(),i=this._entryStore;a;)e.push({uri:a,rev:a.substr(t.length+5),time:(0,r.default)(this._graph.findFirstValue(a,"prov:generatedAtTime")).toDate(),by:i.getEntryURIFromURI(this._graph.findFirstValue(a,"prov:wasAttributedTo"))}),a=this._graph.findFirstValue(a,"prov:wasRevisionOf");return e.sort(function(e,t){return e.time>t.time?-1:e.time<t.time?1:0}),e}},{key:"getMetadataRevisionGraph",value:(l=regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=this._entryStore.getREST().get(t),e.abrupt("return",new a.Graph(n));case 2:case"end":return e.stop()}},e,this)}),p=function(){var e=this,t=arguments;return new Promise(function(n,r){var a=l.apply(e,t);function i(e){c(a,n,r,i,o,"next",e)}function o(e){c(a,n,r,i,o,"throw",e)}i(void 0)})},function(e){return p.apply(this,arguments)})},{key:"getLabel",value:function(){return this._graph.findFirstValue(this.getResourceURI(),"http://www.w3.org/2000/01/rdf-schema#label")}},{key:"setLabel",value:function(e){this._graph.findAndRemove(this.getResourceURI(),"http://www.w3.org/2000/01/rdf-schema#label"),null!=e&&""!==e&&this._graph.add(this.getResourceURI(),"http://www.w3.org/2000/01/rdf-schema#label",{type:"literal",value:e})}},{key:"getFormat",value:function(){return this._graph.findFirstValue(this.getResourceURI(),"http://purl.org/dc/terms/format")}},{key:"setFormat",value:function(e){this._graph.findAndRemove(this.getResourceURI(),"http://purl.org/dc/terms/format"),null!=e&&""!==e&&this._graph.addL(this.getResourceURI(),"http://purl.org/dc/terms/format",e)}},{key:"getStatus",value:function(){return this._graph.findFirstValue(this.getEntryURI(),o.default.status.property)}},{key:"setStatus",value:function(e){this._graph.findAndRemove(this.getEntryURI(),o.default.status.property),null!=e&&""!==e&&0===e.indexOf("http")&&this._graph.add(this.getEntryURI(),o.default.status.property,e)}},{key:"getCreationDate",value:function(){var e=this._graph.findFirstValue(this.getEntryURI(),"http://purl.org/dc/terms/created");return(0,r.default)(e).toDate()}},{key:"getModificationDate",value:function(){var e=this._graph.findFirstValue(this.getEntryURI(),"http://purl.org/dc/terms/modified");return null!=e?(0,r.default)(e).toDate():this.getCreationDate()}},{key:"getCreator",value:function(){return this._graph.findFirstValue(this.getEntryURI(),"http://purl.org/dc/terms/creator")}},{key:"getSize",value:function(){var e=this._graph.findFirstValue(this.getResourceURI(),"http://purl.org/dc/terms/extent");if(parseInt(e,10)==parseInt(e,10))return parseInt(e,10)}},{key:"getContributors",value:function(){return this._graph.find(this.getEntryURI(),"http://purl.org/dc/terms/contributor").map(function(e){return e.getValue()})}}],s=[{key:"getResourceTypeHelper",value:function(e,t){for(var n=e._graph.find(e.getResourceURI(),o.default.rdf.type),r=0;r<n.length;r++){var a=t[n[r].getValue()];if(null!=a)return a}return t.default}}],n&&u(t.prototype,n),s&&u(t,s),e}();t.default=l},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(40))&&r.__esModule?r:{default:r};function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(e,n,r,a){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=s(this,c(t).call(this,e,n,r)))._data=a,i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,a.default),n=t,(r=[{key:"getString",value:function(){return this._data}},{key:"setString",value:function(e){return this._data=e||"",this}},{key:"commit",value:function(){return this._entryStore.handleAsync(es.getREST().put(this._resourceURI,this._data),"commitString")}},{key:"getSource",value:function(){return this._data}}])&&o(n.prototype,r),i&&o(n,i),t}();t.default=l},function(e,t,n){var r,a,i,o,s;r=n(417),a=n(167).utf8,i=n(418),o=n(167).bin,(s=function(e,t){e.constructor==String?e=t&&"binary"===t.encoding?o.stringToBytes(e):a.stringToBytes(e):i(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||(e=e.toString());for(var n=r.bytesToWords(e),c=8*e.length,u=1732584193,l=-271733879,p=-1732584194,d=271733878,f=0;f<n.length;f++)n[f]=16711935&(n[f]<<8|n[f]>>>24)|4278255360&(n[f]<<24|n[f]>>>8);n[c>>>5]|=128<<c%32,n[14+(c+64>>>9<<4)]=c;var h=s._ff,m=s._gg,v=s._hh,g=s._ii;for(f=0;f<n.length;f+=16){var y=u,x=l,b=p,w=d;u=h(u,l,p,d,n[f+0],7,-680876936),d=h(d,u,l,p,n[f+1],12,-389564586),p=h(p,d,u,l,n[f+2],17,606105819),l=h(l,p,d,u,n[f+3],22,-1044525330),u=h(u,l,p,d,n[f+4],7,-176418897),d=h(d,u,l,p,n[f+5],12,1200080426),p=h(p,d,u,l,n[f+6],17,-1473231341),l=h(l,p,d,u,n[f+7],22,-45705983),u=h(u,l,p,d,n[f+8],7,1770035416),d=h(d,u,l,p,n[f+9],12,-1958414417),p=h(p,d,u,l,n[f+10],17,-42063),l=h(l,p,d,u,n[f+11],22,-1990404162),u=h(u,l,p,d,n[f+12],7,1804603682),d=h(d,u,l,p,n[f+13],12,-40341101),p=h(p,d,u,l,n[f+14],17,-1502002290),u=m(u,l=h(l,p,d,u,n[f+15],22,1236535329),p,d,n[f+1],5,-165796510),d=m(d,u,l,p,n[f+6],9,-1069501632),p=m(p,d,u,l,n[f+11],14,643717713),l=m(l,p,d,u,n[f+0],20,-373897302),u=m(u,l,p,d,n[f+5],5,-701558691),d=m(d,u,l,p,n[f+10],9,38016083),p=m(p,d,u,l,n[f+15],14,-660478335),l=m(l,p,d,u,n[f+4],20,-405537848),u=m(u,l,p,d,n[f+9],5,568446438),d=m(d,u,l,p,n[f+14],9,-1019803690),p=m(p,d,u,l,n[f+3],14,-187363961),l=m(l,p,d,u,n[f+8],20,1163531501),u=m(u,l,p,d,n[f+13],5,-1444681467),d=m(d,u,l,p,n[f+2],9,-51403784),p=m(p,d,u,l,n[f+7],14,1735328473),u=v(u,l=m(l,p,d,u,n[f+12],20,-1926607734),p,d,n[f+5],4,-378558),d=v(d,u,l,p,n[f+8],11,-2022574463),p=v(p,d,u,l,n[f+11],16,1839030562),l=v(l,p,d,u,n[f+14],23,-35309556),u=v(u,l,p,d,n[f+1],4,-1530992060),d=v(d,u,l,p,n[f+4],11,1272893353),p=v(p,d,u,l,n[f+7],16,-155497632),l=v(l,p,d,u,n[f+10],23,-1094730640),u=v(u,l,p,d,n[f+13],4,681279174),d=v(d,u,l,p,n[f+0],11,-358537222),p=v(p,d,u,l,n[f+3],16,-722521979),l=v(l,p,d,u,n[f+6],23,76029189),u=v(u,l,p,d,n[f+9],4,-640364487),d=v(d,u,l,p,n[f+12],11,-421815835),p=v(p,d,u,l,n[f+15],16,530742520),u=g(u,l=v(l,p,d,u,n[f+2],23,-995338651),p,d,n[f+0],6,-198630844),d=g(d,u,l,p,n[f+7],10,1126891415),p=g(p,d,u,l,n[f+14],15,-1416354905),l=g(l,p,d,u,n[f+5],21,-57434055),u=g(u,l,p,d,n[f+12],6,1700485571),d=g(d,u,l,p,n[f+3],10,-1894986606),p=g(p,d,u,l,n[f+10],15,-1051523),l=g(l,p,d,u,n[f+1],21,-2054922799),u=g(u,l,p,d,n[f+8],6,1873313359),d=g(d,u,l,p,n[f+15],10,-30611744),p=g(p,d,u,l,n[f+6],15,-1560198380),l=g(l,p,d,u,n[f+13],21,1309151649),u=g(u,l,p,d,n[f+4],6,-145523070),d=g(d,u,l,p,n[f+11],10,-1120210379),p=g(p,d,u,l,n[f+2],15,718787259),l=g(l,p,d,u,n[f+9],21,-343485551),u=u+y>>>0,l=l+x>>>0,p=p+b>>>0,d=d+w>>>0}return r.endian([u,l,p,d])})._ff=function(e,t,n,r,a,i,o){var s=e+(t&n|~t&r)+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._gg=function(e,t,n,r,a,i,o){var s=e+(t&r|n&~r)+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._hh=function(e,t,n,r,a,i,o){var s=e+(t^n^r)+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._ii=function(e,t,n,r,a,i,o){var s=e+(n^(t|~r))+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._blocksize=16,s._digestsize=16,e.exports=function(e,t){if(null==e)throw new Error("Illegal argument "+e);var n=r.wordsToBytes(s(e,t));return t&&t.asBytes?n:t&&t.asString?o.bytesToString(n):r.bytesToHex(n)}},function(e,t,n){var r=n(6),a=n(1),i=n(94);e.exports=!r&&!a(function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(55);e.exports=r("native-function-to-string",Function.toString)},function(e,t,n){var r=n(2),a=n(128),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(a.call(i))},function(e,t,n){var r=n(11),a=n(96),i=n(15),o=n(9);e.exports=function(e,t){for(var n=a(t),s=o.f,c=i.f,u=0;u<n.length;u++){var l=n[u];r(e,l)||s(e,l,c(t,l))}}},function(e,t,n){var r=n(11),a=n(18),i=n(58).indexOf,o=n(57);e.exports=function(e,t){var n,s=a(e),c=0,u=[];for(n in s)!r(o,n)&&r(s,n)&&u.push(n);for(;t.length>c;)r(s,n=t[c++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(1);e.exports=!!Object.getOwnPropertySymbols&&!r(function(){return!String(Symbol())})},function(e,t,n){var r=n(33);e.exports=r("document","documentElement")},function(e,t,n){var r=n(18),a=n(43).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return o&&"[object Window]"==i.call(e)?function(e){try{return a(e)}catch(e){return o.slice()}}(e):a(r(e))}},function(e,t,n){t.f=n(7)},function(e,t,n){"use strict";var r=n(6),a=n(1),i=n(60),o=n(98),s=n(72),c=n(10),u=n(54),l=Object.assign;e.exports=!l||a(function(){var e={},t={},n=Symbol();return e[n]=7,"abcdefghijklmnopqrst".split("").forEach(function(e){t[e]=e}),7!=l({},e)[n]||"abcdefghijklmnopqrst"!=i(l({},t)).join("")})?function(e,t){for(var n=c(e),a=arguments.length,l=1,p=o.f,d=s.f;a>l;)for(var f,h=u(arguments[l++]),m=p?i(h).concat(p(h)):i(h),v=m.length,g=0;v>g;)f=m[g++],r&&!d.call(h,f)||(n[f]=h[f]);return n}:l},function(e,t,n){var r=n(6),a=n(60),i=n(18),o=n(72).f,s=function(e){return function(t){for(var n,s=i(t),c=a(s),u=c.length,l=0,p=[];u>l;)n=c[l++],r&&!o.call(s,n)||p.push(e?[n,s[n]]:s[n]);return p}};e.exports={entries:s(!0),values:s(!1)}},function(e,t,n){var r=n(4);e.exports=function(e,t,n,a){try{return a?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,n){"use strict";var r=n(20),a=n(3),i=[].slice,o={},s=function(e,t,n){if(!(t in o)){for(var r=[],a=0;a<t;a++)r[a]="a["+a+"]";o[t]=Function("C,a","return new C("+r.join(",")+")")}return o[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=i.call(arguments,1),o=function(){var r=n.concat(i.call(arguments));return this instanceof o?s(t,r.length,r):t.apply(e,r)};return a(t.prototype)&&(o.prototype=t.prototype),o}},function(e,t,n){"use strict";var r=n(36),a=n(10),i=n(138),o=n(100),s=n(8),c=n(46),u=n(65);e.exports=function(e){var t,n,l,p,d=a(e),f="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,v=void 0!==m,g=0,y=u(d);if(v&&(m=r(m,h>2?arguments[2]:void 0,2)),null==y||f==Array&&o(y))for(n=new f(t=s(d.length));t>g;g++)c(n,g,v?m(d[g],g):d[g]);else for(p=y.call(d),n=new f;!(l=p.next()).done;g++)c(n,g,v?i(p,m,[l.value,g],!0):l.value);return n.length=g,n}},function(e,t,n){"use strict";var r=n(10),a=n(34),i=n(8),o=Math.min;e.exports=[].copyWithin||function(e,t){var n=r(this),s=i(n.length),c=a(e,s),u=a(t,s),l=arguments.length>2?arguments[2]:void 0,p=o((void 0===l?s:a(l,s))-u,s-c),d=1;for(u<c&&c<u+p&&(d=-1,u+=p-1,c+=p-1);p-- >0;)u in n?n[c]=n[u]:delete n[c],c+=d,u+=d;return n}},function(e,t,n){"use strict";var r=n(44),a=n(8),i=n(36),o=function(e,t,n,s,c,u,l,p){for(var d,f=c,h=0,m=!!l&&i(l,p,3);h<s;){if(h in n){if(d=m?m(n[h],h,t):n[h],u>0&&r(d))f=o(e,t,d,a(d.length),f,u-1)-1;else{if(f>=9007199254740991)throw TypeError("Exceed the acceptable array length");e[f]=d}f++}h++}return f};e.exports=o},function(e,t,n){"use strict";var r=n(12).forEach,a=n(28);e.exports=a("forEach")?function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(e,t,n){"use strict";var r=n(18),a=n(23),i=n(8),o=n(28),s=Math.min,c=[].lastIndexOf,u=!!c&&1/[1].lastIndexOf(1,-0)<0,l=o("lastIndexOf");e.exports=u||l?function(e){if(u)return c.apply(this,arguments)||0;var t=r(this),n=i(t.length),o=n-1;for(arguments.length>1&&(o=s(o,a(arguments[1]))),o<0&&(o=n+o);o>=0;o--)if(o in t&&t[o]===e)return o||0;return-1}:c},function(e,t,n){"use strict";var r,a,i,o=n(27),s=n(13),c=n(11),u=n(7),l=n(32),p=u("iterator"),d=!1;[].keys&&("next"in(i=[].keys())?(a=o(o(i)))!==Object.prototype&&(r=a):d=!0),null==r&&(r={}),l||c(r,p)||s(r,p,function(){return this}),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(e,t,n){var r=n(83);e.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(r)},function(e,t,n){"use strict";var r=n(78).charAt,a=n(19),i=n(103),o=a.set,s=a.getterFor("String Iterator");i(String,"String",function(e){o(this,{type:"String Iterator",string:String(e),index:0})},function(){var e,t=s(this),n=t.string,a=t.index;return a>=n.length?{value:void 0,done:!0}:(e=r(n,a),t.index+=e.length,{value:e,done:!1})})},function(e,t,n){var r=n(2),a=n(50).trim,i=n(84),o=r.parseInt,s=/^[+-]?0[Xx]/,c=8!==o(i+"08")||22!==o(i+"0x16");e.exports=c?function(e,t){var n=a(String(e));return o(n,t>>>0||(s.test(n)?16:10))}:o},function(e,t,n){var r=n(2),a=n(50).trim,i=n(84),o=r.parseFloat,s=1/o(i+"-0")!=-1/0;e.exports=s?function(e){var t=a(String(e)),n=o(t);return 0===n&&"-"==t.charAt(0)?-0:n}:o},function(e,t,n){var r=n(3),a=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&a(e)===e}},function(e,t,n){var r=n(24);e.exports=function(e){if("number"!=typeof e&&"Number"!=r(e))throw TypeError("Incorrect invocation");return+e}},function(e,t){var n=Math.log;e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:n(1+e)}},function(e,t,n){var r,a,i,o,s,c,u,l=n(2),p=n(15).f,d=n(24),f=n(113).set,h=n(83),m=l.MutationObserver||l.WebKitMutationObserver,v=l.process,g=l.Promise,y="process"==d(v),x=p(l,"queueMicrotask"),b=x&&x.value;b||(r=function(){var e,t;for(y&&(e=v.domain)&&e.exit();a;){t=a.fn,a=a.next;try{t()}catch(e){throw a?o():i=void 0,e}}i=void 0,e&&e.enter()},y?o=function(){v.nextTick(r)}:m&&!/(iphone|ipod|ipad).*applewebkit/i.test(h)?(s=!0,c=document.createTextNode(""),new m(r).observe(c,{characterData:!0}),o=function(){c.data=s=!s}):g&&g.resolve?(u=g.resolve(void 0),o=function(){u.then(r)}):o=function(){f.call(l,r)}),e.exports=b||function(e){var t={fn:e,next:void 0};i&&(i.next=t),a||(a=t,o()),i=t}},function(e,t,n){var r=n(4),a=n(3),i=n(157);e.exports=function(e,t){if(r(e),a(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(20),a=function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new a(e)}},function(e,t,n){"use strict";var r=n(9).f,a=n(35),i=n(51),o=n(36),s=n(38),c=n(63),u=n(103),l=n(49),p=n(6),d=n(45).fastKey,f=n(19),h=f.set,m=f.getterFor;e.exports={getConstructor:function(e,t,n,u){var l=e(function(e,r){s(e,l,t),h(e,{type:t,index:a(null),first:void 0,last:void 0,size:0}),p||(e.size=0),null!=r&&c(r,e[u],e,n)}),f=m(t),v=function(e,t,n){var r,a,i=f(e),o=g(e,t);return o?o.value=n:(i.last=o={index:a=d(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=o),r&&(r.next=o),p?i.size++:e.size++,"F"!==a&&(i.index[a]=o)),e},g=function(e,t){var n,r=f(e),a=d(t);if("F"!==a)return r.index[a];for(n=r.first;n;n=n.next)if(n.key==t)return n};return i(l.prototype,{clear:function(){for(var e=f(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,p?e.size=0:this.size=0},delete:function(e){var t=f(this),n=g(this,e);if(n){var r=n.next,a=n.previous;delete t.index[n.index],n.removed=!0,a&&(a.next=r),r&&(r.previous=a),t.first==n&&(t.first=r),t.last==n&&(t.last=a),p?t.size--:this.size--}return!!n},forEach:function(e){for(var t,n=f(this),r=o(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!g(this,e)}}),i(l.prototype,n?{get:function(e){var t=g(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),p&&r(l.prototype,"size",{get:function(){return f(this).size}}),l},setStrong:function(e,t,n){var r=t+" Iterator",a=m(t),i=m(r);u(e,t,function(e,t){h(this,{type:r,target:e,state:a(e),kind:t,last:void 0})},function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})},n?"entries":"values",!n,!0),l(t)}}},function(e,t,n){"use strict";var r=n(51),a=n(45).getWeakData,i=n(4),o=n(3),s=n(38),c=n(63),u=n(12),l=n(11),p=n(19),d=p.set,f=p.getterFor,h=u.find,m=u.findIndex,v=0,g=function(e){return e.frozen||(e.frozen=new y)},y=function(){this.entries=[]},x=function(e,t){return h(e.entries,function(e){return e[0]===t})};y.prototype={get:function(e){var t=x(this,e);if(t)return t[1]},has:function(e){return!!x(this,e)},set:function(e,t){var n=x(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=m(this.entries,function(t){return t[0]===e});return~t&&this.entries.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,u){var p=e(function(e,r){s(e,p,t),d(e,{type:t,id:v++,frozen:void 0}),null!=r&&c(r,e[u],e,n)}),h=f(t),m=function(e,t,n){var r=h(e),o=a(i(t),!0);return!0===o?g(r).set(t,n):o[r.id]=n,e};return r(p.prototype,{delete:function(e){var t=h(this);if(!o(e))return!1;var n=a(e);return!0===n?g(t).delete(e):n&&l(n,t.id)&&delete n[t.id]},has:function(e){var t=h(this);if(!o(e))return!1;var n=a(e);return!0===n?g(t).has(e):n&&l(n,t.id)}}),r(p.prototype,n?{get:function(e){var t=h(this);if(o(e)){var n=a(e);return!0===n?g(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return m(this,e,t)}}:{add:function(e){return m(this,e,!0)}}),p}}},function(e,t,n){var r=n(23),a=n(8);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=a(t);if(t!==n)throw RangeError("Wrong length or index");return n}},function(e,t,n){var r=n(23);e.exports=function(e,t){var n=r(e);if(n<0||n%t)throw RangeError("Wrong offset");return n}},function(e,t,n){var r=n(10),a=n(8),i=n(65),o=n(100),s=n(36),c=n(5).aTypedArrayConstructor;e.exports=function(e){var t,n,u,l,p,d=r(e),f=arguments.length,h=f>1?arguments[1]:void 0,m=void 0!==h,v=i(d);if(null!=v&&!o(v))for(p=v.call(d),d=[];!(l=p.next()).done;)d.push(l.value);for(m&&f>2&&(h=s(h,arguments[2],2)),n=a(d.length),u=new(c(this))(n),t=0;n>t;t++)u[t]=m?h(d[t],t):d[t];return u}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){var r=n(1),a=n(7),i=n(32),o=a("iterator");e.exports=!r(function(){var e=new URL("b?e=1","http://a"),t=e.searchParams;return e.pathname="c%20d",i&&!e.toJSON||!t.sort||"http://a/c%20d?e=1"!==e.href||"1"!==t.get("e")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[o]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash})},function(e,t,n){"use strict";n(77);var r=n(0),a=n(164),i=n(16),o=n(51),s=n(26),c=n(104),u=n(19),l=n(38),p=n(11),d=n(36),f=n(4),h=n(3),m=n(413),v=n(65),g=n(7)("iterator"),y=u.set,x=u.getterFor("URLSearchParams"),b=u.getterFor("URLSearchParamsIterator"),w=/\+/g,_=Array(4),k=function(e){return _[e-1]||(_[e-1]=RegExp("((?:%[\\da-f]{2}){"+e+"})","gi"))},E=function(e){try{return decodeURIComponent(e)}catch(t){return e}},S=function(e){var t=e.replace(w," "),n=4;try{return decodeURIComponent(t)}catch(e){for(;n;)t=t.replace(k(n--),E);return t}},R=/[!'()~]|%20/g,T={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},A=function(e){return T[e]},D=function(e){return encodeURIComponent(e).replace(R,A)},O=function(e,t){if(t)for(var n,r,a=t.split("&"),i=0;i<a.length;)(n=a[i++]).length&&(r=n.split("="),e.push({key:S(r.shift()),value:S(r.join("="))}))},I=function(e){this.entries.length=0,O(this.entries,e)},j=function(e,t){if(e<t)throw TypeError("Not enough arguments")},C=c(function(e,t){y(this,{type:"URLSearchParamsIterator",iterator:m(x(e).entries),kind:t})},"Iterator",function(){var e=b(this),t=e.kind,n=e.iterator.next(),r=n.value;return n.done||(n.value="keys"===t?r.key:"values"===t?r.value:[r.key,r.value]),n}),N=function(){l(this,N,"URLSearchParams");var e,t,n,r,a,i,o,s=arguments.length>0?arguments[0]:void 0,c=this,u=[];if(y(c,{type:"URLSearchParams",entries:u,updateURL:function(){},updateSearchParams:I}),void 0!==s)if(h(s))if("function"==typeof(e=v(s)))for(t=e.call(s);!(n=t.next()).done;){if((a=(r=m(f(n.value))).next()).done||(i=r.next()).done||!r.next().done)throw TypeError("Expected sequence with length 2");u.push({key:a.value+"",value:i.value+""})}else for(o in s)p(s,o)&&u.push({key:o,value:s[o]+""});else O(u,"string"==typeof s?"?"===s.charAt(0)?s.slice(1):s:s+"")},L=N.prototype;o(L,{append:function(e,t){j(arguments.length,2);var n=x(this);n.entries.push({key:e+"",value:t+""}),n.updateURL()},delete:function(e){j(arguments.length,1);for(var t=x(this),n=t.entries,r=e+"",a=0;a<n.length;)n[a].key===r?n.splice(a,1):a++;t.updateURL()},get:function(e){j(arguments.length,1);for(var t=x(this).entries,n=e+"",r=0;r<t.length;r++)if(t[r].key===n)return t[r].value;return null},getAll:function(e){j(arguments.length,1);for(var t=x(this).entries,n=e+"",r=[],a=0;a<t.length;a++)t[a].key===n&&r.push(t[a].value);return r},has:function(e){j(arguments.length,1);for(var t=x(this).entries,n=e+"",r=0;r<t.length;)if(t[r++].key===n)return!0;return!1},set:function(e,t){j(arguments.length,1);for(var n,r=x(this),a=r.entries,i=!1,o=e+"",s=t+"",c=0;c<a.length;c++)(n=a[c]).key===o&&(i?a.splice(c--,1):(i=!0,n.value=s));i||a.push({key:o,value:s}),r.updateURL()},sort:function(){var e,t,n,r=x(this),a=r.entries,i=a.slice();for(a.length=0,n=0;n<i.length;n++){for(e=i[n],t=0;t<n;t++)if(a[t].key>e.key){a.splice(t,0,e);break}t===n&&a.push(e)}r.updateURL()},forEach:function(e){for(var t,n=x(this).entries,r=d(e,arguments.length>1?arguments[1]:void 0,3),a=0;a<n.length;)r((t=n[a++]).value,t.key,this)},keys:function(){return new C(this,"keys")},values:function(){return new C(this,"values")},entries:function(){return new C(this,"entries")}},{enumerable:!0}),i(L,g,L.entries),i(L,"toString",function(){for(var e,t=x(this).entries,n=[],r=0;r<t.length;)e=t[r++],n.push(D(e.key)+"="+D(e.value));return n.join("&")},{enumerable:!0}),s(N,"URLSearchParams"),r({global:!0,forced:!a},{URLSearchParams:N}),e.exports={URLSearchParams:N,getState:x}},function(e,t){function n(e,t){for(var n in e)t[n]=e[n]}function r(e,t){var r=e.prototype;if(Object.create){var a=Object.create(t.prototype);r.__proto__=a}if(!(r instanceof t)){function i(){}i.prototype=t.prototype,n(r,i=new i),e.prototype=r=i}r.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),r.constructor=e)}var a="http://www.w3.org/1999/xhtml",i={},o=i.ELEMENT_NODE=1,s=i.ATTRIBUTE_NODE=2,c=i.TEXT_NODE=3,u=i.CDATA_SECTION_NODE=4,l=i.ENTITY_REFERENCE_NODE=5,p=i.ENTITY_NODE=6,d=i.PROCESSING_INSTRUCTION_NODE=7,f=i.COMMENT_NODE=8,h=i.DOCUMENT_NODE=9,m=i.DOCUMENT_TYPE_NODE=10,v=i.DOCUMENT_FRAGMENT_NODE=11,g=i.NOTATION_NODE=12,y={},x={},b=(y.INDEX_SIZE_ERR=(x[1]="Index size error",1),y.DOMSTRING_SIZE_ERR=(x[2]="DOMString size error",2),y.HIERARCHY_REQUEST_ERR=(x[3]="Hierarchy request error",3)),w=(y.WRONG_DOCUMENT_ERR=(x[4]="Wrong document",4),y.INVALID_CHARACTER_ERR=(x[5]="Invalid character",5),y.NO_DATA_ALLOWED_ERR=(x[6]="No data allowed",6),y.NO_MODIFICATION_ALLOWED_ERR=(x[7]="No modification allowed",7),y.NOT_FOUND_ERR=(x[8]="Not found",8)),_=(y.NOT_SUPPORTED_ERR=(x[9]="Not supported",9),y.INUSE_ATTRIBUTE_ERR=(x[10]="Attribute in use",10));y.INVALID_STATE_ERR=(x[11]="Invalid state",11),y.SYNTAX_ERR=(x[12]="Syntax error",12),y.INVALID_MODIFICATION_ERR=(x[13]="Invalid modification",13),y.NAMESPACE_ERR=(x[14]="Invalid namespace",14),y.INVALID_ACCESS_ERR=(x[15]="Invalid access",15);function k(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,x[e]),this.message=x[e],Error.captureStackTrace&&Error.captureStackTrace(this,k);return n.code=e,t&&(this.message=this.message+": "+t),n}function E(){}function S(e,t){this._node=e,this._refresh=t,R(this)}function R(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var r=e._refresh(e._node);ne(e,"length",r.length),n(r,e),e._inc=t}}function T(){}function A(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function D(e,t,n,r){if(r?t[A(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var a=e.ownerDocument;a&&(r&&q(a,e,r),function(e,t,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&(t._nsMap[n.prefix?n.localName:""]=n.value)}(a,e,n))}}function O(e,t,n){var r=A(t,n);if(!(r>=0))throw k(w,new Error(e.tagName+"@"+n));for(var a=t.length-1;r<a;)t[r]=t[++r];if(t.length=a,e){var i=e.ownerDocument;i&&(q(i,e,n),n.ownerElement=null)}}function I(e){if(this._features={},e)for(var t in e)this._features=e[t]}function j(){}function C(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function N(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(N(e,t))return!0}while(e=e.nextSibling)}function L(){}function q(e,t,n,r){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&delete t._nsMap[n.prefix?n.localName:""]}function U(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var a=t.firstChild,i=0;a;)r[i++]=a,a=a.nextSibling;r.length=i}}}function P(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,U(e.ownerDocument,e),t}function M(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===v){var a=t.firstChild;if(null==a)return t;var i=t.lastChild}else a=i=t;var o=n?n.previousSibling:e.lastChild;a.previousSibling=o,i.nextSibling=n,o?o.nextSibling=a:e.firstChild=a,null==n?e.lastChild=i:n.previousSibling=i;do{a.parentNode=e}while(a!==i&&(a=a.nextSibling));return U(e.ownerDocument||e,e),t.nodeType==v&&(t.firstChild=t.lastChild=null),t}function F(){this._nsMap={}}function z(){}function B(){}function V(){}function G(){}function Y(){}function H(){}function W(){}function $(){}function J(){}function Z(){}function X(){}function K(){}function Q(e,t){var n=[],r=9==this.nodeType?this.documentElement:this,a=r.prefix,i=r.namespaceURI;if(i&&null==a&&null==(a=r.lookupPrefix(i)))var o=[{namespace:i,prefix:null}];return te(this,n,e,t,o),n.join("")}function ee(e,t,n){var r=e.prefix||"",a=e.namespaceURI;if(!r&&!a)return!1;if("xml"===r&&"http://www.w3.org/XML/1998/namespace"===a||"http://www.w3.org/2000/xmlns/"==a)return!1;for(var i=n.length;i--;){var o=n[i];if(o.prefix==r)return o.namespace!=a}return!0}function te(e,t,n,r,i){if(r){if(!(e=r(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case o:i||(i=[]);i.length;var p=e.attributes,g=p.length,y=e.firstChild,x=e.tagName;n=a===e.namespaceURI||n,t.push("<",x);for(var b=0;b<g;b++){"xmlns"==(w=p.item(b)).prefix?i.push({prefix:w.localName,namespace:w.value}):"xmlns"==w.nodeName&&i.push({prefix:"",namespace:w.value})}for(b=0;b<g;b++){var w;if(ee(w=p.item(b),0,i)){var _=w.prefix||"",k=w.namespaceURI,E=_?" xmlns:"+_:" xmlns";t.push(E,'="',k,'"'),i.push({prefix:_,namespace:k})}te(w,t,n,r,i)}if(ee(e,0,i)){_=e.prefix||"",k=e.namespaceURI,E=_?" xmlns:"+_:" xmlns";t.push(E,'="',k,'"'),i.push({prefix:_,namespace:k})}if(y||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(x)){if(t.push(">"),n&&/^script$/i.test(x))for(;y;)y.data?t.push(y.data):te(y,t,n,r,i),y=y.nextSibling;else for(;y;)te(y,t,n,r,i),y=y.nextSibling;t.push("</",x,">")}else t.push("/>");return;case h:case v:for(y=e.firstChild;y;)te(y,t,n,r,i),y=y.nextSibling;return;case s:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,C),'"');case c:return t.push(e.data.replace(/[<&]/g,C));case u:return t.push("<![CDATA[",e.data,"]]>");case f:return t.push("\x3c!--",e.data,"--\x3e");case m:var S=e.publicId,R=e.systemId;if(t.push("<!DOCTYPE ",e.name),S)t.push(' PUBLIC "',S),R&&"."!=R&&t.push('" "',R),t.push('">');else if(R&&"."!=R)t.push(' SYSTEM "',R,'">');else{var T=e.internalSubset;T&&t.push(" [",T,"]"),t.push(">")}return;case d:return t.push("<?",e.target," ",e.data,"?>");case l:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function ne(e,t,n){e[t]=n}k.prototype=Error.prototype,n(y,k),E.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)te(this[r],n,e,t);return n.join("")}},S.prototype.item=function(e){return R(this),this[e]},r(S,E),T.prototype={length:0,item:E.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new k(_);var n=this.getNamedItem(e.nodeName);return D(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t,n=e.ownerElement;if(n&&n!=this._ownerElement)throw new k(_);return t=this.getNamedItemNS(e.namespaceURI,e.localName),D(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return O(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return O(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}},I.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!(!n||t&&!(t in n))},createDocument:function(e,t,n){var r=new L;if(r.implementation=this,r.childNodes=new E,r.doctype=n,n&&r.appendChild(n),t){var a=r.createElementNS(e,t);r.appendChild(a)}return r},createDocumentType:function(e,t,n){var r=new H;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}},j.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return M(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return P(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,n,r){var a=new n.constructor;for(var i in n){var c=n[i];"object"!=typeof c&&c!=a[i]&&(a[i]=c)}n.childNodes&&(a.childNodes=new E);a.ownerDocument=t;switch(a.nodeType){case o:var u=n.attributes,l=a.attributes=new T,p=u.length;l._ownerElement=a;for(var d=0;d<p;d++)a.setAttributeNode(e(t,u.item(d),!0));break;case s:r=!0}if(r)for(var f=n.firstChild;f;)a.appendChild(e(t,f,r)),f=f.nextSibling;return a}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==c&&e.nodeType==c?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n)for(var r in n)if(n[r]==e)return r;t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},n(i,j),n(i,j.prototype),L.prototype={nodeName:"#document",nodeType:h,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==v){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return null==this.documentElement&&e.nodeType==o&&(this.documentElement=e),M(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),P(this,e)},importNode:function(e,t){return function e(t,n,r){var a;switch(n.nodeType){case o:(a=n.cloneNode(!1)).ownerDocument=t;case v:break;case s:r=!0}a||(a=n.cloneNode(!1));a.ownerDocument=t;a.parentNode=null;if(r)for(var i=n.firstChild;i;)a.appendChild(e(t,i,r)),i=i.nextSibling;return a}(this,e,t)},getElementById:function(e){var t=null;return N(this.documentElement,function(n){if(n.nodeType==o&&n.getAttribute("id")==e)return t=n,!0}),t},createElement:function(e){var t=new F;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new E,(t.attributes=new T)._ownerElement=t,t},createDocumentFragment:function(){var e=new Z;return e.ownerDocument=this,e.childNodes=new E,e},createTextNode:function(e){var t=new V;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new G;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new Y;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new X;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new z;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new J;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new F,r=t.split(":"),a=n.attributes=new T;return n.childNodes=new E,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,a._ownerElement=n,n},createAttributeNS:function(e,t){var n=new z,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}},r(L,j),F.prototype={nodeType:o,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===v?this.insertBefore(e,null):function(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t);r=e.lastChild}return r=e.lastChild,t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,U(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new S(this,function(t){var n=[];return N(t,function(r){r===t||r.nodeType!=o||"*"!==e&&r.tagName!=e||n.push(r)}),n})},getElementsByTagNameNS:function(e,t){return new S(this,function(n){var r=[];return N(n,function(a){a===n||a.nodeType!==o||"*"!==e&&a.namespaceURI!==e||"*"!==t&&a.localName!=t||r.push(a)}),r})}},L.prototype.getElementsByTagName=F.prototype.getElementsByTagName,L.prototype.getElementsByTagNameNS=F.prototype.getElementsByTagNameNS,r(F,j),z.prototype.nodeType=s,r(z,j),B.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(x[b])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){n=this.data.substring(0,e)+n+this.data.substring(e+t),this.nodeValue=this.data=n,this.length=n.length}},r(B,j),V.prototype={nodeName:"#text",nodeType:c,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}},r(V,B),G.prototype={nodeName:"#comment",nodeType:f},r(G,B),Y.prototype={nodeName:"#cdata-section",nodeType:u},r(Y,B),H.prototype.nodeType=m,r(H,j),W.prototype.nodeType=g,r(W,j),$.prototype.nodeType=p,r($,j),J.prototype.nodeType=l,r(J,j),Z.prototype.nodeName="#document-fragment",Z.prototype.nodeType=v,r(Z,j),X.prototype.nodeType=d,r(X,j),K.prototype.serializeToString=function(e,t,n){return Q.call(e,t,n)},j.prototype.toString=Q;try{if(Object.defineProperty){Object.defineProperty(S.prototype,"length",{get:function(){return R(this),this.$$length}}),Object.defineProperty(j.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case o:case v:var n=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case o:case v:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),ne=function(e,t,n){e["$$"+t]=n}}}catch(e){}t.DOMImplementation=I,t.XMLSerializer=K},function(e,t){var n={utf8:{stringToBytes:function(e){return n.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(n.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t},bytesToString:function(e){for(var t=[],n=0;n<e.length;n++)t.push(String.fromCharCode(e[n]));return t.join("")}}};e.exports=n},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function a(e){return function(){var t=this,n=arguments;return new Promise(function(a,i){var o=e.apply(t,n);function s(e){r(o,a,i,s,c,"next",e)}function c(e){r(o,a,i,s,c,"throw",e)}s(void 0)})}}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryStore=t,this._listenerCounter=0,this._listeners=new Map}var t,r,o,s,c,u,l;return t=e,(r=[{key:"messageListeners",value:function(e,t){this._listeners.forEach(function(n){return n(e,t)})}},{key:"addAuthListener",value:function(e){null==e.__alid&&(e.__alid="idx_".concat(this._listenerCounter),this._listenerCounter+=1),this._listeners.set(e.__alid,e)}},{key:"removeAuthListener",value:function(e){null!=e.__alid&&this._listeners.delete(e.__alid)}},{key:"getUserInfo",value:(l=a(regeneratorRuntime.mark(function e(){var t,n=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n.length>0&&void 0!==n[0]&&n[0],!this.userInfo||t){e.next=3;break}return e.abrupt("return",Promise.resolve(this.userInfo));case 3:return e.next=5,this._entryStore.handleAsync(this._entryStore.getREST().get("".concat(this._entryStore._baseURI,"auth/user"),null,!0),"getUserInfo");case 5:return this.userInfo=e.sent,e.abrupt("return",this.userInfo);case 7:case"end":return e.stop()}},e,this)})),function(){return l.apply(this,arguments)})},{key:"getUserEntry",value:(u=a(regeneratorRuntime.mark(function e(){var t,n,r=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.length>0&&void 0!==r[0]&&r[0],!this.userEntry||t){e.next=3;break}return e.abrupt("return",Promise.resolve(this.userEntry));case 3:return e.next=5,this.getUserInfo(t);case 5:return n=e.sent,e.next=8,this._entryStore.getEntry(this._entryStore.getEntryURI("_principals",n.id),{asyncContext:"getUserEntry"});case 8:return this.userEntry=e.sent,e.abrupt("return",this.userEntry);case 10:case"end":return e.stop()}},e,this)})),function(){return u.apply(this,arguments)})},{key:"login",value:(c=a(regeneratorRuntime.mark(function e(t,r,a){var i,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.userInfo||this.userInfo.user!==t){e.next=2;break}return e.abrupt("return",this.getUserInfo());case 2:return i={base:this._entryStore.getBaseURI(),user:t,password:r,maxAge:a},e.next=5,this._entryStore.handleAsync(this._entryStore.getREST().auth(i),"login");case 5:if("object"!==n(o=e.sent)||!o.user){e.next=8;break}return e.abrupt("return",o);case 8:return e.next=10,this._entryStore.getREST().get("".concat(this._entryStore._baseURI,"auth/user"),null,!0);case 10:return this.userInfo=e.sent,delete this.userEntry,this._entryStore.getCache().allNeedRefresh(),this.messageListeners("login",this.userInfo),e.abrupt("return",this.userInfo);case 15:case"end":return e.stop()}},e,this)})),function(e,t,n){return c.apply(this,arguments)})},{key:"logout",value:(s=a(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.userInfo||"guest"!==this.userInfo.user){e.next=2;break}return e.abrupt("return",this.getUserInfo());case 2:return e.next=4,this._entryStore.handleAsync(this._entryStore.getREST().auth({base:this._entryStore.getBaseURI(),logout:!0}),"logout");case 4:return delete this.userEntry,this._entryStore.getCache().allNeedRefresh(),this.userInfo={user:"guest",id:"_guest"},this.messageListeners("logout",this.userInfo),e.abrupt("return",this.userInfo);case 9:case"end":return e.stop()}},e,this)})),function(){return s.apply(this,arguments)})}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._listenersIdx=new Map,this._cacheIdx=new Map,this._cacheIdxResource=new Map,this._cacheCtrl=new Map,this._listenerCounter=0}var t,r,a;return t=e,(r=[{key:"cache",value:function(e,t){var n=e.getURI(),r=this._cacheIdx.has(n);this._cacheIdx.set(n,e);var a=e.getResourceURI(),i=this._cacheIdxResource.has(a)?this._cacheIdxResource.get(a):new Set;i.has(e)||i.add(e),this._cacheIdxResource.set(a,i),this._cacheCtrl.set(n,{date:(new Date).getTime()}),r&&!0!==t&&this.messageListeners("refreshed",e)}},{key:"unCache",value:function(e){var t=e.getURI(),n=e.getResourceURI();this._cacheIdx.delete(t);var r=this._cacheIdxResource.get(n);r.size>0&&(r.delete(e),0===r.size&&this._cacheIdxResource.delete(n))}},{key:"setRefreshNeeded",value:function(e,t){var n=e.getURI(),r=this._cacheCtrl.get(n);if(null==r)throw new Error("No cache control of existing entry: ".concat(n));r.stale=!0,!0!==t&&this.messageListeners("needRefresh",e)}},{key:"cacheAll",value:function(e,t){var n=this;e.forEach(function(e){n.cache(e,t)})}},{key:"get",value:function(e){return this._cacheIdx.get(e)}},{key:"getByResourceURI",value:function(e){return new Set(this._cacheIdxResource.get(e))}},{key:"needRefresh",value:function(e){var t=e.getURI(),n=this._cacheCtrl.get(t);if(null==n)throw Error("No cache control of existing entry: ".concat(t));return!0===n.stale}},{key:"addCacheUpdateListener",value:function(e){null!=e.__clid&&(e.__clid="idx_".concat(this._listenerCounter),this._listenerCounter+=1),this._listenersIdx.set(e.__clid,e)}},{key:"removeCacheUpdateListener",value:function(e){null!=e.__clid&&this._listenersIdx.delete(e.__clid)}},{key:"messageListeners",value:function(e,t){this._listenersIdx.forEach(function(n){n(e,t)})}},{key:"allNeedRefresh",value:function(){var e=this;this._cacheIdx.forEach(function(t,n){e.setRefreshNeeded(e._cacheIdx.get(n),!0)},this),this.messageListeners("allEntriesNeedRefresh")}},{key:"clear",value:function(){this._cacheIdx=new Map,this._cacheIdxResource=new Map,this._cacheCtrl=new Map}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=r},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(171)),a=s(n(172)),i=s(n(93)),o=n(91);function s(e){return e&&e.__esModule?e:{default:e}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function l(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){u(i,r,a,o,s,"next",e)}function s(e){u(i,r,a,o,s,"throw",e)}o(void 0)})}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=n(464),f=function(e){var t=document.createElement("a"),n=document.createElement("a");return t.href=e,n.href=window.location.href,t.hostname===n.hostname&&t.port===n.port&&t.protocol===n.protocol&&"file:"!==n.protocol},h=function(){return parseInt((1e4*Math.random()).toString(),10)},m=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.timeout=3e4,this.headers={Accept:"application/json","Content-Type":"application/json; charset=UTF-8","X-Requested-With":null};(0,o.isBrowser)()&&(this.putFile=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"application/json";if(t.value){var r=new FormData,i=t.files;return Array.from(i).forEach(function(e,t){e instanceof File&&r.append(t.toString(),e)}),a.default.post(e).query({preventCache:h()}).accept(n).withCredentials().send(r)}})}var t,n,s,u,m,v;return t=e,(n=[{key:"auth",value:(v=l(regeneratorRuntime.mark(function e(t){var n,r,i,s,c,u,l,p,d,f,m,v,g,y,x,b,w,_;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.user,r=t.password,i=t.base,s=t.maxAge,c=void 0===s?604800:s,u=t.logout,l=void 0!==u&&u,delete this.headers.cookie,!l){e.next=6;break}return p=a.default.get("".concat(i,"auth/logout")).query({preventCache:h()}).accept("application/json").withCredentials().timeout({response:this.timeout}),Object.entries(this.headers).map(function(e){return p.set(e[0],e[1])}),e.abrupt("return",p);case 6:if(d={auth_username:encodeURIComponent(n),auth_password:encodeURIComponent(r),auth_maxage:c},!(0,o.isBrowser)()){e.next=9;break}return e.abrupt("return",this.post("".concat(i,"auth/cookie"),d,null,"application/x-www-form-urlencoded"));case 9:return f=Object.entries(d).reduce(function(e,t){return"".concat(e).concat(t.join("="),"&")},""),e.next=12,this.post("".concat(i,"auth/cookie"),f,null,"application/x-www-form-urlencoded");case 12:m=e.sent,v=m.headers["set-cookie"],g=!0,y=!1,x=void 0,e.prev=17,b=v[Symbol.iterator]();case 19:if(g=(w=b.next()).done){e.next=27;break}if(!(_=w.value).startsWith("auth_token=")){e.next=24;break}return this.headers.cookie=[_],e.abrupt("break",27);case 24:g=!0,e.next=19;break;case 27:e.next=33;break;case 29:e.prev=29,e.t0=e.catch(17),y=!0,x=e.t0;case 33:e.prev=33,e.prev=34,g||null==b.return||b.return();case 36:if(e.prev=36,!y){e.next=39;break}throw x;case 39:return e.finish(36);case 40:return e.finish(33);case 41:return e.abrupt("return",m);case 42:case"end":return e.stop()}},e,this,[[17,29,33,41],[34,,36,40]])})),function(e){return v.apply(this,arguments)})},{key:"get",value:(m=l(regeneratorRuntime.mark(function e(t){var n,s,c,u,l,p,m,v=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=v.length>1&&void 0!==v[1]?v[1]:null,s=v.length>2&&void 0!==v[2]&&v[2],delete(c=Object.assign({},this.headers))["Content-Type"],u=t,l="json",null==n){e.next=15;break}c.Accept=n,e.t0=n,e.next="application/json"===e.t0?11:"application/xml"===e.t0?12:"text/xml"===e.t0?12:14;break;case 11:return e.abrupt("break",15);case 12:return l="xml",e.abrupt("break",15);case 14:l="text";case 15:if(!(0,o.isBrowser)()||f(u)||s){e.next=17;break}return e.abrupt("return",new Promise(function(e,t){new RegExp("[?&]format=").test(u)||(u+="".concat(u.includes("?")?"&":"?","format=application/json")),a.default.get(u).use(d({timeout:1e6,callbackName:"cb".concat((0,r.default)(u).slice(0,7)).concat(h())})).then(function(t){e(t.body)},t)}));case 17:return p=a.default.get(u).accept(l).timeout({response:this.timeout}).query({preventCache:h()}).withCredentials(),"xml"===l&&(p.parse["application/xml"]=function(e,t){var n=new((0,o.isBrowser)()?window.DOMParser:i.default.DOMParser);return(0,o.isBrowser)()?n.parseFromString(e,"application/xml"):(e.text=n.parseFromString(e.text,"application/xml"),t(null,e),e.text)}),Object.entries(c).map(function(e){return p.set(e[0],e[1])}),e.next=22,p;case 22:if(200!==(m=e.sent).statusCode){e.next=27;break}if("text"!==l&&"text/xml"!==n){e.next=26;break}return e.abrupt("return",m.text);case 26:return e.abrupt("return",m.body);case 27:throw new Error("Resource could not be loaded: ".concat(m.text));case 28:case"end":return e.stop()}},e,this)})),function(e){return m.apply(this,arguments)})},{key:"post",value:function(e,t,n,r){var i=Object.assign({},this.headers);n&&(i["If-Unmodified-Since"]=n.toUTCString()),r&&(i["Content-Type"]=r);var o=a.default.post(e).query({"request.preventCache":h()});return t&&o.send(t).serialize(function(e){return Object.entries(e).map(function(e){return"".concat(e[0],"=").concat(e[1],"&")}).join("")}),o.withCredentials().timeout({response:this.timeout}),Object.entries(i).map(function(e){return o.set(e[0],e[1])}),o}},{key:"create",value:(u=l(regeneratorRuntime.mark(function e(t,n){var r,a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.post(t,n);case 2:return r=e.sent,!(a=r.headers.location)&&r.body&&(i=t.indexOf("?"),a=-1!==i?t.substr(0,t.indexOf("?")):t,a+="/entry/".concat(JSON.parse(r.body).entryId)),e.abrupt("return",a);case 6:case"end":return e.stop()}},e,this)})),function(e,t){return u.apply(this,arguments)})},{key:"put",value:function(e,t,n,r){var i=Object.assign({},this.headers);n&&(i["If-Unmodified-Since"]=n.toUTCString()),r?i["Content-Type"]=r:"object"===c(t)&&(i["Content-Type"]="application/json");var o=a.default.put(e).query({preventCache:h()}).send(t).withCredentials().timeout({response:this.timeout});return Object.entries(i).map(function(e){return o.set(e[0],e[1])}),o}},{key:"del",value:function(e,t){var n=Object.assign({},this.headers);delete n["Content-Type"],t&&(n["If-Unmodified-Since"]=t.toUTCString());var r=a.default.del(e).query({preventCache:h()}).withCredentials().timeout({response:this.timeout});return Object.entries(n).map(function(e){return r.set(e[0],e[1])}),r}},{key:"putFile",value:function(e,t,n){return this.post(e,t,null,n)}}])&&p(t.prototype,n),s&&p(t,s),e}();t.default=m},function(e,t,n){var r;!function(a){"use strict";function i(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,r,a,o){return i((s=i(i(t,e),i(r,o)))<<(c=a)|s>>>32-c,n);var s,c}function s(e,t,n,r,a,i,s){return o(t&n|~t&r,e,t,a,i,s)}function c(e,t,n,r,a,i,s){return o(t&r|n&~r,e,t,a,i,s)}function u(e,t,n,r,a,i,s){return o(t^n^r,e,t,a,i,s)}function l(e,t,n,r,a,i,s){return o(n^(t|~r),e,t,a,i,s)}function p(e,t){var n,r,a,o,p;e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var d=1732584193,f=-271733879,h=-1732584194,m=271733878;for(n=0;n<e.length;n+=16)r=d,a=f,o=h,p=m,d=s(d,f,h,m,e[n],7,-680876936),m=s(m,d,f,h,e[n+1],12,-389564586),h=s(h,m,d,f,e[n+2],17,606105819),f=s(f,h,m,d,e[n+3],22,-1044525330),d=s(d,f,h,m,e[n+4],7,-176418897),m=s(m,d,f,h,e[n+5],12,1200080426),h=s(h,m,d,f,e[n+6],17,-1473231341),f=s(f,h,m,d,e[n+7],22,-45705983),d=s(d,f,h,m,e[n+8],7,1770035416),m=s(m,d,f,h,e[n+9],12,-1958414417),h=s(h,m,d,f,e[n+10],17,-42063),f=s(f,h,m,d,e[n+11],22,-1990404162),d=s(d,f,h,m,e[n+12],7,1804603682),m=s(m,d,f,h,e[n+13],12,-40341101),h=s(h,m,d,f,e[n+14],17,-1502002290),d=c(d,f=s(f,h,m,d,e[n+15],22,1236535329),h,m,e[n+1],5,-165796510),m=c(m,d,f,h,e[n+6],9,-1069501632),h=c(h,m,d,f,e[n+11],14,643717713),f=c(f,h,m,d,e[n],20,-373897302),d=c(d,f,h,m,e[n+5],5,-701558691),m=c(m,d,f,h,e[n+10],9,38016083),h=c(h,m,d,f,e[n+15],14,-660478335),f=c(f,h,m,d,e[n+4],20,-405537848),d=c(d,f,h,m,e[n+9],5,568446438),m=c(m,d,f,h,e[n+14],9,-1019803690),h=c(h,m,d,f,e[n+3],14,-187363961),f=c(f,h,m,d,e[n+8],20,1163531501),d=c(d,f,h,m,e[n+13],5,-1444681467),m=c(m,d,f,h,e[n+2],9,-51403784),h=c(h,m,d,f,e[n+7],14,1735328473),d=u(d,f=c(f,h,m,d,e[n+12],20,-1926607734),h,m,e[n+5],4,-378558),m=u(m,d,f,h,e[n+8],11,-2022574463),h=u(h,m,d,f,e[n+11],16,1839030562),f=u(f,h,m,d,e[n+14],23,-35309556),d=u(d,f,h,m,e[n+1],4,-1530992060),m=u(m,d,f,h,e[n+4],11,1272893353),h=u(h,m,d,f,e[n+7],16,-155497632),f=u(f,h,m,d,e[n+10],23,-1094730640),d=u(d,f,h,m,e[n+13],4,681279174),m=u(m,d,f,h,e[n],11,-358537222),h=u(h,m,d,f,e[n+3],16,-722521979),f=u(f,h,m,d,e[n+6],23,76029189),d=u(d,f,h,m,e[n+9],4,-640364487),m=u(m,d,f,h,e[n+12],11,-421815835),h=u(h,m,d,f,e[n+15],16,530742520),d=l(d,f=u(f,h,m,d,e[n+2],23,-995338651),h,m,e[n],6,-198630844),m=l(m,d,f,h,e[n+7],10,1126891415),h=l(h,m,d,f,e[n+14],15,-1416354905),f=l(f,h,m,d,e[n+5],21,-57434055),d=l(d,f,h,m,e[n+12],6,1700485571),m=l(m,d,f,h,e[n+3],10,-1894986606),h=l(h,m,d,f,e[n+10],15,-1051523),f=l(f,h,m,d,e[n+1],21,-2054922799),d=l(d,f,h,m,e[n+8],6,1873313359),m=l(m,d,f,h,e[n+15],10,-30611744),h=l(h,m,d,f,e[n+6],15,-1560198380),f=l(f,h,m,d,e[n+13],21,1309151649),d=l(d,f,h,m,e[n+4],6,-145523070),m=l(m,d,f,h,e[n+11],10,-1120210379),h=l(h,m,d,f,e[n+2],15,718787259),f=l(f,h,m,d,e[n+9],21,-343485551),d=i(d,r),f=i(f,a),h=i(h,o),m=i(m,p);return[d,f,h,m]}function d(e){var t,n="",r=32*e.length;for(t=0;t<r;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function f(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function h(e){var t,n,r="";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),r+="0123456789abcdef".charAt(t>>>4&15)+"0123456789abcdef".charAt(15&t);return r}function m(e){return unescape(encodeURIComponent(e))}function v(e){return function(e){return d(p(f(e),8*e.length))}(m(e))}function g(e,t){return function(e,t){var n,r,a=f(e),i=[],o=[];for(i[15]=o[15]=void 0,a.length>16&&(a=p(a,8*e.length)),n=0;n<16;n+=1)i[n]=909522486^a[n],o[n]=1549556828^a[n];return r=p(i.concat(f(t)),512+8*t.length),d(p(o.concat(r),640))}(m(e),m(t))}function y(e,t,n){return t?n?g(t,e):h(g(t,e)):n?v(e):h(v(e))}void 0===(r=function(){return y}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";const r=n(419)("superagent"),a=n(426),i=n(434),o=n(446),s=n(71).parse,c=n(71).format,u=n(71).resolve;let l=n(186);const p=n(53),d=n(185),f=n(448).unzip,h=n(449),m=n(450),v=n(178),g=n(120),y=n(70),x=n(188),b=n(187),w=n(31),_=n(454),k=n(455),E=n(121);function S(e,n){return"function"==typeof n?new t.Request("GET",e).end(n):1==arguments.length?new t.Request("GET",e):new t.Request(e,n)}function R(){}function T(e){const t=`node-superagent/${_.version}`;e._header={"user-agent":t},e.header={"User-Agent":t}}function A(e,t){p.call(this),"string"!=typeof t&&(t=c(t)),this._agent=!1,this._formData=null,this.method=e,this.url=t,T(this),this.writable=!0,this._redirects=0,this.redirects("HEAD"===e?0:5),this.cookies="",this.qs={},this._query=[],this.qsRaw=this._query,this._redirectList=[],this._streamRequest=!1,this.once("end",this.clearTimeout.bind(this))}function D(e){return/[\/+]json($|[^-\w])/.test(e)}function O(e){return~[301,302,303,305,307,308].indexOf(e)}(t=e.exports=S).Request=A,t.agent=n(457),t.Response=o,m.define({"application/x-www-form-urlencoded":["form","urlencoded","form-data"]},!0),t.protocols={"http:":g,"https:":v},t.serialize={"application/x-www-form-urlencoded":x.stringify,"application/json":JSON.stringify},t.parse=n(459),w.inherits(A,p),k(A.prototype),A.prototype.attach=function(e,t,n){if(t){if(this._data)throw Error("superagent can't mix .send() and .attach()");let a=n||{};"string"==typeof n&&(a={filename:n}),"string"==typeof t?(a.filename||(a.filename=t),r("creating `fs.ReadStream` instance for file: %s",t),t=y.createReadStream(t)):!a.filename&&t.path&&(a.filename=t.path),this._getFormData().append(e,t,a)}return this},A.prototype._getFormData=function(){return this._formData||(this._formData=new i,this._formData.on("error",e=>{this.emit("error",e),this.abort()})),this._formData},A.prototype.agent=function(e){return arguments.length?(this._agent=e,this):this._agent},A.prototype.type=function(e){return this.set("Content-Type",~e.indexOf("/")?e:m.lookup(e))},A.prototype.accept=function(e){return this.set("Accept",~e.indexOf("/")?e:m.lookup(e))},A.prototype.query=function(e){return"string"==typeof e?this._query.push(e):h(this.qs,e),this},A.prototype.write=function(e,t){const n=this.request();return this._streamRequest||(this._streamRequest=!0),n.write(e,t)},A.prototype.pipe=function(e,t){return this.piped=!0,this.buffer(!1),this.end(),this._pipeContinue(e,t)},A.prototype._pipeContinue=function(e,t){return this.req.once("response",n=>{if(O(n.statusCode)&&this._redirects++!=this._maxRedirects)return this._redirect(n)._pipeContinue(e,t);if(this.res=n,this._emitResponse(),!this._aborted){if(this._shouldUnzip(n)){const r=b.createUnzip();r.on("error",t=>{t&&"Z_BUF_ERROR"===t.code?e.emit("end"):e.emit("error",t)}),n.pipe(r).pipe(e,t)}else n.pipe(e,t);n.once("end",()=>{this.emit("end")})}}),e},A.prototype.buffer=function(e){return this._buffer=!1!==e,this},A.prototype._redirect=function(e){let t=e.headers.location;if(!t)return this.callback(new Error("No location header for redirect"),e);r("redirect %s -> %s",this.url,t),t=u(this.url,t),e.resume();let n=this.req._headers;const a=s(t).host!==s(this.url).host;return 301!=e.statusCode&&302!=e.statusCode||(n=d.cleanHeader(this.req._headers,a),this.method="HEAD"==this.method?"HEAD":"GET",this._data=null),303==e.statusCode&&(n=d.cleanHeader(this.req._headers,a),this.method="GET",this._data=null),delete n.host,delete this.req,delete this._formData,T(this),this._endCalled=!1,this.url=t,this.qs={},this._query.length=0,this.set(n),this.emit("redirect",e),this._redirectList.push(this.url),this.end(this._callback),this},A.prototype.auth=function(e,t,n){1===arguments.length&&(t=""),"object"==typeof t&&null!==t&&(n=t,t=""),n||(n={type:"basic"});var r=function(e){return new Buffer(e).toString("base64")};return this._auth(e,t,n,r)},A.prototype.ca=function(e){return this._ca=e,this},A.prototype.key=function(e){return this._key=e,this},A.prototype.pfx=function(e){return"object"!=typeof e||Buffer.isBuffer(e)?this._pfx=e:(this._pfx=e.pfx,this._passphrase=e.passphrase),this},A.prototype.cert=function(e){return this._cert=e,this},A.prototype.request=function(){if(this.req)return this.req;const e={};try{const e=x.stringify(this.qs,{indices:!1,strictNullHandling:!0});e&&(this.qs={},this._query.push(e)),this._finalizeQueryString()}catch(e){return this.emit("error",e)}let n=this.url;const r=this._retries;if(0!=n.indexOf("http")&&(n=`http://${n}`),n=s(n),!0===/^https?\+unix:/.test(n.protocol)){n.protocol=`${n.protocol.split("+")[0]}:`;const t=n.path.match(/^([^\/]+)(.+)$/);e.socketPath=t[1].replace(/%2F/g,"/"),n.path=t[2]}e.method=this.method,e.port=n.port,e.path=n.path,e.host=n.hostname,e.ca=this._ca,e.key=this._key,e.pfx=this._pfx,e.cert=this._cert,e.passphrase=this._passphrase,e.agent=this._agent;const a=t.protocols[n.protocol],i=this.req=a.request(e);if(i.setNoDelay(!0),"HEAD"!=e.method&&i.setHeader("Accept-Encoding","gzip, deflate"),this.protocol=n.protocol,this.host=n.host,i.once("drain",()=>{this.emit("drain")}),i.once("error",e=>{this._aborted||this._retries===r&&(this.response||this.callback(e))}),n.auth){const e=n.auth.split(":");this.auth(e[0],e[1])}this.username&&this.password&&this.auth(this.username,this.password);for(const e in this.header)this.header.hasOwnProperty(e)&&i.setHeader(e,this.header[e]);if(this.cookies)if(this.header.hasOwnProperty("cookie")){const e=new E.CookieJar;e.setCookies(this.header.cookie.split(";")),e.setCookies(this.cookies.split(";")),i.setHeader("Cookie",e.getCookies(E.CookieAccessInfo.All).toValueString())}else i.setHeader("Cookie",this.cookies);return i},A.prototype.callback=function(e,t){if(this._shouldRetry(e,t))return this._retry();const n=this._callback||R;if(this.clearTimeout(),this.called)return console.warn("superagent: double callback bug");if(this.called=!0,!e)try{if(!this._isResponseOK(t)){let n="Unsuccessful HTTP response";t&&(n=g.STATUS_CODES[t.status]||n),(e=new Error(n)).status=t?t.status:void 0}}catch(t){e=t}if(!e)return n(null,t);e.response=t,this._maxRetries&&(e.retries=this._retries-1),e&&this.listeners("error").length>0&&this.emit("error",e),n(e,t)},A.prototype._isHost=function(e){return Buffer.isBuffer(e)||e instanceof p||e instanceof i},A.prototype._emitResponse=function(e,t){const n=new o(this);return this.response=n,n.redirects=this._redirectList,void 0!==e&&(n.body=e),n.files=t,this.emit("response",n),n},A.prototype.end=function(e){return this.request(),r("%s %s",this.method,this.url),this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=e||R,this._end()},A.prototype._end=function(){let e=this._data;const n=this.req;let i=this._buffer;const o=this.method;if(this._setTimeouts(),"HEAD"!=o&&!n._headerSent){if("string"!=typeof e){let r=n.getHeader("Content-Type");r&&(r=r.split(";")[0]);let a=t.serialize[r];!a&&D(r)&&(a=t.serialize["application/json"]),a&&(e=a(e))}e&&!n.getHeader("Content-Length")&&n.setHeader("Content-Length",Buffer.isBuffer(e)?e.length:Buffer.byteLength(e))}n.once("response",e=>{if(r("%s %s -> %s",this.method,this.url,e.statusCode),this._responseTimeoutTimer&&clearTimeout(this._responseTimeoutTimer),this.piped)return;const o=this._maxRedirects,s=d.type(e.headers["content-type"]||"")||"text/plain",c=s.split("/")[0],u="multipart"==c,l=O(e.statusCode);let p=this._parser;const h=this._responseType;if(this.res=e,l&&this._redirects++!=o)return this._redirect(e);if("HEAD"==this.method)return this.emit("end"),void this.callback(null,this._emitResponse());if(this._shouldUnzip(e)&&f(n,e),!p)if(h)p=t.parse.image,i=!0;else if(u){const e=new a.IncomingForm;p=e.parse.bind(e),i=!0}else!function(e){const t=e.split("/")[0];return"image"==t||"video"==t}(s)?t.parse[s]?p=t.parse[s]:"text"==c?(p=t.parse.text,i=!1!==i):D(s)?(p=t.parse["application/json"],i=!1!==i):i&&(p=t.parse.text):(p=t.parse.image,i=!0);(void 0===i&&function(e){const t=e.split("/"),n=t[0],r=t[1];return"text"==n||"x-www-form-urlencoded"==r}(s)||D(s))&&(i=!0);let m=!1;if(i){let t=this._maxResponseSize||2e8;e.on("data",n=>{if((t-=n.byteLength||n.length)<0){const t=Error("Maximum response size reached");t.code="ETOOLARGE",m=!1,e.destroy(t)}})}if(p)try{m=i,p(e,(e,t,n)=>{if(!this.timedout)return e&&!this._aborted?this.callback(e):void(m&&(this.emit("end"),this.callback(null,this._emitResponse(t,n))))})}catch(e){return void this.callback(e)}if(this.res=e,i)e.once("error",e=>{m=!1,this.callback(e,null)}),m||e.once("end",()=>{r("end %s %s",this.method,this.url),this.emit("end"),this.callback(null,this._emitResponse())});else{if(r("unbuffered %s %s",this.method,this.url),this.callback(null,this._emitResponse()),u)return;e.once("end",()=>{r("end %s %s",this.method,this.url),this.emit("end")})}}),this.emit("request",this);const s=()=>{const e=n.getHeader("Content-Length");let t=0;const r=new p.Transform;return r._transform=(n,r,a)=>{t+=n.length,this.emit("progress",{direction:"upload",lengthComputable:!0,loaded:t,total:e}),a(null,n)},r},c=this._formData;if(c){const e=c.getHeaders();for(const t in e)r('setting FormData header: "%s: %s"',t,e[t]),n.setHeader(t,e[t]);c.getLength((e,t)=>{r("got FormData Content-Length: %s",t),"number"==typeof t&&n.setHeader("Content-Length",t),c.pipe(s()).pipe(n)})}else Buffer.isBuffer(e)?(e=>{const t=new p.Readable,n=e.length,r=n%16384,a=n-r;for(let n=0;n<a;n+=16384){const r=e.slice(n,n+16384);t.push(r)}if(r>0){const n=e.slice(-r);t.push(n)}return t.push(null),t})(e).pipe(s()).pipe(n):n.end(e);return this},A.prototype._shouldUnzip=e=>204!==e.statusCode&&304!==e.statusCode&&("0"!==e.headers["content-length"]&&/^\s*(?:deflate|gzip)\s*$/.test(e.headers["content-encoding"])),-1==l.indexOf("del")&&(l=l.slice(0)).push("del"),l.forEach(e=>{const t=e;e=(e="del"==e?"delete":e).toUpperCase(),S[t]=(t,n,r)=>{const a=S(e,t);return"function"==typeof n&&(r=n,n=null),n&&("GET"===e||"HEAD"===e?a.query(n):a.send(n)),r&&a.end(r),a}})},function(e,t,n){"use strict";e.exports=function(e){function t(e){for(var t=0,n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){var n;function o(){if(o.enabled){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=o,s=Number(new Date),c=s-(n||s);i.diff=c,i.prev=n,i.curr=s,n=s,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var u=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,n){if("%%"===e)return e;u++;var a=r.formatters[n];if("function"==typeof a){var o=t[u];e=a.call(i,o),t.splice(u,1),u--}return e}),r.formatArgs.call(i,t),(i.log||r.log).apply(i,t)}}return o.namespace=e,o.enabled=r.enabled(e),o.useColors=r.useColors(),o.color=t(e),o.destroy=a,o.extend=i,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function a(){var e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){return r(this.namespace+(void 0===t?":":t)+e)}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){r.enable("")},r.enable=function(e){var t;r.save(e),r.names=[],r.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),a=n.length;for(t=0;t<a;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){var i=r.instances[t];i.enabled=r.enabled(i.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(421),Object.keys(e).forEach(function(t){r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("buffer")},function(e,t){e.exports=require("string_decoder")},function(e,t){e.exports=require("https")},function(e,t,n){var r=n(180),a=n(181);e.exports=function(e,t,n,i){var o=n.keyedList?n.keyedList[n.index]:n.index;n.jobs[o]=function(e,t,n,a){var i;i=2==e.length?e(n,r(a)):e(n,t,r(a));return i}(t,o,e[o],function(e,t){o in n.jobs&&(delete n.jobs[o],e?a(n):n.results[o]=t,i(e,n.results))})}},function(e,t,n){var r=n(443);e.exports=function(e){var t=!1;return r(function(){t=!0}),function(n,a){t?e(n,a):r(function(){e(n,a)})}}},function(e,t){e.exports=function(e){Object.keys(e.jobs).forEach(function(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}.bind(e)),e.jobs={}}},function(e,t){e.exports=function(e,t){var n=!Array.isArray(e),r={index:0,keyedList:n||t?Object.keys(e):null,jobs:{},results:n?{}:[],size:n?Object.keys(e).length:e.length};t&&r.keyedList.sort(n?t:function(n,r){return t(e[n],e[r])});return r}},function(e,t,n){var r=n(181),a=n(180);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,r(this),a(e)(null,this.results)}},function(e,t,n){var r=n(179),a=n(182),i=n(183);function o(e,t){return e<t?-1:e>t?1:0}e.exports=function(e,t,n,o){var s=a(e,n);return r(e,t,s,function n(a,i){a?o(a,i):(s.index++,s.index<(s.keyedList||e).length?r(e,t,s,n):o(null,s.results))}),i.bind(s,o)},e.exports.ascending=o,e.exports.descending=function(e,t){return-1*o(e,t)}},function(e,t,n){"use strict";t.type=function(e){return e.split(/ *; */).shift()},t.params=function(e){return e.split(/ *; */).reduce(function(e,t){var n=t.split(/ *= */),r=n.shift(),a=n.shift();return r&&a&&(e[r]=a),e},{})},t.parseLinks=function(e){return e.split(/ *, */).reduce(function(e,t){var n=t.split(/ *; */),r=n[0].slice(1,-1);return e[n[1].split(/ *= */)[1].slice(1,-1)]=r,e},{})},t.cleanHeader=function(e,t){return delete e["content-type"],delete e["content-length"],delete e["transfer-encoding"],delete e.host,t&&(delete e.authorization,delete e.cookie),e}},function(e,t,n){"use strict";
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=n(120);e.exports=r.METHODS&&r.METHODS.map(function(e){return e.toLowerCase()})||["get","post","put","head","delete","options","trace","copy","lock","mkcol","move","purge","propfind","proppatch","unlock","report","mkactivity","checkout","merge","m-search","notify","subscribe","unsubscribe","patch","search","connect"]},function(e,t){e.exports=require("zlib")},function(e,t,n){"use strict";var r=n(452),a=n(453),i=n(190);e.exports={formats:i,parse:a,stringify:r}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),i=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:i,assign:function(e,t){return Object.keys(t).reduce(function(e,n){return e[n]=t[n],e},e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],i=a.obj[a.prop],o=Object.keys(i),s=0;s<o.length;++s){var c=o[s],u=i[c];"object"==typeof u&&null!==u&&-1===n.indexOf(u)&&(t.push({obj:i,prop:c}),n.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(Array.isArray(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n){if(0===e.length)return e;var r="string"==typeof e?e:String(e);if("iso-8859-1"===n)return escape(r).replace(/%u[0-9a-f]{4}/gi,function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"});for(var i="",o=0;o<r.length;++o){var s=r.charCodeAt(o);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?i+=r.charAt(o):s<128?i+=a[s]:s<2048?i+=a[192|s>>6]+a[128|63&s]:s<55296||s>=57344?i+=a[224|s>>12]+a[128|s>>6&63]+a[128|63&s]:(o+=1,s=65536+((1023&s)<<10|1023&r.charCodeAt(o)),i+=a[240|s>>18]+a[128|s>>12&63]+a[128|s>>6&63]+a[128|63&s])}return i},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,n,a){if(!n)return t;if("object"!=typeof n){if(Array.isArray(t))t.push(n);else{if("object"!=typeof t)return[t,n];(a&&(a.plainObjects||a.allowPrototypes)||!r.call(Object.prototype,n))&&(t[n]=!0)}return t}if("object"!=typeof t)return[t].concat(n);var o=t;return Array.isArray(t)&&!Array.isArray(n)&&(o=i(t,a)),Array.isArray(t)&&Array.isArray(n)?(n.forEach(function(n,i){r.call(t,i)?t[i]&&"object"==typeof t[i]?t[i]=e(t[i],n,a):t.push(n):t[i]=n}),t):Object.keys(n).reduce(function(t,i){var o=n[i];return r.call(t,i)?t[i]=e(t[i],o,a):t[i]=o,t},o)}}},function(e,t,n){"use strict";var r=String.prototype.replace,a=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return r.call(e,a,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(171)),a=n(41),i=(o(n(115)),o(n(89)),o(n(122)));function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u=function(e){return encodeURIComponent(e.replace(/:/g,"\\:").replace(/\(/g,"\\(").replace(/\)/g,"\\)"))},l=function(e){return(0,r.default)(a.namespaces.expand(e)).substr(0,8)},p=function(e,t,n){var r=t.trim().replace(/\s\s+/g," ");return 1===(r=function(e){return 0===e.indexOf("title")||0===e.indexOf("tag.literal")||0===e.indexOf("metadata.predicate.literal")&&0!==e.indexOf("metadata.predicate.literal_")||0===e.indexOf("related.metadata.predicate.literal")&&0!==e.indexOf("related.metadata.predicate.literal_")}(e)&&!0!==n?r.split(" ").map(function(e){return e.length<15?u(e):u(e.substr(0,15))}):function(e){return e.indexOf("predicate.literal_s")>0||-1===e.indexOf("predicate.literal")}(e)?-1===r.indexOf(" ")?[u(r)]:['"'.concat(u(r),'"')]:r.split(" ").map(function(e){return u(e)})).length?r[0]:"(".concat(r.join("+AND+"),")")},d=function e(t,n){var r=[];return Object.keys(t).forEach(function(n){var i=t[n];switch(i=Array.isArray(i)?i.map(function(e){return a.namespaces.expand(e)}):a.namespaces.expand(i),n){case"or":r.push(e(i,!1));break;case"and":r.push(e(i,!0));break;default:if("string"==typeof i)r.push("".concat(n,":").concat(p(n,i)));else if(Array.isArray(i)){var o=[];i.forEach(function(e){o.push("".concat(n,":").concat(p(n,e)))}),o.length>1?r.push("(".concat(o.join("+OR+"),")")):r.push("".concat(o.join("+OR+")))}else c(i)}}),r.length>1?"(".concat(r.join(n?"+AND+":"+OR+"),")"):r.join("".concat(n?"+AND+":"+OR+"))},f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entrystore=t,this.properties=[],this.relatedProperties=[],this.params=new Map,this.modifiers=new Map,this._and=new Set,this._or=new Set,this.facetpredicates={},this.relatedFacetpredicates={}}var t,n,r;return t=e,(n=[{key:"_q",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return this.params.set(e,t),null===n&&this.modifiers.set(e,n),this}},{key:"title",value:function(e,t){return this._q("title",e,t)}},{key:"description",value:function(e,t){return this._q("description",e,t)}},{key:"tagLiteral",value:function(e,t){return this._q("tag.literal",e,t)}},{key:"tagURI",value:function(e,t){return this._q("tag.uri",e,t)}},{key:"lang",value:function(e,t){return this._q("lang",e,t)}},{key:"all",value:function(e,t){return this._q("all",e,t)}},{key:"subject",value:function(e,t){return this._q("metadata.subject",e,t)}},{key:"predicate",value:function(e,t){return this._q("metadata.predicate",e,t)}},{key:"objectLiteral",value:function(e,t){return this._q("metadata.object.literal",e,t)}},{key:"objectUri",value:function(e,t){return this._q("metadata.object.uri",e,t)}},{key:"resource",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._q("resource",e,t)}},{key:"uri",value:function(e,t){return this._q("uri",e,t)}},{key:"rdfType",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return Array.isArray(e)?this._q("rdfType",e.map(function(e){return a.namespaces.expand(e)}),t):this._q("rdfType",a.namespaces.expand(e),t)}},{key:"creator",value:function(e,t){return this._q("creator",e,t)}},{key:"contributors",value:function(e,t){return this._q("contributors",e,t)}},{key:"lists",value:function(e,t){return this._q("lists",e,t)}},{key:"created",value:function(e,t){return this._q("created",e,t)}},{key:"modified",value:function(e,t){return this._q("modified",e,t)}},{key:"entryType",value:function(e,t){return this._q("entryType",e,t)}},{key:"graphType",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._q("graphType",e,t)}},{key:"resourceType",value:function(e,t){return this._q("resourceType",e,t)}},{key:"publicRead",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._q("public",!0===e?"true":"false")}},{key:"admin",value:function(e,t){return this._q("acl.admin",e,t)}},{key:"metadataRead",value:function(e,t){return this._q("acl.metadata.r",e,t)}},{key:"metadataWrite",value:function(e,t){return this._q("acl.metadata.rw",e,t)}},{key:"resourceRead",value:function(e,t){return this._q("acl.resource.r",e,t)}},{key:"resourceWrite",value:function(e,t){return this._q("acl.resource.rw",e,t)}},{key:"status",value:function(e,t){return this._q("status",e,t)}},{key:"context",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=function(e){return e&&e.getResourceURI?e.getResourceURI():"string"==typeof e&&""!==e?0===e.indexOf("http")?e:t._entrystore.getContextById(e).getResourceURI():null};if(Array.isArray(e)){var a=e.map(r).filter(function(e){return null!==e});a.length>0&&this._q("context",a,n)}else{var i=r(e);if(null!==i)return this._q("context",i,n)}return this}},{key:"or",value:function(e){return this._or.add(e),this}},{key:"and",value:function(e){return this._and.add(e),this}},{key:"title_lang",value:function(e,t){}},{key:"titleWithLanguage",value:function(e,t){return this._title_lang={value:e,language:t},this}},{key:"literalProperty",value:function(e,t,n){var r,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"ngram",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=l(e);switch(a){case"text":r="literal_t";break;case"string":r="literal_s";break;case"ngram":default:r="literal"}return(i?this.relatedProperties:this.properties).push({md5:o,pred:e,object:t,modifier:n,nodetype:r}),this}},{key:"integerProperty",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=l(e);return(r?this.relatedProperties:this.properties).push({md5:a,pred:e,object:t,modifier:n,nodetype:"integer"}),this}},{key:"uriProperty",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=l(e);return(r?this.relatedProperties:this.properties).push({md5:i,pred:e,object:Array.isArray(t)?t.map(function(e){return a.namespaces.expand(e)}):a.namespaces.expand(t),modifier:n,nodetype:"uri"}),this}},{key:"limit",value:function(e){return this._limit=e,this}},{key:"getLimit",value:function(){return this._limit}},{key:"sort",value:function(e){return this._sort=e,this}},{key:"offset",value:function(e){return this._offset=e,this}},{key:"facet",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return this.facets=this.facets||[],t&&(this.facet2predicate=this.facet2predicate||{},this.facet2predicate[e]=a.namespaces.expand(t),n?this.relatedFacetpredicates[t]=!0:this.facetpredicates[t]=!0),this.facets.push(e),this}},{key:"literalFacet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.facet("".concat(t?"related.":"","metadata.predicate.literal_s.").concat(l(e)),e,t),this}},{key:"uriFacet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.facet("".concat(t?"related.":"","metadata.predicate.uri.").concat(l(e)),e,t),this}},{key:"integerFacet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.facet("".concat(t?"related.":"","metadata.predicate.integer.").concat(l(e)),e,t),this}},{key:"disjunctiveProperties",value:function(){return this.disjunctiveProperties=!0,this}},{key:"disjunctive",value:function(){return this.disjunctive=!0,this}},{key:"list",value:function(e){return new i.default(this._entrystore,this,e)}},{key:"getQuery",value:function(){var e=this,t=[];if(null!=this._title_lang&&t.push("title.".concat(this._title_lang.lang,":").concat(p(this._title_lang.lang,this._title_lang.value))),this.params.forEach(function(n,r){var a=e.modifiers.get(r);if("string"==typeof n&&""!==n)!0===a||"not"===a?t.push("NOT(".concat(r,":").concat(p(r,n),")")):t.push("".concat(r,":").concat(p(r,n)));else if(Array.isArray(n)&&n.length>0){var i=[];n.forEach(function(e){"string"==typeof e&&i.push("".concat(r,":").concat(p(r,e)))}),!0===a||"not"===a?t.push("NOT(".concat(i.join("+OR+"),")")):"and"===a?t.push("(".concat(i.join("+AND+"),")")):t.push("(".concat(i.join("+OR+"),")"))}}),this.relatedProperties.length>0){var n=[];this.relatedProperties.forEach(function(t){var r=t.object,a="related.metadata.predicate.".concat(t.nodetype,".").concat(t.md5);"string"==typeof r?n.push("".concat(a,":").concat(p(a,r,e.relatedFacetpredicates[t.pred]))):Array.isArray(r)&&r.length>0&&r.forEach(function(r){n.push("".concat(a,":").concat(p(a,r,e.relatedFacetpredicates[t.pred])))})}),t.push("(".concat(n.join("+OR+"),")"))}if(this.disjunctiveProperties||this.disjunctive){var r=[];this.properties.forEach(function(t){var n=t.object,a="metadata.predicate.".concat(t.nodetype,".").concat(t.md5);"string"==typeof n?r.push("".concat(a,":").concat(p(a,n,e.facetpredicates[t.pred]))):Array.isArray(n)&&n.length>0&&n.forEach(function(n){r.push("".concat(a,":").concat(p(a,n,e.facetpredicates[t.pred])))})}),r.length>0&&t.push("(".concat(r.join("+OR+"),")"))}else this.properties.forEach(function(n){var r=n.object,a="metadata.predicate.".concat(n.nodetype,".").concat(n.md5);if("string"==typeof r)!0===n.modifier||"not"===n.modifier?t.push("NOT(".concat(a,":").concat(p(a,r,e.facetpredicates[n.pred]),")")):t.push("".concat(a,":").concat(p(a,r,e.facetpredicates[n.pred])));else if(Array.isArray(r)&&r.length>0){var i=[];r.forEach(function(t){i.push("".concat(a,":").concat(p(a,t,e.facetpredicates[n.pred])))},e),!0===n.modifier||"not"===n.modifier?t.push("NOT(".concat(i.join("+OR+"),")")):"and"===n.modifier?t.push("(".concat(i.join("+AND+"),")")):t.push("(".concat(i.join("+OR+"),")"))}},this);this._and.forEach(function(e){t.push(d(e,!0))}),this._or.forEach(function(e){t.push(d(e,!1))});var a="";return null!=this._limit&&(a="&limit=".concat(this._limit)),this._offset&&(a="".concat(a,"&offset=").concat(this._offset)),this._sort&&(a="".concat(a,"&sort=").concat(this._sort||"score+asc")),this.facets&&(a+="&facetFields=".concat(this.facets.join(","))),"".concat(this._entrystore.getBaseURI(),"search?type=solr&query=").concat(t.join(this.disjunctive?"+OR":"+AND+")).concat(a)}},{key:"getEntries",value:function(e){return this.list().getEntries(e)}},{key:"forEach",value:function(e){return this.list().forEach(e)}}])&&s(t.prototype,n),r&&s(t,r),e}();t.default=f},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(93)),a=s(n(39)),i=s(n(40)),o=n(91);function s(e){return e&&e.__esModule?e:{default:e}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,p(t).apply(this,arguments))}var n,s,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,i.default),n=t,(s=[{key:"putFile",value:function(e,t){var n,r=this;if((0,o.isBrowser)()&&e instanceof Node){if(null==e.name||""===e.name)throw new Error("Failure, cannot upload resource from input element unless a name attribute is provided.");n=a.default.getPutFileURI(this.getResourceURI())}else n=this.getResourceURI();var i=this.getEntryStore();return i.handleAsync(i.getREST().putFile(n,e,t).then(function(e){return r.getEntry(!0).setRefreshNeeded(),e}),"putFile")}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"application/json",n=this.getEntryStore();return n.handleAsync(n.getREST().put(this.getResourceURI(),e,null,t),"putFile")}},{key:"putText",value:function(e){return this.put(e,"text/plain")}},{key:"putJSON",value:function(e){return this.put(JSON.stringify(e))}},{key:"putXML",value:function(e){var t=e,n=(0,o.isBrowser)()?window.XMLSerializer:r.default.XMLSerializer;if(!(0,o.isBrowser)()||t instanceof Document)try{t=(new n).serializeToString(t)}catch(e){try{t=t.xml}catch(e){throw new Error("Xmlserializer not supported")}}else if("string"!=typeof t)throw new Error("Unsupported format of parameter xml to method putAsXML");return this.put(t,"text/xml")}},{key:"get",value:function(){var e=this.getEntry(!0).getEntryInfo().getFormat(),t=this.getEntryStore();return t.handleAsync(t.getREST().get(this.getResourceURI(),e),"getFile")}},{key:"getText",value:function(){return this.getEntryStore().handleAsync(this.getEntryStore().getREST().get(this.getResourceURI(),"text/plain",!0),"getFile")}},{key:"getJSON",value:function(){var e=this.getEntryStore();return e.handleAsync(e.getREST().get(this.getResourceURI(),"application/json"),"getFile")}},{key:"getXML",value:function(){var e=this.getEntryStore();return e.handleAsync(e.getREST().get(this.getResourceURI(),"text/xml"),"getFile")}}])&&u(n.prototype,s),c&&u(n,c),t}();t.default=f},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(92)),a=i(n(69));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e,t,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var a=Object.getOwnPropertyDescriptor(r,t);return a.get?a.get.call(n):a.value}})(e,t,n||e)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,l(t).apply(this,arguments))}var n,i,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,r.default),n=t,(i=[{key:"getName",value:function(){return this._name}},{key:"setName",value:function(e){var t=this,n=this._name;return this._name=e,this._entryStore.handleAsync(this._entryStore.getREST().put("".concat(this.getEntryURI(),"/name"),JSON.stringify({name:e})).then(function(e){var n=t.getEntry(!0);return n&&(n.getEntryInfo()._name=e),e},function(e){throw t._name=n,e}),"setGroupName")}},{key:"getHomeContext",value:function(){var e=this.getEntryStore(),t=this.getEntry(!0),n=t.getEntryInfo().getGraph().findFirstValue(t.getResourceURI(),a.default.homeContext);if(null!=n)return e.getEntryId(n)}},{key:"setHomeContext",value:function(e,t){var n=this.getEntryStore().getResourceURI("_contexts",e),r=this.getEntry(!0),i=r.getEntryInfo().getGraph();if(i.findAndRemove(r.getResourceURI(),a.default.homeContext),i.add(r.getResourceURI(),a.default.homeContext,{type:"uri",value:n}),!0!==t)return r.getEntryInfo().commit()}},{key:"_update",value:function(e,n){u(l(t.prototype),"_update",this).call(this,e,n),this._name=e.name}}])&&s(n.prototype,i),o&&s(n,o),t}();t.default=d},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"factory",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"html",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"promiseUtil",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"rest",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"solr",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"types",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"Auth",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"Cache",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"Context",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"Entry",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"EntryInfo",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"EntryStore",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"EntryStoreUtil",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"File",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"Graph",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"Group",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"List",{enumerable:!0,get:function(){return x.default}}),Object.defineProperty(t,"Pipeline",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"PrototypeEntry",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(t,"Resource",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"SearchList",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(t,"String",{enumerable:!0,get:function(){return E.default}}),Object.defineProperty(t,"User",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(t,"terms",{enumerable:!0,get:function(){return R.default}}),Object.defineProperty(t,"utils",{enumerable:!0,get:function(){return T.default}}),Object.defineProperty(t,"namespaces",{enumerable:!0,get:function(){return A.namespaces}}),n(196),n(415);var r=D(n(39)),a=D(n(468)),i=D(n(469)),o=D(n(170)),s=D(n(191)),c=D(n(52)),u=D(n(168)),l=D(n(169)),p=D(n(115)),d=D(n(118)),f=D(n(124)),h=D(n(89)),m=D(n(470)),v=D(n(193)),g=D(n(88)),y=D(n(194)),x=D(n(92)),b=D(n(116)),w=D(n(117)),_=D(n(40)),k=D(n(122)),E=D(n(125)),S=D(n(123)),R=D(n(69)),T=D(n(91)),A=n(41);function D(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){n(197),n(405),e.exports=n(47)},function(e,t,n){n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(77),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(149),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(342),n(343),n(345),n(346),n(349),n(350),n(351),n(352),n(353),n(354),n(355),n(356),n(357),n(358),n(359),n(360),n(361),n(362),n(363),n(364),n(365),n(366),n(367),n(368),n(369),n(370),n(371),n(372),n(373),n(374),n(375),n(376),n(377),n(378),n(379),n(380),n(381),n(382),n(383),n(384),n(385),n(386),n(387),n(388),n(389),n(390),n(391),n(392),n(393),n(394),n(395),n(396),n(397),n(398),n(399),n(400),n(401),n(402),n(403),n(404),e.exports=n(47)},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(32),o=n(6),s=n(132),c=n(1),u=n(11),l=n(44),p=n(3),d=n(4),f=n(10),h=n(18),m=n(25),v=n(42),g=n(35),y=n(60),x=n(43),b=n(134),w=n(98),_=n(15),k=n(9),E=n(72),S=n(13),R=n(16),T=n(55),A=n(73),D=n(57),O=n(56),I=n(7),j=n(135),C=n(17),N=n(26),L=n(19),q=n(12).forEach,U=A("hidden"),P=I("toPrimitive"),M=L.set,F=L.getterFor("Symbol"),z=Object.prototype,B=a.Symbol,V=a.JSON,G=V&&V.stringify,Y=_.f,H=k.f,W=b.f,$=E.f,J=T("symbols"),Z=T("op-symbols"),X=T("string-to-symbol-registry"),K=T("symbol-to-string-registry"),Q=T("wks"),ee=a.QObject,te=!ee||!ee.prototype||!ee.prototype.findChild,ne=o&&c(function(){return 7!=g(H({},"a",{get:function(){return H(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=Y(z,t);r&&delete z[t],H(e,t,n),r&&e!==z&&H(z,t,r)}:H,re=function(e,t){var n=J[e]=g(B.prototype);return M(n,{type:"Symbol",tag:e,description:t}),o||(n.description=t),n},ae=s&&"symbol"==typeof B.iterator?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof B},ie=function(e,t,n){e===z&&ie(Z,t,n),d(e);var r=m(t,!0);return d(n),u(J,r)?(n.enumerable?(u(e,U)&&e[U][r]&&(e[U][r]=!1),n=g(n,{enumerable:v(0,!1)})):(u(e,U)||H(e,U,v(1,{})),e[U][r]=!0),ne(e,r,n)):H(e,r,n)},oe=function(e,t){d(e);var n=h(t),r=y(n).concat(le(n));return q(r,function(t){o&&!se.call(n,t)||ie(e,t,n[t])}),e},se=function(e){var t=m(e,!0),n=$.call(this,t);return!(this===z&&u(J,t)&&!u(Z,t))&&(!(n||!u(this,t)||!u(J,t)||u(this,U)&&this[U][t])||n)},ce=function(e,t){var n=h(e),r=m(t,!0);if(n!==z||!u(J,r)||u(Z,r)){var a=Y(n,r);return!a||!u(J,r)||u(n,U)&&n[U][r]||(a.enumerable=!0),a}},ue=function(e){var t=W(h(e)),n=[];return q(t,function(e){u(J,e)||u(D,e)||n.push(e)}),n},le=function(e){var t=e===z,n=W(t?Z:h(e)),r=[];return q(n,function(e){!u(J,e)||t&&!u(z,e)||r.push(J[e])}),r};s||(R((B=function(){if(this instanceof B)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=O(e),n=function(e){this===z&&n.call(Z,e),u(this,U)&&u(this[U],t)&&(this[U][t]=!1),ne(this,t,v(1,e))};return o&&te&&ne(z,t,{configurable:!0,set:n}),re(t,e)}).prototype,"toString",function(){return F(this).tag}),E.f=se,k.f=ie,_.f=ce,x.f=b.f=ue,w.f=le,o&&(H(B.prototype,"description",{configurable:!0,get:function(){return F(this).description}}),i||R(z,"propertyIsEnumerable",se,{unsafe:!0})),j.f=function(e){return re(I(e),e)}),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:B}),q(y(Q),function(e){C(e)}),r({target:"Symbol",stat:!0,forced:!s},{for:function(e){var t=String(e);if(u(X,t))return X[t];var n=B(t);return X[t]=n,K[n]=t,n},keyFor:function(e){if(!ae(e))throw TypeError(e+" is not a symbol");if(u(K,e))return K[e]},useSetter:function(){te=!0},useSimple:function(){te=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!o},{create:function(e,t){return void 0===t?g(e):oe(g(e),t)},defineProperty:ie,defineProperties:oe,getOwnPropertyDescriptor:ce}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ue,getOwnPropertySymbols:le}),r({target:"Object",stat:!0,forced:c(function(){w.f(1)})},{getOwnPropertySymbols:function(e){return w.f(f(e))}}),V&&r({target:"JSON",stat:!0,forced:!s||c(function(){var e=B();return"[null]"!=G([e])||"{}"!=G({a:e})||"{}"!=G(Object(e))})},{stringify:function(e){for(var t,n,r=[e],a=1;arguments.length>a;)r.push(arguments[a++]);if(n=t=r[1],(p(t)||void 0!==e)&&!ae(e))return l(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ae(t))return t}),r[1]=t,G.apply(V,r)}}),B.prototype[P]||S(B.prototype,P,B.prototype.valueOf),N(B,"Symbol"),D[U]=!0},function(e,t,n){n(17)("asyncIterator")},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(2),o=n(11),s=n(3),c=n(9).f,u=n(130),l=i.Symbol;if(a&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var p={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new l(e):void 0===e?l():l(e);return""===e&&(p[t]=!0),t};u(d,l);var f=d.prototype=l.prototype;f.constructor=d;var h=f.toString,m="Symbol(test)"==String(l("test")),v=/^Symbol\((.*)\)[^)]+$/;c(f,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,t=h.call(e);if(o(p,e))return"";var n=m?t.slice(7,-1):t.replace(v,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},function(e,t,n){n(17)("hasInstance")},function(e,t,n){n(17)("isConcatSpreadable")},function(e,t,n){n(17)("iterator")},function(e,t,n){n(17)("match")},function(e,t,n){n(17)("matchAll")},function(e,t,n){n(17)("replace")},function(e,t,n){n(17)("search")},function(e,t,n){n(17)("species")},function(e,t,n){n(17)("split")},function(e,t,n){n(17)("toPrimitive")},function(e,t,n){n(17)("toStringTag")},function(e,t,n){n(17)("unscopables")},function(e,t,n){var r=n(0),a=n(136);r({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(e,t,n){n(0)({target:"Object",stat:!0,sham:!n(6)},{create:n(35)})},function(e,t,n){var r=n(0),a=n(6);r({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperty:n(9).f})},function(e,t,n){var r=n(0),a=n(6);r({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperties:n(99)})},function(e,t,n){var r=n(0),a=n(137).entries;r({target:"Object",stat:!0},{entries:function(e){return a(e)}})},function(e,t,n){var r=n(0),a=n(62),i=n(1),o=n(3),s=n(45).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i(function(){c(1)}),sham:!a},{freeze:function(e){return c&&o(e)?c(s(e)):e}})},function(e,t,n){var r=n(0),a=n(63),i=n(46);r({target:"Object",stat:!0},{fromEntries:function(e){var t={};return a(e,function(e,n){i(t,e,n)},void 0,!0),t}})},function(e,t,n){var r=n(0),a=n(1),i=n(18),o=n(15).f,s=n(6),c=a(function(){o(1)});r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(e,t){return o(i(e),t)}})},function(e,t,n){var r=n(0),a=n(6),i=n(96),o=n(18),s=n(15),c=n(46);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(e){for(var t,n,r=o(e),a=s.f,u=i(r),l={},p=0;u.length>p;)void 0!==(n=a(r,t=u[p++]))&&c(l,t,n);return l}})},function(e,t,n){var r=n(0),a=n(1),i=n(134).f;r({target:"Object",stat:!0,forced:a(function(){return!Object.getOwnPropertyNames(1)})},{getOwnPropertyNames:i})},function(e,t,n){var r=n(0),a=n(1),i=n(10),o=n(27),s=n(101);r({target:"Object",stat:!0,forced:a(function(){o(1)}),sham:!s},{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){n(0)({target:"Object",stat:!0},{is:n(139)})},function(e,t,n){var r=n(0),a=n(1),i=n(3),o=Object.isExtensible;r({target:"Object",stat:!0,forced:a(function(){o(1)})},{isExtensible:function(e){return!!i(e)&&(!o||o(e))}})},function(e,t,n){var r=n(0),a=n(1),i=n(3),o=Object.isFrozen;r({target:"Object",stat:!0,forced:a(function(){o(1)})},{isFrozen:function(e){return!i(e)||!!o&&o(e)}})},function(e,t,n){var r=n(0),a=n(1),i=n(3),o=Object.isSealed;r({target:"Object",stat:!0,forced:a(function(){o(1)})},{isSealed:function(e){return!i(e)||!!o&&o(e)}})},function(e,t,n){var r=n(0),a=n(10),i=n(60);r({target:"Object",stat:!0,forced:n(1)(function(){i(1)})},{keys:function(e){return i(a(e))}})},function(e,t,n){var r=n(0),a=n(3),i=n(45).onFreeze,o=n(62),s=n(1),c=Object.preventExtensions;r({target:"Object",stat:!0,forced:s(function(){c(1)}),sham:!o},{preventExtensions:function(e){return c&&a(e)?c(i(e)):e}})},function(e,t,n){var r=n(0),a=n(3),i=n(45).onFreeze,o=n(62),s=n(1),c=Object.seal;r({target:"Object",stat:!0,forced:s(function(){c(1)}),sham:!o},{seal:function(e){return c&&a(e)?c(i(e)):e}})},function(e,t,n){n(0)({target:"Object",stat:!0},{setPrototypeOf:n(48)})},function(e,t,n){var r=n(0),a=n(137).values;r({target:"Object",stat:!0},{values:function(e){return a(e)}})},function(e,t,n){var r=n(16),a=n(234),i=Object.prototype;a!==i.toString&&r(i,"toString",a,{unsafe:!0})},function(e,t,n){"use strict";var r=n(66),a={};a[n(7)("toStringTag")]="z",e.exports="[object z]"!==String(a)?function(){return"[object "+r(this)+"]"}:a.toString},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(20),c=n(9);a&&r({target:"Object",proto:!0,forced:i},{__defineGetter__:function(e,t){c.f(o(this),e,{get:s(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(20),c=n(9);a&&r({target:"Object",proto:!0,forced:i},{__defineSetter__:function(e,t){c.f(o(this),e,{set:s(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(25),c=n(27),u=n(15).f;a&&r({target:"Object",proto:!0,forced:i},{__lookupGetter__:function(e){var t,n=o(this),r=s(e,!0);do{if(t=u(n,r))return t.get}while(n=c(n))}})},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(25),c=n(27),u=n(15).f;a&&r({target:"Object",proto:!0,forced:i},{__lookupSetter__:function(e){var t,n=o(this),r=s(e,!0);do{if(t=u(n,r))return t.set}while(n=c(n))}})},function(e,t,n){n(0)({target:"Function",proto:!0},{bind:n(141)})},function(e,t,n){var r=n(6),a=n(9).f,i=Function.prototype,o=i.toString,s=/^\s*function ([^ (]*)/;!r||"name"in i||a(i,"name",{configurable:!0,get:function(){try{return o.call(this).match(s)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(3),a=n(9),i=n(27),o=n(7)("hasInstance"),s=Function.prototype;o in s||a.f(s,o,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=i(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(0),a=n(142);r({target:"Array",stat:!0,forced:!n(75)(function(e){Array.from(e)})},{from:a})},function(e,t,n){n(0)({target:"Array",stat:!0},{isArray:n(44)})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(46);r({target:"Array",stat:!0,forced:a(function(){function e(){}return!(Array.of.call(e)instanceof e)})},{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)i(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(44),o=n(3),s=n(10),c=n(8),u=n(46),l=n(61),p=n(67),d=n(7)("isConcatSpreadable"),f=!a(function(){var e=[];return e[d]=!1,e.concat()[0]!==e}),h=p("concat"),m=function(e){if(!o(e))return!1;var t=e[d];return void 0!==t?!!t:i(e)};r({target:"Array",proto:!0,forced:!f||!h},{concat:function(e){var t,n,r,a,i,o=s(this),p=l(o,0),d=0;for(t=-1,r=arguments.length;t<r;t++)if(i=-1===t?o:arguments[t],m(i)){if(d+(a=c(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<a;n++,d++)n in i&&u(p,d,i[n])}else{if(d>=9007199254740991)throw TypeError("Maximum allowed index exceeded");u(p,d++,i)}return p.length=d,p}})},function(e,t,n){var r=n(0),a=n(143),i=n(37);r({target:"Array",proto:!0},{copyWithin:a}),i("copyWithin")},function(e,t,n){"use strict";var r=n(0),a=n(12).every;r({target:"Array",proto:!0,forced:n(28)("every")},{every:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(0),a=n(102),i=n(37);r({target:"Array",proto:!0},{fill:a}),i("fill")},function(e,t,n){"use strict";var r=n(0),a=n(12).filter;r({target:"Array",proto:!0,forced:!n(67)("filter")},{filter:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(12).find,i=n(37),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r({target:"Array",proto:!0,forced:o},{find:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(e,t,n){"use strict";var r=n(0),a=n(12).findIndex,i=n(37),o=!0;"findIndex"in[]&&Array(1).findIndex(function(){o=!1}),r({target:"Array",proto:!0,forced:o},{findIndex:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("findIndex")},function(e,t,n){"use strict";var r=n(0),a=n(144),i=n(10),o=n(8),s=n(23),c=n(61);r({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=i(this),n=o(t.length),r=c(t,0);return r.length=a(r,t,t,n,0,void 0===e?1:s(e)),r}})},function(e,t,n){"use strict";var r=n(0),a=n(144),i=n(10),o=n(8),s=n(20),c=n(61);r({target:"Array",proto:!0},{flatMap:function(e){var t,n=i(this),r=o(n.length);return s(e),(t=c(n,0)).length=a(t,n,n,r,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},function(e,t,n){"use strict";var r=n(0),a=n(145);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(e,t,n){"use strict";var r=n(0),a=n(58).includes,i=n(37);r({target:"Array",proto:!0},{includes:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,t,n){"use strict";var r=n(0),a=n(58).indexOf,i=n(28),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0,c=i("indexOf");r({target:"Array",proto:!0,forced:s||c},{indexOf:function(e){return s?o.apply(this,arguments)||0:a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(54),i=n(18),o=n(28),s=[].join,c=a!=Object,u=o("join",",");r({target:"Array",proto:!0,forced:c||u},{join:function(e){return s.call(i(this),void 0===e?",":e)}})},function(e,t,n){var r=n(0),a=n(146);r({target:"Array",proto:!0,forced:a!==[].lastIndexOf},{lastIndexOf:a})},function(e,t,n){"use strict";var r=n(0),a=n(12).map;r({target:"Array",proto:!0,forced:!n(67)("map")},{map:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(76).left;r({target:"Array",proto:!0,forced:n(28)("reduce")},{reduce:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(76).right;r({target:"Array",proto:!0,forced:n(28)("reduceRight")},{reduceRight:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(44),i=[].reverse,o=[1,2];r({target:"Array",proto:!0,forced:String(o)===String(o.reverse())},{reverse:function(){return a(this)&&(this.length=this.length),i.call(this)}})},function(e,t,n){"use strict";var r=n(0),a=n(3),i=n(44),o=n(34),s=n(8),c=n(18),u=n(46),l=n(67),p=n(7)("species"),d=[].slice,f=Math.max;r({target:"Array",proto:!0,forced:!l("slice")},{slice:function(e,t){var n,r,l,h=c(this),m=s(h.length),v=o(e,m),g=o(void 0===t?m:t,m);if(i(h)&&("function"!=typeof(n=h.constructor)||n!==Array&&!i(n.prototype)?a(n)&&null===(n=n[p])&&(n=void 0):n=void 0,n===Array||void 0===n))return d.call(h,v,g);for(r=new(void 0===n?Array:n)(f(g-v,0)),l=0;v<g;v++,l++)v in h&&u(r,l,h[v]);return r.length=l,r}})},function(e,t,n){"use strict";var r=n(0),a=n(12).some;r({target:"Array",proto:!0,forced:n(28)("some")},{some:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(20),i=n(10),o=n(1),s=n(28),c=[].sort,u=[1,2,3],l=o(function(){u.sort(void 0)}),p=o(function(){u.sort(null)}),d=s("sort");r({target:"Array",proto:!0,forced:l||!p||d},{sort:function(e){return void 0===e?c.call(i(this)):c.call(i(this),a(e))}})},function(e,t,n){"use strict";var r=n(0),a=n(34),i=n(23),o=n(8),s=n(10),c=n(61),u=n(46),l=n(67),p=Math.max,d=Math.min;r({target:"Array",proto:!0,forced:!l("splice")},{splice:function(e,t){var n,r,l,f,h,m,v=s(this),g=o(v.length),y=a(e,g),x=arguments.length;if(0===x?n=r=0:1===x?(n=0,r=g-y):(n=x-2,r=d(p(i(t),0),g-y)),g+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(l=c(v,r),f=0;f<r;f++)(h=y+f)in v&&u(l,f,v[h]);if(l.length=r,n<r){for(f=y;f<g-r;f++)m=f+n,(h=f+r)in v?v[m]=v[h]:delete v[m];for(f=g;f>g-r+n;f--)delete v[f-1]}else if(n>r)for(f=g-r;f>y;f--)m=f+n-1,(h=f+r-1)in v?v[m]=v[h]:delete v[m];for(f=0;f<n;f++)v[f+y]=arguments[f+2];return v.length=g-r+n,l}})},function(e,t,n){n(49)("Array")},function(e,t,n){n(37)("flat")},function(e,t,n){n(37)("flatMap")},function(e,t,n){var r=n(0),a=n(34),i=String.fromCharCode,o=String.fromCodePoint;r({target:"String",stat:!0,forced:!!o&&1!=o.length},{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,o=0;r>o;){if(t=+arguments[o++],a(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(0),a=n(18),i=n(8);r({target:"String",stat:!0},{raw:function(e){for(var t=a(e.raw),n=i(t.length),r=arguments.length,o=[],s=0;n>s;)o.push(String(t[s++])),s<r&&o.push(String(arguments[s]));return o.join("")}})},function(e,t,n){"use strict";var r=n(0),a=n(78).codeAt;r({target:"String",proto:!0},{codePointAt:function(e){return a(this,e)}})},function(e,t,n){"use strict";var r=n(0),a=n(8),i=n(105),o=n(14),s=n(107),c="".endsWith,u=Math.min;r({target:"String",proto:!0,forced:!s("endsWith")},{endsWith:function(e){var t=String(o(this));i(e);var n=arguments.length>1?arguments[1]:void 0,r=a(t.length),s=void 0===n?r:u(a(n),r),l=String(e);return c?c.call(t,l,s):t.slice(s-l.length,s)===l}})},function(e,t,n){"use strict";var r=n(0),a=n(105),i=n(14);r({target:"String",proto:!0,forced:!n(107)("includes")},{includes:function(e){return!!~String(i(this)).indexOf(a(e),arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(79),a=n(4),i=n(8),o=n(14),s=n(81),c=n(82);r("match",1,function(e,t,n){return[function(t){var n=o(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var o=a(e),u=String(this);if(!o.global)return c(o,u);var l=o.unicode;o.lastIndex=0;for(var p,d=[],f=0;null!==(p=c(o,u));){var h=String(p[0]);d[f]=h,""===h&&(o.lastIndex=s(u,i(o.lastIndex),l)),f++}return 0===f?null:d}]})},function(e,t,n){"use strict";var r=n(0),a=n(104),i=n(14),o=n(8),s=n(20),c=n(4),u=n(66),l=n(68),p=n(13),d=n(7),f=n(29),h=n(81),m=n(19),v=n(32),g=d("matchAll"),y=m.set,x=m.getterFor("RegExp String Iterator"),b=RegExp.prototype,w=b.exec,_=a(function(e,t,n,r){y(this,{type:"RegExp String Iterator",regexp:e,string:t,global:n,unicode:r,done:!1})},"RegExp String",function(){var e=x(this);if(e.done)return{value:void 0,done:!0};var t=e.regexp,n=e.string,r=function(e,t){var n,r=e.exec;if("function"==typeof r){if("object"!=typeof(n=r.call(e,t)))throw TypeError("Incorrect exec result");return n}return w.call(e,t)}(t,n);return null===r?{value:void 0,done:e.done=!0}:e.global?(""==String(r[0])&&(t.lastIndex=h(n,o(t.lastIndex),e.unicode)),{value:r,done:!1}):(e.done=!0,{value:r,done:!1})}),k=function(e){var t,n,r,a,i,s,u=c(this),p=String(e);return t=f(u,RegExp),void 0===(n=u.flags)&&u instanceof RegExp&&!("flags"in b)&&(n=l.call(u)),r=void 0===n?"":String(n),a=new t(t===RegExp?u.source:u,r),i=!!~r.indexOf("g"),s=!!~r.indexOf("u"),a.lastIndex=o(u.lastIndex),new _(a,p,i,s)};r({target:"String",proto:!0},{matchAll:function(e){var t,n,r,a=i(this);return null!=e&&(void 0===(n=e[g])&&v&&"RegExp"==u(e)&&(n=k),null!=n)?s(n).call(e,a):(t=String(a),r=new RegExp(e,"g"),v?k.call(r,t):r[g](t))}}),v||g in b||p(b,g,k)},function(e,t,n){"use strict";var r=n(0),a=n(108).end;r({target:"String",proto:!0,forced:n(148)},{padEnd:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(108).start;r({target:"String",proto:!0,forced:n(148)},{padStart:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){n(0)({target:"String",proto:!0},{repeat:n(109)})},function(e,t,n){"use strict";var r=n(79),a=n(4),i=n(10),o=n(8),s=n(23),c=n(14),u=n(81),l=n(82),p=Math.max,d=Math.min,f=Math.floor,h=/\$([$&'`]|\d\d?|<[^>]*>)/g,m=/\$([$&'`]|\d\d?)/g;r("replace",2,function(e,t,n){return[function(n,r){var a=c(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,a,r):t.call(String(a),n,r)},function(e,i){var c=n(t,e,this,i);if(c.done)return c.value;var f=a(e),h=String(this),m="function"==typeof i;m||(i=String(i));var v=f.global;if(v){var g=f.unicode;f.lastIndex=0}for(var y=[];;){var x=l(f,h);if(null===x)break;if(y.push(x),!v)break;""===String(x[0])&&(f.lastIndex=u(h,o(f.lastIndex),g))}for(var b,w="",_=0,k=0;k<y.length;k++){x=y[k];for(var E=String(x[0]),S=p(d(s(x.index),h.length),0),R=[],T=1;T<x.length;T++)R.push(void 0===(b=x[T])?b:String(b));var A=x.groups;if(m){var D=[E].concat(R,S,h);void 0!==A&&D.push(A);var O=String(i.apply(void 0,D))}else O=r(E,h,S,R,A,i);S>=_&&(w+=h.slice(_,S)+O,_=S+E.length)}return w+h.slice(_)}];function r(e,n,r,a,o,s){var c=r+e.length,u=a.length,l=m;return void 0!==o&&(o=i(o),l=h),t.call(s,l,function(t,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":s=o[i.slice(1,-1)];break;default:var l=+i;if(0===l)return t;if(l>u){var p=f(l/10);return 0===p?t:p<=u?void 0===a[p-1]?i.charAt(1):a[p-1]+i.charAt(1):t}s=a[l-1]}return void 0===s?"":s})}})},function(e,t,n){"use strict";var r=n(79),a=n(4),i=n(14),o=n(139),s=n(82);r("search",1,function(e,t,n){return[function(t){var n=i(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var i=a(e),c=String(this),u=i.lastIndex;o(u,0)||(i.lastIndex=0);var l=s(i,c);return o(i.lastIndex,u)||(i.lastIndex=u),null===l?-1:l.index}]})},function(e,t,n){"use strict";var r=n(79),a=n(106),i=n(4),o=n(14),s=n(29),c=n(81),u=n(8),l=n(82),p=n(80),d=n(1),f=[].push,h=Math.min,m=!d(function(){return!RegExp(4294967295,"y")});r("split",2,function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=String(o(this)),i=void 0===n?4294967295:n>>>0;if(0===i)return[];if(void 0===e)return[r];if(!a(e))return t.call(r,e,i);for(var s,c,u,l=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,m=new RegExp(e.source,d+"g");(s=p.call(m,r))&&!((c=m.lastIndex)>h&&(l.push(r.slice(h,s.index)),s.length>1&&s.index<r.length&&f.apply(l,s.slice(1)),u=s[0].length,h=c,l.length>=i));)m.lastIndex===s.index&&m.lastIndex++;return h===r.length?!u&&m.test("")||l.push(""):l.push(r.slice(h)),l.length>i?l.slice(0,i):l}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:t.call(this,e,n)}:t,[function(t,n){var a=o(this),i=null==t?void 0:t[e];return void 0!==i?i.call(t,a,n):r.call(String(a),t,n)},function(e,a){var o=n(r,e,this,a,r!==t);if(o.done)return o.value;var p=i(e),d=String(this),f=s(p,RegExp),v=p.unicode,g=(p.ignoreCase?"i":"")+(p.multiline?"m":"")+(p.unicode?"u":"")+(m?"y":"g"),y=new f(m?p:"^(?:"+p.source+")",g),x=void 0===a?4294967295:a>>>0;if(0===x)return[];if(0===d.length)return null===l(y,d)?[d]:[];for(var b=0,w=0,_=[];w<d.length;){y.lastIndex=m?w:0;var k,E=l(y,m?d:d.slice(w));if(null===E||(k=h(u(y.lastIndex+(m?0:w)),d.length))===b)w=c(d,w,v);else{if(_.push(d.slice(b,w)),_.length===x)return _;for(var S=1;S<=E.length-1;S++)if(_.push(E[S]),_.length===x)return _;w=b=k}}return _.push(d.slice(b)),_}]},!m)},function(e,t,n){"use strict";var r=n(0),a=n(8),i=n(105),o=n(14),s=n(107),c="".startsWith,u=Math.min;r({target:"String",proto:!0,forced:!s("startsWith")},{startsWith:function(e){var t=String(o(this));i(e);var n=a(u(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return c?c.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";var r=n(0),a=n(50).trim;r({target:"String",proto:!0,forced:n(110)("trim")},{trim:function(){return a(this)}})},function(e,t,n){"use strict";var r=n(0),a=n(50).start,i=n(110)("trimStart"),o=i?function(){return a(this)}:"".trimStart;r({target:"String",proto:!0,forced:i},{trimStart:o,trimLeft:o})},function(e,t,n){"use strict";var r=n(0),a=n(50).end,i=n(110)("trimEnd"),o=i?function(){return a(this)}:"".trimEnd;r({target:"String",proto:!0,forced:i},{trimEnd:o,trimRight:o})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("anchor")},{anchor:function(e){return a(this,"a","name",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("big")},{big:function(){return a(this,"big","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("blink")},{blink:function(){return a(this,"blink","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("bold")},{bold:function(){return a(this,"b","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("fixed")},{fixed:function(){return a(this,"tt","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("fontcolor")},{fontcolor:function(e){return a(this,"font","color",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("fontsize")},{fontsize:function(e){return a(this,"font","size",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("italics")},{italics:function(){return a(this,"i","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("link")},{link:function(e){return a(this,"a","href",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("small")},{small:function(){return a(this,"small","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("strike")},{strike:function(){return a(this,"strike","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("sub")},{sub:function(){return a(this,"sub","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("sup")},{sup:function(){return a(this,"sup","","")}})},function(e,t,n){var r=n(6),a=n(2),i=n(59),o=n(111),s=n(9).f,c=n(43).f,u=n(106),l=n(68),p=n(16),d=n(1),f=n(49),h=n(7)("match"),m=a.RegExp,v=m.prototype,g=/a/g,y=/a/g,x=new m(g)!==g;if(r&&i("RegExp",!x||d(function(){return y[h]=!1,m(g)!=g||m(y)==y||"/a/i"!=m(g,"i")}))){for(var b=function(e,t){var n=this instanceof b,r=u(e),a=void 0===t;return!n&&r&&e.constructor===b&&a?e:o(x?new m(r&&!a?e.source:e,t):m((r=e instanceof b)?e.source:e,r&&a?l.call(e):t),n?this:v,b)},w=function(e){e in b||s(b,e,{configurable:!0,get:function(){return m[e]},set:function(t){m[e]=t}})},_=c(m),k=0;_.length>k;)w(_[k++]);v.constructor=b,b.prototype=v,p(a,"RegExp",b)}f("RegExp")},function(e,t,n){"use strict";var r=n(0),a=n(80);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(e,t,n){var r=n(6),a=n(9),i=n(68);r&&"g"!=/./g.flags&&a.f(RegExp.prototype,"flags",{configurable:!0,get:i})},function(e,t,n){"use strict";var r=n(16),a=n(4),i=n(1),o=n(68),s=RegExp.prototype,c=s.toString,u=i(function(){return"/a/b"!=c.call({source:"a",flags:"b"})}),l="toString"!=c.name;(u||l)&&r(RegExp.prototype,"toString",function(){var e=a(this),t=String(e.source),n=e.flags;return"/"+t+"/"+String(void 0===n&&e instanceof RegExp&&!("flags"in s)?o.call(e):n)},{unsafe:!0})},function(e,t,n){var r=n(0),a=n(150);r({global:!0,forced:parseInt!=a},{parseInt:a})},function(e,t,n){var r=n(0),a=n(151);r({global:!0,forced:parseFloat!=a},{parseFloat:a})},function(e,t,n){"use strict";var r=n(6),a=n(2),i=n(59),o=n(16),s=n(11),c=n(24),u=n(111),l=n(25),p=n(1),d=n(35),f=n(43).f,h=n(15).f,m=n(9).f,v=n(50).trim,g=a.Number,y=g.prototype,x="Number"==c(d(y)),b=function(e){var t,n,r,a,i,o,s,c,u=l(e,!1);if("string"==typeof u&&u.length>2)if(43===(t=(u=v(u)).charCodeAt(0))||45===t){if(88===(n=u.charCodeAt(2))||120===n)return NaN}else if(48===t){switch(u.charCodeAt(1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+u}for(o=(i=u.slice(2)).length,s=0;s<o;s++)if((c=i.charCodeAt(s))<48||c>a)return NaN;return parseInt(i,r)}return+u};if(i("Number",!g(" 0o1")||!g("0b1")||g("+0x1"))){for(var w,_=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof _&&(x?p(function(){y.valueOf.call(n)}):"Number"!=c(n))?u(new g(b(t)),n,_):b(t)},k=r?f(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),E=0;k.length>E;E++)s(g,w=k[E])&&!s(_,w)&&m(_,w,h(g,w));_.prototype=y,y.constructor=_,o(a,"Number",_)}},function(e,t,n){n(0)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},function(e,t,n){n(0)({target:"Number",stat:!0},{isFinite:n(309)})},function(e,t,n){var r=n(2).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&r(e)}},function(e,t,n){n(0)({target:"Number",stat:!0},{isInteger:n(152)})},function(e,t,n){n(0)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(0),a=n(152),i=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(e){return a(e)&&i(e)<=9007199254740991}})},function(e,t,n){n(0)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){n(0)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(0),a=n(151);r({target:"Number",stat:!0,forced:Number.parseFloat!=a},{parseFloat:a})},function(e,t,n){var r=n(0),a=n(150);r({target:"Number",stat:!0,forced:Number.parseInt!=a},{parseInt:a})},function(e,t,n){"use strict";var r=n(0),a=n(23),i=n(153),o=n(109),s=n(1),c=1..toFixed,u=Math.floor,l=function(e,t,n){return 0===t?n:t%2==1?l(e,t-1,n*e):l(e*e,t/2,n)};r({target:"Number",proto:!0,forced:c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s(function(){c.call({})})},{toFixed:function(e){var t,n,r,s,c=i(this),p=a(e),d=[0,0,0,0,0,0],f="",h="0",m=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*d[n],d[n]=r%1e7,r=u(r/1e7)},v=function(e){for(var t=6,n=0;--t>=0;)n+=d[t],d[t]=u(n/e),n=n%e*1e7},g=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==d[e]){var n=String(d[e]);t=""===t?n:t+o.call("0",7-n.length)+n}return t};if(p<0||p>20)throw RangeError("Incorrect fraction digits");if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(f="-",c=-c),c>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(c*l(2,69,1))-69)<0?c*l(2,-t,1):c/l(2,t,1),n*=4503599627370496,(t=52-t)>0){for(m(0,n),r=p;r>=7;)m(1e7,0),r-=7;for(m(l(10,r,1),0),r=t-1;r>=23;)v(1<<23),r-=23;v(1<<r),m(1,1),v(2),h=g()}else m(0,n),m(1<<-t,0),h=g()+o.call("0",p);return h=p>0?f+((s=h.length)<=p?"0."+o.call("0",p-s)+h:h.slice(0,s-p)+"."+h.slice(s-p)):f+h}})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(153),o=1..toPrecision;r({target:"Number",proto:!0,forced:a(function(){return"1"!==o.call(1,void 0)})||!a(function(){o.call({})})},{toPrecision:function(e){return void 0===e?o.call(i(this)):o.call(i(this),e)}})},function(e,t,n){var r=n(0),a=n(154),i=Math.acosh,o=Math.log,s=Math.sqrt,c=Math.LN2;r({target:"Math",stat:!0,forced:!i||710!=Math.floor(i(Number.MAX_VALUE))||i(1/0)!=1/0},{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?o(e)+c:a(e-1+s(e-1)*s(e+1))}})},function(e,t,n){var r=n(0),a=Math.asinh,i=Math.log,o=Math.sqrt;r({target:"Math",stat:!0,forced:!(a&&1/a(0)>0)},{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):i(t+o(t*t+1)):t}})},function(e,t,n){var r=n(0),a=Math.atanh,i=Math.log;r({target:"Math",stat:!0,forced:!(a&&1/a(-0)<0)},{atanh:function(e){return 0==(e=+e)?e:i((1+e)/(1-e))/2}})},function(e,t,n){var r=n(0),a=n(112),i=Math.abs,o=Math.pow;r({target:"Math",stat:!0},{cbrt:function(e){return a(e=+e)*o(i(e),1/3)}})},function(e,t,n){var r=n(0),a=Math.floor,i=Math.log,o=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-a(i(e+.5)*o):32}})},function(e,t,n){var r=n(0),a=n(85),i=Math.cosh,o=Math.abs,s=Math.E;r({target:"Math",stat:!0,forced:!i||i(710)===1/0},{cosh:function(e){var t=a(o(e)-1)+1;return(t+1/(t*s*s))*(s/2)}})},function(e,t,n){var r=n(0),a=n(85);r({target:"Math",stat:!0,forced:a!=Math.expm1},{expm1:a})},function(e,t,n){n(0)({target:"Math",stat:!0},{fround:n(327)})},function(e,t,n){var r=n(112),a=Math.abs,i=Math.pow,o=i(2,-52),s=i(2,-23),c=i(2,127)*(2-s),u=i(2,-126);e.exports=Math.fround||function(e){var t,n,i=a(e),l=r(e);return i<u?l*(i/u/s+1/o-1/o)*u*s:(n=(t=(1+s/o)*i)-(t-i))>c||n!=n?l*(1/0):l*n}},function(e,t,n){var r=n(0),a=Math.abs,i=Math.sqrt;r({target:"Math",stat:!0},{hypot:function(e,t){for(var n,r,o=0,s=0,c=arguments.length,u=0;s<c;)u<(n=a(arguments[s++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*i(o)}})},function(e,t,n){var r=n(0),a=n(1),i=Math.imul;r({target:"Math",stat:!0,forced:a(function(){return-5!=i(4294967295,5)||2!=i.length})},{imul:function(e,t){var n=+e,r=+t,a=65535&n,i=65535&r;return 0|a*i+((65535&n>>>16)*i+a*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(0),a=Math.log,i=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(e){return a(e)*i}})},function(e,t,n){n(0)({target:"Math",stat:!0},{log1p:n(154)})},function(e,t,n){var r=n(0),a=Math.log,i=Math.LN2;r({target:"Math",stat:!0},{log2:function(e){return a(e)/i}})},function(e,t,n){n(0)({target:"Math",stat:!0},{sign:n(112)})},function(e,t,n){var r=n(0),a=n(1),i=n(85),o=Math.abs,s=Math.exp,c=Math.E;r({target:"Math",stat:!0,forced:a(function(){return-2e-17!=Math.sinh(-2e-17)})},{sinh:function(e){return o(e=+e)<1?(i(e)-i(-e))/2:(s(e-1)-s(-e-1))*(c/2)}})},function(e,t,n){var r=n(0),a=n(85),i=Math.exp;r({target:"Math",stat:!0},{tanh:function(e){var t=a(e=+e),n=a(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){n(26)(Math,"Math",!0)},function(e,t,n){var r=n(0),a=Math.ceil,i=Math.floor;r({target:"Math",stat:!0},{trunc:function(e){return(e>0?i:a)(e)}})},function(e,t,n){n(0)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(10),o=n(25);r({target:"Date",proto:!0,forced:a(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})},{toJSON:function(e){var t=i(this),n=o(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(0),a=n(341);r({target:"Date",proto:!0,forced:Date.prototype.toISOString!==a},{toISOString:a})},function(e,t,n){"use strict";var r=n(1),a=n(108).start,i=Math.abs,o=Date.prototype,s=o.getTime,c=o.toISOString;e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-5e13-1))})||!r(function(){c.call(new Date(NaN))})?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var e=this.getUTCFullYear(),t=this.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+a(i(e),n?6:4,0)+"-"+a(this.getUTCMonth()+1,2,0)+"-"+a(this.getUTCDate(),2,0)+"T"+a(this.getUTCHours(),2,0)+":"+a(this.getUTCMinutes(),2,0)+":"+a(this.getUTCSeconds(),2,0)+"."+a(t,3,0)+"Z"}:c},function(e,t,n){var r=n(16),a=Date.prototype,i=a.toString,o=a.getTime;new Date(NaN)+""!="Invalid Date"&&r(a,"toString",function(){var e=o.call(this);return e==e?i.call(this):"Invalid Date"})},function(e,t,n){var r=n(13),a=n(344),i=n(7)("toPrimitive"),o=Date.prototype;i in o||r(o,i,a)},function(e,t,n){"use strict";var r=n(4),a=n(25);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return a(r(this),"number"!==e)}},function(e,t,n){var r=n(2);n(26)(r.JSON,"JSON",!0)},function(e,t,n){"use strict";var r,a,i,o=n(0),s=n(32),c=n(2),u=n(47),l=n(51),p=n(26),d=n(49),f=n(3),h=n(20),m=n(38),v=n(24),g=n(63),y=n(75),x=n(29),b=n(113).set,w=n(155),_=n(156),k=n(347),E=n(157),S=n(348),R=n(83),T=n(19),A=n(59),D=n(7)("species"),O="Promise",I=T.get,j=T.set,C=T.getterFor(O),N=c.Promise,L=c.TypeError,q=c.document,U=c.process,P=c.fetch,M=U&&U.versions,F=M&&M.v8||"",z=E.f,B=z,V="process"==v(U),G=!!(q&&q.createEvent&&c.dispatchEvent),Y=A(O,function(){var e=N.resolve(1),t=function(){},n=(e.constructor={})[D]=function(e){e(t,t)};return!((V||"function"==typeof PromiseRejectionEvent)&&(!s||e.finally)&&e.then(t)instanceof n&&0!==F.indexOf("6.6")&&-1===R.indexOf("Chrome/66"))}),H=Y||!y(function(e){N.all(e).catch(function(){})}),W=function(e){var t;return!(!f(e)||"function"!=typeof(t=e.then))&&t},$=function(e,t,n){if(!t.notified){t.notified=!0;var r=t.reactions;w(function(){for(var a=t.value,i=1==t.state,o=0;r.length>o;){var s,c,u,l=r[o++],p=i?l.ok:l.fail,d=l.resolve,f=l.reject,h=l.domain;try{p?(i||(2===t.rejection&&K(e,t),t.rejection=1),!0===p?s=a:(h&&h.enter(),s=p(a),h&&(h.exit(),u=!0)),s===l.promise?f(L("Promise-chain cycle")):(c=W(s))?c.call(s,d,f):d(s)):f(a)}catch(e){h&&!u&&h.exit(),f(e)}}t.reactions=[],t.notified=!1,n&&!t.rejection&&Z(e,t)})}},J=function(e,t,n){var r,a;G?((r=q.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),c.dispatchEvent(r)):r={promise:t,reason:n},(a=c["on"+e])?a(r):"unhandledrejection"===e&&k("Unhandled promise rejection",n)},Z=function(e,t){b.call(c,function(){var n,r=t.value;if(X(t)&&(n=S(function(){V?U.emit("unhandledRejection",r,e):J("unhandledrejection",e,r)}),t.rejection=V||X(t)?2:1,n.error))throw n.value})},X=function(e){return 1!==e.rejection&&!e.parent},K=function(e,t){b.call(c,function(){V?U.emit("rejectionHandled",e):J("rejectionhandled",e,t.value)})},Q=function(e,t,n,r){return function(a){e(t,n,a,r)}},ee=function(e,t,n,r){t.done||(t.done=!0,r&&(t=r),t.value=n,t.state=2,$(e,t,!0))},te=function(e,t,n,r){if(!t.done){t.done=!0,r&&(t=r);try{if(e===n)throw L("Promise can't be resolved itself");var a=W(n);a?w(function(){var r={done:!1};try{a.call(n,Q(te,e,r,t),Q(ee,e,r,t))}catch(n){ee(e,r,n,t)}}):(t.value=n,t.state=1,$(e,t,!1))}catch(n){ee(e,{done:!1},n,t)}}};Y&&(N=function(e){m(this,N,O),h(e),r.call(this);var t=I(this);try{e(Q(te,this,t),Q(ee,this,t))}catch(e){ee(this,t,e)}},(r=function(e){j(this,{type:O,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=l(N.prototype,{then:function(e,t){var n=C(this),r=z(x(this,N));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=V?U.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&$(this,n,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new r,t=I(e);this.promise=e,this.resolve=Q(te,e,t),this.reject=Q(ee,e,t)},E.f=z=function(e){return e===N||e===i?new a(e):B(e)},s||"function"!=typeof P||o({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return _(N,P.apply(c,arguments))}})),o({global:!0,wrap:!0,forced:Y},{Promise:N}),p(N,O,!1,!0),d(O),i=u.Promise,o({target:O,stat:!0,forced:Y},{reject:function(e){var t=z(this);return t.reject.call(void 0,e),t.promise}}),o({target:O,stat:!0,forced:s||Y},{resolve:function(e){return _(s&&this===i?N:this,e)}}),o({target:O,stat:!0,forced:H},{all:function(e){var t=this,n=z(t),r=n.resolve,a=n.reject,i=S(function(){var n=h(t.resolve),i=[],o=0,s=1;g(e,function(e){var c=o++,u=!1;i.push(void 0),s++,n.call(t,e).then(function(e){u||(u=!0,i[c]=e,--s||r(i))},a)}),--s||r(i)});return i.error&&a(i.value),n.promise},race:function(e){var t=this,n=z(t),r=n.reject,a=S(function(){var a=h(t.resolve);g(e,function(e){a.call(t,e).then(n.resolve,r)})});return a.error&&r(a.value),n.promise}})},function(e,t,n){var r=n(2);e.exports=function(e,t){var n=r.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))}},function(e,t){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,t,n){"use strict";var r=n(0),a=n(33),i=n(29),o=n(156);r({target:"Promise",proto:!0,real:!0},{finally:function(e){var t=i(this,a("Promise")),n="function"==typeof e;return this.then(n?function(n){return o(t,e()).then(function(){return n})}:e,n?function(n){return o(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var r=n(86),a=n(158);e.exports=r("Map",function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},a,!0)},function(e,t,n){"use strict";var r=n(86),a=n(158);e.exports=r("Set",function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},a)},function(e,t,n){"use strict";var r,a=n(2),i=n(51),o=n(45),s=n(86),c=n(159),u=n(3),l=n(19).enforce,p=n(129),d=!a.ActiveXObject&&"ActiveXObject"in a,f=Object.isExtensible,h=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},m=e.exports=s("WeakMap",h,c,!0,!0);if(p&&d){r=c.getConstructor(h,"WeakMap",!0),o.REQUIRED=!0;var v=m.prototype,g=v.delete,y=v.has,x=v.get,b=v.set;i(v,{delete:function(e){if(u(e)&&!f(e)){var t=l(this);return t.frozen||(t.frozen=new r),g.call(this,e)||t.frozen.delete(e)}return g.call(this,e)},has:function(e){if(u(e)&&!f(e)){var t=l(this);return t.frozen||(t.frozen=new r),y.call(this,e)||t.frozen.has(e)}return y.call(this,e)},get:function(e){if(u(e)&&!f(e)){var t=l(this);return t.frozen||(t.frozen=new r),y.call(this,e)?x.call(this,e):t.frozen.get(e)}return x.call(this,e)},set:function(e,t){if(u(e)&&!f(e)){var n=l(this);n.frozen||(n.frozen=new r),y.call(this,e)?b.call(this,e,t):n.frozen.set(e,t)}else b.call(this,e,t);return this}})}},function(e,t,n){"use strict";n(86)("WeakSet",function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},n(159),!1,!0)},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(87),o=n(49),s=i.ArrayBuffer;r({global:!0,forced:a.ArrayBuffer!==s},{ArrayBuffer:s}),o("ArrayBuffer")},function(e,t,n){var r=n(0),a=n(5);r({target:"ArrayBuffer",stat:!0,forced:!a.NATIVE_ARRAY_BUFFER_VIEWS},{isView:a.isView})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(87),o=n(4),s=n(34),c=n(8),u=n(29),l=i.ArrayBuffer,p=i.DataView,d=l.prototype.slice;r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:a(function(){return!new l(2).slice(1,void 0).byteLength})},{slice:function(e,t){if(void 0!==d&&void 0===t)return d.call(o(this),e);for(var n=o(this).byteLength,r=s(e,n),a=s(void 0===t?n:t,n),i=new(u(this,l))(c(a-r)),f=new p(this),h=new p(i),m=0;r<a;)h.setUint8(m++,f.getUint8(r++));return i}})},function(e,t,n){var r=n(0),a=n(87);r({global:!0,forced:!n(5).NATIVE_ARRAY_BUFFER},{DataView:a.DataView})},function(e,t,n){n(30)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(30)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){"use strict";var r=n(114),a=n(5),i=n(162);a.exportStatic("from",i,r)},function(e,t,n){"use strict";var r=n(5),a=n(114),i=r.aTypedArrayConstructor;r.exportStatic("of",function(){for(var e=0,t=arguments.length,n=new(i(this))(t);t>e;)n[e]=arguments[e++];return n},a)},function(e,t,n){"use strict";var r=n(5),a=n(143),i=r.aTypedArray;r.exportProto("copyWithin",function(e,t){return a.call(i(this),e,t,arguments.length>2?arguments[2]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(12).every,i=r.aTypedArray;r.exportProto("every",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(102),i=r.aTypedArray;r.exportProto("fill",function(e){return a.apply(i(this),arguments)})},function(e,t,n){"use strict";var r=n(5),a=n(12).filter,i=n(29),o=r.aTypedArray,s=r.aTypedArrayConstructor;r.exportProto("filter",function(e){for(var t=a(o(this),e,arguments.length>1?arguments[1]:void 0),n=i(this,this.constructor),r=0,c=t.length,u=new(s(n))(c);c>r;)u[r]=t[r++];return u})},function(e,t,n){"use strict";var r=n(5),a=n(12).find,i=r.aTypedArray;r.exportProto("find",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(12).findIndex,i=r.aTypedArray;r.exportProto("findIndex",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(12).forEach,i=r.aTypedArray;r.exportProto("forEach",function(e){a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(58).includes,i=r.aTypedArray;r.exportProto("includes",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(58).indexOf,i=r.aTypedArray;r.exportProto("indexOf",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(2),a=n(5),i=n(77),o=n(7)("iterator"),s=r.Uint8Array,c=i.values,u=i.keys,l=i.entries,p=a.aTypedArray,d=a.exportProto,f=s&&s.prototype[o],h=!!f&&("values"==f.name||null==f.name),m=function(){return c.call(p(this))};d("entries",function(){return l.call(p(this))}),d("keys",function(){return u.call(p(this))}),d("values",m,!h),d(o,m,!h)},function(e,t,n){"use strict";var r=n(5),a=r.aTypedArray,i=[].join;r.exportProto("join",function(e){return i.apply(a(this),arguments)})},function(e,t,n){"use strict";var r=n(5),a=n(146),i=r.aTypedArray;r.exportProto("lastIndexOf",function(e){return a.apply(i(this),arguments)})},function(e,t,n){"use strict";var r=n(5),a=n(12).map,i=n(29),o=r.aTypedArray,s=r.aTypedArrayConstructor;r.exportProto("map",function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0,function(e,t){return new(s(i(e,e.constructor)))(t)})})},function(e,t,n){"use strict";var r=n(5),a=n(76).left,i=r.aTypedArray;r.exportProto("reduce",function(e){return a(i(this),e,arguments.length,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(76).right,i=r.aTypedArray;r.exportProto("reduceRight",function(e){return a(i(this),e,arguments.length,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=r.aTypedArray,i=Math.floor;r.exportProto("reverse",function(){for(var e,t=a(this).length,n=i(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this})},function(e,t,n){"use strict";var r=n(5),a=n(8),i=n(161),o=n(10),s=n(1),c=r.aTypedArray,u=s(function(){new Int8Array(1).set({})});r.exportProto("set",function(e){c(this);var t=i(arguments.length>1?arguments[1]:void 0,1),n=this.length,r=o(e),s=a(r.length),u=0;if(s+t>n)throw RangeError("Wrong length");for(;u<s;)this[t+u]=r[u++]},u)},function(e,t,n){"use strict";var r=n(5),a=n(29),i=n(1),o=r.aTypedArray,s=r.aTypedArrayConstructor,c=[].slice,u=i(function(){new Int8Array(1).slice()});r.exportProto("slice",function(e,t){for(var n=c.call(o(this),e,t),r=a(this,this.constructor),i=0,u=n.length,l=new(s(r))(u);u>i;)l[i]=n[i++];return l},u)},function(e,t,n){"use strict";var r=n(5),a=n(12).some,i=r.aTypedArray;r.exportProto("some",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=r.aTypedArray,i=[].sort;r.exportProto("sort",function(e){return i.call(a(this),e)})},function(e,t,n){"use strict";var r=n(5),a=n(8),i=n(34),o=n(29),s=r.aTypedArray;r.exportProto("subarray",function(e,t){var n=s(this),r=n.length,c=i(e,r);return new(o(n,n.constructor))(n.buffer,n.byteOffset+c*n.BYTES_PER_ELEMENT,a((void 0===t?r:i(t,r))-c))})},function(e,t,n){"use strict";var r=n(2),a=n(5),i=n(1),o=r.Int8Array,s=a.aTypedArray,c=[].toLocaleString,u=[].slice,l=!!o&&i(function(){c.call(new o(1))}),p=i(function(){return[1,2].toLocaleString()!=new o([1,2]).toLocaleString()})||!i(function(){o.prototype.toLocaleString.call([1,2])});a.exportProto("toLocaleString",function(){return c.apply(l?u.call(s(this)):s(this),arguments)},p)},function(e,t,n){"use strict";var r=n(2),a=n(5),i=n(1),o=r.Uint8Array,s=o&&o.prototype,c=[].toString,u=[].join;i(function(){c.call({})})&&(c=function(){return u.call(this)}),a.exportProto("toString",c,(s||{}).toString!=c)},function(e,t,n){var r=n(0),a=n(33),i=n(20),o=n(4),s=n(1),c=a("Reflect","apply"),u=Function.apply;r({target:"Reflect",stat:!0,forced:!s(function(){c(function(){})})},{apply:function(e,t,n){return i(e),o(n),c?c(e,t,n):u.call(e,t,n)}})},function(e,t,n){var r=n(0),a=n(33),i=n(20),o=n(4),s=n(3),c=n(35),u=n(141),l=n(1),p=a("Reflect","construct"),d=l(function(){function e(){}return!(p(function(){},[],e)instanceof e)}),f=!l(function(){p(function(){})}),h=d||f;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(e,t){i(e),o(t);var n=arguments.length<3?e:i(arguments[2]);if(f&&!d)return p(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(u.apply(e,r))}var a=n.prototype,l=c(s(a)?a:Object.prototype),h=Function.apply.call(e,l,t);return s(h)?h:l}})},function(e,t,n){var r=n(0),a=n(6),i=n(4),o=n(25),s=n(9);r({target:"Reflect",stat:!0,forced:n(1)(function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})}),sham:!a},{defineProperty:function(e,t,n){i(e);var r=o(t,!0);i(n);try{return s.f(e,r,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),a=n(4),i=n(15).f;r({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var n=i(a(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){var r=n(0),a=n(3),i=n(4),o=n(11),s=n(15),c=n(27);r({target:"Reflect",stat:!0},{get:function e(t,n){var r,u,l=arguments.length<3?t:arguments[2];return i(t)===l?t[n]:(r=s.f(t,n))?o(r,"value")?r.value:void 0===r.get?void 0:r.get.call(l):a(u=c(t))?e(u,n,l):void 0}})},function(e,t,n){var r=n(0),a=n(6),i=n(4),o=n(15);r({target:"Reflect",stat:!0,sham:!a},{getOwnPropertyDescriptor:function(e,t){return o.f(i(e),t)}})},function(e,t,n){var r=n(0),a=n(4),i=n(27);r({target:"Reflect",stat:!0,sham:!n(101)},{getPrototypeOf:function(e){return i(a(e))}})},function(e,t,n){n(0)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},function(e,t,n){var r=n(0),a=n(4),i=Object.isExtensible;r({target:"Reflect",stat:!0},{isExtensible:function(e){return a(e),!i||i(e)}})},function(e,t,n){n(0)({target:"Reflect",stat:!0},{ownKeys:n(96)})},function(e,t,n){var r=n(0),a=n(33),i=n(4);r({target:"Reflect",stat:!0,sham:!n(62)},{preventExtensions:function(e){i(e);try{var t=a("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),a=n(4),i=n(3),o=n(11),s=n(9),c=n(15),u=n(27),l=n(42);r({target:"Reflect",stat:!0},{set:function e(t,n,r){var p,d,f=arguments.length<4?t:arguments[3],h=c.f(a(t),n);if(!h){if(i(d=u(t)))return e(d,n,r,f);h=l(0)}if(o(h,"value")){if(!1===h.writable||!i(f))return!1;if(p=c.f(f,n)){if(p.get||p.set||!1===p.writable)return!1;p.value=r,s.f(f,n,p)}else s.f(f,n,l(0,r));return!0}return void 0!==h.set&&(h.set.call(f,r),!0)}})},function(e,t,n){var r=n(0),a=n(4),i=n(140),o=n(48);o&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){a(e),i(t);try{return o(e,t),!0}catch(e){return!1}}})},function(e,t,n){n(406),n(407),n(408),n(409),n(410),n(411),n(414),n(165),e.exports=n(47)},function(e,t,n){var r=n(2),a=n(163),i=n(145),o=n(13);for(var s in a){var c=r[s],u=c&&c.prototype;if(u&&u.forEach!==i)try{o(u,"forEach",i)}catch(e){u.forEach=i}}},function(e,t,n){var r=n(2),a=n(163),i=n(77),o=n(13),s=n(7),c=s("iterator"),u=s("toStringTag"),l=i.values;for(var p in a){var d=r[p],f=d&&d.prototype;if(f){if(f[c]!==l)try{o(f,c,l)}catch(e){f[c]=l}if(f[u]||o(f,u,p),a[p])for(var h in i)if(f[h]!==i[h])try{o(f,h,i[h])}catch(e){f[h]=i[h]}}}},function(e,t,n){var r=n(2),a=n(113),i=!r.setImmediate||!r.clearImmediate;n(0)({global:!0,bind:!0,enumerable:!0,forced:i},{setImmediate:a.set,clearImmediate:a.clear})},function(e,t,n){var r=n(0),a=n(2),i=n(155),o=n(24),s=a.process,c="process"==o(s);r({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(e){var t=c&&s.domain;i(t?t.bind(e):e)}})},function(e,t,n){var r=n(0),a=n(2),i=n(83),o=[].slice,s=function(e){return function(t,n){var r=arguments.length>2,a=r?o.call(arguments,2):void 0;return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,a)}:t,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(i)},{setTimeout:s(a.setTimeout),setInterval:s(a.setInterval)})},function(e,t,n){"use strict";n(149);var r,a=n(0),i=n(6),o=n(164),s=n(2),c=n(99),u=n(16),l=n(38),p=n(11),d=n(136),f=n(142),h=n(78).codeAt,m=n(412),v=n(26),g=n(165),y=n(19),x=s.URL,b=g.URLSearchParams,w=g.getState,_=y.set,k=y.getterFor("URL"),E=Math.floor,S=Math.pow,R=/[A-Za-z]/,T=/[\d+\-.A-Za-z]/,A=/\d/,D=/^(0x|0X)/,O=/^[0-7]+$/,I=/^\d+$/,j=/^[\dA-Fa-f]+$/,C=/[\u0000\u0009\u000A\u000D #%\/:?@[\\]]/,N=/[\u0000\u0009\u000A\u000D #\/:?@[\\]]/,L=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,q=/[\u0009\u000A\u000D]/g,U=function(e,t){var n,r,a;if("["==t.charAt(0)){if("]"!=t.charAt(t.length-1))return"Invalid host";if(!(n=M(t.slice(1,-1))))return"Invalid host";e.host=n}else if(W(e)){if(t=m(t),C.test(t))return"Invalid host";if(null===(n=P(t)))return"Invalid host";e.host=n}else{if(N.test(t))return"Invalid host";for(n="",r=f(t),a=0;a<r.length;a++)n+=Y(r[a],z);e.host=n}},P=function(e){var t,n,r,a,i,o,s,c=e.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(t=c.length)>4)return e;for(n=[],r=0;r<t;r++){if(""==(a=c[r]))return e;if(i=10,a.length>1&&"0"==a.charAt(0)&&(i=D.test(a)?16:8,a=a.slice(8==i?1:2)),""===a)o=0;else{if(!(10==i?I:8==i?O:j).test(a))return e;o=parseInt(a,i)}n.push(o)}for(r=0;r<t;r++)if(o=n[r],r==t-1){if(o>=S(256,5-t))return null}else if(o>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*S(256,3-r);return s},M=function(e){var t,n,r,a,i,o,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,p=0,d=function(){return e.charAt(p)};if(":"==d()){if(":"!=e.charAt(1))return;p+=2,l=++u}for(;d();){if(8==u)return;if(":"!=d()){for(t=n=0;n<4&&j.test(d());)t=16*t+parseInt(d(),16),p++,n++;if("."==d()){if(0==n)return;if(p-=n,u>6)return;for(r=0;d();){if(a=null,r>0){if(!("."==d()&&r<4))return;p++}if(!A.test(d()))return;for(;A.test(d());){if(i=parseInt(d(),10),null===a)a=i;else{if(0==a)return;a=10*a+i}if(a>255)return;p++}c[u]=256*c[u]+a,2!=++r&&4!=r||u++}if(4!=r)return;break}if(":"==d()){if(p++,!d())return}else if(d())return;c[u++]=t}else{if(null!==l)return;p++,l=++u}}if(null!==l)for(o=u-l,u=7;0!=u&&o>0;)s=c[u],c[u--]=c[l+o-1],c[l+--o]=s;else if(8!=u)return;return c},F=function(e){var t,n,r,a;if("number"==typeof e){for(t=[],n=0;n<4;n++)t.unshift(e%256),e=E(e/256);return t.join(".")}if("object"==typeof e){for(t="",r=function(e){for(var t=null,n=1,r=null,a=0,i=0;i<8;i++)0!==e[i]?(a>n&&(t=r,n=a),r=null,a=0):(null===r&&(r=i),++a);return a>n&&(t=r,n=a),t}(e),n=0;n<8;n++)a&&0===e[n]||(a&&(a=!1),r===n?(t+=n?":":"::",a=!0):(t+=e[n].toString(16),n<7&&(t+=":")));return"["+t+"]"}return e},z={},B=d({},z,{" ":1,'"':1,"<":1,">":1,"`":1}),V=d({},B,{"#":1,"?":1,"{":1,"}":1}),G=d({},V,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),Y=function(e,t){var n=h(e,0);return n>32&&n<127&&!p(t,e)?e:encodeURIComponent(e)},H={ftp:21,file:null,gopher:70,http:80,https:443,ws:80,wss:443},W=function(e){return p(H,e.scheme)},$=function(e){return""!=e.username||""!=e.password},J=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},Z=function(e,t){var n;return 2==e.length&&R.test(e.charAt(0))&&(":"==(n=e.charAt(1))||!t&&"|"==n)},X=function(e){var t;return e.length>1&&Z(e.slice(0,2))&&(2==e.length||"/"===(t=e.charAt(2))||"\\"===t||"?"===t||"#"===t)},K=function(e){var t=e.path,n=t.length;!n||"file"==e.scheme&&1==n&&Z(t[0],!0)||t.pop()},Q=function(e){return"."===e||"%2e"===e.toLowerCase()},ee={},te={},ne={},re={},ae={},ie={},oe={},se={},ce={},ue={},le={},pe={},de={},fe={},he={},me={},ve={},ge={},ye={},xe={},be={},we=function(e,t,n,a){var i,o,s,c,u,l=n||ee,d=0,h="",m=!1,v=!1,g=!1;for(n||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,t=t.replace(L,"")),t=t.replace(q,""),i=f(t);d<=i.length;){switch(o=i[d],l){case ee:if(!o||!R.test(o)){if(n)return"Invalid scheme";l=ne;continue}h+=o.toLowerCase(),l=te;break;case te:if(o&&(T.test(o)||"+"==o||"-"==o||"."==o))h+=o.toLowerCase();else{if(":"!=o){if(n)return"Invalid scheme";h="",l=ne,d=0;continue}if(n&&(W(e)!=p(H,h)||"file"==h&&($(e)||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=h,n)return void(W(e)&&H[e.scheme]==e.port&&(e.port=null));h="","file"==e.scheme?l=fe:W(e)&&a&&a.scheme==e.scheme?l=re:W(e)?l=se:"/"==i[d+1]?(l=ae,d++):(e.cannotBeABaseURL=!0,e.path.push(""),l=ye)}break;case ne:if(!a||a.cannotBeABaseURL&&"#"!=o)return"Invalid scheme";if(a.cannotBeABaseURL&&"#"==o){e.scheme=a.scheme,e.path=a.path.slice(),e.query=a.query,e.fragment="",e.cannotBeABaseURL=!0,l=be;break}l="file"==a.scheme?fe:ie;continue;case re:if("/"!=o||"/"!=i[d+1]){l=ie;continue}l=ce,d++;break;case ae:if("/"==o){l=ue;break}l=ge;continue;case ie:if(e.scheme=a.scheme,o==r)e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.query=a.query;else if("/"==o||"\\"==o&&W(e))l=oe;else if("?"==o)e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.query="",l=xe;else{if("#"!=o){e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.path.pop(),l=ge;continue}e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.query=a.query,e.fragment="",l=be}break;case oe:if(!W(e)||"/"!=o&&"\\"!=o){if("/"!=o){e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,l=ge;continue}l=ue}else l=ce;break;case se:if(l=ce,"/"!=o||"/"!=h.charAt(d+1))continue;d++;break;case ce:if("/"!=o&&"\\"!=o){l=ue;continue}break;case ue:if("@"==o){m&&(h="%40"+h),m=!0,s=f(h);for(var y=0;y<s.length;y++){var x=s[y];if(":"!=x||g){var b=Y(x,G);g?e.password+=b:e.username+=b}else g=!0}h=""}else if(o==r||"/"==o||"?"==o||"#"==o||"\\"==o&&W(e)){if(m&&""==h)return"Invalid authority";d-=f(h).length+1,h="",l=le}else h+=o;break;case le:case pe:if(n&&"file"==e.scheme){l=me;continue}if(":"!=o||v){if(o==r||"/"==o||"?"==o||"#"==o||"\\"==o&&W(e)){if(W(e)&&""==h)return"Invalid host";if(n&&""==h&&($(e)||null!==e.port))return;if(c=U(e,h))return c;if(h="",l=ve,n)return;continue}"["==o?v=!0:"]"==o&&(v=!1),h+=o}else{if(""==h)return"Invalid host";if(c=U(e,h))return c;if(h="",l=de,n==pe)return}break;case de:if(!A.test(o)){if(o==r||"/"==o||"?"==o||"#"==o||"\\"==o&&W(e)||n){if(""!=h){var w=parseInt(h,10);if(w>65535)return"Invalid port";e.port=W(e)&&w===H[e.scheme]?null:w,h=""}if(n)return;l=ve;continue}return"Invalid port"}h+=o;break;case fe:if(e.scheme="file","/"==o||"\\"==o)l=he;else{if(!a||"file"!=a.scheme){l=ge;continue}if(o==r)e.host=a.host,e.path=a.path.slice(),e.query=a.query;else if("?"==o)e.host=a.host,e.path=a.path.slice(),e.query="",l=xe;else{if("#"!=o){X(i.slice(d).join(""))||(e.host=a.host,e.path=a.path.slice(),K(e)),l=ge;continue}e.host=a.host,e.path=a.path.slice(),e.query=a.query,e.fragment="",l=be}}break;case he:if("/"==o||"\\"==o){l=me;break}a&&"file"==a.scheme&&!X(i.slice(d).join(""))&&(Z(a.path[0],!0)?e.path.push(a.path[0]):e.host=a.host),l=ge;continue;case me:if(o==r||"/"==o||"\\"==o||"?"==o||"#"==o){if(!n&&Z(h))l=ge;else if(""==h){if(e.host="",n)return;l=ve}else{if(c=U(e,h))return c;if("localhost"==e.host&&(e.host=""),n)return;h="",l=ve}continue}h+=o;break;case ve:if(W(e)){if(l=ge,"/"!=o&&"\\"!=o)continue}else if(n||"?"!=o)if(n||"#"!=o){if(o!=r&&(l=ge,"/"!=o))continue}else e.fragment="",l=be;else e.query="",l=xe;break;case ge:if(o==r||"/"==o||"\\"==o&&W(e)||!n&&("?"==o||"#"==o)){if(".."===(u=(u=h).toLowerCase())||"%2e."===u||".%2e"===u||"%2e%2e"===u?(K(e),"/"==o||"\\"==o&&W(e)||e.path.push("")):Q(h)?"/"==o||"\\"==o&&W(e)||e.path.push(""):("file"==e.scheme&&!e.path.length&&Z(h)&&(e.host&&(e.host=""),h=h.charAt(0)+":"),e.path.push(h)),h="","file"==e.scheme&&(o==r||"?"==o||"#"==o))for(;e.path.length>1&&""===e.path[0];)e.path.shift();"?"==o?(e.query="",l=xe):"#"==o&&(e.fragment="",l=be)}else h+=Y(o,V);break;case ye:"?"==o?(e.query="",l=xe):"#"==o?(e.fragment="",l=be):o!=r&&(e.path[0]+=Y(o,z));break;case xe:n||"#"!=o?o!=r&&("'"==o&&W(e)?e.query+="%27":e.query+="#"==o?"%23":Y(o,z)):(e.fragment="",l=be);break;case be:o!=r&&(e.fragment+=Y(o,B))}d++}},_e=function(e){var t,n,r=l(this,_e,"URL"),a=arguments.length>1?arguments[1]:void 0,o=String(e),s=_(r,{type:"URL"});if(void 0!==a)if(a instanceof _e)t=k(a);else if(n=we(t={},String(a)))throw TypeError(n);if(n=we(s,o,null,t))throw TypeError(n);var c=s.searchParams=new b,u=w(c);u.updateSearchParams(s.query),u.updateURL=function(){s.query=String(c)||null},i||(r.href=Ee.call(r),r.origin=Se.call(r),r.protocol=Re.call(r),r.username=Te.call(r),r.password=Ae.call(r),r.host=De.call(r),r.hostname=Oe.call(r),r.port=Ie.call(r),r.pathname=je.call(r),r.search=Ce.call(r),r.searchParams=Ne.call(r),r.hash=Le.call(r))},ke=_e.prototype,Ee=function(){var e=k(this),t=e.scheme,n=e.username,r=e.password,a=e.host,i=e.port,o=e.path,s=e.query,c=e.fragment,u=t+":";return null!==a?(u+="//",$(e)&&(u+=n+(r?":"+r:"")+"@"),u+=F(a),null!==i&&(u+=":"+i)):"file"==t&&(u+="//"),u+=e.cannotBeABaseURL?o[0]:o.length?"/"+o.join("/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},Se=function(){var e=k(this),t=e.scheme,n=e.port;if("blob"==t)try{return new URL(t.path[0]).origin}catch(e){return"null"}return"file"!=t&&W(e)?t+"://"+F(e.host)+(null!==n?":"+n:""):"null"},Re=function(){return k(this).scheme+":"},Te=function(){return k(this).username},Ae=function(){return k(this).password},De=function(){var e=k(this),t=e.host,n=e.port;return null===t?"":null===n?F(t):F(t)+":"+n},Oe=function(){var e=k(this).host;return null===e?"":F(e)},Ie=function(){var e=k(this).port;return null===e?"":String(e)},je=function(){var e=k(this),t=e.path;return e.cannotBeABaseURL?t[0]:t.length?"/"+t.join("/"):""},Ce=function(){var e=k(this).query;return e?"?"+e:""},Ne=function(){return k(this).searchParams},Le=function(){var e=k(this).fragment;return e?"#"+e:""},qe=function(e,t){return{get:e,set:t,configurable:!0,enumerable:!0}};if(i&&c(ke,{href:qe(Ee,function(e){var t=k(this),n=String(e),r=we(t,n);if(r)throw TypeError(r);w(t.searchParams).updateSearchParams(t.query)}),origin:qe(Se),protocol:qe(Re,function(e){var t=k(this);we(t,String(e)+":",ee)}),username:qe(Te,function(e){var t=k(this),n=f(String(e));if(!J(t)){t.username="";for(var r=0;r<n.length;r++)t.username+=Y(n[r],G)}}),password:qe(Ae,function(e){var t=k(this),n=f(String(e));if(!J(t)){t.password="";for(var r=0;r<n.length;r++)t.password+=Y(n[r],G)}}),host:qe(De,function(e){var t=k(this);t.cannotBeABaseURL||we(t,String(e),le)}),hostname:qe(Oe,function(e){var t=k(this);t.cannotBeABaseURL||we(t,String(e),pe)}),port:qe(Ie,function(e){var t=k(this);J(t)||(""==(e=String(e))?t.port=null:we(t,e,de))}),pathname:qe(je,function(e){var t=k(this);t.cannotBeABaseURL||(t.path=[],we(t,e+"",ve))}),search:qe(Ce,function(e){var t=k(this);""==(e=String(e))?t.query=null:("?"==e.charAt(0)&&(e=e.slice(1)),t.query="",we(t,e,xe)),w(t.searchParams).updateSearchParams(t.query)}),searchParams:qe(Ne),hash:qe(Le,function(e){var t=k(this);""!=(e=String(e))?("#"==e.charAt(0)&&(e=e.slice(1)),t.fragment="",we(t,e,be)):t.fragment=null})}),u(ke,"toJSON",function(){return Ee.call(this)},{enumerable:!0}),u(ke,"toString",function(){return Ee.call(this)},{enumerable:!0}),x){var Ue=x.createObjectURL,Pe=x.revokeObjectURL;Ue&&u(_e,"createObjectURL",function(e){return Ue.apply(x,arguments)}),Pe&&u(_e,"revokeObjectURL",function(e){return Pe.apply(x,arguments)})}v(_e,"URL"),a({global:!0,forced:!o,sham:!i},{URL:_e})},function(e,t,n){"use strict";var r=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,s=String.fromCharCode,c=function(e){return e+22+75*(e<26)},u=function(e,t,n){var r=0;for(e=n?o(e/700):e>>1,e+=o(e/t);e>455;r+=36)e=o(e/35);return o(r+36*e/(e+38))},l=function(e){var t,n,r=[],a=(e=function(e){for(var t=[],n=0,r=e.length;n<r;){var a=e.charCodeAt(n++);if(a>=55296&&a<=56319&&n<r){var i=e.charCodeAt(n++);56320==(64512&i)?t.push(((1023&a)<<10)+(1023&i)+65536):(t.push(a),n--)}else t.push(a)}return t}(e)).length,l=128,p=0,d=72;for(t=0;t<e.length;t++)(n=e[t])<128&&r.push(s(n));var f=r.length,h=f;for(f&&r.push("-");h<a;){var m=2147483647;for(t=0;t<e.length;t++)(n=e[t])>=l&&n<m&&(m=n);var v=h+1;if(m-l>o((2147483647-p)/v))throw RangeError(i);for(p+=(m-l)*v,l=m,t=0;t<e.length;t++){if((n=e[t])<l&&++p>2147483647)throw RangeError(i);if(n==l){for(var g=p,y=36;;y+=36){var x=y<=d?1:y>=d+26?26:y-d;if(g<x)break;var b=g-x,w=36-x;r.push(s(c(x+b%w))),g=o(b/w)}r.push(s(c(g))),d=u(p,v,h==f),p=0,++h}}++p,++l}return r.join("")};e.exports=function(e){var t,n,i=[],o=e.toLowerCase().replace(a,".").split(".");for(t=0;t<o.length;t++)n=o[t],i.push(r.test(n)?"xn--"+l(n):n);return i.join(".")}},function(e,t,n){var r=n(4),a=n(65);e.exports=function(e){var t=a(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return r(t.call(e))}},function(e,t,n){"use strict";n(0)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function c(e,t,n,r){var a=t&&t.prototype instanceof m?t:m,i=Object.create(a.prototype),o=new T(r||[]);return i._invoke=function(e,t,n){var r=l;return function(a,i){if(r===d)throw new Error("Generator is already running");if(r===f){if("throw"===a)throw i;return D()}for(n.method=a,n.arg=i;;){var o=n.delegate;if(o){var s=E(o,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=u(e,t,n);if("normal"===c.type){if(r=n.done?f:p,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=f,n.method="throw",n.arg=c.arg)}}}(e,n,o),i}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var l="suspendedStart",p="suspendedYield",d="executing",f="completed",h={};function m(){}function v(){}function g(){}var y={};y[i]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(A([])));b&&b!==n&&r.call(b,i)&&(y=b);var w=g.prototype=m.prototype=Object.create(y);function _(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function k(e){var t;this._invoke=function(n,a){function i(){return new Promise(function(t,i){!function t(n,a,i,o){var s=u(e[n],e,a);if("throw"!==s.type){var c=s.arg,l=c.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(e){t("next",e,i,o)},function(e){t("throw",e,i,o)}):Promise.resolve(l).then(function(e){c.value=e,i(c)},function(e){return t("throw",e,i,o)})}o(s.arg)}(n,a,t,i)})}return t=t?t.then(i,i):i()}}function E(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,E(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=u(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var i=a.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function A(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,o=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return o.next=o}}return{next:D}}function D(){return{value:t,done:!0}}return v.prototype=w.constructor=g,g.constructor=v,g[s]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},_(k.prototype),k.prototype[o]=function(){return this},e.AsyncIterator=k,e.async=function(t,n,r,a){var i=new k(c(t,n,r,a));return e.isGeneratorFunction(n)?i:i.next().then(function(e){return e.done?e.value:i.next()})},_(w),w[s]="Generator",w[i]=function(){return this},w.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(R),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return s.type="throw",s.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var c=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(c&&u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=e,o.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;R(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,r=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),a=new RegExp("^"+n.source+r.source+"*(?::"+n.source+r.source+"*)?$"),i=0,o=1,s=2,c=3,u=4,l=5,p=6,d=7;function f(){}function h(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function m(e,t,n,r,a,f){for(var h,m=++t,v=i;;){var g=e.charAt(m);switch(g){case"=":if(v===o)h=e.slice(t,m),v=c;else{if(v!==s)throw new Error("attribute equal must after attrName");v=c}break;case"'":case'"':if(v===c||v===o){if(v===o&&(f.warning('attribute value must after "="'),h=e.slice(t,m)),t=m+1,!((m=e.indexOf(g,t))>0))throw new Error("attribute value no end '"+g+"' match");y=e.slice(t,m).replace(/&#?\w+;/g,a),n.add(h,y,t-1),v=l}else{if(v!=u)throw new Error('attribute value must after "="');y=e.slice(t,m).replace(/&#?\w+;/g,a),n.add(h,y,t),f.warning('attribute "'+h+'" missed start quot('+g+")!!"),t=m+1,v=l}break;case"/":switch(v){case i:n.setTagName(e.slice(t,m));case l:case p:case d:v=d,n.closed=!0;case u:case o:case s:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return f.error("unexpected end of input"),v==i&&n.setTagName(e.slice(t,m)),m;case">":switch(v){case i:n.setTagName(e.slice(t,m));case l:case p:case d:break;case u:case o:"/"===(y=e.slice(t,m)).slice(-1)&&(n.closed=!0,y=y.slice(0,-1));case s:v===s&&(y=h),v==u?(f.warning('attribute "'+y+'" missed quot(")!!'),n.add(h,y.replace(/&#?\w+;/g,a),t)):("http://www.w3.org/1999/xhtml"===r[""]&&y.match(/^(?:disabled|checked|selected)$/i)||f.warning('attribute "'+y+'" missed value!! "'+y+'" instead!!'),n.add(y,y,t));break;case c:throw new Error("attribute value missed!!")}return m;case"":g=" ";default:if(g<=" ")switch(v){case i:n.setTagName(e.slice(t,m)),v=p;break;case o:h=e.slice(t,m),v=s;break;case u:var y=e.slice(t,m).replace(/&#?\w+;/g,a);f.warning('attribute "'+y+'" missed quot(")!!'),n.add(h,y,t);case l:v=p}else switch(v){case s:n.tagName;"http://www.w3.org/1999/xhtml"===r[""]&&h.match(/^(?:disabled|checked|selected)$/i)||f.warning('attribute "'+h+'" missed value!! "'+h+'" instead2!!'),n.add(h,h,t),t=m,v=o;break;case l:f.warning('attribute space is required"'+h+'"!!');case p:v=o,t=m;break;case c:v=u,t=m;break;case d:throw new Error("elements closed character '/' and '>' must be connected to")}}m++}}function v(e,t,n){for(var r=e.tagName,a=null,i=e.length;i--;){var o=e[i],s=o.qName,c=o.value;if((d=s.indexOf(":"))>0)var u=o.prefix=s.slice(0,d),l=s.slice(d+1),p="xmlns"===u&&l;else l=s,u=null,p="xmlns"===s&&"";o.localName=l,!1!==p&&(null==a&&(a={},x(n,n={})),n[p]=a[p]=c,o.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(p,c))}for(i=e.length;i--;){(u=(o=e[i]).prefix)&&("xml"===u&&(o.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==u&&(o.uri=n[u||""]))}var d;(d=r.indexOf(":"))>0?(u=e.prefix=r.slice(0,d),l=e.localName=r.slice(d+1)):(u=null,l=e.localName=r);var f=e.uri=n[u||""];if(t.startElement(f,l,r,e),!e.closed)return e.currentNSMap=n,e.localNSMap=a,!0;if(t.endElement(f,l,r),a)for(u in a)t.endPrefixMapping(u)}function g(e,t,n,r,a){if(/^(?:script|textarea)$/i.test(n)){var i=e.indexOf("</"+n+">",t),o=e.substring(t+1,i);if(/[&<]/.test(o))return/^script$/i.test(n)?(a.characters(o,0,o.length),i):(o=o.replace(/&#?\w+;/g,r),a.characters(o,0,o.length),i)}return t+1}function y(e,t,n,r){var a=r[n];return null==a&&((a=e.lastIndexOf("</"+n+">"))<t&&(a=e.lastIndexOf("</"+n)),r[n]=a),a<t}function x(e,t){for(var n in e)t[n]=e[n]}function b(e,t,n,r){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(a=e.indexOf("--\x3e",t+4))>t?(n.comment(e,t+4,a-t-4),a+3):(r.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var a=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,a-t-9),n.endCDATA(),a+3}var i=function(e,t){var n,r=[],a=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;a.lastIndex=t,a.exec(e);for(;n=a.exec(e);)if(r.push(n),n[1])return r}(e,t),o=i.length;if(o>1&&/!doctype/i.test(i[0][0])){var s=i[1][0],c=o>3&&/^public$/i.test(i[2][0])&&i[3][0],u=o>4&&i[4][0],l=i[o-1];return n.startDTD(s,c&&c.replace(/^(['"])(.*?)\1$/,"$2"),u&&u.replace(/^(['"])(.*?)\1$/,"$2")),n.endDTD(),l.index+l[0].length}}return-1}function w(e,t,n){var r=e.indexOf("?>",t);if(r){var a=e.substring(t,r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(a){a[0].length;return n.processingInstruction(a[1],a[2]),r+2}return-1}return-1}function _(e){}function k(e,t){return e.__proto__=t,e}f.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),x(t,t={}),function(e,t,n,r,a){function i(e){var t=e.slice(1,-1);return t in n?n[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(a.error("entity not found:"+e),e)}function o(t){if(t>x){var n=e.substring(x,t).replace(/&#?\w+;/g,i);p&&s(x),r.characters(n,0,t-x),x=t}}function s(t,n){for(;t>=u&&(n=l.exec(e));)c=n.index,u=c+n[0].length,p.lineNumber++;p.columnNumber=t-c+1}var c=0,u=0,l=/.*(?:\r\n?|\n)|.*$/g,p=r.locator,d=[{currentNSMap:t}],f={},x=0;for(;;){try{var k=e.indexOf("<",x);if(k<0){if(!e.substr(x).match(/^\s*$/)){var E=r.doc,S=E.createTextNode(e.substr(x));E.appendChild(S),r.currentElement=S}return}switch(k>x&&o(k),e.charAt(k+1)){case"/":var R=e.indexOf(">",k+3),T=e.substring(k+2,R),A=d.pop();R<0?(T=e.substring(k+2).replace(/[\s<].*/,""),a.error("end tag name: "+T+" is not complete:"+A.tagName),R=k+1+T.length):T.match(/\s</)&&(T=T.replace(/[\s<].*/,""),a.error("end tag name: "+T+" maybe not complete"),R=k+1+T.length);var D=A.localNSMap,O=A.tagName==T;if(O||A.tagName&&A.tagName.toLowerCase()==T.toLowerCase()){if(r.endElement(A.uri,A.localName,T),D)for(var I in D)r.endPrefixMapping(I);O||a.fatalError("end tag name: "+T+" is not match the current start tagName:"+A.tagName)}else d.push(A);R++;break;case"?":p&&s(k),R=w(e,k,r);break;case"!":p&&s(k),R=b(e,k,r,a);break;default:p&&s(k);var j=new _,C=d[d.length-1].currentNSMap,N=(R=m(e,k,j,C,i,a),j.length);if(!j.closed&&y(e,R,j.tagName,f)&&(j.closed=!0,n.nbsp||a.warning("unclosed xml attribute")),p&&N){for(var L=h(p,{}),q=0;q<N;q++){var U=j[q];s(U.offset),U.locator=h(p,{})}r.locator=L,v(j,r,C)&&d.push(j),r.locator=p}else v(j,r,C)&&d.push(j);"http://www.w3.org/1999/xhtml"!==j.uri||j.closed?R++:R=g(e,R,j.tagName,i,r)}}catch(e){a.error("element parse error: "+e),R=-1}R>x?x=R:o(Math.max(k,x)+1)}}(e,t,n,r,this.errorHandler),r.endDocument()}},_.prototype={setTagName:function(e){if(!a.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,n){if(!a.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},k({},k.prototype)instanceof k||(k=function(e,t){function n(){}for(t in n.prototype=t,n=new n,e)n[t]=e[t];return n}),t.XMLReader=f},function(e,t){var n,r;n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&r.rotl(e,8)|4278255360&r.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=r.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],n=0,r=0;n<e.length;n++,r+=8)t[r>>>5]|=e[n]<<24-r%32;return t},wordsToBytes:function(e){for(var t=[],n=0;n<32*e.length;n+=8)t.push(e[n>>>5]>>>24-n%32&255);return t},bytesToHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push((e[n]>>>4).toString(16)),t.push((15&e[n]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t},bytesToBase64:function(e){for(var t=[],r=0;r<e.length;r+=3)for(var a=e[r]<<16|e[r+1]<<8|e[r+2],i=0;i<4;i++)8*r+6*i<=8*e.length?t.push(n.charAt(a>>>6*(3-i)&63)):t.push("=");return t.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var t=[],r=0,a=0;r<e.length;a=++r%4)0!=a&&t.push((n.indexOf(e.charAt(r-1))&Math.pow(2,-2*a+8)-1)<<2*a|n.indexOf(e.charAt(r))>>>6-2*a);return t}},e.exports=r},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(420):e.exports=n(422)},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.log=function(){var e;return"object"===("undefined"==typeof console?"undefined":r(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,a=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(a=r))}),t.splice(a,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(173)(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,r=60*n,a=60*r,i=24*a,o=7*i,s=365.25*i;function c(e,t,n,r){var a=t>=1.5*n;return Math.round(e/n)+" "+r+(a?"s":"")}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var c=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*s;case"weeks":case"week":case"w":return c*o;case"days":case"day":case"d":return c*i;case"hours":case"hour":case"hrs":case"hr":case"h":return c*a;case"minutes":case"minute":case"mins":case"min":case"m":return c*r;case"seconds":case"second":case"secs":case"sec":case"s":return c*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=i)return c(e,t,i,"day");if(t>=a)return c(e,t,a,"hour");if(t>=r)return c(e,t,r,"minute");if(t>=n)return c(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=i)return Math.round(e/i)+"d";if(t>=a)return Math.round(e/a)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){"use strict";var r=n(423),a=n(31);t.init=function(e){e.inspectOpts={};for(var n=Object.keys(t.inspectOpts),r=0;r<n.length;r++)e.inspectOpts[n[r]]=t.inspectOpts[n[r]]},t.log=function(){return process.stderr.write(a.format.apply(a,arguments)+"\n")},t.formatArgs=function(n){var r=this.namespace;if(this.useColors){var a=this.color,i="[3"+(a<8?a:"8;5;"+a),o="  ".concat(i,";1m").concat(r," [0m");n[0]=o+n[0].split("\n").join("\n"+o),n.push(i+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+r+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):r.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{var i=n(424);i&&(i.stderr||i).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,t){var n=t.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,t){return t.toUpperCase()}),r=process.env[t];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[n]=r,e},{}),e.exports=n(173)(t);var o=e.exports.formatters;o.o=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts)}},function(e,t){e.exports=require("tty")},function(e,t,n){"use strict";const r=n(174),a=n(425),i=process.env;let o;function s(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(!1===o)return 0;if(a("color=16m")||a("color=full")||a("color=truecolor"))return 3;if(a("color=256"))return 2;if(e&&!e.isTTY&&!0!==o)return 0;const t=o?1:0;if("win32"===process.platform){const e=r.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in i)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in i)||"codeship"===i.CI_NAME?1:t;if("TEAMCITY_VERSION"in i)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(i.TEAMCITY_VERSION)?1:0;if("truecolor"===i.COLORTERM)return 3;if("TERM_PROGRAM"in i){const e=parseInt((i.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(i.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(i.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(i.TERM)?1:"COLORTERM"in i?1:(i.TERM,t)}(e))}a("no-color")||a("no-colors")||a("color=false")?o=!1:(a("color")||a("colors")||a("color=true")||a("color=always"))&&(o=!0),"FORCE_COLOR"in i&&(o=0===i.FORCE_COLOR.length||0!==parseInt(i.FORCE_COLOR,10)),e.exports={supportsColor:s,stdout:s(process.stdout),stderr:s(process.stderr)}},function(e,t,n){"use strict";e.exports=(e,t)=>{t=t||process.argv;const n=e.startsWith("-")?"":1===e.length?"-":"--",r=t.indexOf(n+e),a=t.indexOf("--");return-1!==r&&(-1===a||r<a)}},function(e,t,n){var r=n(427).IncomingForm;r.IncomingForm=r,e.exports=r},function(e,t,n){var r=n(175),a=n(70),i=n(31),o=n(90),s=n(428),c=n(429).MultipartParser,u=n(430).QuerystringParser,l=n(432).OctetParser,p=n(433).JSONParser,d=n(177).StringDecoder,f=n(119).EventEmitter,h=n(53).Stream,m=n(174);function v(e){return this instanceof v?(f.call(this),e=e||{},this.error=null,this.ended=!1,this.maxFields=e.maxFields||1e3,this.maxFieldsSize=e.maxFieldsSize||20971520,this.maxFileSize=e.maxFileSize||209715200,this.keepExtensions=e.keepExtensions||!1,this.uploadDir=e.uploadDir||m.tmpdir&&m.tmpdir()||m.tmpDir(),this.encoding=e.encoding||"utf-8",this.headers=null,this.type=null,this.hash=e.hash||!1,this.multiples=e.multiples||!1,this.bytesReceived=null,this.bytesExpected=null,this._parser=null,this._flushing=0,this._fieldsSize=0,this._fileSize=0,this.openedFiles=[],this):new v(e)}i.inherits(v,f),t.IncomingForm=v,v.prototype.parse=function(e,t){if(this.pause=function(){try{e.pause()}catch(e){return this.ended||this._error(e),!1}return!0},this.resume=function(){try{e.resume()}catch(e){return this.ended||this._error(e),!1}return!0},t){var n={},r={};this.on("field",function(e,t){n[e]=t}).on("file",function(e,t){this.multiples&&r[e]?(Array.isArray(r[e])||(r[e]=[r[e]]),r[e].push(t)):r[e]=t}).on("error",function(e){t(e,n,r)}).on("end",function(){t(null,n,r)})}this.writeHeaders(e.headers);var a=this;return e.on("error",function(e){a._error(e)}).on("aborted",function(){a.emit("aborted"),a._error(new Error("Request aborted"))}).on("data",function(e){a.write(e)}).on("end",function(){if(!a.error){var e=a._parser.end();e&&a._error(e)}}),this},v.prototype.writeHeaders=function(e){this.headers=e,this._parseContentLength(),this._parseContentType()},v.prototype.write=function(e){if(!this.error){if(this._parser){this.bytesReceived+=e.length,this.emit("progress",this.bytesReceived,this.bytesExpected);var t=this._parser.write(e);return t!==e.length&&this._error(new Error("parser error, "+t+" of "+e.length+" bytes parsed")),t}this._error(new Error("uninitialized parser"))}},v.prototype.pause=function(){return!1},v.prototype.resume=function(){return!1},v.prototype.onPart=function(e){this.handlePart(e)},v.prototype.handlePart=function(e){var t=this;if(void 0===e.filename){var n="",r=new d(this.encoding);return e.on("data",function(e){t._fieldsSize+=e.length,t._fieldsSize>t.maxFieldsSize?t._error(new Error("maxFieldsSize exceeded, received "+t._fieldsSize+" bytes of field data")):n+=r.write(e)}),void e.on("end",function(){t.emit("field",e.name,n)})}this._flushing++;var a=new s({path:this._uploadPath(e.filename),name:e.filename,type:e.mime,hash:t.hash});this.emit("fileBegin",e.name,a),a.open(),this.openedFiles.push(a),e.on("data",function(e){t._fileSize+=e.length,t._fileSize>t.maxFileSize?t._error(new Error("maxFileSize exceeded, received "+t._fileSize+" bytes of file data")):0!=e.length&&(t.pause(),a.write(e,function(){t.resume()}))}),e.on("end",function(){a.end(function(){t._flushing--,t.emit("file",e.name,a),t._maybeEnd()})})},v.prototype._parseContentType=function(){if(0!==this.bytesExpected)if(this.headers["content-type"])if(this.headers["content-type"].match(/octet-stream/i))this._initOctetStream();else if(this.headers["content-type"].match(/urlencoded/i))this._initUrlencoded();else if(this.headers["content-type"].match(/multipart/i)){var e=this.headers["content-type"].match(/boundary=(?:"([^"]+)"|([^;]+))/i);e?this._initMultipart(e[1]||e[2]):this._error(new Error("bad content-type header, no multipart boundary"))}else this.headers["content-type"].match(/json/i)?this._initJSONencoded():this._error(new Error("bad content-type header, unknown content-type: "+this.headers["content-type"]));else this._error(new Error("bad content-type header, no content-type"));else this._parser=function(e){return{end:function(){return e.ended=!0,e._maybeEnd(),null}}}(this)},v.prototype._error=function(e){this.error||this.ended||(this.error=e,this.emit("error",e),Array.isArray(this.openedFiles)&&this.openedFiles.forEach(function(e){e._writeStream.destroy(),setTimeout(a.unlink,0,e.path,function(e){})}))},v.prototype._parseContentLength=function(){this.bytesReceived=0,this.headers["content-length"]?this.bytesExpected=parseInt(this.headers["content-length"],10):void 0===this.headers["transfer-encoding"]&&(this.bytesExpected=0),null!==this.bytesExpected&&this.emit("progress",this.bytesReceived,this.bytesExpected)},v.prototype._newParser=function(){return new c},v.prototype._initMultipart=function(e){this.type="multipart";var t,n,r,a=new c,i=this;a.initWithBoundary(e),a.onPartBegin=function(){(r=new h).readable=!0,r.headers={},r.name=null,r.filename=null,r.mime=null,r.transferEncoding="binary",r.transferBuffer="",t="",n=""},a.onHeaderField=function(e,n,r){t+=e.toString(i.encoding,n,r)},a.onHeaderValue=function(e,t,r){n+=e.toString(i.encoding,t,r)},a.onHeaderEnd=function(){t=t.toLowerCase(),r.headers[t]=n;var e=n.match(/\bname=("([^"]*)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t\/]+))/i);"content-disposition"==t?(e&&(r.name=e[2]||e[3]||""),r.filename=i._fileName(n)):"content-type"==t?r.mime=n:"content-transfer-encoding"==t&&(r.transferEncoding=n.toLowerCase()),t="",n=""},a.onHeadersEnd=function(){switch(r.transferEncoding){case"binary":case"7bit":case"8bit":a.onPartData=function(e,t,n){r.emit("data",e.slice(t,n))},a.onPartEnd=function(){r.emit("end")};break;case"base64":a.onPartData=function(e,t,n){r.transferBuffer+=e.slice(t,n).toString("ascii");var a=4*parseInt(r.transferBuffer.length/4,10);r.emit("data",new Buffer(r.transferBuffer.substring(0,a),"base64")),r.transferBuffer=r.transferBuffer.substring(a)},a.onPartEnd=function(){r.emit("data",new Buffer(r.transferBuffer,"base64")),r.emit("end")};break;default:return i._error(new Error("unknown transfer-encoding"))}i.onPart(r)},a.onEnd=function(){i.ended=!0,i._maybeEnd()},this._parser=a},v.prototype._fileName=function(e){var t=e.match(/\bfilename=("(.*?)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t\/]+))($|;\s)/i);if(t){var n=t[2]||t[3]||"",r=n.substr(n.lastIndexOf("\\")+1);return r=(r=r.replace(/%22/g,'"')).replace(/&#([\d]{4});/g,function(e,t){return String.fromCharCode(t)})}},v.prototype._initUrlencoded=function(){this.type="urlencoded";var e=new u(this.maxFields),t=this;e.onField=function(e,n){t.emit("field",e,n)},e.onEnd=function(){t.ended=!0,t._maybeEnd()},this._parser=e},v.prototype._initOctetStream=function(){this.type="octet-stream";var e=this.headers["x-file-name"],t=this.headers["content-type"],n=new s({path:this._uploadPath(e),name:e,type:t});this.emit("fileBegin",e,n),n.open(),this.openedFiles.push(n),this._flushing++;var r=this;r._parser=new l;var a=0;r._parser.on("data",function(e){r.pause(),a++,n.write(e,function(){a--,r.resume(),r.ended&&r._parser.emit("doneWritingFile")})}),r._parser.on("end",function(){r._flushing--,r.ended=!0;var e=function(){n.end(function(){r.emit("file","file",n),r._maybeEnd()})};0===a?e():r._parser.once("doneWritingFile",e)})},v.prototype._initJSONencoded=function(){this.type="json";var e=new p(this),t=this;e.onField=function(e,n){t.emit("field",e,n)},e.onEnd=function(){t.ended=!0,t._maybeEnd()},this._parser=e},v.prototype._uploadPath=function(e){var t="upload_"+r.randomBytes(16).toString("hex");if(this.keepExtensions){var n=o.extname(e);t+=n=n.replace(/(\.[a-z0-9]+).*/i,"$1")}return o.join(this.uploadDir,t)},v.prototype._maybeEnd=function(){!this.ended||this._flushing||this.error||this.emit("end")}},function(e,t,n){var r=n(31),a=n(70),i=n(119).EventEmitter,o=n(175);function s(e){for(var t in i.call(this),this.size=0,this.path=null,this.name=null,this.type=null,this.hash=null,this.lastModifiedDate=null,this._writeStream=null,e)this[t]=e[t];"string"==typeof this.hash?this.hash=o.createHash(e.hash):this.hash=null}e.exports=s,r.inherits(s,i),s.prototype.open=function(){this._writeStream=new a.WriteStream(this.path)},s.prototype.toJSON=function(){var e={size:this.size,path:this.path,name:this.name,type:this.type,mtime:this.lastModifiedDate,length:this.length,filename:this.filename,mime:this.mime};return this.hash&&""!=this.hash&&(e.hash=this.hash),e},s.prototype.write=function(e,t){var n=this;if(n.hash&&n.hash.update(e),this._writeStream.closed)return t();this._writeStream.write(e,function(){n.lastModifiedDate=new Date,n.size+=e.length,n.emit("progress",n.size),t()})},s.prototype.end=function(e){var t=this;t.hash&&(t.hash=t.hash.digest("hex")),this._writeStream.end(function(){t.emit("end"),e()})}},function(e,t,n){var r=n(176).Buffer,a=0,i={PARSER_UNINITIALIZED:a++,START:a++,START_BOUNDARY:a++,HEADER_FIELD_START:a++,HEADER_FIELD:a++,HEADER_VALUE_START:a++,HEADER_VALUE:a++,HEADER_VALUE_ALMOST_DONE:a++,HEADERS_ALMOST_DONE:a++,PART_DATA_START:a++,PART_DATA:a++,PART_END:a++,END:a++},o=1,s=o,c=o*=2,u=function(e){return 32|e};for(a in i)t[a]=i[a];function l(){this.boundary=null,this.boundaryChars=null,this.lookbehind=null,this.state=i.PARSER_UNINITIALIZED,this.index=null,this.flags=0}t.MultipartParser=l,l.stateToString=function(e){for(var t in i){if(i[t]===e)return t}},l.prototype.initWithBoundary=function(e){this.boundary=new r(e.length+4),this.boundary.write("\r\n--",0),this.boundary.write(e,4),this.lookbehind=new r(this.boundary.length+8),this.state=i.START,this.boundaryChars={};for(var t=0;t<this.boundary.length;t++)this.boundaryChars[this.boundary[t]]=!0},l.prototype.write=function(e){var t,n,r=this,a=0,o=e.length,l=this.index,p=this.index,d=this.state,f=this.flags,h=this.lookbehind,m=this.boundary,v=this.boundaryChars,g=this.boundary.length,y=g-1,x=e.length,b=function(e){r[e+"Mark"]=a},w=function(e,t,n,a){if(void 0===n||n!==a){var i="on"+e.substr(0,1).toUpperCase()+e.substr(1);i in r&&r[i](t,n,a)}},_=function(t,n){var i=t+"Mark";i in r&&(n?(w(t,e,r[i],a),delete r[i]):(w(t,e,r[i],e.length),r[i]=0))};for(a=0;a<o;a++)switch(t=e[a],d){case i.PARSER_UNINITIALIZED:return a;case i.START:p=0,d=i.START_BOUNDARY;case i.START_BOUNDARY:if(p==m.length-2){if(45==t)f|=c;else if(13!=t)return a;p++;break}if(p-1==m.length-2){if(f&c&&45==t)w("end"),d=i.END,f=0;else{if(f&c||10!=t)return a;p=0,w("partBegin"),d=i.HEADER_FIELD_START}break}t!=m[p+2]&&(p=-2),t==m[p+2]&&p++;break;case i.HEADER_FIELD_START:d=i.HEADER_FIELD,b("headerField"),p=0;case i.HEADER_FIELD:if(13==t){delete r["headerField"+"Mark"],d=i.HEADERS_ALMOST_DONE;break}if(p++,45==t)break;if(58==t){if(1==p)return a;_("headerField",!0),d=i.HEADER_VALUE_START;break}if((n=u(t))<97||n>122)return a;break;case i.HEADER_VALUE_START:if(32==t)break;b("headerValue"),d=i.HEADER_VALUE;case i.HEADER_VALUE:13==t&&(_("headerValue",!0),w("headerEnd"),d=i.HEADER_VALUE_ALMOST_DONE);break;case i.HEADER_VALUE_ALMOST_DONE:if(10!=t)return a;d=i.HEADER_FIELD_START;break;case i.HEADERS_ALMOST_DONE:if(10!=t)return a;w("headersEnd"),d=i.PART_DATA_START;break;case i.PART_DATA_START:d=i.PART_DATA,b("partData");case i.PART_DATA:if(l=p,0===p){for(a+=y;a<x&&!(e[a]in v);)a+=g;t=e[a-=y]}if(p<m.length)m[p]==t?(0===p&&_("partData",!0),p++):p=0;else if(p==m.length)p++,13==t?f|=s:45==t?f|=c:p=0;else if(p-1==m.length)if(f&s){if(p=0,10==t){f&=~s,w("partEnd"),w("partBegin"),d=i.HEADER_FIELD_START;break}}else f&c&&45==t?(w("partEnd"),w("end"),d=i.END,f=0):p=0;p>0?h[p-1]=t:l>0&&(w("partData",h,0,l),l=0,b("partData"),a--);break;case i.END:break;default:return a}return _("headerField"),_("headerValue"),_("partData"),this.index=p,this.state=d,this.flags=f,o},l.prototype.end=function(){var e=function(e,t){var n="on"+t.substr(0,1).toUpperCase()+t.substr(1);n in e&&e[n]()};if(this.state==i.HEADER_FIELD_START&&0===this.index||this.state==i.PART_DATA&&this.index==this.boundary.length)e(this,"partEnd"),e(this,"end");else if(this.state!=i.END)return new Error("MultipartParser.end(): stream ended unexpectedly: "+this.explain())},l.prototype.explain=function(){return"state = "+l.stateToString(this.state)}},function(e,t,n){var r=n(431);function a(e){this.maxKeys=e,this.buffer=""}t.QuerystringParser=a,a.prototype.write=function(e){return this.buffer+=e.toString("ascii"),e.length},a.prototype.end=function(){var e=r.parse(this.buffer,"&","=",{maxKeys:this.maxKeys});for(var t in e)this.onField(t,e[t]);this.buffer="",this.onEnd()}},function(e,t){e.exports=require("querystring")},function(e,t,n){var r=n(119).EventEmitter;function a(e){if(!(this instanceof a))return new a(e);r.call(this)}n(31).inherits(a,r),t.OctetParser=a,a.prototype.write=function(e){return this.emit("data",e),e.length},a.prototype.end=function(){this.emit("end")}},function(e,t,n){var r=n(176).Buffer;function a(e){this.parent=e,this.chunks=[],this.bytesWritten=0}t.JSONParser=a,a.prototype.write=function(e){return this.bytesWritten+=e.length,this.chunks.push(e),e.length},a.prototype.end=function(){try{var e=JSON.parse(r.concat(this.chunks));for(var t in e)this.onField(t,e[t])}catch(e){this.parent.emit("error",e)}this.data=null,this.onEnd()}},function(e,t,n){var r=n(435),a=n(31),i=n(90),o=n(120),s=n(178),c=n(71).parse,u=n(70),l=n(438),p=n(441),d=n(445);function f(e){if(!(this instanceof f))return new f;for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],r.call(this),e=e||{})this[t]=e[t]}e.exports=f,a.inherits(f,r),f.LINE_BREAK="\r\n",f.DEFAULT_CONTENT_TYPE="application/octet-stream",f.prototype.append=function(e,t,n){"string"==typeof(n=n||{})&&(n={filename:n});var i=r.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),a.isArray(t))this._error(new Error("Arrays are not supported."));else{var o=this._multiPartHeader(e,t,n),s=this._multiPartFooter();i(o),i(t),i(s),this._trackLength(o,t,n)}},f.prototype._trackLength=function(e,t,n){var r=0;null!=n.knownLength?r+=+n.knownLength:Buffer.isBuffer(t)?r=t.length:"string"==typeof t&&(r=Buffer.byteLength(t)),this._valueLength+=r,this._overheadLength+=Buffer.byteLength(e)+f.LINE_BREAK.length,t&&(t.path||t.readable&&t.hasOwnProperty("httpVersion"))&&(n.knownLength||this._valuesToMeasure.push(t))},f.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?t(null,e.end+1-(e.start?e.start:0)):u.stat(e.path,function(n,r){var a;n?t(n):(a=r.size-(e.start?e.start:0),t(null,a))}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(n){e.pause(),t(null,+n.headers["content-length"])}),e.resume()):t("Unknown stream")},f.prototype._multiPartHeader=function(e,t,n){if("string"==typeof n.header)return n.header;var r,a=this._getContentDisposition(t,n),i=this._getContentType(t,n),o="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(a||[]),"Content-Type":[].concat(i||[])};for(var c in"object"==typeof n.header&&d(s,n.header),s)s.hasOwnProperty(c)&&null!=(r=s[c])&&(Array.isArray(r)||(r=[r]),r.length&&(o+=c+": "+r.join("; ")+f.LINE_BREAK));return"--"+this.getBoundary()+f.LINE_BREAK+o+f.LINE_BREAK},f.prototype._getContentDisposition=function(e,t){var n,r;return"string"==typeof t.filepath?n=i.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?n=i.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(n=i.basename(e.client._httpMessage.path)),n&&(r='filename="'+n+'"'),r},f.prototype._getContentType=function(e,t){var n=t.contentType;return!n&&e.name&&(n=l.lookup(e.name)),!n&&e.path&&(n=l.lookup(e.path)),!n&&e.readable&&e.hasOwnProperty("httpVersion")&&(n=e.headers["content-type"]),n||!t.filepath&&!t.filename||(n=l.lookup(t.filepath||t.filename)),n||"object"!=typeof e||(n=f.DEFAULT_CONTENT_TYPE),n},f.prototype._multiPartFooter=function(){return function(e){var t=f.LINE_BREAK;0===this._streams.length&&(t+=this._lastBoundary()),e(t)}.bind(this)},f.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+f.LINE_BREAK},f.prototype.getHeaders=function(e){var t,n={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(n[t.toLowerCase()]=e[t]);return n},f.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},f.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},f.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},f.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},f.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;this._streams.length&&(t+=this._lastBoundary().length),this._valuesToMeasure.length?p.parallel(this._valuesToMeasure,this._lengthRetriever,function(n,r){n?e(n):(r.forEach(function(e){t+=e}),e(null,t))}):process.nextTick(e.bind(this,null,t))},f.prototype.submit=function(e,t){var n,r,a={method:"post"};return"string"==typeof e?(e=c(e),r=d({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},a)):(r=d(e,a)).port||(r.port="https:"==r.protocol?443:80),r.headers=this.getHeaders(e.headers),n="https:"==r.protocol?s.request(r):o.request(r),this.getLength(function(e,r){e?this._error(e):(n.setHeader("Content-Length",r),this.pipe(n),t&&(n.on("error",t),n.on("response",t.bind(this,null))))}.bind(this)),n},f.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},f.prototype.toString=function(){return"[object FormData]"}},function(e,t,n){var r=n(31),a=n(53).Stream,i=n(436),o=n(437);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null}e.exports=s,r.inherits(s,a),s.create=function(e){var t=new this;for(var n in e=e||{})t[n]=e[n];return t},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof i)){var t=i.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=t}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,t){return a.prototype.pipe.call(this,e,t),this.resume(),e},s.prototype._getNext=function(){this._currentStream=null;var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),o(this._pipeNext.bind(this,e))}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var t=e;this.write(t),this._getNext()},s.prototype._handleErrors=function(e){var t=this;e.on("error",function(e){t._emitError(e)})},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},function(e,t,n){var r=n(53).Stream,a=n(31);function i(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=i,a.inherits(i,r),i.create=function(e,t){var n=new this;for(var r in t=t||{})n[r]=t[r];n.source=e;var a=e.emit;return e.emit=function(){return n._handleEmit(arguments),a.apply(e,arguments)},e.on("error",function(){}),n.pauseStream&&e.pause(),n},Object.defineProperty(i.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),i.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},i.prototype.resume=function(){this._released||this.release(),this.source.resume()},i.prototype.pause=function(){this.source.pause()},i.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},i.prototype.pipe=function(){var e=r.prototype.pipe.apply(this,arguments);return this.resume(),e},i.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},i.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,n){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r,a,i,o=n(439),s=n(90).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,u=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),n=t&&o[t[1].toLowerCase()];return n&&n.charset?n.charset:!(!t||!u.test(t[1]))&&"UTF-8"}t.charset=l,t.charsets={lookup:l},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var n=-1===e.indexOf("/")?t.lookup(e):e;if(!n)return!1;if(-1===n.indexOf("charset")){var r=t.charset(n);r&&(n+="; charset="+r.toLowerCase())}return n},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),r=n&&t.extensions[n[1].toLowerCase()];if(!r||!r.length)return!1;return r[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var n=s("x."+e).toLowerCase().substr(1);if(!n)return!1;return t.types[n]||!1},t.types=Object.create(null),r=t.extensions,a=t.types,i=["nginx","apache",void 0,"iana"],Object.keys(o).forEach(function(e){var t=o[e],n=t.extensions;if(n&&n.length){r[e]=n;for(var s=0;s<n.length;s++){var c=n[s];if(a[c]){var u=i.indexOf(o[a[c]].source),l=i.indexOf(t.source);if("application/octet-stream"!==a[c]&&(u>l||u===l&&"application/"===a[c].substr(0,12)))continue}a[c]=e}}})},function(e,t,n){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=n(440)},function(e){e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cbor":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma","es"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true},"application/fhir+json":{"source":"iana","compressible":true},"application/fhir+xml":{"source":"iana","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mmt-usd+xml":{"source":"iana","compressible":true},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","compressible":true},"application/msc-mixer+xml":{"source":"iana","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana"},"application/n-triples":{"source":"iana"},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana"},"application/news-groupinfo":{"source":"iana"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana"},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","compressible":true},"application/pidf-diff+xml":{"source":"iana","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true},"application/route-s-tsid+xml":{"source":"iana","compressible":true},"application/route-usd+xml":{"source":"iana","compressible":true},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana"},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true},"application/tve-trigger":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true},"application/urc-targetdesc+xml":{"source":"iana","compressible":true},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["keynote"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","compressible":true},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"apache","extensions":["der","crt","pem"]},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true},"application/xcap-caps+xml":{"source":"iana","compressible":true},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana"},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/stl":{"source":"iana"},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana"},"model/vnd.parasolid.transmit.binary":{"source":"iana"},"model/vnd.parasolid.transmit.text":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.usdz+zip":{"source":"iana","compressible":false},"model/vnd.valve.source.compiled-map":{"source":"iana"},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana"},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana"},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana","compressible":false},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},function(e,t,n){e.exports={parallel:n(442),serial:n(444),serialOrdered:n(184)}},function(e,t,n){var r=n(179),a=n(182),i=n(183);e.exports=function(e,t,n){var o=a(e);for(;o.index<(o.keyedList||e).length;)r(e,t,o,function(e,t){e?n(e,t):0!==Object.keys(o.jobs).length||n(null,o.results)}),o.index++;return i.bind(o,n)}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,n){var r=n(184);e.exports=function(e,t,n){return r(e,t,null,n)}},function(e,t){e.exports=function(e,t){return Object.keys(t).forEach(function(n){e[n]=e[n]||t[n]}),e}},function(e,t,n){"use strict";const r=n(31),a=n(53),i=n(447);function o(e){a.call(this);const t=this.res=e.res;this.request=e,this.req=e.req,this.text=t.text,this.body=void 0!==t.body?t.body:{},this.files=t.files||{},this.buffered="string"==typeof this.text,this.header=this.headers=t.headers,this._setStatusProperties(t.statusCode),this._setHeaderProperties(this.header),this.setEncoding=t.setEncoding.bind(t),t.on("data",this.emit.bind(this,"data")),t.on("end",this.emit.bind(this,"end")),t.on("close",this.emit.bind(this,"close")),t.on("error",this.emit.bind(this,"error"))}e.exports=o,r.inherits(o,a),i(o.prototype),o.prototype.destroy=function(e){this.res.destroy(e)},o.prototype.pause=function(){this.res.pause()},o.prototype.resume=function(){this.res.resume()},o.prototype.toError=function(){const e=this.req,t=e.method,n=e.path,r=`cannot ${t} ${n} (${this.status})`,a=new Error(r);return a.status=this.status,a.text=this.text,a.method=t,a.path=n,a},o.prototype.setStatusProperties=function(e){return console.warn("In superagent 2.x setStatusProperties is a private method"),this._setStatusProperties(e)},o.prototype.toJSON=function(){return{req:this.request.toJSON(),header:this.header,status:this.status,text:this.text}}},function(e,t,n){"use strict";var r=n(185);function a(e){if(e)return function(e){for(var t in a.prototype)e[t]=a.prototype[t];return e}(e)}e.exports=a,a.prototype.get=function(e){return this.header[e.toLowerCase()]},a.prototype._setHeaderProperties=function(e){var t=e["content-type"]||"";this.type=r.type(t);var n=r.params(t);for(var a in n)this[a]=n[a];this.links={};try{e.link&&(this.links=r.parseLinks(e.link))}catch(e){}},a.prototype._setStatusProperties=function(e){var t=e/100|0;this.status=this.statusCode=e,this.statusType=t,this.info=1==t,this.ok=2==t,this.redirect=3==t,this.clientError=4==t,this.serverError=5==t,this.error=(4==t||5==t)&&this.toError(),this.created=201==e,this.accepted=202==e,this.noContent=204==e,this.badRequest=400==e,this.unauthorized=401==e,this.notAcceptable=406==e,this.forbidden=403==e,this.notFound=404==e,this.unprocessableEntity=422==e}},function(e,t,n){"use strict";const r=n(177).StringDecoder,a=n(53),i=n(187);t.unzip=(e,t)=>{const n=i.createUnzip(),o=new a;let s;o.req=e,n.on("error",e=>{e&&"Z_BUF_ERROR"===e.code?o.emit("end"):o.emit("error",e)}),t.pipe(n),t.setEncoding=e=>{s=new r(e)},n.on("data",e=>{if(s){const t=s.write(e);t.length&&o.emit("data",t)}else o.emit("data",e)}),n.on("end",()=>{o.emit("end")});const c=t.on;t.on=function(e,n){return"data"==e||"end"==e?o.on(e,n):"error"==e?(o.on(e,n),c.call(t,e,n)):c.call(t,e,n),this}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===a.call(e)},c=function(e){if(!e||"[object Object]"!==a.call(e))return!1;var t,n=r.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&r.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!i)return!1;for(t in e);return void 0===t||r.call(e,t)},u=function(e,t){i&&"__proto__"===t.name?i(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},l=function(e,t){if("__proto__"===t){if(!r.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var t,n,r,a,i,o,p=arguments[0],d=1,f=arguments.length,h=!1;for("boolean"==typeof p&&(h=p,p=arguments[1]||{},d=2),(null==p||"object"!=typeof p&&"function"!=typeof p)&&(p={});d<f;++d)if(null!=(t=arguments[d]))for(n in t)r=l(p,n),p!==(a=l(t,n))&&(h&&a&&(c(a)||(i=s(a)))?(i?(i=!1,o=r&&s(r)?r:[]):o=r&&c(r)?r:{},u(p,{name:n,newValue:e(h,o,a)})):void 0!==a&&u(p,{name:n,newValue:a}));return p}},function(e,t,n){n(90);var r=n(70);function a(){this.types=Object.create(null),this.extensions=Object.create(null)}a.prototype.define=function(e){for(var t in e){for(var n=e[t],r=0;r<n.length;r++)process.env.DEBUG_MIME&&this.types[n[r]]&&console.warn((this._loading||"define()").replace(/.*\//,""),'changes "'+n[r]+'" extension type from '+this.types[n[r]]+" to "+t),this.types[n[r]]=t;this.extensions[t]||(this.extensions[t]=n[0])}},a.prototype.load=function(e){this._loading=e;var t={};r.readFileSync(e,"ascii").split(/[\r\n]+/).forEach(function(e){var n=e.replace(/\s*#.*|^\s*|\s*$/g,"").split(/\s+/);t[n.shift()]=n}),this.define(t),this._loading=null},a.prototype.lookup=function(e,t){var n=e.replace(/^.*[\.\/\\]/,"").toLowerCase();return this.types[n]||t||this.default_type},a.prototype.extension=function(e){var t=e.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[t]};var i=new a;i.define(n(451)),i.default_type=i.lookup("bin"),i.Mime=a,i.charsets={lookup:function(e,t){return/^text\/|^application\/(javascript|json)/.test(e)?"UTF-8":t}},e.exports=i},function(e){e.exports=JSON.parse('{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":[],"application/font-woff2":[],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":[],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":[],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":[],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":[],"application/x-msdownload":["com","bat"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":[],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":[],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":[],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":[],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":[],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":[],"audio/x-wav":[],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":[],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":[],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":[],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":[],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":[],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}')},function(e,t,n){"use strict";var r=n(189),a=n(190),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},o=Array.isArray,s=Array.prototype.push,c=function(e,t){s.apply(e,o(t)?t:[t])},u=Date.prototype.toISOString,l={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:r.encode,encodeValuesOnly:!1,indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},p=function e(t,n,a,i,o,s,u,p,d,f,h,m,v){var g=t;if("function"==typeof u?g=u(n,g):g instanceof Date&&(g=f(g)),null===g){if(i)return s&&!m?s(n,l.encoder,v):n;g=""}if("string"==typeof g||"number"==typeof g||"boolean"==typeof g||r.isBuffer(g))return s?[h(m?n:s(n,l.encoder,v))+"="+h(s(g,l.encoder,v))]:[h(n)+"="+h(String(g))];var y,x=[];if(void 0===g)return x;if(Array.isArray(u))y=u;else{var b=Object.keys(g);y=p?b.sort(p):b}for(var w=0;w<y.length;++w){var _=y[w];o&&null===g[_]||(Array.isArray(g)?c(x,e(g[_],a(n,_),a,i,o,s,u,p,d,f,h,m,v)):c(x,e(g[_],n+(d?"."+_:"["+_+"]"),a,i,o,s,u,p,d,f,h,m,v)))}return x};e.exports=function(e,t){var n=e,o=t?r.assign({},t):{};if(null!==o.encoder&&void 0!==o.encoder&&"function"!=typeof o.encoder)throw new TypeError("Encoder has to be a function.");var s=void 0===o.delimiter?l.delimiter:o.delimiter,u="boolean"==typeof o.strictNullHandling?o.strictNullHandling:l.strictNullHandling,d="boolean"==typeof o.skipNulls?o.skipNulls:l.skipNulls,f="boolean"==typeof o.encode?o.encode:l.encode,h="function"==typeof o.encoder?o.encoder:l.encoder,m="function"==typeof o.sort?o.sort:null,v=void 0===o.allowDots?l.allowDots:!!o.allowDots,g="function"==typeof o.serializeDate?o.serializeDate:l.serializeDate,y="boolean"==typeof o.encodeValuesOnly?o.encodeValuesOnly:l.encodeValuesOnly,x=o.charset||l.charset;if(void 0!==o.charset&&"utf-8"!==o.charset&&"iso-8859-1"!==o.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===o.format)o.format=a.default;else if(!Object.prototype.hasOwnProperty.call(a.formatters,o.format))throw new TypeError("Unknown format option provided.");var b,w,_=a.formatters[o.format];"function"==typeof o.filter?n=(w=o.filter)("",n):Array.isArray(o.filter)&&(b=w=o.filter);var k,E=[];if("object"!=typeof n||null===n)return"";k=o.arrayFormat in i?o.arrayFormat:"indices"in o?o.indices?"indices":"repeat":"indices";var S=i[k];b||(b=Object.keys(n)),m&&b.sort(m);for(var R=0;R<b.length;++R){var T=b[R];d&&null===n[T]||c(E,p(n[T],T,S,u,d,f?h:null,w,m,v,g,_,y,x))}var A=E.join(s),D=!0===o.addQueryPrefix?"?":"";return o.charsetSentinel&&(D+="iso-8859-1"===x?"utf8=%26%2310003%3B&":"utf8=%E2%9C%93&"),A.length>0?D+A:""}},function(e,t,n){"use strict";var r=n(189),a=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},o=function(e){return e.replace(/&#(\d+);/g,function(e,t){return String.fromCharCode(parseInt(t,10))})},s=function(e,t,n){if(e){var r=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,o=/(\[[^[\]]*])/.exec(r),s=o?r.slice(0,o.index):r,c=[];if(s){if(!n.plainObjects&&a.call(Object.prototype,s)&&!n.allowPrototypes)return;c.push(s)}for(var u=0;null!==(o=i.exec(r))&&u<n.depth;){if(u+=1,!n.plainObjects&&a.call(Object.prototype,o[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(o[1])}return o&&c.push("["+r.slice(o.index)+"]"),function(e,t,n){for(var r=t,a=e.length-1;a>=0;--a){var i,o=e[a];if("[]"===o&&n.parseArrays)i=[].concat(r);else{i=n.plainObjects?Object.create(null):{};var s="["===o.charAt(0)&&"]"===o.charAt(o.length-1)?o.slice(1,-1):o,c=parseInt(s,10);n.parseArrays||""!==s?!isNaN(c)&&o!==s&&String(c)===s&&c>=0&&n.parseArrays&&c<=n.arrayLimit?(i=[])[c]=r:i[s]=r:i={0:r}}r=i}return r}(c,t,n)}};e.exports=function(e,t){var n=t?r.assign({},t):{};if(null!==n.decoder&&void 0!==n.decoder&&"function"!=typeof n.decoder)throw new TypeError("Decoder has to be a function.");if(n.ignoreQueryPrefix=!0===n.ignoreQueryPrefix,n.delimiter="string"==typeof n.delimiter||r.isRegExp(n.delimiter)?n.delimiter:i.delimiter,n.depth="number"==typeof n.depth?n.depth:i.depth,n.arrayLimit="number"==typeof n.arrayLimit?n.arrayLimit:i.arrayLimit,n.parseArrays=!1!==n.parseArrays,n.decoder="function"==typeof n.decoder?n.decoder:i.decoder,n.allowDots=void 0===n.allowDots?i.allowDots:!!n.allowDots,n.plainObjects="boolean"==typeof n.plainObjects?n.plainObjects:i.plainObjects,n.allowPrototypes="boolean"==typeof n.allowPrototypes?n.allowPrototypes:i.allowPrototypes,n.parameterLimit="number"==typeof n.parameterLimit?n.parameterLimit:i.parameterLimit,n.strictNullHandling="boolean"==typeof n.strictNullHandling?n.strictNullHandling:i.strictNullHandling,void 0!==n.charset&&"utf-8"!==n.charset&&"iso-8859-1"!==n.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===n.charset&&(n.charset=i.charset),""===e||null==e)return n.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var n,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=t.parameterLimit===1/0?void 0:t.parameterLimit,l=c.split(t.delimiter,u),p=-1,d=t.charset;if(t.charsetSentinel)for(n=0;n<l.length;++n)0===l[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===l[n]?d="utf-8":"utf8=%26%2310003%3B"===l[n]&&(d="iso-8859-1"),p=n,n=l.length);for(n=0;n<l.length;++n)if(n!==p){var f,h,m=l[n],v=m.indexOf("]="),g=-1===v?m.indexOf("="):v+1;-1===g?(f=t.decoder(m,i.decoder,d),h=t.strictNullHandling?null:""):(f=t.decoder(m.slice(0,g),i.decoder,d),h=t.decoder(m.slice(g+1),i.decoder,d)),h&&t.interpretNumericEntities&&"iso-8859-1"===d&&(h=o(h)),a.call(s,f)?s[f]=r.combine(s[f],h):s[f]=h}return s}(e,n):e,u=n.plainObjects?Object.create(null):{},l=Object.keys(c),p=0;p<l.length;++p){var d=l[p],f=s(d,c[d],n);u=r.merge(u,f,n)}return r.compact(u)}},function(e){e.exports=JSON.parse('{"name":"superagent","version":"3.8.3","description":"elegant & feature rich browser / node HTTP with a fluent API","scripts":{"prepare":"make all","test":"make test"},"keywords":["http","ajax","request","agent"],"license":"MIT","author":"TJ Holowaychuk <tj@vision-media.ca>","contributors":["Kornel Lesiński <kornel@geekhood.net>","Peter Lyons <pete@peterlyons.com>","Hunter Loftis <hunter@hunterloftis.com>"],"repository":{"type":"git","url":"git://github.com/visionmedia/superagent.git"},"dependencies":{"component-emitter":"^1.2.0","cookiejar":"^2.1.0","debug":"^3.1.0","extend":"^3.0.0","form-data":"^2.3.1","formidable":"^1.2.0","methods":"^1.1.1","mime":"^1.4.1","qs":"^6.5.1","readable-stream":"^2.3.5"},"devDependencies":{"Base64":"^1.0.1","basic-auth-connect":"^1.0.0","body-parser":"^1.18.2","browserify":"^14.1.0","cookie-parser":"^1.4.3","express":"^4.16.3","express-session":"^1.15.6","marked":"0.3.12","mocha":"^3.5.3","multer":"^1.3.0","should":"^11.2.0","should-http":"^0.1.1","zuul":"^3.11.1"},"browser":{"./lib/node/index.js":"./lib/client.js","./test/support/server.js":"./test/support/blank.js"},"component":{"scripts":{"superagent":"lib/client.js"}},"main":"./lib/node/index.js","engines":{"node":">= 4.0"}}')},function(e,t,n){"use strict";var r=n(456);function a(e){if(e)return function(e){for(var t in a.prototype)e[t]=a.prototype[t];return e}(e)}e.exports=a,a.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},a.prototype.parse=function(e){return this._parser=e,this},a.prototype.responseType=function(e){return this._responseType=e,this},a.prototype.serialize=function(e){return this._serializer=e,this},a.prototype.timeout=function(e){if(!e||"object"!=typeof e)return this._timeout=e,this._responseTimeout=0,this;for(var t in e)switch(t){case"deadline":this._timeout=e.deadline;break;case"response":this._responseTimeout=e.response;break;default:console.warn("Unknown timeout option",t)}return this},a.prototype.retry=function(e,t){return 0!==arguments.length&&!0!==e||(e=1),e<=0&&(e=0),this._maxRetries=e,this._retries=0,this._retryCallback=t,this};var i=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];a.prototype._shouldRetry=function(e,t){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{var n=this._retryCallback(e,t);if(!0===n)return!0;if(!1===n)return!1}catch(e){console.error(e)}if(t&&t.status&&t.status>=500&&501!=t.status)return!0;if(e){if(e.code&&~i.indexOf(e.code))return!0;if(e.timeout&&"ECONNABORTED"==e.code)return!0;if(e.crossDomain)return!0}return!1},a.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},a.prototype.then=function(e,t){if(!this._fullfilledPromise){var n=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise(function(e,t){n.end(function(n,r){n?t(n):e(r)})})}return this._fullfilledPromise.then(e,t)},a.prototype.catch=function(e){return this.then(void 0,e)},a.prototype.use=function(e){return e(this),this},a.prototype.ok=function(e){if("function"!=typeof e)throw Error("Callback required");return this._okCallback=e,this},a.prototype._isResponseOK=function(e){return!!e&&(this._okCallback?this._okCallback(e):e.status>=200&&e.status<300)},a.prototype.get=function(e){return this._header[e.toLowerCase()]},a.prototype.getHeader=a.prototype.get,a.prototype.set=function(e,t){if(r(e)){for(var n in e)this.set(n,e[n]);return this}return this._header[e.toLowerCase()]=t,this.header[e]=t,this},a.prototype.unset=function(e){return delete this._header[e.toLowerCase()],delete this.header[e],this},a.prototype.field=function(e,t){if(null==e)throw new Error(".field(name, val) name can not be empty");if(this._data&&console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"),r(e)){for(var n in e)this.field(n,e[n]);return this}if(Array.isArray(t)){for(var a in t)this.field(e,t[a]);return this}if(null==t)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof t&&(t=""+t),this._getFormData().append(e,t),this},a.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},a.prototype._auth=function(e,t,n,r){switch(n.type){case"basic":this.set("Authorization","Basic "+r(e+":"+t));break;case"auto":this.username=e,this.password=t;break;case"bearer":this.set("Authorization","Bearer "+e)}return this},a.prototype.withCredentials=function(e){return null==e&&(e=!0),this._withCredentials=e,this},a.prototype.redirects=function(e){return this._maxRedirects=e,this},a.prototype.maxResponseSize=function(e){if("number"!=typeof e)throw TypeError("Invalid argument");return this._maxResponseSize=e,this},a.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},a.prototype.send=function(e){var t=r(e),n=this._header["content-type"];if(this._formData&&console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"),t&&!this._data)Array.isArray(e)?this._data=[]:this._isHost(e)||(this._data={});else if(e&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(t&&r(this._data))for(var a in e)this._data[a]=e[a];else"string"==typeof e?(n||this.type("form"),n=this._header["content-type"],this._data="application/x-www-form-urlencoded"==n?this._data?this._data+"&"+e:e:(this._data||"")+e):this._data=e;return!t||this._isHost(e)?this:(n||this.type("json"),this)},a.prototype.sortQuery=function(e){return this._sort=void 0===e||e,this},a.prototype._finalizeQueryString=function(){var e=this._query.join("&");if(e&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+e),this._query.length=0,this._sort){var t=this.url.indexOf("?");if(t>=0){var n=this.url.substring(t+1).split("&");"function"==typeof this._sort?n.sort(this._sort):n.sort(),this.url=this.url.substring(0,t)+"?"+n.join("&")}}},a.prototype._appendQueryString=function(){console.trace("Unsupported")},a.prototype._timeoutError=function(e,t,n){if(!this._aborted){var r=new Error(e+t+"ms exceeded");r.timeout=t,r.code="ECONNABORTED",r.errno=n,this.timedout=!0,this.abort(),this.callback(r)}},a.prototype._setTimeouts=function(){var e=this;this._timeout&&!this._timer&&(this._timer=setTimeout(function(){e._timeoutError("Timeout of ",e._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(function(){e._timeoutError("Response timeout of ",e._responseTimeout,"ETIMEDOUT")},this._responseTimeout))}},function(e,t,n){"use strict";e.exports=function(e){return null!==e&&"object"==typeof e}},function(e,t,n){"use strict";const r=n(121).CookieJar,a=n(121).CookieAccessInfo,i=n(71).parse,o=n(172),s=n(458);let c=n(186);function u(e){if(!(this instanceof u))return new u(e);s.call(this),this.jar=new r,e&&(e.ca&&this.ca(e.ca),e.key&&this.key(e.key),e.pfx&&this.pfx(e.pfx),e.cert&&this.cert(e.cert))}e.exports=u,u.prototype=Object.create(s.prototype),u.prototype._saveCookies=function(e){const t=e.headers["set-cookie"];t&&this.jar.setCookies(t)},u.prototype._attachCookies=function(e){const t=i(e.url),n=a(t.hostname,t.pathname,"https:"==t.protocol),r=this.jar.getCookies(n).toValueString();e.cookies=r},c.forEach(e=>{const t=e.toUpperCase();u.prototype[e]=function(e,n){const r=new o.Request(t,e);return r.on("response",this._saveCookies.bind(this)),r.on("redirect",this._saveCookies.bind(this)),r.on("redirect",this._attachCookies.bind(this,r)),this._attachCookies(r),this._setDefaults(r),n&&r.end(n),r}}),u.prototype.del=u.prototype.delete},function(e,t){function n(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach(function(e){n.prototype[e]=function(){return this._defaults.push({fn:e,arguments:arguments}),this}}),n.prototype._setDefaults=function(e){this._defaults.forEach(function(t){e[t.fn].apply(e,t.arguments)})},e.exports=n},function(e,t,n){"use strict";t["application/x-www-form-urlencoded"]=n(460),t["application/json"]=n(461),t.text=n(462);const r=n(463);t["application/octet-stream"]=r,t["application/pdf"]=r,t.image=r},function(e,t,n){"use strict";const r=n(188);e.exports=function(e,t){e.text="",e.setEncoding("ascii"),e.on("data",t=>{e.text+=t}),e.on("end",()=>{try{t(null,r.parse(e.text))}catch(e){t(e)}})}},function(e,t,n){"use strict";e.exports=function(e,t){e.text="",e.setEncoding("utf8"),e.on("data",t=>{e.text+=t}),e.on("end",()=>{try{var n=e.text&&JSON.parse(e.text)}catch(t){var r=t;r.rawResponse=e.text||null,r.statusCode=e.statusCode}finally{t(r,n)}})}},function(e,t,n){"use strict";e.exports=function(e,t){e.text="",e.setEncoding("utf8"),e.on("data",t=>{e.text+=t}),e.on("end",t)}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=[];e.on("data",e=>{n.push(e)}),e.on("end",()=>{t(null,Buffer.concat(n))})}},function(e,t,n){"use strict";var r,a=function(e){var t=e.script,n=e.callbackName,r=e.timeout;t&&t.parentNode&&t.parentNode.removeChild(t),delete window[n],clearTimeout(r)},i=function e(t){var n=function(n){return"undefined"==typeof window?n:(n.end=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(n){var r=this,a=t.callbackParam||"callback",i=t.callbackName||"superagentCallback"+((new Date).valueOf()+parseInt(1e3*Math.random(),10)),o=t.timeout||1e3,s=setTimeout(e.errorWrapper.bind(this),o);this._jsonp={callbackName:i,callback:n,timeout:s},window[i]=e.callbackWrapper.bind(this),this._query.push(encodeURIComponent(a)+"="+encodeURIComponent(i));var c=this._query.join("&"),u=document.createElement("script"),l=this.url.indexOf("?")>-1?"&":"?",p=this.url+l+c;return u.src=p,u.onerror=function(t){e.errorWrapper.call(r,t)},document.head.appendChild(u),this._jsonp.script=u,this}}.call(n,t),n)};return"function"==typeof t.end?n(t):n};i.callbackWrapper=function(e){var t={body:e};a(this._jsonp),this._jsonp.callback.call(this,null,t)},i.errorWrapper=function(e){var t=new Error("404 Not found");e&&e instanceof Event&&"error"===e.type&&(t=new Error("Connection issue")),a(this._jsonp),this._jsonp.callback.call(this,t,null)},void 0!==e.exports?e.exports=i:void 0===(r=function(){return{jsonp:i}}.apply(t,[]))||(e.exports=r)},function(e,t,n){(function(e){var r;/*! https://mths.be/he v1.2.0 by @mathias | MIT license */!function(a){var i=t,o=(e&&e.exports,"object"==typeof global&&global);o.global!==o&&o.window;var s=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,c=/[\x01-\x7F]/g,u=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,l=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,p={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","\t":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon","ˆ":"circ","ˇ":"caron","°":"deg","©":"copy","®":"reg","℗":"copysr","℘":"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78","𝒶":"ascr","𝕒":"aopf","𝔞":"afr","𝔸":"Aopf","𝔄":"Afr","𝒜":"Ascr","ª":"ordf","á":"aacute","Á":"Aacute","à":"agrave","À":"Agrave","ă":"abreve","Ă":"Abreve","â":"acirc","Â":"Acirc","å":"aring","Å":"angst","ä":"auml","Ä":"Auml","ã":"atilde","Ã":"Atilde","ą":"aogon","Ą":"Aogon","ā":"amacr","Ā":"Amacr","æ":"aelig","Æ":"AElig","𝒷":"bscr","𝕓":"bopf","𝔟":"bfr","𝔹":"Bopf","ℬ":"Bscr","𝔅":"Bfr","𝔠":"cfr","𝒸":"cscr","𝕔":"copf","ℭ":"Cfr","𝒞":"Cscr","ℂ":"Copf","ć":"cacute","Ć":"Cacute","ĉ":"ccirc","Ĉ":"Ccirc","č":"ccaron","Č":"Ccaron","ċ":"cdot","Ċ":"Cdot","ç":"ccedil","Ç":"Ccedil","℅":"incare","𝔡":"dfr","ⅆ":"dd","𝕕":"dopf","𝒹":"dscr","𝒟":"Dscr","𝔇":"Dfr","ⅅ":"DD","𝔻":"Dopf","ď":"dcaron","Ď":"Dcaron","đ":"dstrok","Đ":"Dstrok","ð":"eth","Ð":"ETH","ⅇ":"ee","ℯ":"escr","𝔢":"efr","𝕖":"eopf","ℰ":"Escr","𝔈":"Efr","𝔼":"Eopf","é":"eacute","É":"Eacute","è":"egrave","È":"Egrave","ê":"ecirc","Ê":"Ecirc","ě":"ecaron","Ě":"Ecaron","ë":"euml","Ë":"Euml","ė":"edot","Ė":"Edot","ę":"eogon","Ę":"Eogon","ē":"emacr","Ē":"Emacr","𝔣":"ffr","𝕗":"fopf","𝒻":"fscr","𝔉":"Ffr","𝔽":"Fopf","ℱ":"Fscr","ﬀ":"fflig","ﬃ":"ffilig","ﬄ":"ffllig","ﬁ":"filig",fj:"fjlig","ﬂ":"fllig","ƒ":"fnof","ℊ":"gscr","𝕘":"gopf","𝔤":"gfr","𝒢":"Gscr","𝔾":"Gopf","𝔊":"Gfr","ǵ":"gacute","ğ":"gbreve","Ğ":"Gbreve","ĝ":"gcirc","Ĝ":"Gcirc","ġ":"gdot","Ġ":"Gdot","Ģ":"Gcedil","𝔥":"hfr","ℎ":"planckh","𝒽":"hscr","𝕙":"hopf","ℋ":"Hscr","ℌ":"Hfr","ℍ":"Hopf","ĥ":"hcirc","Ĥ":"Hcirc","ℏ":"hbar","ħ":"hstrok","Ħ":"Hstrok","𝕚":"iopf","𝔦":"ifr","𝒾":"iscr","ⅈ":"ii","𝕀":"Iopf","ℐ":"Iscr","ℑ":"Im","í":"iacute","Í":"Iacute","ì":"igrave","Ì":"Igrave","î":"icirc","Î":"Icirc","ï":"iuml","Ï":"Iuml","ĩ":"itilde","Ĩ":"Itilde","İ":"Idot","į":"iogon","Į":"Iogon","ī":"imacr","Ī":"Imacr","ĳ":"ijlig","Ĳ":"IJlig","ı":"imath","𝒿":"jscr","𝕛":"jopf","𝔧":"jfr","𝒥":"Jscr","𝔍":"Jfr","𝕁":"Jopf","ĵ":"jcirc","Ĵ":"Jcirc","ȷ":"jmath","𝕜":"kopf","𝓀":"kscr","𝔨":"kfr","𝒦":"Kscr","𝕂":"Kopf","𝔎":"Kfr","ķ":"kcedil","Ķ":"Kcedil","𝔩":"lfr","𝓁":"lscr","ℓ":"ell","𝕝":"lopf","ℒ":"Lscr","𝔏":"Lfr","𝕃":"Lopf","ĺ":"lacute","Ĺ":"Lacute","ľ":"lcaron","Ľ":"Lcaron","ļ":"lcedil","Ļ":"Lcedil","ł":"lstrok","Ł":"Lstrok","ŀ":"lmidot","Ŀ":"Lmidot","𝔪":"mfr","𝕞":"mopf","𝓂":"mscr","𝔐":"Mfr","𝕄":"Mopf","ℳ":"Mscr","𝔫":"nfr","𝕟":"nopf","𝓃":"nscr","ℕ":"Nopf","𝒩":"Nscr","𝔑":"Nfr","ń":"nacute","Ń":"Nacute","ň":"ncaron","Ň":"Ncaron","ñ":"ntilde","Ñ":"Ntilde","ņ":"ncedil","Ņ":"Ncedil","№":"numero","ŋ":"eng","Ŋ":"ENG","𝕠":"oopf","𝔬":"ofr","ℴ":"oscr","𝒪":"Oscr","𝔒":"Ofr","𝕆":"Oopf","º":"ordm","ó":"oacute","Ó":"Oacute","ò":"ograve","Ò":"Ograve","ô":"ocirc","Ô":"Ocirc","ö":"ouml","Ö":"Ouml","ő":"odblac","Ő":"Odblac","õ":"otilde","Õ":"Otilde","ø":"oslash","Ø":"Oslash","ō":"omacr","Ō":"Omacr","œ":"oelig","Œ":"OElig","𝔭":"pfr","𝓅":"pscr","𝕡":"popf","ℙ":"Popf","𝔓":"Pfr","𝒫":"Pscr","𝕢":"qopf","𝔮":"qfr","𝓆":"qscr","𝒬":"Qscr","𝔔":"Qfr","ℚ":"Qopf","ĸ":"kgreen","𝔯":"rfr","𝕣":"ropf","𝓇":"rscr","ℛ":"Rscr","ℜ":"Re","ℝ":"Ropf","ŕ":"racute","Ŕ":"Racute","ř":"rcaron","Ř":"Rcaron","ŗ":"rcedil","Ŗ":"Rcedil","𝕤":"sopf","𝓈":"sscr","𝔰":"sfr","𝕊":"Sopf","𝔖":"Sfr","𝒮":"Sscr","Ⓢ":"oS","ś":"sacute","Ś":"Sacute","ŝ":"scirc","Ŝ":"Scirc","š":"scaron","Š":"Scaron","ş":"scedil","Ş":"Scedil","ß":"szlig","𝔱":"tfr","𝓉":"tscr","𝕥":"topf","𝒯":"Tscr","𝔗":"Tfr","𝕋":"Topf","ť":"tcaron","Ť":"Tcaron","ţ":"tcedil","Ţ":"Tcedil","™":"trade","ŧ":"tstrok","Ŧ":"Tstrok","𝓊":"uscr","𝕦":"uopf","𝔲":"ufr","𝕌":"Uopf","𝔘":"Ufr","𝒰":"Uscr","ú":"uacute","Ú":"Uacute","ù":"ugrave","Ù":"Ugrave","ŭ":"ubreve","Ŭ":"Ubreve","û":"ucirc","Û":"Ucirc","ů":"uring","Ů":"Uring","ü":"uuml","Ü":"Uuml","ű":"udblac","Ű":"Udblac","ũ":"utilde","Ũ":"Utilde","ų":"uogon","Ų":"Uogon","ū":"umacr","Ū":"Umacr","𝔳":"vfr","𝕧":"vopf","𝓋":"vscr","𝔙":"Vfr","𝕍":"Vopf","𝒱":"Vscr","𝕨":"wopf","𝓌":"wscr","𝔴":"wfr","𝒲":"Wscr","𝕎":"Wopf","𝔚":"Wfr","ŵ":"wcirc","Ŵ":"Wcirc","𝔵":"xfr","𝓍":"xscr","𝕩":"xopf","𝕏":"Xopf","𝔛":"Xfr","𝒳":"Xscr","𝔶":"yfr","𝓎":"yscr","𝕪":"yopf","𝒴":"Yscr","𝔜":"Yfr","𝕐":"Yopf","ý":"yacute","Ý":"Yacute","ŷ":"ycirc","Ŷ":"Ycirc","ÿ":"yuml","Ÿ":"Yuml","𝓏":"zscr","𝔷":"zfr","𝕫":"zopf","ℨ":"Zfr","ℤ":"Zopf","𝒵":"Zscr","ź":"zacute","Ź":"Zacute","ž":"zcaron","Ž":"Zcaron","ż":"zdot","Ż":"Zdot","Ƶ":"imped","þ":"thorn","Þ":"THORN","ŉ":"napos","α":"alpha","Α":"Alpha","β":"beta","Β":"Beta","γ":"gamma","Γ":"Gamma","δ":"delta","Δ":"Delta","ε":"epsi","ϵ":"epsiv","Ε":"Epsilon","ϝ":"gammad","Ϝ":"Gammad","ζ":"zeta","Ζ":"Zeta","η":"eta","Η":"Eta","θ":"theta","ϑ":"thetav","Θ":"Theta","ι":"iota","Ι":"Iota","κ":"kappa","ϰ":"kappav","Κ":"Kappa","λ":"lambda","Λ":"Lambda","μ":"mu","µ":"micro","Μ":"Mu","ν":"nu","Ν":"Nu","ξ":"xi","Ξ":"Xi","ο":"omicron","Ο":"Omicron","π":"pi","ϖ":"piv","Π":"Pi","ρ":"rho","ϱ":"rhov","Ρ":"Rho","σ":"sigma","Σ":"Sigma","ς":"sigmaf","τ":"tau","Τ":"Tau","υ":"upsi","Υ":"Upsilon","ϒ":"Upsi","φ":"phi","ϕ":"phiv","Φ":"Phi","χ":"chi","Χ":"Chi","ψ":"psi","Ψ":"Psi","ω":"omega","Ω":"ohm","а":"acy","А":"Acy","б":"bcy","Б":"Bcy","в":"vcy","В":"Vcy","г":"gcy","Г":"Gcy","ѓ":"gjcy","Ѓ":"GJcy","д":"dcy","Д":"Dcy","ђ":"djcy","Ђ":"DJcy","е":"iecy","Е":"IEcy","ё":"iocy","Ё":"IOcy","є":"jukcy","Є":"Jukcy","ж":"zhcy","Ж":"ZHcy","з":"zcy","З":"Zcy","ѕ":"dscy","Ѕ":"DScy","и":"icy","И":"Icy","і":"iukcy","І":"Iukcy","ї":"yicy","Ї":"YIcy","й":"jcy","Й":"Jcy","ј":"jsercy","Ј":"Jsercy","к":"kcy","К":"Kcy","ќ":"kjcy","Ќ":"KJcy","л":"lcy","Л":"Lcy","љ":"ljcy","Љ":"LJcy","м":"mcy","М":"Mcy","н":"ncy","Н":"Ncy","њ":"njcy","Њ":"NJcy","о":"ocy","О":"Ocy","п":"pcy","П":"Pcy","р":"rcy","Р":"Rcy","с":"scy","С":"Scy","т":"tcy","Т":"Tcy","ћ":"tshcy","Ћ":"TSHcy","у":"ucy","У":"Ucy","ў":"ubrcy","Ў":"Ubrcy","ф":"fcy","Ф":"Fcy","х":"khcy","Х":"KHcy","ц":"tscy","Ц":"TScy","ч":"chcy","Ч":"CHcy","џ":"dzcy","Џ":"DZcy","ш":"shcy","Ш":"SHcy","щ":"shchcy","Щ":"SHCHcy","ъ":"hardcy","Ъ":"HARDcy","ы":"ycy","Ы":"Ycy","ь":"softcy","Ь":"SOFTcy","э":"ecy","Э":"Ecy","ю":"yucy","Ю":"YUcy","я":"yacy","Я":"YAcy","ℵ":"aleph","ℶ":"beth","ℷ":"gimel","ℸ":"daleth"},d=/["&'<>`]/g,f={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},h=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,m=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,v=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,g={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},y={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},x={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},b=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],w=String.fromCharCode,_={}.hasOwnProperty,k=function(e,t){return _.call(e,t)},E=function(e,t){if(!e)return t;var n,r={};for(n in t)r[n]=k(e,n)?e[n]:t[n];return r},S=function(e,t){var n="";return e>=55296&&e<=57343||e>1114111?(t&&A("character reference outside the permissible Unicode range"),"�"):k(x,e)?(t&&A("disallowed character reference"),x[e]):(t&&function(e,t){for(var n=-1,r=e.length;++n<r;)if(e[n]==t)return!0;return!1}(b,e)&&A("disallowed character reference"),e>65535&&(n+=w((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=w(e))},R=function(e){return"&#x"+e.toString(16).toUpperCase()+";"},T=function(e){return"&#"+e+";"},A=function(e){throw Error("Parse error: "+e)},D=function(e,t){(t=E(t,D.options)).strict&&m.test(e)&&A("forbidden code point");var n=t.encodeEverything,r=t.useNamedReferences,a=t.allowUnsafeSymbols,i=t.decimal?T:R,o=function(e){return i(e.charCodeAt(0))};return n?(e=e.replace(c,function(e){return r&&k(p,e)?"&"+p[e]+";":o(e)}),r&&(e=e.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),r&&(e=e.replace(l,function(e){return"&"+p[e]+";"}))):r?(a||(e=e.replace(d,function(e){return"&"+p[e]+";"})),e=(e=e.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;")).replace(l,function(e){return"&"+p[e]+";"})):a||(e=e.replace(d,o)),e.replace(s,function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return i(1024*(t-55296)+n-56320+65536)}).replace(u,o)};D.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var O=function(e,t){var n=(t=E(t,O.options)).strict;return n&&h.test(e)&&A("malformed character reference"),e.replace(v,function(e,r,a,i,o,s,c,u,l){var p,d,f,h,m,v;return r?g[m=r]:a?(m=a,(v=i)&&t.isAttributeValue?(n&&"="==v&&A("`&` did not start a character reference"),e):(n&&A("named character reference was not terminated by a semicolon"),y[m]+(v||""))):o?(f=o,d=s,n&&!d&&A("character reference was not terminated by a semicolon"),p=parseInt(f,10),S(p,n)):c?(h=c,d=u,n&&!d&&A("character reference was not terminated by a semicolon"),p=parseInt(h,16),S(p,n)):(n&&A("named character reference was not terminated by a semicolon"),e)})};O.options={isAttributeValue:!1,strict:!1};var I={version:"1.2.0",encode:D,decode:O,escape:function(e){return e.replace(d,function(e){return f[e]})},unescape:O};void 0===(r=function(){return I}.call(t,n,t,e))||(e.exports=r)}()}).call(this,n(192)(e))},function(e){e.exports=JSON.parse('{"name":"entrystore-js","version":"4.8.0-SNAPSHOT","main":"dist/EntryStore.node.js","module":"src/index.js","dependencies":{"blueimp-md5":"^2.10.0","core-js":"^3.1.4","he":"^1.2.0","lodash":"^4.17.10","moment":"^2.22.2","rdfjson":"https://bitbucket.org/metasolutions/rdfjson.git#develop","regenerator-runtime":"^0.13.3","superagent":"^3.8.3","superagent-jsonp":"^0.2.1","xmldom":"^0.1.27"},"devDependencies":{"@babel/cli":"^7.5.5","@babel/core":"^7.5.5","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/preset-env":"^7.5.5","babel-loader":"^8.0.6","clean-webpack-plugin":"^0.1.19","eslint":"^5.6.0","eslint-config-airbnb-base":"^13.1.0","eslint-plugin-import":"^2.14.0","jaguarjs-jsdoc":"0.0.1","nodeunit":"^0.11.2","print-licenses":"https://bitbucket.org/metasolutions/print-licenses#master","webpack":"^4.39.1","webpack-cli":"^3.2.1","webpack-merge":"^4.1.4"},"description":"Store is a JS-library for working EntryStore.","licenses":[{"type":"LGPL-3.0-only","url":"https://www.gnu.org/licenses/lgpl-3.0.en.html"}],"repository":"https://bitbucket.org/metasolutions/entrystore.js.git","homepage":"https://bitbucket.org/metasolutions/entrystore.js","scripts":{"build":"webpack --config webpack.all.js --mode production","build:dev":"webpack --config webpack.all.js --mode development","test":"nodeunit ./tests/executeTests.js","eslint":"eslint \'src/**/*.js\'","print-licenses":"print-licenses"}}')},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,n;function r(){return t.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function p(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function d(e,t,n,r){return Dt(e,t,n,r,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){if(null==e._isValid){var t=f(e),r=n.call(t.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&r);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function m(e){var t=d(NaN);return null!=e?p(f(t),e):f(t).userInvalidated=!0,t}n=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var v=r.momentProperties=[];function g(e,t){var n,r,a;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=f(t)),o(t._locale)||(e._locale=t._locale),v.length>0)for(n=0;n<v.length;n++)o(a=t[r=v[n]])||(e[r]=a);return e}var y=!1;function x(e){g(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,r.updateOffset(this),y=!1)}function b(e){return e instanceof x||null!=e&&null!=e._isAMomentObject}function w(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function _(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=w(t)),n}function k(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&_(e[r])!==_(t[r]))&&o++;return o+i}function E(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function S(e,t){var n=!0;return p(function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){for(var a,i=[],o=0;o<arguments.length;o++){if(a="","object"==typeof arguments[o]){for(var s in a+="\n["+o+"] ",arguments[0])a+=s+": "+arguments[0][s]+", ";a=a.slice(0,-2)}else a=arguments[o];i.push(a)}E(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var R,T={};function A(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),T[e]||(E(t),T[e]=!0)}function D(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function O(e,t){var n,r=p({},e);for(n in t)l(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},p(r[n],e[n]),p(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)l(e,n)&&!l(t,n)&&i(e[n])&&(r[n]=p({},r[n]));return r}function I(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,R=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n};var j={};function C(e,t){var n=e.toLowerCase();j[n]=j[n+"s"]=j[t]=e}function N(e){return"string"==typeof e?j[e]||j[e.toLowerCase()]:void 0}function L(e){var t,n,r={};for(n in e)l(e,n)&&(t=N(n))&&(r[t]=e[n]);return r}var q={};function U(e,t){q[e]=t}function P(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var M=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,z={},B={};function V(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(B[e]=a),t&&(B[t[0]]=function(){return P(a.apply(this,arguments),t[1],t[2])}),n&&(B[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function G(e,t){return e.isValid()?(t=Y(t,e.localeData()),z[t]=z[t]||function(e){var t,n,r,a=e.match(M);for(t=0,n=a.length;t<n;t++)B[a[t]]?a[t]=B[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=D(a[r])?a[r].call(t,e):a[r];return i}}(t),z[t](e)):e.localeData().invalidDate()}function Y(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,r),F.lastIndex=0,n-=1;return e}var H=/\d/,W=/\d\d/,$=/\d{3}/,J=/\d{4}/,Z=/[+-]?\d{6}/,X=/\d\d?/,K=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,ne=/[+-]?\d{1,6}/,re=/\d+/,ae=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,se=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ce={};function ue(e,t,n){ce[e]=D(t)?t:function(e,r){return e&&n?n:t}}function le(e,t){return l(ce,e)?ce[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,a){return t||n||r||a})))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var de={};function fe(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),s(t)&&(r=function(e,n){n[t]=_(e)}),n=0;n<e.length;n++)de[e[n]]=r}function he(e,t){fe(e,function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)})}function me(e,t,n){null!=t&&l(de,e)&&de[e](t,n._a,n,e)}var ve=0,ge=1,ye=2,xe=3,be=4,we=5,_e=6,ke=7,Ee=8;function Se(e){return Re(e)?366:365}function Re(e){return e%4==0&&e%100!=0||e%400==0}V("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),V(0,["YY",2],0,function(){return this.year()%100}),V(0,["YYYY",4],0,"year"),V(0,["YYYYY",5],0,"year"),V(0,["YYYYYY",6,!0],0,"year"),C("year","y"),U("year",1),ue("Y",ae),ue("YY",X,W),ue("YYYY",te,J),ue("YYYYY",ne,Z),ue("YYYYYY",ne,Z),fe(["YYYYY","YYYYYY"],ve),fe("YYYY",function(e,t){t[ve]=2===e.length?r.parseTwoDigitYear(e):_(e)}),fe("YY",function(e,t){t[ve]=r.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[ve]=parseInt(e,10)}),r.parseTwoDigitYear=function(e){return _(e)+(_(e)>68?1900:2e3)};var Te,Ae=De("FullYear",!0);function De(e,t){return function(n){return null!=n?(Ie(this,e,n),r.updateOffset(this,t),this):Oe(this,e)}}function Oe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Ie(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&Re(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),je(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function je(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?Re(e)?29:28:31-r%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},V("M",["MM",2],"Mo",function(){return this.month()+1}),V("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),V("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),U("month",8),ue("M",X),ue("MM",X,W),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ge]=_(e)-1}),fe(["MMM","MMMM"],function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ge]=a:f(n).invalidMonth=e});var Ce=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ne="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Le="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function qe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=_(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),je(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ue(e){return null!=e?(qe(this,e),r.updateOffset(this,!0),this):Oe(this,"Month")}var Pe=se,Me=se;function Fe(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=d([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=pe(r[t]),a[t]=pe(a[t]);for(t=0;t<24;t++)i[t]=pe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function ze(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Be(e,t,n){var r=7+t-n;return-(7+ze(e,0,r).getUTCDay()-t)%7+r-1}function Ve(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+Be(e,r,a);return s<=0?o=Se(i=e-1)+s:s>Se(e)?(i=e+1,o=s-Se(e)):(i=e,o=s),{year:i,dayOfYear:o}}function Ge(e,t,n){var r,a,i=Be(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+Ye(a=e.year()-1,t,n):o>Ye(e.year(),t,n)?(r=o-Ye(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function Ye(e,t,n){var r=Be(e,t,n),a=Be(e+1,t,n);return(Se(e)-r+a)/7}function He(e,t){return e.slice(t,7).concat(e.slice(0,t))}V("w",["ww",2],"wo","week"),V("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),U("week",5),U("isoWeek",5),ue("w",X),ue("ww",X,W),ue("W",X),ue("WW",X,W),he(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=_(e)}),V("d",0,"do","day"),V("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),V("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),V("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),V("e",0,0,"weekday"),V("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),U("day",11),U("weekday",11),U("isoWeekday",11),ue("d",X),ue("e",X),ue("E",X),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),he(["dd","ddd","dddd"],function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:f(n).invalidWeekday=e}),he(["d","e","E"],function(e,t,n,r){t[r]=_(e)});var We="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),$e="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Je="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ze=se,Xe=se,Ke=se;function Qe(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],c=[],u=[];for(t=0;t<7;t++)n=d([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),o.push(r),s.push(a),c.push(i),u.push(r),u.push(a),u.push(i);for(o.sort(e),s.sort(e),c.sort(e),u.sort(e),t=0;t<7;t++)s[t]=pe(s[t]),c[t]=pe(c[t]),u[t]=pe(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){V(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function nt(e,t){return t._meridiemParse}V("H",["HH",2],0,"hour"),V("h",["hh",2],0,et),V("k",["kk",2],0,function(){return this.hours()||24}),V("hmm",0,0,function(){return""+et.apply(this)+P(this.minutes(),2)}),V("hmmss",0,0,function(){return""+et.apply(this)+P(this.minutes(),2)+P(this.seconds(),2)}),V("Hmm",0,0,function(){return""+this.hours()+P(this.minutes(),2)}),V("Hmmss",0,0,function(){return""+this.hours()+P(this.minutes(),2)+P(this.seconds(),2)}),tt("a",!0),tt("A",!1),C("hour","h"),U("hour",13),ue("a",nt),ue("A",nt),ue("H",X),ue("h",X),ue("k",X),ue("HH",X,W),ue("hh",X,W),ue("kk",X,W),ue("hmm",K),ue("hmmss",Q),ue("Hmm",K),ue("Hmmss",Q),fe(["H","HH"],xe),fe(["k","kk"],function(e,t,n){var r=_(e);t[xe]=24===r?0:r}),fe(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),fe(["h","hh"],function(e,t,n){t[xe]=_(e),f(n).bigHour=!0}),fe("hmm",function(e,t,n){var r=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r)),f(n).bigHour=!0}),fe("hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r,2)),t[we]=_(e.substr(a)),f(n).bigHour=!0}),fe("Hmm",function(e,t,n){var r=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r))}),fe("Hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r,2)),t[we]=_(e.substr(a))});var rt,at=De("Hours",!0),it={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ne,monthsShort:Le,week:{dow:0,doy:6},weekdays:We,weekdaysMin:Je,weekdaysShort:$e,meridiemParse:/[ap]\.?m?\.?/i},ot={},st={};function ct(e){return e?e.toLowerCase().replace("_","-"):e}function ut(t){var n=null;if(!ot[t]&&void 0!==e&&e&&e.exports)try{n=rt._abbr,!function(){var e=new Error("Cannot find module 'undefined'");throw e.code="MODULE_NOT_FOUND",e}(),lt(n)}catch(e){}return ot[t]}function lt(e,t){var n;return e&&((n=o(t)?dt(e):pt(e,t))?rt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),rt._abbr}function pt(e,t){if(null!==t){var n,r=it;if(t.abbr=e,null!=ot[e])A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])r=ot[t.parentLocale]._config;else{if(null==(n=ut(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;r=n._config}return ot[e]=new I(O(r,t)),st[e]&&st[e].forEach(function(e){pt(e.name,e.config)}),lt(e),ot[e]}return delete ot[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return rt;if(!a(e)){if(t=ut(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=ct(e[i]).split("-")).length,n=(n=ct(e[i+1]))?n.split("-"):null;t>0;){if(r=ut(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&k(a,n,!0)>=t-1)break;t--}i++}return rt}(e)}function ft(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[ge]<0||n[ge]>11?ge:n[ye]<1||n[ye]>je(n[ve],n[ge])?ye:n[xe]<0||n[xe]>24||24===n[xe]&&(0!==n[be]||0!==n[we]||0!==n[_e])?xe:n[be]<0||n[be]>59?be:n[we]<0||n[we]>59?we:n[_e]<0||n[_e]>999?_e:-1,f(e)._overflowDayOfYear&&(t<ve||t>ye)&&(t=ye),f(e)._overflowWeeks&&-1===t&&(t=ke),f(e)._overflowWeekday&&-1===t&&(t=Ee),f(e).overflow=t),e}function ht(e,t,n){return null!=e?e:null!=t?t:n}function mt(e){var t,n,a,i,o,s=[];if(!e._d){for(a=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ye]&&null==e._a[ge]&&function(e){var t,n,r,a,i,o,s,c;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,o=4,n=ht(t.GG,e._a[ve],Ge(Ot(),1,4).year),r=ht(t.W,1),((a=ht(t.E,1))<1||a>7)&&(c=!0);else{i=e._locale._week.dow,o=e._locale._week.doy;var u=Ge(Ot(),i,o);n=ht(t.gg,e._a[ve],u.year),r=ht(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(c=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(c=!0)):a=i}r<1||r>Ye(n,i,o)?f(e)._overflowWeeks=!0:null!=c?f(e)._overflowWeekday=!0:(s=Ve(n,r,a,i,o),e._a[ve]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=ht(e._a[ve],a[ve]),(e._dayOfYear>Se(o)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=ze(o,0,e._dayOfYear),e._a[ge]=n.getUTCMonth(),e._a[ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=a[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[xe]&&0===e._a[be]&&0===e._a[we]&&0===e._a[_e]&&(e._nextDay=!0,e._a[xe]=0),e._d=(e._useUTC?ze:function(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[xe]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(f(e).weekdayMismatch=!0)}}var vt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,xt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],bt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((\-?\d+)/i;function _t(e){var t,n,r,a,i,o,s=e._i,c=vt.exec(s)||gt.exec(s);if(c){for(f(e).iso=!0,t=0,n=xt.length;t<n;t++)if(xt[t][1].exec(c[1])){a=xt[t][0],r=!1!==xt[t][2];break}if(null==a)return void(e._isValid=!1);if(c[3]){for(t=0,n=bt.length;t<n;t++)if(bt[t][1].exec(c[3])){i=(c[2]||" ")+bt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(c[4]){if(!yt.exec(c[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),Tt(e)}else e._isValid=!1}var kt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Et(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var St={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Rt(e){var t,n,r,a,i,o,s,c=kt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(c){var u=(t=c[4],n=c[3],r=c[2],a=c[5],i=c[6],o=c[7],s=[Et(t),Le.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],o&&s.push(parseInt(o,10)),s);if(!function(e,t,n){return!e||$e.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(c[1],u,e))return;e._a=u,e._tzm=function(e,t,n){if(e)return St[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(c[8],c[9],c[10]),e._d=ze.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Tt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],f(e).empty=!0;var t,n,a,i,o,s=""+e._i,c=s.length,u=0;for(a=Y(e._f,e._locale).match(M)||[],t=0;t<a.length;t++)i=a[t],(n=(s.match(le(i,e))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&f(e).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),u+=n.length),B[i]?(n?f(e).empty=!1:f(e).unusedTokens.push(i),me(i,n,e)):e._strict&&!n&&f(e).unusedTokens.push(i);f(e).charsLeftOver=c-u,s.length>0&&f(e).unusedInput.push(s),e._a[xe]<=12&&!0===f(e).bigHour&&e._a[xe]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[xe]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[xe],e._meridiem),mt(e),ft(e)}else Rt(e);else _t(e)}function At(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?m({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new x(ft(t)):(c(t)?e._d=t:a(n)?function(e){var t,n,r,a,i;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,t=g({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Tt(t),h(t)&&(i+=f(t).charsLeftOver,i+=10*f(t).unusedTokens.length,f(t).score=i,(null==r||i<r)&&(r=i,n=t));p(e,n||t)}(e):n?Tt(e):function(e){var t=e._i;o(t)?e._d=new Date(r.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(_t(e),!1===e._isValid&&(delete e._isValid,Rt(e),!1===e._isValid&&(delete e._isValid,r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):a(t)?(e._a=u(t.slice(0),function(e){return parseInt(e,10)}),mt(e)):i(t)?function(e){if(!e._d){var t=L(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),mt(e)}}(e):s(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function Dt(e,t,n,r,o){var s,c={};return!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||a(e)&&0===e.length)&&(e=void 0),c._isAMomentObject=!0,c._useUTC=c._isUTC=o,c._l=n,c._i=e,c._f=t,c._strict=r,(s=new x(ft(At(c))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Ot(e,t,n,r){return Dt(e,t,n,r,!1)}r.createFromInputFallback=S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),r.ISO_8601=function(){},r.RFC_2822=function(){};var It=S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:m()}),jt=S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:m()});function Ct(e,t){var n,r;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return Ot();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Nt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Lt(e){var t=L(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,c=t.minute||0,u=t.second||0,l=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Nt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Nt.length;++r)if(e[Nt[r]]){if(n)return!1;parseFloat(e[Nt[r]])!==_(e[Nt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+l+1e3*u+6e4*c+1e3*s*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=dt(),this._bubble()}function qt(e){return e instanceof Lt}function Ut(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Pt(e,t){V(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+P(~~(e/60),2)+t+P(~~e%60,2)})}Pt("Z",":"),Pt("ZZ",""),ue("Z",oe),ue("ZZ",oe),fe(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Ft(oe,e)});var Mt=/([\+\-]|\d\d)/gi;function Ft(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(Mt)||["-",0,0],a=60*r[1]+_(r[2]);return 0===a?0:"+"===r[0]?a:-a}function zt(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(b(e)||c(e)?e.valueOf():Ot(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),r.updateOffset(n,!1),n):Ot(e).local()}function Bt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Vt(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Gt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Yt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ht(e,t){var n,r,a,i,o,c,u=e,p=null;return qt(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(u={},t?u[t]=e:u.milliseconds=e):(p=Gt.exec(e))?(n="-"===p[1]?-1:1,u={y:0,d:_(p[ye])*n,h:_(p[xe])*n,m:_(p[be])*n,s:_(p[we])*n,ms:_(Ut(1e3*p[_e]))*n}):(p=Yt.exec(e))?(n="-"===p[1]?-1:1,u={y:Wt(p[2],n),M:Wt(p[3],n),w:Wt(p[4],n),d:Wt(p[5],n),h:Wt(p[6],n),m:Wt(p[7],n),s:Wt(p[8],n)}):null==u?u={}:"object"==typeof u&&("from"in u||"to"in u)&&(i=Ot(u.from),o=Ot(u.to),a=i.isValid()&&o.isValid()?(o=zt(o,i),i.isBefore(o)?c=$t(i,o):((c=$t(o,i)).milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0},(u={}).ms=a.milliseconds,u.M=a.months),r=new Lt(u),qt(e)&&l(e,"_locale")&&(r._locale=e._locale),r}function Wt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Jt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Zt(this,Ht(n="string"==typeof n?+n:n,r),e),this}}function Zt(e,t,n,a){var i=t._milliseconds,o=Ut(t._days),s=Ut(t._months);e.isValid()&&(a=null==a||a,s&&qe(e,Oe(e,"Month")+s*n),o&&Ie(e,"Date",Oe(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),a&&r.updateOffset(e,o||s))}Ht.fn=Lt.prototype,Ht.invalid=function(){return Ht(NaN)};var Xt=Jt(1,"add"),Kt=Jt(-1,"subtract");function Qt(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function en(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var tn=S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function nn(){return this._locale}var rn=1e3,an=60*rn,on=60*an,sn=3506328*on;function cn(e,t){return(e%t+t)%t}function un(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function pn(e,t){V(0,[e,e.length],0,t)}function dn(e,t,n,r,a){var i;return null==e?Ge(this,r,a).year:(t>(i=Ye(e,r,a))&&(t=i),function(e,t,n,r,a){var i=Ve(e,t,n,r,a),o=ze(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,e,t,n,r,a))}V(0,["gg",2],0,function(){return this.weekYear()%100}),V(0,["GG",2],0,function(){return this.isoWeekYear()%100}),pn("gggg","weekYear"),pn("ggggg","weekYear"),pn("GGGG","isoWeekYear"),pn("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),U("weekYear",1),U("isoWeekYear",1),ue("G",ae),ue("g",ae),ue("GG",X,W),ue("gg",X,W),ue("GGGG",te,J),ue("gggg",te,J),ue("GGGGG",ne,Z),ue("ggggg",ne,Z),he(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=_(e)}),he(["gg","GG"],function(e,t,n,a){t[a]=r.parseTwoDigitYear(e)}),V("Q",0,"Qo","quarter"),C("quarter","Q"),U("quarter",7),ue("Q",H),fe("Q",function(e,t){t[ge]=3*(_(e)-1)}),V("D",["DD",2],"Do","date"),C("date","D"),U("date",9),ue("D",X),ue("DD",X,W),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ye),fe("Do",function(e,t){t[ye]=_(e.match(X)[0])});var fn=De("Date",!0);V("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),U("dayOfYear",4),ue("DDD",ee),ue("DDDD",$),fe(["DDD","DDDD"],function(e,t,n){n._dayOfYear=_(e)}),V("m",["mm",2],0,"minute"),C("minute","m"),U("minute",14),ue("m",X),ue("mm",X,W),fe(["m","mm"],be);var hn=De("Minutes",!1);V("s",["ss",2],0,"second"),C("second","s"),U("second",15),ue("s",X),ue("ss",X,W),fe(["s","ss"],we);var mn,vn=De("Seconds",!1);for(V("S",0,0,function(){return~~(this.millisecond()/100)}),V(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),V(0,["SSS",3],0,"millisecond"),V(0,["SSSS",4],0,function(){return 10*this.millisecond()}),V(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),V(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),V(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),V(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),V(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),U("millisecond",16),ue("S",ee,H),ue("SS",ee,W),ue("SSS",ee,$),mn="SSSS";mn.length<=9;mn+="S")ue(mn,re);function gn(e,t){t[_e]=_(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")fe(mn,gn);var yn=De("Milliseconds",!1);V("z",0,0,"zoneAbbr"),V("zz",0,0,"zoneName");var xn=x.prototype;function bn(e){return e}xn.add=Xt,xn.calendar=function(e,t){var n=e||Ot(),a=zt(n,this).startOf("day"),i=r.calendarFormat(this,a)||"sameElse",o=t&&(D(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Ot(n)))},xn.clone=function(){return new x(this)},xn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=zt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=N(t)){case"year":i=Qt(this,r)/12;break;case"month":i=Qt(this,r);break;case"quarter":i=Qt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:w(i)},xn.endOf=function(e){var t;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?ln:un;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=on-cn(t+(this._isUTC?0:this.utcOffset()*an),on)-1;break;case"minute":t=this._d.valueOf(),t+=an-cn(t,an)-1;break;case"second":t=this._d.valueOf(),t+=rn-cn(t,rn)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},xn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=G(this,e);return this.localeData().postformat(t)},xn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Ot(e).isValid())?Ht({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},xn.fromNow=function(e){return this.from(Ot(),e)},xn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Ot(e).isValid())?Ht({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},xn.toNow=function(e){return this.to(Ot(),e)},xn.get=function(e){return D(this[e=N(e)])?this[e]():this},xn.invalidAt=function(){return f(this).overflow},xn.isAfter=function(e,t){var n=b(e)?e:Ot(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},xn.isBefore=function(e,t){var n=b(e)?e:Ot(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},xn.isBetween=function(e,t,n,r){var a=b(e)?e:Ot(e),i=b(t)?t:Ot(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},xn.isSame=function(e,t){var n,r=b(e)?e:Ot(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},xn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},xn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},xn.isValid=function(){return h(this)},xn.lang=tn,xn.locale=en,xn.localeData=nn,xn.max=jt,xn.min=It,xn.parsingFlags=function(){return p({},f(this))},xn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:q[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=L(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(D(this[e=N(e)]))return this[e](t);return this},xn.startOf=function(e){var t;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?ln:un;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=cn(t+(this._isUTC?0:this.utcOffset()*an),on);break;case"minute":t=this._d.valueOf(),t-=cn(t,an);break;case"second":t=this._d.valueOf(),t-=cn(t,rn)}return this._d.setTime(t),r.updateOffset(this,!0),this},xn.subtract=Kt,xn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},xn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},xn.toDate=function(){return new Date(this.valueOf())},xn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?G(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):D(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",G(n,"Z")):G(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},xn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},xn.toJSON=function(){return this.isValid()?this.toISOString():null},xn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},xn.unix=function(){return Math.floor(this.valueOf()/1e3)},xn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},xn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},xn.year=Ae,xn.isLeapYear=function(){return Re(this.year())},xn.weekYear=function(e){return dn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},xn.isoWeekYear=function(e){return dn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},xn.quarter=xn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},xn.month=Ue,xn.daysInMonth=function(){return je(this.year(),this.month())},xn.week=xn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},xn.isoWeek=xn.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},xn.weeksInYear=function(){var e=this.localeData()._week;return Ye(this.year(),e.dow,e.doy)},xn.isoWeeksInYear=function(){return Ye(this.year(),1,4)},xn.date=fn,xn.day=xn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},xn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},xn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},xn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},xn.hour=xn.hours=at,xn.minute=xn.minutes=hn,xn.second=xn.seconds=vn,xn.millisecond=xn.milliseconds=yn,xn.utcOffset=function(e,t,n){var a,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ft(oe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Bt(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),i!==e&&(!t||this._changeInProgress?Zt(this,Ht(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Bt(this)},xn.utc=function(e){return this.utcOffset(0,e)},xn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},xn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ft(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},xn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Ot(e).utcOffset():0,(this.utcOffset()-e)%60==0)},xn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},xn.isLocal=function(){return!!this.isValid()&&!this._isUTC},xn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},xn.isUtc=Vt,xn.isUTC=Vt,xn.zoneAbbr=function(){return this._isUTC?"UTC":""},xn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},xn.dates=S("dates accessor is deprecated. Use date instead.",fn),xn.months=S("months accessor is deprecated. Use month instead",Ue),xn.years=S("years accessor is deprecated. Use year instead",Ae),xn.zone=S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),xn.isDSTShifted=S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(g(e,this),(e=At(e))._a){var t=e._isUTC?d(e._a):Ot(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var wn=I.prototype;function _n(e,t,n,r){var a=dt(),i=d().set(r,t);return a[n](i,e)}function kn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return _n(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=_n(e,r,n,"month");return a}function En(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var a,i=dt(),o=e?i._week.dow:0;if(null!=n)return _n(t,(n+o)%7,r,"day");var c=[];for(a=0;a<7;a++)c[a]=_n(t,(a+o)%7,r,"day");return c}wn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return D(r)?r.call(t,n):r},wn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},wn.invalidDate=function(){return this._invalidDate},wn.ordinal=function(e){return this._ordinal.replace("%d",e)},wn.preparse=bn,wn.postformat=bn,wn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return D(a)?a(e,t,n,r):a.replace(/%d/i,e)},wn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return D(n)?n(t):n.replace(/%s/i,t)},wn.set=function(e){var t,n;for(n in e)D(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},wn.months=function(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ce).test(t)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone},wn.monthsShort=function(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ce.test(t)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},wn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return function(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=d([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Te.call(this._shortMonthsParse,o))?a:null:-1!==(a=Te.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Te.call(this._shortMonthsParse,o))?a:-1!==(a=Te.call(this._longMonthsParse,o))?a:null:-1!==(a=Te.call(this._longMonthsParse,o))?a:-1!==(a=Te.call(this._shortMonthsParse,o))?a:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=d([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},wn.monthsRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||Fe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=Me),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},wn.monthsShortRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||Fe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=Pe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},wn.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},wn.firstDayOfYear=function(){return this._week.doy},wn.firstDayOfWeek=function(){return this._week.dow},wn.weekdays=function(e,t){var n=a(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?He(n,this._week.dow):e?n[e.day()]:n},wn.weekdaysMin=function(e){return!0===e?He(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},wn.weekdaysShort=function(e){return!0===e?He(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},wn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return function(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=d([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Te.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=d([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},wn.weekdaysRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=Ze),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},wn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Xe),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},wn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ke),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},wn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},wn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},lt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===_(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=S("moment.lang is deprecated. Use moment.locale instead.",lt),r.langData=S("moment.langData is deprecated. Use moment.localeData instead.",dt);var Sn=Math.abs;function Rn(e,t,n,r){var a=Ht(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Tn(e){return e<0?Math.floor(e):Math.ceil(e)}function An(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function On(e){return function(){return this.as(e)}}var In=On("ms"),jn=On("s"),Cn=On("m"),Nn=On("h"),Ln=On("d"),qn=On("w"),Un=On("M"),Pn=On("Q"),Mn=On("y");function Fn(e){return function(){return this.isValid()?this._data[e]:NaN}}var zn=Fn("milliseconds"),Bn=Fn("seconds"),Vn=Fn("minutes"),Gn=Fn("hours"),Yn=Fn("days"),Hn=Fn("months"),Wn=Fn("years"),$n=Math.round,Jn={ss:44,s:45,m:45,h:22,d:26,M:11},Zn=Math.abs;function Xn(e){return(e>0)-(e<0)||+e}function Kn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Zn(this._milliseconds)/1e3,r=Zn(this._days),a=Zn(this._months);e=w(n/60),t=w(e/60),n%=60,e%=60;var i=w(a/12),o=a%=12,s=r,c=t,u=e,l=n?n.toFixed(3).replace(/\.?0+$/,""):"",p=this.asSeconds();if(!p)return"P0D";var d=p<0?"-":"",f=Xn(this._months)!==Xn(p)?"-":"",h=Xn(this._days)!==Xn(p)?"-":"",m=Xn(this._milliseconds)!==Xn(p)?"-":"";return d+"P"+(i?f+i+"Y":"")+(o?f+o+"M":"")+(s?h+s+"D":"")+(c||u||l?"T":"")+(c?m+c+"H":"")+(u?m+u+"M":"")+(l?m+l+"S":"")}var Qn=Lt.prototype;return Qn.isValid=function(){return this._isValid},Qn.abs=function(){var e=this._data;return this._milliseconds=Sn(this._milliseconds),this._days=Sn(this._days),this._months=Sn(this._months),e.milliseconds=Sn(e.milliseconds),e.seconds=Sn(e.seconds),e.minutes=Sn(e.minutes),e.hours=Sn(e.hours),e.months=Sn(e.months),e.years=Sn(e.years),this},Qn.add=function(e,t){return Rn(this,e,t,1)},Qn.subtract=function(e,t){return Rn(this,e,t,-1)},Qn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=N(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+An(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Qn.asMilliseconds=In,Qn.asSeconds=jn,Qn.asMinutes=Cn,Qn.asHours=Nn,Qn.asDays=Ln,Qn.asWeeks=qn,Qn.asMonths=Un,Qn.asQuarters=Pn,Qn.asYears=Mn,Qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*_(this._months/12):NaN},Qn._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,c=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*Tn(Dn(s)+o),o=0,s=0),c.milliseconds=i%1e3,e=w(i/1e3),c.seconds=e%60,t=w(e/60),c.minutes=t%60,n=w(t/60),c.hours=n%24,o+=w(n/24),a=w(An(o)),s+=a,o-=Tn(Dn(a)),r=w(s/12),s%=12,c.days=o,c.months=s,c.years=r,this},Qn.clone=function(){return Ht(this)},Qn.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},Qn.milliseconds=zn,Qn.seconds=Bn,Qn.minutes=Vn,Qn.hours=Gn,Qn.days=Yn,Qn.weeks=function(){return w(this.days()/7)},Qn.months=Hn,Qn.years=Wn,Qn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Ht(e).abs(),a=$n(r.as("s")),i=$n(r.as("m")),o=$n(r.as("h")),s=$n(r.as("d")),c=$n(r.as("M")),u=$n(r.as("y")),l=a<=Jn.ss&&["s",a]||a<Jn.s&&["ss",a]||i<=1&&["m"]||i<Jn.m&&["mm",i]||o<=1&&["h"]||o<Jn.h&&["hh",o]||s<=1&&["d"]||s<Jn.d&&["dd",s]||c<=1&&["M"]||c<Jn.M&&["MM",c]||u<=1&&["y"]||["yy",u];return l[2]=t,l[3]=+e>0,l[4]=n,function(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}.apply(null,l)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Qn.toISOString=Kn,Qn.toString=Kn,Qn.toJSON=Kn,Qn.locale=en,Qn.localeData=nn,Qn.toIsoString=S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Kn),Qn.lang=tn,V("X",0,0,"unix"),V("x",0,0,"valueOf"),ue("x",ae),ue("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,n){n._d=new Date(_(e))}),r.version="2.24.0",t=Ot,r.fn=xn,r.min=function(){return Ct("isBefore",[].slice.call(arguments,0))},r.max=function(){return Ct("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=d,r.unix=function(e){return Ot(1e3*e)},r.months=function(e,t){return kn(e,t,"months")},r.isDate=c,r.locale=lt,r.invalid=m,r.duration=Ht,r.isMoment=b,r.weekdays=function(e,t,n){return En(e,t,n,"weekdays")},r.parseZone=function(){return Ot.apply(null,arguments).parseZone()},r.localeData=dt,r.isDuration=qt,r.monthsShort=function(e,t){return kn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return En(e,t,n,"weekdaysMin")},r.defineLocale=pt,r.updateLocale=function(e,t){if(null!=t){var n,r,a=it;null!=(r=ut(e))&&(a=r._config),t=O(a,t),(n=new I(t)).parentLocale=ot[e],ot[e]=n,lt(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},r.locales=function(){return R(ot)},r.weekdaysShort=function(e,t,n){return En(e,t,n,"weekdaysShort")},r.normalizeUnits=N,r.relativeTimeRounding=function(e){return void 0===e?$n:"function"==typeof e&&($n=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Jn[e]&&(void 0===t?Jn[e]:(Jn[e]=t,"s"===e&&(Jn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=xn,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()}).call(this,n(192)(e))},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(41),a={metadataTable:function(e){for(var t=r.print.prettyTree(e.getMetadata(),e.getResourceURI()),n=[],a=0;a<t.length;a++){var i=t[a],o=i.stmt;n.push("".concat("<tr><td class='rdf_subject'>").concat(o.isSubjectBlank()?i.s:"<a href='".concat(o.getSubject(),"'>").concat(i.s,"</a>"),"</td>")+"<td class='rdf_predicate'><a href='".concat(o.getPredicate(),"'>").concat(i.p,"</a></td>")+"<td class='rdf_object'>".concat("uri"===o.getType()?"<a href='".concat(o.getValue(),"'>").concat(i.o,"</a>"):i.o,"</td></tr>"))}return n.join("\n")}},i={},o=function(e){if(!i[e]){for(var t="",n=1;n<e;n++)t+="<span class='rdf_indent'></span>";i[e]=t}return i[e]};a.metadataIndent=function(e,t){for(var n=r.print.prettyTree(e,t),a=[],i=0;i<n.length;i++){var s=n[i],c=s.stmt;a.push("<div class='rdf_statement'>".concat(o(s.indent),"<span class='rdf_subject'>").concat(c.isSubjectBlank()?s.s:"<a href='".concat(c.getSubject(),"'>").concat(s.s,"</a>"),"</span>")+"<span class='rdf_predicate'><a href='".concat(c.getPredicate(),"'>").concat(s.p,"</a></span>")+"<span class='rdf_object'>".concat("uri"===c.getType()?"<a href='".concat(c.getValue(),"'>").concat(s.o,"</a>"):s.o,"</span></div>"))}return a.join("\n")},a.entryInfo=function(e){return"<span class='info entrytype'><label>EntryType:</label> ".concat(e.getEntryType(),"</span>")+"<span class='info resourceType'><label>ResourceType:</label> ".concat(e.getResourceType(),"</span>")+"<span class='info graphType'><label>GraphType:</label> ".concat(e.getGraphType(),"</span>")},a.print=function(e){var t=["".concat("<div class='entry'><h3>Context: <a class='contextURI' href='").concat(e.getContext().getEntryURI(),"'>").concat(e.getContext().getId(),"</a> <span></span> ")+"Entry: <a class='entryURI' href='".concat(e.getURI(),"'>").concat(e.getId(),"</a></h3>")+"<div>"+"<div class='entryInfo'>".concat(a.entryInfo(e.getEntryInfo()),"</div>")],n=e.getMetadata();n&&!n.isEmpty()&&t.push("<h4>Local metadata:</h4><div class='metadata'>".concat(a.metadataIndent(n,e.getResourceURI()),"</div>"));var r=e.getCachedExternalMetadata();return r&&!r.isEmpty()&&t.push("<h4>Cached external metadata:</h4><div class='metadata'>".concat(a.metadataIndent(r,e.getResourceURI()),"</div>")),t.push("</div></div>"),t.join("")};var s=a;t.default=s},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={forEach:function(e,t){return new Promise(function(a,i){var o,s,c=function(e){i(e)};if(Array.isArray(e)){var u=[];o=e.slice(),s=function(e){if(u.push(e),o.length>0)return r.toPromise(t(o.shift())).then(s,c);a(u)},0===o.length?a(u):r.toPromise(t(o.shift())).then(s,c)}else if("object"===n(e)){var l;o=Object.keys(e);var p=function(t){e[l]=t,s()};(s=function(){o.length>0?(l=o.shift(),r.toPromise(t(e[l])).then(p,c)):a(e)})()}})},toPromise:function(e){return"object"===n(e)&&null!==e&&"function"==typeof e.then?e:!1===e?Promise.reject(e):Promise.resolve(e)},delay:function(e){return new Promise(function(t){return setTimeout(t,e)})}},a=r;t.default=a},function(e,t){function n(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function r(e){return function(){var t=this,r=arguments;return new Promise(function(a,i){var o=e.apply(t,r);function s(e){n(o,a,i,s,c,"next",e)}function c(e){n(o,a,i,s,c,"throw",e)}s(void 0)})}}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entrystore=t,this._preloadIdx=new Map}var t,n,i,o,s,c,u;return t=e,(n=[{key:"getEntryStore",value:function(){return this._entrystore}},{key:"preloadEntries",value:function(e,t){var n,r=this._preloadIdx.get(e);if(r){if(t){if(n=r[t.getEntryURI()])return n}else if(r.noContext)return r.noContext}else r={},this._preloadIdx.set(e,r);var a=this._entrystore.newSolrQuery().resourceType(e).limit(100);return t&&a.context(t),n=a.list().getEntries(0),t?r[t.getEntryURI()]=n:r.noContext=n,n}},{key:"clearPreloadEntriesDuplicateCheck",value:function(e,t){if(e){var n=this._preloadIdx.get(e);n&&t?delete n[t.getEntryURI()]:this._preloadIdx.delete(e)}else this._preloadIdx=new Map}},{key:"getEntryByResourceURI",value:(u=r(regeneratorRuntime.mark(function e(t,n,r){var a,i,o,s,c,u,l,p,d,f;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(a=this._entrystore.getCache(),i=a.getByResourceURI(t),!n){e.next=29;break}o=!0,s=!1,c=void 0,e.prev=6,u=i[Symbol.iterator]();case 8:if(o=(l=u.next()).done){e.next=15;break}if((p=l.value).getContext().getId()!==n.getId()){e.next=12;break}return e.abrupt("return",Promise.resolve(p));case 12:o=!0,e.next=8;break;case 15:e.next=21;break;case 17:e.prev=17,e.t0=e.catch(6),s=!0,c=e.t0;case 21:e.prev=21,e.prev=22,o||null==u.return||u.return();case 24:if(e.prev=24,!s){e.next=27;break}throw c;case 27:return e.finish(24);case 28:return e.finish(21);case 29:return d=this._entrystore.newSolrQuery().resource(t).limit(1),n&&d.context(n),e.next=33,d.list(r).getEntries(0);case 33:if(!((f=e.sent).length>0)){e.next=36;break}return e.abrupt("return",f[0]);case 36:throw new Error("No entries for resource with URI: ".concat(t));case 37:case"end":return e.stop()}},e,this,[[6,17,21,29],[22,,24,28]])})),function(e,t,n){return u.apply(this,arguments)})},{key:"getEntryListByResourceURI",value:function(e){return this._entrystore.newSolrQuery().resource(e).list()}},{key:"getEntryByType",value:(c=r(regeneratorRuntime.mark(function e(t,n,r){var a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=this._entrystore.newSolrQuery().rdfType(t).limit(2),n&&a.context(n),e.next=4,a.list(r).getEntries(0);case 4:if(1!==(i=e.sent).length){e.next=7;break}return e.abrupt("return",i[0]);case 7:throw new Error("Wrong number of entries in context / repository");case 8:case"end":return e.stop()}},e,this)})),function(e,t,n){return c.apply(this,arguments)})},{key:"getEntryByGraphType",value:(s=r(regeneratorRuntime.mark(function e(t,n,r){var a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=this._entrystore.newSolrQuery().graphType(t).limit(2),n&&a.context(n),e.next=4,a.list(r).getEntries(0);case 4:if(!((i=e.sent).length>0)){e.next=7;break}return e.abrupt("return",i[0]);case 7:throw new Error("No entries in ".concat(n?"context":"repository"," context with graphType ").concat(t));case 8:case"end":return e.stop()}},e,this)})),function(e,t,n){return s.apply(this,arguments)})},{key:"removeAll",value:(o=r(regeneratorRuntime.mark(function e(t){var n,a,i,o,s,c;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=[],a=this._entrystore,i=a.getCache(),o=a.getREST(),s=function(){var e=r(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n.length>0)){e.next=11;break}return t=n.pop(),e.prev=2,e.next=5,o.del(t);case 5:e.next=10;break;case 7:e.prev=7,e.t0=e.catch(2),console.log("Could not remove entry with uri: ".concat(t," continuing anyway."));case 10:s();case 11:return e.abrupt("return",void 0);case 12:case"end":return e.stop()}},e,null,[[2,7]])}));return function(){return e.apply(this,arguments)}}(),e.next=7,t.forEach(function(e){n.push(e.getURI()),i.unCache(e)});case 7:c=e.sent,s(c);case 9:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})}])&&a(t.prototype,n),i&&a(t,i),e}();t.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FbnRyeVN0b3JlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaHRtbC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwidXRpbFwiIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2JpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL1Jlc291cmNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcmRmanNvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3JkZmpzb24vc3JjL2Zvcm1hdHMvcmRmanNvbi91dGlsLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcmRmanNvbi9zcmMvU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcmRmanNvbi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9yZGZqc29uL3NyYy9HcmFwaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3JkZmpzb24vc3JjL2Zvcm1hdHMvcmRmeG1sL3VyaS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3JkZmpzb24vc3JjL2Zvcm1hdHMvcmRmeG1sL1JkZnBhcnNlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3JkZmpzb24vc3JjL2Zvcm1hdHMvcmRmeG1sL3Rlcm1zLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcmRmanNvbi9zcmMvZm9ybWF0cy9jb252ZXJ0ZXJzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcmRmanNvbi9zcmMvcHJpbnQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9yZGZqc29uL21haW4uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy90eXBlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwic3RyZWFtXCIiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL3Rlcm1zLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovL0VudHJ5U3RvcmUvZXh0ZXJuYWwgXCJ1cmxcIiIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZvcmNlZC1vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1tZXRob2RzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2VyLWFnZW50LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL0dyYXBoLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvRW50cnlTdG9yZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwicGF0aFwiIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy9MaXN0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMveG1sZG9tL2RvbS1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mb3JjZWQtc3RyaW5nLXRyaW0tbWV0aG9kLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheXMtY29uc3RydWN0b3JzLXJlcXVpcmVzLXdyYXBwZXJzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL1BpcGVsaW5lLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvUHJvdG90eXBlRW50cnkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy9FbnRyeS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwiZXZlbnRzXCIiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2Nvb2tpZWphci9jb29raWVqYXIuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy9TZWFyY2hMaXN0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvVXNlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL0VudHJ5SW5mby5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL1N0cmluZy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL21kNS9tZDUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dyYXBwZWQtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWJraXQtc3RyaW5nLXBhZC1idWcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGFyc2UtaW50LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMveG1sZG9tL2RvbS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NoYXJlbmMvY2hhcmVuYy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL0F1dGguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy9DYWNoZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL1Jlc3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9ibHVlaW1wLW1kNS9qcy9tZDUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9ub2RlL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwib3NcIiIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwiY3J5cHRvXCIiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS9leHRlcm5hbCBcImJ1ZmZlclwiIiwid2VicGFjazovL0VudHJ5U3RvcmUvZXh0ZXJuYWwgXCJzdHJpbmdfZGVjb2RlclwiIiwid2VicGFjazovL0VudHJ5U3RvcmUvZXh0ZXJuYWwgXCJodHRwc1wiIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvYWJvcnQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvdGVybWluYXRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L3NlcmlhbE9yZGVyZWQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL21ldGhvZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS9leHRlcm5hbCBcInpsaWJcIiIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvU29sclF1ZXJ5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvRmlsZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vc3JjL0dyb3VwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3N0YWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcm9tLWVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLXN0YXJ0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstc2V0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0YS12aWV3LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mcm9tLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHVueWNvZGUtdG8tYXNjaWkuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMveG1sZG9tL3NheC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NyeXB0L2NyeXB0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9ub2RlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvZXh0ZXJuYWwgXCJ0dHlcIiIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvaGFzLWZsYWcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9mb3JtaWRhYmxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2Zvcm1pZGFibGUvbGliL2luY29taW5nX2Zvcm0uanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9mb3JtaWRhYmxlL2xpYi9maWxlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvZm9ybWlkYWJsZS9saWIvbXVsdGlwYXJ0X3BhcnNlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2Zvcm1pZGFibGUvbGliL3F1ZXJ5c3RyaW5nX3BhcnNlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlL2V4dGVybmFsIFwicXVlcnlzdHJpbmdcIiIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2Zvcm1pZGFibGUvbGliL29jdGV0X3BhcnNlci5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2Zvcm1pZGFibGUvbGliL2pzb25fcGFyc2VyLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhL2xpYi9mb3JtX2RhdGEuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9jb21iaW5lZC1zdHJlYW0vbGliL2NvbWJpbmVkX3N0cmVhbS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2RlbGF5ZWQtc3RyZWFtL2xpYi9kZWxheWVkX3N0cmVhbS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2NvbWJpbmVkLXN0cmVhbS9saWIvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9taW1lLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvbWltZS1kYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvcGFyYWxsZWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9zZXJpYWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvbm9kZS9yZXNwb25zZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL3Jlc3BvbnNlLWJhc2UuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9ub2RlL3VuemlwLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvbWltZS9taW1lLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL3JlcXVlc3QtYmFzZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL25vZGUvYWdlbnQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9hZ2VudC1iYXNlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvbm9kZS9wYXJzZXJzL2luZGV4LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvbm9kZS9wYXJzZXJzL3VybGVuY29kZWQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9ub2RlL3BhcnNlcnMvanNvbi5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL25vZGUvcGFyc2Vycy90ZXh0LmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvbm9kZS9wYXJzZXJzL2ltYWdlLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC1qc29ucC9kaXN0L3N1cGVyYWdlbnQtanNvbnAuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL25vZGVfbW9kdWxlcy9oZS9oZS5qcyIsIndlYnBhY2s6Ly9FbnRyeVN0b3JlLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy9odG1sLmpzIiwid2VicGFjazovL0VudHJ5U3RvcmUvLi9zcmMvcHJvbWlzZVV0aWwuanMiLCJ3ZWJwYWNrOi8vRW50cnlTdG9yZS8uL3NyYy9FbnRyeVN0b3JlVXRpbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJoaWRlIiwicmVkZWZpbmUiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwic291cmNlIiwidGFyZ2V0IiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJ1bmRlZmluZWQiLCJzaGFtIiwiZXhlYyIsImVycm9yIiwiTyIsImNoZWNrIiwiaXQiLCJNYXRoIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJGdW5jdGlvbiIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTkFNRSIsIkRFU0NSSVBUT1JTIiwiaGFzIiwiY2xhc3NvZiIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJ3ZWxsS25vd25TeW1ib2wiLCJ1aWQiLCJEYXRhVmlldyIsIkRhdGFWaWV3UHJvdG90eXBlIiwiSW50OEFycmF5IiwiSW50OEFycmF5UHJvdG90eXBlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSIsIlR5cGVkQXJyYXkiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiaXNQcm90b3R5cGVPZiIsIlRPX1NUUklOR19UQUciLCJUWVBFRF9BUlJBWV9UQUciLCJOQVRJVkVfQVJSQVlfQlVGRkVSIiwiQXJyYXlCdWZmZXIiLCJOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIiwiVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIlVpbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJ0aGlzIiwiYVR5cGVkQXJyYXkiLCJhVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiQyIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXhwb3J0UHJvdG8iLCJLRVkiLCJleHBvcnRTdGF0aWMiLCJpc1ZpZXciLCJrbGFzcyIsImZhaWxzIiwiYSIsInNoYXJlZCIsIk5BVElWRV9TWU1CT0wiLCJzdG9yZSIsInRvSW50ZWdlciIsIm1pbiIsImFyZ3VtZW50IiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJQIiwiQXR0cmlidXRlcyIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJJbmRleGVkT2JqZWN0IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFycmF5U3BlY2llc0NyZWF0ZSIsInB1c2giLCJjcmVhdGVNZXRob2QiLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwicmVzdWx0IiwiYm91bmRGdW5jdGlvbiIsImxlbmd0aCIsImluZGV4IiwiZm9yRWFjaCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmF0aXZlRnVuY3Rpb25Ub1N0cmluZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiVEVNUExBVEUiLCJzcGxpdCIsInVuc2FmZSIsInNpbXBsZSIsImpvaW4iLCJwYXRoIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsInNldCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJTVEFURSIsImdldHRlckZvciIsInN0YXRlIiwidHlwZSIsInF1b3QiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJTIiwicDEiLCJyZXBsYWNlIiwiTUVUSE9EX05BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInRvU3RyaW5nIiwic2xpY2UiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbCIsInZhbHVlT2YiLCJUQUciLCJjb25maWd1cmFibGUiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJJRV9QUk9UTyIsImNvbnN0cnVjdG9yIiwibWV0aG9kIiwiYUZ1bmN0aW9uIiwiU1BFQ0lFUyIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIiQiLCJUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTIiwiQXJyYXlCdWZmZXJWaWV3Q29yZSIsIkFycmF5QnVmZmVyTW9kdWxlIiwiYW5JbnN0YW5jZSIsInRvSW5kZXgiLCJ0b09mZnNldCIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0eXBlZEFycmF5RnJvbSIsInNldFNwZWNpZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJzZXRJbnRlcm5hbFN0YXRlIiwicm91bmQiLCJSYW5nZUVycm9yIiwiZnJvbUxpc3QiLCJsaXN0IiwiYWRkR2V0dGVyIiwiaXNBcnJheUJ1ZmZlciIsImlzVHlwZWRBcnJheUluZGV4Iiwid3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyYXBwZWREZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiQllURVMiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkNPTlNUUlVDVE9SX05BTUUiLCJHRVRURVIiLCJTRVRURVIiLCJOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUiLCJleHBvcnRlZCIsImFkZEVsZW1lbnQiLCJkYXRhIiwidmlldyIsImJ5dGVPZmZzZXQiLCJzZXR0ZXIiLCJkdW1teSIsInR5cGVkQXJyYXlPZmZzZXQiLCIkbGVuZ3RoIiwib2Zmc2V0IiwiYnVmZmVyIiwiYnl0ZUxlbmd0aCIsIiRsZW4iLCJyZXF1aXJlIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJhcmd1bWVudHMiLCJtYXgiLCJpbnRlZ2VyIiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiRiIsIlByb3BlcnRpZXMiLCJiIiwiYXBwbHkiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiQXJyYXkiLCJDb25zdHJ1Y3RvciIsInNvcnRPYmoiLCJzb3J0QnkiLCJwcmlvIiwiZGVmYXVsdExpbWl0IiwiZ2V0Q29udGV4dEZvckVudHJ5IiwiZW50cnlVUkkiLCJlbnRyeVN0b3JlIiwiYmFzZVVSSSIsImdldEJhc2VVUkkiLCJjb250ZXh0SWQiLCJzdWJzdHIiLCJpbmRleE9mIiwiY29udGV4dHMiLCJnZXRDYWNoZWRDb250ZXh0c0lkeCIsImNvbnRleHQiLCJDb250ZXh0IiwiZml4TmFtZUFuZERpc2FibGVkIiwicmVzT2JqIiwicmVzb3VyY2UiLCJVc2VyIiwiX2RhdGEiLCJfbmFtZSIsImRpc2FibGVkIiwiX3VwZGF0ZU9yQ3JlYXRlUmVzb3VyY2UiLCJlbnRyeSIsImZvcmNlIiwiZ2V0UmVzb3VyY2UiLCJ1cmkiLCJnZXRVUkkiLCJydXJpIiwiZ2V0UmVzb3VyY2VVUkkiLCJjcnVyaSIsImdldENvbnRleHQiLCJlcyIsImdldEVudHJ5U3RvcmUiLCJlaSIsImdldEVudHJ5SW5mbyIsImdldEVudHJ5VHlwZSIsInR5cGVzIiwiRVRfTE9DQUwiLCJnZXRSZXNvdXJjZVR5cGUiLCJSVF9JTkZPUk1BVElPTlJFU09VUkNFIiwiZ2V0R3JhcGhUeXBlIiwiR1RfQ09OVEVYVCIsImdldElkIiwiX3VwZGF0ZSIsIkdUX0xJU1QiLCJHVF9HUk9VUCIsImlzR3JvdXAiLCJHcm91cCIsIkxpc3QiLCJjaGlsZHJlbiIsImNoaWxkIiwidXBkYXRlT3JDcmVhdGUiLCJlbnRyeUlkIiwiR1RfVVNFUiIsIkdUX1NUUklORyIsIlN0cmluZ1Jlc291cmNlIiwiR1RfR1JBUEgiLCJHcmFwaFJlc291cmNlIiwiR1RfUElQRUxJTkUiLCJQaXBlbGluZSIsIkdUX1BJUEVMSU5FUkVTVUxUIiwiR1RfTk9ORSIsIkZpbGVSZXNvdXJjZSIsIl9yZXNvdXJjZSIsImlzTGlzdCIsIl91cGRhdGVFbnRyeSIsIl9tZXRhZGF0YSIsIkdyYXBoIiwiX2NhY2hlZEV4dGVybmFsTWV0YWRhdGEiLCJfaW5mZXJyZWRNZXRhZGF0YSIsImluZmVycmVkIiwiX2V4dHJhY3RlZE1ldGFkYXRhIiwiX3JlbGF0aW9uIiwicmVsYXRpb25zIiwiX3JpZ2h0cyIsInJpZ2h0cyIsInRyYW5zZm9ybVJpZ2h0cyIsIl9kaXNhYmxlZCIsImNhY2hlIiwiZ2V0Q2FjaGUiLCJzZXRHcmFwaCIsImluZm8iLCJlbnRyeUluZm8iLCJFbnRyeUluZm8iLCJFbnRyeSIsImdldEVudHJ5SWQiLCJiYXNlIiwiX3VyaSIsInJlcyIsIm1hdGNoIiwibGFzdEluZGV4T2YiLCJnZXRDb250ZXh0SWQiLCJjb250ZXh0RW50cnlVUkkiLCJjb250ZXh0c0Jhc2VVUkkiLCJnZXRMaXN0IiwicmVzb3VyY2VVUkkiLCJzZXRSZWZyZXNoTmVlZGVkIiwidXBkYXRlT3JDcmVhdGVSZXNvdXJjZSIsInVwZGF0ZSIsImNyZWF0ZVNlYXJjaExpc3QiLCJxdWVyeSIsIlNlYXJjaExpc3QiLCJleHRyYWN0U2VhcmNoUmVzdWx0cyIsInNpemUiLCJyZXN1bHRzIiwiZW50cmllcyIsImdldENhY2hlZEV4dGVybmFsTWV0YWRhdGFVUkkiLCJnZXRFbnRyeVVSSUZyb21VUkkiLCJnZXRFbnRyeVVSSSIsImdldE1ldGFkYXRhVVJJRnJvbVVSSSIsImdldE1ldGFkYXRhVVJJIiwiZ2V0UmVzb3VyY2VCYXNlIiwiZ2V0VVJJRnJvbUNyZWF0ZWQiLCJnZXRFbnRyeUxvYWRVUkkiLCJwYXJhbXMiLCJfcGFyYW1zIiwic3RyTCIsImxpbWl0Iiwic3RyTyIsInNvcnQiLCJzdHJTb3J0Iiwic3RyRGVzYyIsInN0clByaW8iLCJkZXNjZW5kaW5nIiwiZ2V0RW50cnlDcmVhdGVVUkkiLCJwcm90b3R5cGVFbnRyeSIsInBhcmVudExpc3RFbnRyeSIsImdldFNwZWNpZmljSWQiLCJpc0xpbmsiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc1JlZmVyZW5jZSIsImlzTGlua1JlZmVyZW5jZSIsImdldEV4dGVybmFsTWV0YWRhdGFVUkkiLCJnZXRFbnRyeUNyZWF0ZVBvc3REYXRhIiwicG9zdERhdGEiLCJlbXB0eSIsIm1kIiwiZ2V0TWV0YWRhdGEiLCJpc0VtcHR5IiwiZXhwb3J0UkRGSlNPTiIsInJlIiwiZ2V0U291cmNlIiwiZ2V0R3JhcGgiLCJjYWNoZWRFeHRlcm5hbE1ldGFkYXRhIiwiZ2V0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRNb3ZlVVJJIiwiZnJvbUxpc3RFbnRyeSIsInRvTGlzdEVudHJ5IiwiZnVyaSIsImdldFByb3h5VVJJIiwiZm9ybWF0SGludCIsInVybCIsImdldFB1dEZpbGVVUkkiLCJzZXRTb3J0Iiwic29ydE9iamVjdCIsImdldFNvcnQiLCJnZXREZWZhdWx0TGltaXQiLCJzZXREZWZhdWx0TGltaXQiLCJSZXNvdXJjZSIsIl9lbnRyeVVSSSIsIl9yZXNvdXJjZVVSSSIsIl9lbnRyeVN0b3JlIiwiZGlyZWN0IiwiZ2V0RW50cnkiLCJmYWN0b3J5IiwibnNzIiwiaWNhbCIsInZjYXJkIiwiZGN0ZXJtcyIsInNrb3MiLCJyZGZzIiwicmRmIiwib3dsIiwidnMiLCJmb2FmIiwid290IiwiZGMiLCJ4c2QiLCJkY2F0Iiwib3JnIiwiZ24iLCJsb2NuIiwic2NoZW1hIiwiZXgiLCJnc3AiLCJvZHJzIiwibnNjb3VudGVyIiwiX25zaWZ5IiwiZXhwYW5kZWQiLCJsb2NhbG5hbWUiLCJhYmJyZXYiLCJmdWxsIiwicHJldHR5IiwiZW5zIiwia2V5cyIsInN1YnN0cmluZyIsInNsYXNoIiwiaGFzaCIsIm5zaWZ5Iiwic2hvcnRlbktub3duIiwic2hvcnRlbiIsImV4cGFuZCIsIm5zdXJpIiwiYXJyIiwiYWRkIiwibnNrZXkiLCJyZWdpc3RyeSIsImlzQXJyYXkiLCJpc1N0cmluZyIsImNsZWFudXAiLCJncmFwaCIsImNoZWNrRm9yV3JvbmdBcmdzIiwiYXJncyIsIkVycm9yIiwib2JqZWN0RXF1YWxzIiwibzEiLCJvMiIsImxhbmciLCJkYXRhdHlwZSIsImlzRnVuY3Rpb24iLCJzdGF0ZW1lbnRFcXVhbHMiLCJzMSIsInMyIiwib2JqcyIsInJlbW92ZSIsIl9vIiwic3BsaWNlIiwiY29udGFpbnMiLCJmaW5kRGlyZWN0T3JSREZWYWx1ZSIsInN1YmplY3QiLCJwcmVkaWNhdGUiLCJnZXRUeXBlIiwiZ2V0VmFsdWUiLCJmaW5kRmlyc3RWYWx1ZSIsImFzc2VydGVkIiwiX2dyYXBoIiwiX3MiLCJfcCIsIl9zdGF0ZW1lbnQiLCJfYXNzZXJ0ZWQiLCJfc2lsZW50VmFsdWUiLCJfc0lzQmxhbmsiLCJuZyIsInNpbGVudCIsImlzQXNzZXJ0ZWQiLCJzZXRDaGFuZ2VkIiwiZXh0cmFjdCIsImluR3JhcGgiLCJvdXRHcmFwaCIsImlnbm9yZSIsImV4Y2x1ZGVBZnRlcklnbm9yZSIsIl9pZ25vcmUiLCJzdG10IiwiZ2V0UHJlZGljYXRlIiwiZmluZ2VycHJpbnQiLCJleGNsdWRlUHJvcGVydGllcyIsImZwZyIsImV4Y2x1ZGUiLCJTZXQiLCJwcm9wIiwiYmxhbmtTdG10cyIsImJsYW5rSWR4Iiwic2VyaWFsaXplT2JqIiwiZ2V0TGFuZ3VhZ2UiLCJnZXREYXRhdHlwZSIsImFkZFRvQmxhbmtSZWxzIiwiYm4iLCJzdHIiLCJpZHgiLCJyZWxzIiwiZ2V0U3ViamVjdCIsIm9CbGFuayIsInNCbGFuayIsImlzU3ViamVjdEJsYW5rIiwidmFsdWVzIiwiYmxhbmsiLCJmcHMiLCJ6ZXJvT3JPbmUiLCJwZXJTdGF0ZW1lbnQiLCJzdGF0ZW1lbnRzIiwicGVyU3ViamVjdCIsInN1YmoiLCJzdG10cyIsIm5zdGF0cyIsImNvbmNhdCIsIl9vYmplY3QiLCJjYWxsYmFjayIsImoiLCJnZXRPYmplY3QiLCJ2YWxpZGF0ZSIsIl9ibm9kZXMiLCJfYm5vZGVzSW5kZXhlZCIsIl9jaGFuZ2VkIiwicHJvcHMiLCJjaGFuZ2VkIiwib25DaGFuZ2UiLCJibm9kZUlkeCIsImdldENsZWFuT2JqZWN0IiwiX25ld0JOb2RlIiwiX3RyYWNrQk5vZGVzIiwiX2dyYXBoT2JqZWN0IiwiX2dldCIsImFzc2VydCIsIl9nZXRPckNyZWF0ZSIsInN0YXRlbWVudCIsIl9maW5kIiwiX2ZpbmRTIiwiX2ZpbmRQIiwiX2ZpbmRTUCIsIl9maW5kTyIsIl9maW5kU08iLCJfZmluZFBPIiwibWFwcGluZyIsIm11bHRpcGxlVmFsdWVTdHlsZSIsIm1hcHBlZCIsInYiLCJfYWRkTGlzdCIsImxhbmd1YWdlIiwibGFuZ29yRGF0YXR5cGUiLCJsaXN0bm9kZSIsImN1cnNvciIsIm5pbFBvc2l0aW9uIiwibWVtYmVyIiwibGlzdEZvdW5kIiwibmlsIiwibmV4dCIsImZpbmRBbmRSZW1vdmUiLCJlIiwiY29uc29sZSIsIndhcm4iLCJvYmoiLCJyZW1vdmVkIiwicmVtb3ZlTGlzdCIsIm5ncmFwaCIsIm5PYmpBcnIiLCJubyIsInNvdXJjZVVSSSIsInRhcmdldFVSSSIsInJlcGxhY2VVUkkiLCJzb3VyY2VCbGFuayIsInJlcG9ydCIsIl92YWxpZGF0ZSIsInZhbGlkIiwiYk5vZGVJZCIsInV0aWxzIiwic3Viak9iaiIsIm9iamVjdHMiLCJzcEFycnMiLCJlcnJvcnMiLCJuciIsIm9iakFyciIsIm9pbmRleCIsIm1lc3NhZ2UiLCJibm9kZSIsIl9pbmRleEJOb2RlcyIsInJhbmRvbSIsInBvdyIsImdpdmVuIiwiYmFzZUhhc2giLCJiYXNlQ29sb24iLCJsb2ciLCJiYXNlU2luZ2xlIiwiYmFzZVNjaGVtZSIsImxhc3RTbGFzaCIsIlJERlBhcnNlciIsInBhcnNlciIsInBhcmVudCIsImVsZW1lbnQiLCJ0cmlwbGUiLCJpZCIsIndoeSIsInJvb3QiLCJmcmFtZSIsImVsZW1lbnRVUkkiLCJlbCIsImRpZyIsInJkZmlkIiwiYm5pZCIsImRvbSIsImF0dHJzIiwicGFyc2V0eXBlIiwibnYiLCJ4IiwiYWJvdXQiLCJyZGZ0eXBlIiwicGZyYW1lIiwiY2giLCJjYW5kaWRhdGUiLCJtYWtlVGVybSIsIlJERkxpdGVyYWwiLCJhbGVydCIsIlJERkVtcHR5IiwidGVybVR5cGUiLCJ0b05UIiwiUkRGU3ltYm9sIiwiUkRGTmV4dElkIiwiUkRGQmxhbmtOb2RlIiwiUkRGQ29sbGVjdGlvbiIsImVsZW1lbnRzIiwiY2xvc2VkIiwiYXBwZW5kIiwiUkRGU3RhdGVtZW50X3RvTlQiLCJSREZTdGF0ZW1lbnQiLCJSREZGb3JtdWxhIiwiY29uc3RyYWludHMiLCJpbml0QmluZGluZ3MiLCJvcHRpb25hbCIsIlJERkZvcm11bGFfdG9OVCIsInByZWQiLCJzeW0iLCJuYW1lc3BhY2VzIiwibGl0ZXJhbCIsImR0IiwiZm9ybXVsYSIsImNvbGxlY3Rpb24iLCJSREZWYXJpYWJsZSIsInJlbCIsImNsYXNzT3JkZXIiLCJoYXNoU3RyaW5nIiwiZnJvbU5UIiwibGVuIiwicGFyc2VJbnQiLCJ4bWwyc3RyaW5nIiwic3RyaW5nMnhtbCIsIkRPTVBhcnNlciIsIkFjdGl2ZVhPYmplY3QiLCJ4bWwiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJ0ZXh0IiwicGFyc2VGcm9tU3RyaW5nIiwiZG9jIiwiYXN5bmMiLCJsb2FkWE1MIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0aHJvd0lmUmVsYXRpdmUiLCJjaGFyYWN0ZXIiLCJyZWxhdGl2ZSIsImNvbnZlcnRTcGFjZXNJblVSSXMiLCJzcGFjZSIsInJkZnhtbDJncmFwaCIsIl94bWwiLCJ1dGlsIiwiZyIsInJlZ2lzdGVyQk5vZGUiLCJSZGZwYXJzZXIiLCJwYXJzZSIsInhtbEVuY29kZSIsImVuY29kZVVSSSIsImRlY29kZVVSSSIsInJkZmpzb24ycmRmeG1sIiwibnNVc2VkIiwibnNBZGRlZCIsInN0cnMiLCJuc3AiLCJpbml0aWFsU3RycyIsInVuc2hpZnQiLCJkZXRlY3QiLCJmb3JtYXQiLCJlcnJvckNvZGUiLCJqc29ucmRmIiwicmRmanNvbiIsInN0YXRlbWVudFRyZWUiLCJ2aXNpdGVkIiwiX3Zpc2l0ZWQiLCJyb3ciLCJzdGF0ZW1lbnRMaXN0IiwidHJlZSIsImxldmVsIiwiaW5kZW50IiwicHJldHR5VHJlZSIsImRlbGVnYXRlcyIsImRlbGVnYXRlIiwiYml0bWFwIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiYXJnIiwiRlJFRVpJTkciLCJNRVRBREFUQSIsImlzRXh0ZW5zaWJsZSIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsIm1ldGEiLCJSRVFVSVJFRCIsImZhc3RLZXkiLCJnZXRXZWFrRGF0YSIsIm9uRnJlZXplIiwicHJvcGVydHlLZXkiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsInByb3RvIiwiX19wcm90b19fIiwiZ2V0QnVpbHRJbiIsIndoaXRlc3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwic3RhcnQiLCJlbmQiLCJ0cmltIiwiRVRfTElOSyIsIkVUX1JFRiIsIkVUX0xJTktSRUYiLCJHVF9TWVNURU1DT05URVhUIiwiR1RfUkVTVUxUTElTVCIsIlJUX1JFU09MVkFCTEVJTkZPUk1BVElPTlJFU09VUkNFIiwiUlRfTkFNRURSRVNPVVJDRSIsIlJUX1VOS05PV04iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIklTX1BVUkUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwicG9zdGZpeCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsIm9yaWdpbmFsQXJyYXkiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsIlJlc3VsdCIsInN0b3BwZWQiLCJpdGVyYWJsZSIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIml0ZXJhdG9yIiwiaXRlckZuIiwic3RlcCIsImRvbmUiLCJzdG9wIiwiSXRlcmF0b3JzIiwiSVRFUkFUT1IiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0cnlHZXQiLCJjYWxsZWUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwiZG90QWxsIiwidW5pY29kZSIsInN0aWNreSIsImludiIsImlvYmoiLCJ4c2RucyIsInRlcm1zIiwiaG9tZUNvbnRleHQiLCJleHRlcm5hbE1ldGFkYXRhIiwicmVhc29uaW5nRmFjdHMiLCJzdGF0dXMiLCJJblByb2dyZXNzIiwiUGVuZGluZyIsIlN1Y2NlZWRlZCIsIkZhaWxlZCIsInBpcGVsaW5lIiwicGlwZWxpbmVEYXRhIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtUHJpb3JpdHkiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNmb3JtQXJndW1lbnQiLCJ0cmFuc2Zvcm1Bcmd1bWVudEtleSIsInRyYW5zZm9ybUFyZ3VtZW50VmFsdWUiLCJ0cmFuc2Zvcm1EZXN0aW5hdGlvbiIsInRyYW5zZm9ybURldGVjdERlc3RpbmF0aW9uIiwiYWNsIiwicmVhZCIsImZsb2F0IiwiYm9vbGVhbiIsImV0IiwiZGVmYXVsdCIsImVudHJ5VHlwZSIsImludkVudHJ5VHlwZSIsImd0IiwiZ3JhcGhUeXBlIiwiaW52R3JhcGhUeXBlIiwicnQiLCJyZXNvdXJjZVR5cGUiLCJpbnZSZXNvdXJjZVR5cGUiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJfX2RlZmluZVNldHRlcl9fIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiSVNfUklHSFQiLCJhcmd1bWVudHNMZW5ndGgiLCJtZW1vIiwibGVmdCIsInJpZ2h0IiwiYWRkVG9VbnNjb3BhYmxlcyIsImRlZmluZUl0ZXJhdG9yIiwiaXRlcmF0ZWQiLCJraW5kIiwiQXJndW1lbnRzIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImNvZGVBdCIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsImdyb3VwcyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJtZXRob2RzIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyaW5nTWV0aG9kIiwicmVnZXhNZXRob2QiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwiUiIsIm5hdGl2ZUV4cG0xIiwiZXhwbTEiLCJleHAiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiaXRlcmF0ZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJBRERFUiIsImZpeE1ldGhvZCIsImdldENvbnN0cnVjdG9yIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsInNldFN0cm9uZyIsInJlZGVmaW5lQWxsIiwiYXJyYXlGaWxsIiwiTmF0aXZlQXJyYXlCdWZmZXIiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJhYnMiLCJMTjIiLCJwYWNrSUVFRTc1NCIsIm51bWJlciIsIm1hbnRpc3NhTGVuZ3RoIiwiYnl0ZXMiLCJleHBvbmVudCIsIm1hbnRpc3NhIiwiZXhwb25lbnRMZW5ndGgiLCJlTWF4IiwiZUJpYXMiLCJzaWduIiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSW50MzIiLCJwYWNrSW50OCIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInBhY2tGbG9hdDMyIiwicGFja0Zsb2F0NjQiLCJjb3VudCIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJwYWNrIiwicmV2ZXJzZSIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvdHlwZSIsInRlc3RWaWV3IiwibmF0aXZlU2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsImhhbmRsZUFzeW5jIiwiZ2V0UkVTVCIsInB1dCIsImhlIiwiRW50cnlTdG9yZSIsImNyZWRlbnRpYWxzIiwiaXNCcm93c2VyIiwiX2Jhc2VVUkkiLCJsb2NhdGlvbiIsIm9yaWdpbiIsIl9jYWNoZSIsIkNhY2hlIiwiX2F1dGgiLCJBdXRoIiwibG9naW4iLCJfY29udGV4dHMiLCJfcmVzdCIsIlJlc3QiLCJsaXN0ZW5lciIsImFzeW5jTGlzdGVuZXJzIiwicHJvbWlzZSIsImdldFVzZXJJbmZvIiwiZ2V0VXNlckVudHJ5IiwibG9nb3V0IiwidXNlciIsInBhc3N3b3JkIiwibWF4QWdlIiwib3B0aW9uYWxMb2FkUGFyYW1zIiwiZm9yY2VMb2FkIiwiYXN5bmNDb250ZXh0IiwiY2hlY2tSZXNvdXJjZUxvYWRlZCIsImxvYWRSZXNvdXJjZSIsInRoZW4iLCJzZXRMaW1pdCIsInJlZnJlc2giLCJlbnRyeUxvYWRVUkkiLCJlcnIiLCJwYWdlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvcCIsImdldEVudHJpZXMiLCJuZXdTb2xyUXVlcnkiLCJwb3N0VVJJIiwiZ2V0UGFyZW50TGlzdCIsInBvc3RQYXJhbXMiLCJldXJpIiwicGxpc3QiLCJuZWVkUmVmcmVzaCIsImNvbnRleHROYW1lIiwiUHJvdG90eXBlRW50cnkiLCJzZXRHcmFwaFR5cGUiLCJ1c2VybmFtZSIsIl9wcmluY2lwYWxzIiwiaG9tZWNvbnRleHQiLCJncm91cE5hbWUiLCJ0b0xpc3QiLCJwb3N0IiwiTm9kZSIsInB1dEZpbGUiLCJyYXdEYXRhIiwicmVzcG9uc2UiLCJ0ZXh0QXJlYVZhbHVlIiwiZGVjb2RlIiwiU29sclF1ZXJ5IiwiZ2V0UmVsYXRlZFRvRW50cnlVUklzIiwiZnJvbUVudHJ5IiwicmVsYXRlZEVudHJ5VVJJcyIsImdldFJlbGF0ZWRUb0VudHJpZXMiLCJhbGwiLCJyZWZTdG10cyIsImdldFJlZmVycmVyc0dyYXBoIiwiZW50cnlQcm9taXNlcyIsImRlbCIsInByb21pc2VzIiwiY29tbWl0TWV0YWRhdGEiLCJhZGRSZWxhdGlvbiIsInRvRW50cnkiLCJyZW1vdmVSZWxhdGlvbiIsImlzTm9kZSIsImlzSUUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfc29ydGVkQ2hpbGRyZW4iLCJfbGltaXQiLCJzb3J0UGFyYW1zIiwiX2NsZWFyU29ydGVkRW50cmllcyIsIl9zb3J0UGFyYW1zIiwiX2dldEVudHJpZXMiLCJfZm9yY2VMb2FkRW50cmllcyIsImZ1bmMiLCJoIiwiZ2V0TGltaXQiLCJlbnRyaWVzTGVuZ3RoIiwicG9wIiwiY29udCIsImdldEFsbEVudHJ5SWRzIiwic2V0QWxsRW50cnlJZHMiLCJfdW5zb3J0ZWRDaGlsZHJlbiIsIl9zaXplIiwiY2FsbFR5cGUiLCJvZW50cnkiLCJjYXJlQWJvdXRGcmVzaCIsIl9zb3J0IiwiYWxsVW5zb3J0ZWQiLCJsb2NhdG9yIiwiRE9NSGFuZGxlciIsImNkYXRhIiwibm9kZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJfbG9jYXRvciIsInN5c3RlbUlkIiwiX3RvU3RyaW5nIiwiY2hhcnMiLCJqYXZhIiwiYXBwZW5kRWxlbWVudCIsImhhbmRlciIsImN1cnJlbnRFbGVtZW50IiwibWltZVR5cGUiLCJzYXgiLCJYTUxSZWFkZXIiLCJkb21CdWlsZGVyIiwiZXJyb3JIYW5kbGVyIiwiZGVmYXVsdE5TTWFwIiwieG1sbnMiLCJlbnRpdHlNYXAiLCJzZXREb2N1bWVudExvY2F0b3IiLCJlcnJvckltcGwiLCJpc0NhbGxiYWNrIiwiYnVpbGQiLCJtc2ciLCJidWlsZEVycm9ySGFuZGxlciIsIm5ic3AiLCJjb3B5Iiwic3RhcnREb2N1bWVudCIsIkRPTUltcGxlbWVudGF0aW9uIiwiY3JlYXRlRG9jdW1lbnQiLCJkb2N1bWVudFVSSSIsInN0YXJ0RWxlbWVudCIsIm5hbWVzcGFjZVVSSSIsImxvY2FsTmFtZSIsInFOYW1lIiwiY3JlYXRlRWxlbWVudE5TIiwiYXR0ciIsImdldFFOYW1lIiwiY3JlYXRlQXR0cmlidXRlTlMiLCJnZXRMb2NhdG9yIiwibm9kZVZhbHVlIiwic2V0QXR0cmlidXRlTm9kZSIsImVuZEVsZW1lbnQiLCJjdXJyZW50IiwidGFnTmFtZSIsInBhcmVudE5vZGUiLCJzdGFydFByZWZpeE1hcHBpbmciLCJwcmVmaXgiLCJlbmRQcmVmaXhNYXBwaW5nIiwicHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiaW5zIiwiY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiaWdub3JhYmxlV2hpdGVzcGFjZSIsImNoYXJhY3RlcnMiLCJjaGFyTm9kZSIsImNyZWF0ZUNEQVRBU2VjdGlvbiIsImNyZWF0ZVRleHROb2RlIiwic2tpcHBlZEVudGl0eSIsImVuZERvY3VtZW50IiwiY29tbWVudCIsImNvbW0iLCJjcmVhdGVDb21tZW50Iiwic3RhcnRDREFUQSIsImVuZENEQVRBIiwic3RhcnREVEQiLCJwdWJsaWNJZCIsImltcGwiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50VHlwZSIsIndhcm5pbmciLCJmYXRhbEVycm9yIiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvYmplY3RLZXlzIiwiZW5kUG9zIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJyZXR1cm5UaGlzIiwiSXRlcmFibGUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJpc1JlZ0V4cCIsIk1BVENIIiwicmVwZWF0IiwiSVNfRU5EIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJ3aGl0ZXNwYWNlcyIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0Iiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJwcm9jZXNzIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImV2ZW50IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImdldExpc3RFbnRyaWVzIiwiZ2V0RW50cnlVUklieUlkIiwic2V0UmVzb3VyY2VUeXBlIiwibGluayIsInNldFJlc291cmNlVVJJIiwic2V0RW50cnlUeXBlIiwibWV0YWRhdGFMaW5rIiwic2V0RXh0ZXJuYWxNZXRhZGF0YVVSSSIsIm9sZE5hbWUiLCJjb250ZXh0RW50cnkiLCJncm91cFJlc291cmNlQXJyIiwiZ2V0UmVmZXJyZXJzIiwiYWxpYXMiLCJlbnRyeU9yRW50cnlVUkkiLCJ0cjEiLCJ0cjIiLCJnZXRQcmlvcml0eSIsInRyYW5zZm9ybUlkIiwiZ2V0VHJhbnNmb3JtcyIsInRySWQiLCJnZXRUcmFuc2Zvcm1UeXBlIiwidHJhbnNmb3JtcyIsInByaW9yaXR5Iiwic2V0VHJhbnNmb3JtVHlwZSIsInNldFByaW9yaXR5Iiwic2V0VHJhbnNmb3JtQXJndW1lbnRzIiwicGFyc2VGbG9hdCIsImFkZEwiLCJuZXdBcmciLCJ0aWQiLCJnZXRUcmFuc2Zvcm1Gb3JUeXBlIiwiZ2V0VHJhbnNmb3JtQXJndW1lbnRzIiwidHJhbnNmb3JtSWRPclR5cGUiLCJzb3VyY2VFbnRyeSIsImV4ZWN1dGVVUkkiLCJib2R5IiwidHJhbnNmb3JtVHlwZXMiLCJUQUJVTEFSIiwiUk9XU1RPUkUiLCJFTVBUWSIsIkZFVENIIiwiVkFMSURBVEUiLCJNRVJHRSIsIl9pZCIsImNydSIsIm9sZFNldFJlc291cmNlVVJJIiwic3BlY2lmaWNJZCIsInNldEFDTCIsIl9lbnRyeUluZm8iLCJfZ3QiLCJfY29udGV4dCIsImNyZWF0ZUVudHJ5IiwiX2VudHJ5IiwiaWdub3JlSWZVbm1vZGlmaWVkU2luY2VDaGVjayIsImNhbldyaXRlTWV0YWRhdGEiLCJtb2QiLCJnZXRNb2RpZmljYXRpb25EYXRlIiwiYWRkRCIsInJlc1VSSSIsImlzRXh0ZXJuYWwiLCJpc0xpbmtUb0VudHJ5IiwiYWRtaW5pc3RlciIsInJlYWRyZXNvdXJjZSIsIndyaXRlcmVzb3VyY2UiLCJyZWFkbWV0YWRhdGEiLCJ3cml0ZW1ldGFkYXRhIiwiZ3Vlc3RQcmluY2lwYWwiLCJnZXRBQ0wiLCJjb250ZXh0T3ZlcnJpZGUiLCJjZSIsInVzZXJFbnRyeSIsInVzZXJQcmluY2lwYWwiLCJhZG1pbiIsInJlY3Vyc2l2ZSIsInVuQ2FjaGUiLCJzaWxlbnRseSIsIkNvb2tpZUFjY2Vzc0luZm8iLCJkb21haW4iLCJzZWN1cmUiLCJzY3JpcHQiLCJDb29raWUiLCJjb29raWVzdHIiLCJyZXF1ZXN0X2RvbWFpbiIsInJlcXVlc3RfcGF0aCIsImV4cGlyYXRpb25fZGF0ZSIsImV4cGxpY2l0X3BhdGgiLCJleHBsaWNpdF9kb21haW4iLCJub3NjcmlwdCIsIkFsbCIsImZyZWV6ZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsInRvVmFsdWVTdHJpbmciLCJjb29raWVfc3RyX3NwbGl0dGVyIiwiQ29va2llSmFyIiwiY29va2llcyIsImNvb2tpZXNfbGlzdCIsInNldENvb2tpZSIsImNvb2tpZSIsImNvbGxpZGVzV2l0aCIsImdldENvb2tpZSIsImNvb2tpZV9uYW1lIiwiYWNjZXNzX2luZm8iLCJtYXRjaGVzIiwiZ2V0Q29va2llcyIsInBhcnRzIiwicGFpciIsIk51bWJlciIsImFjY2Vzc19kb21haW4iLCJjb29raWVfZG9tYWluIiwid2lsZGNhcmQiLCJzZXRDb29raWVzIiwic3VjY2Vzc2Z1bCIsIml0ZW0iLCJfcXVlcnkiLCJfY2FsbFR5cGUiLCJmYWNldHMiLCJmYWNldEZpZWxkcyIsImYycCIsImZhY2V0MnByZWRpY2F0ZSIsImZmIiwic3RhcnRzV2l0aCIsImdldFF1ZXJ5Iiwic2V0RmFjZXRzIiwib2xkTGFuZyIsImlzRGlzYWJsZWQiLCJvbGREaXNhYmxlZCIsIm9sZEhvbWVDb250ZXh0IiwiY3VzdG9tUHJvcGVydGllcyIsIm9sZEN1c3RvbVByb3BlcnRpZXMiLCJvbGRSZXNvdXJjZVVSSSIsInNldFN1YmplY3QiLCJnZXRSZXNvdXJjZVR5cGVIZWxwZXIiLCJhc0lkcyIsInJ1IiwibXUiLCJycmVhZCIsInJ3cml0ZSIsIm1yZWFkIiwibXdyaXRlIiwicHJpbmNpcGFscyIsInByaW5jaXBhbCIsIl9hY2wiLCJyZXZzIiwibWRVUkkiLCJyZXYiLCJ0aW1lIiwidG9EYXRlIiwiYnkiLCJyMSIsInIyIiwicmV2aXNpb25VUkkiLCJsYWJlbCIsImdldENyZWF0aW9uRGF0ZSIsImV4dGVudCIsInZvY2FiIiwiY3J5cHQiLCJ1dGY4IiwiaXNCdWZmZXIiLCJiaW4iLCJtZDUiLCJlbmNvZGluZyIsInN0cmluZ1RvQnl0ZXMiLCJieXRlc1RvV29yZHMiLCJGRiIsIl9mZiIsIkdHIiwiX2dnIiwiSEgiLCJfaGgiLCJJSSIsIl9paSIsImFhIiwiYmIiLCJjYyIsImRkIiwiZW5kaWFuIiwiX2Jsb2Nrc2l6ZSIsIl9kaWdlc3RzaXplIiwiZGlnZXN0Ynl0ZXMiLCJ3b3Jkc1RvQnl0ZXMiLCJhc0J5dGVzIiwiYXNTdHJpbmciLCJieXRlc1RvU3RyaW5nIiwiYnl0ZXNUb0hleCIsIm93bktleXMiLCJuYW1lcyIsIm5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwibmF0aXZlQXNzaWduIiwiYXNzaWduIiwiQSIsIkIiLCJzeW1ib2wiLCJjaHIiLCJUIiwiVE9fRU5UUklFUyIsIkVOVFJJRVMiLCJyZXR1cm5NZXRob2QiLCJpcyIsInkiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJhcmdzTGVuZ3RoIiwicGFydEFyZ3MiLCJjcmVhdGVQcm9wZXJ0eSIsImFycmF5TGlrZSIsIm1hcGZuIiwiaXRlcmF0b3JNZXRob2QiLCJjb3B5V2l0aGluIiwidG8iLCJpbmMiLCJmbGF0dGVuSW50b0FycmF5Iiwib3JpZ2luYWwiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwibWFwRm4iLCIkZm9yRWFjaCIsInNsb3BweUFycmF5TWV0aG9kIiwibmF0aXZlTGFzdEluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiU0xPUFBZX01FVEhPRCIsInNlYXJjaEVsZW1lbnQiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwicG9pbnQiLCJuYXRpdmVQYXJzZUludCIsImhleCIsInJhZGl4IiwibmF0aXZlUGFyc2VGbG9hdCIsInRyaW1tZWRTdHJpbmciLCJpc0Zpbml0ZSIsImxvZzFwIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsInRvZ2dsZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiSVNfTk9ERSIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwiZXhpdCIsImVudGVyIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJpbnRlcm5hbFN0YXRlR2V0dGVyRm9yIiwiZGVmaW5lIiwicHJldmlvdXMiLCJwcmV2IiwiSVRFUkFUT1JfTkFNRSIsImdldEludGVybmFsQ29sbGVjdGlvblN0YXRlIiwiZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlIiwiQXJyYXlJdGVyYXRpb25Nb2R1bGUiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsImZyb3plbiIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwiaHJlZiIsIlVSTFNlYXJjaFBhcmFtcyIsIlVTRV9OQVRJVkVfVVJMIiwiaGFzT3duIiwiZ2V0SXRlcmF0b3IiLCJnZXRJbnRlcm5hbFBhcmFtc1N0YXRlIiwiVVJMX1NFQVJDSF9QQVJBTVMiLCJwbHVzIiwic2VxdWVuY2VzIiwicGVyY2VudFNlcXVlbmNlIiwicGVyY2VudERlY29kZSIsInNlcXVlbmNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZGVzZXJpYWxpemUiLCJyZXBsYWNlciIsInNlcmlhbGl6ZSIsInBhcnNlU2VhcmNoUGFyYW1zIiwiYXR0cmlidXRlcyIsInNoaWZ0IiwidXBkYXRlU2VhcmNoUGFyYW1zIiwidmFsaWRhdGVBcmd1bWVudHNMZW5ndGgiLCJwYXNzZWQiLCJyZXF1aXJlZCIsIlVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJlbnRyeUl0ZXJhdG9yIiwiaW5pdCIsInVwZGF0ZVVSTCIsIlVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSIsImdldEFsbCIsImZvdW5kIiwiZW50cmllc0luZGV4Iiwic2xpY2VJbmRleCIsImdldFN0YXRlIiwiZGVzdCIsIl9leHRlbmRzIiwiQ2xhc3MiLCJTdXBlciIsInB0IiwicHB0IiwiaHRtbG5zIiwiTm9kZVR5cGUiLCJFTEVNRU5UX05PREUiLCJBVFRSSUJVVEVfTk9ERSIsIlRFWFRfTk9ERSIsIkNEQVRBX1NFQ1RJT05fTk9ERSIsIkVOVElUWV9SRUZFUkVOQ0VfTk9ERSIsIkVOVElUWV9OT0RFIiwiUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX1RZUEVfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJOT1RBVElPTl9OT0RFIiwiRXhjZXB0aW9uQ29kZSIsIkV4Y2VwdGlvbk1lc3NhZ2UiLCJISUVSQVJDSFlfUkVRVUVTVF9FUlIiLCJJTkRFWF9TSVpFX0VSUiIsIkRPTVNUUklOR19TSVpFX0VSUiIsIk5PVF9GT1VORF9FUlIiLCJXUk9OR19ET0NVTUVOVF9FUlIiLCJJTlZBTElEX0NIQVJBQ1RFUl9FUlIiLCJOT19EQVRBX0FMTE9XRURfRVJSIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiSU5VU0VfQVRUUklCVVRFX0VSUiIsIk5PVF9TVVBQT1JURURfRVJSIiwiSU5WQUxJRF9TVEFURV9FUlIiLCJTWU5UQVhfRVJSIiwiSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSIiwiTkFNRVNQQUNFX0VSUiIsIklOVkFMSURfQUNDRVNTX0VSUiIsIkRPTUV4Y2VwdGlvbiIsImNvZGUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkxpdmVOb2RlTGlzdCIsIl9ub2RlIiwiX3JlZnJlc2giLCJfdXBkYXRlTGl2ZUxpc3QiLCJfaW5jIiwib3duZXJEb2N1bWVudCIsImxzIiwiX19zZXRfXyIsIl9maW5kTm9kZUluZGV4IiwiX2FkZE5hbWVkTm9kZSIsIm5ld0F0dHIiLCJvbGRBdHRyIiwib3duZXJFbGVtZW50IiwiX29uUmVtb3ZlQXR0cmlidXRlIiwiX25zTWFwIiwiX29uQWRkQXR0cmlidXRlIiwiX3JlbW92ZU5hbWVkTm9kZSIsImZlYXR1cmVzIiwiX2ZlYXR1cmVzIiwiX3htbEVuY29kZXIiLCJfdmlzaXROb2RlIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwiRG9jdW1lbnQiLCJfb25VcGRhdGVDaGlsZCIsIm5ld0NoaWxkIiwiY3MiLCJjaGlsZE5vZGVzIiwiX3JlbW92ZUNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiX2luc2VydEJlZm9yZSIsIm5leHRDaGlsZCIsImNwIiwibm9kZVR5cGUiLCJuZXdGaXJzdCIsIm5ld0xhc3QiLCJwcmUiLCJFbGVtZW50IiwiQXR0ciIsIkNoYXJhY3RlckRhdGEiLCJUZXh0IiwiQ29tbWVudCIsIkNEQVRBU2VjdGlvbiIsIkRvY3VtZW50VHlwZSIsIk5vdGF0aW9uIiwiRW50aXR5IiwiRW50aXR5UmVmZXJlbmNlIiwiRG9jdW1lbnRGcmFnbWVudCIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsIm5vZGVTZXJpYWxpemVUb1N0cmluZyIsImlzSHRtbCIsIm5vZGVGaWx0ZXIiLCJidWYiLCJyZWZOb2RlIiwibG9va3VwUHJlZml4IiwidmlzaWJsZU5hbWVzcGFjZXMiLCJuZWVkTmFtZXNwYWNlRGVmaW5lIiwiaXNIVE1MIiwibm9kZU5hbWUiLCJwdWJpZCIsInN5c2lkIiwic3ViIiwiaW50ZXJuYWxTdWJzZXQiLCJnZXROYW1lZEl0ZW0iLCJzZXROYW1lZEl0ZW0iLCJfb3duZXJFbGVtZW50Iiwic2V0TmFtZWRJdGVtTlMiLCJnZXROYW1lZEl0ZW1OUyIsInJlbW92ZU5hbWVkSXRlbSIsInJlbW92ZU5hbWVkSXRlbU5TIiwiaGFzRmVhdHVyZSIsInZlcnNpb25zIiwicXVhbGlmaWVkTmFtZSIsImRvY3R5cGUiLCJpbnNlcnRCZWZvcmUiLCJyZWZDaGlsZCIsInJlcGxhY2VDaGlsZCIsIm9sZENoaWxkIiwiaGFzQ2hpbGROb2RlcyIsImNsb25lTm9kZSIsImRlZXAiLCJub2RlMiIsImF0dHJzMiIsImFwcGVuZERhdGEiLCJpc1N1cHBvcnRlZCIsImhhc0F0dHJpYnV0ZXMiLCJsb29rdXBOYW1lc3BhY2VVUkkiLCJpc0RlZmF1bHROYW1lc3BhY2UiLCJpbXBvcnROb2RlIiwiaW1wb3J0ZWROb2RlIiwiZ2V0RWxlbWVudEJ5SWQiLCJydHYiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlQXR0cmlidXRlIiwic3BlY2lmaWVkIiwiY3JlYXRlRW50aXR5UmVmZXJlbmNlIiwicGwiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGVOb2RlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlTm9kZSIsIl9hcHBlbmRTaW5nbGVDaGlsZCIsInNldEF0dHJpYnV0ZU5vZGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwib2xkIiwiZ2V0QXR0cmlidXRlTm9kZU5TIiwiaGFzQXR0cmlidXRlTlMiLCJnZXRBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyIsInN1YnN0cmluZ0RhdGEiLCJpbnNlcnREYXRhIiwicmVwbGFjZURhdGEiLCJkZWxldGVEYXRhIiwic3BsaXRUZXh0IiwibmV3VGV4dCIsIm5ld05vZGUiLCIkJGxlbmd0aCIsImdldFRleHRDb250ZW50IiwiY2hhcmVuYyIsInVuZXNjYXBlIiwiZXNjYXBlIiwiZnJvbUNoYXJDb2RlIiwiZW50cnlzdG9yZSIsIl9saXN0ZW5lckNvdW50ZXIiLCJfbGlzdGVuZXJzIiwiTWFwIiwidG9waWMiLCJfX2FsaWQiLCJkZWxldGUiLCJmb3JjZUxvb2t1cCIsInVzZXJJbmZvIiwiYXV0aCIsImFsbE5lZWRSZWZyZXNoIiwibWVzc2FnZUxpc3RlbmVycyIsIl9saXN0ZW5lcnNJZHgiLCJfY2FjaGVJZHgiLCJfY2FjaGVJZHhSZXNvdXJjZSIsIl9jYWNoZUN0cmwiLCJwcmV2aW91c2x5Q2FjaGVkIiwiZW50cnlSVVJJIiwiZW50cmllc1NldCIsImRhdGUiLCJnZXRUaW1lIiwiY3RybCIsInN0YWxlIiwiZW50cnlBcnIiLCJfX2NsaWQiLCJhZmZlY3RlZEVudHJ5IiwianNvbnAiLCJzYW1lT3JpZ2luIiwiYTEiLCJhMiIsImhvc3RuYW1lIiwiZ2V0UHJldmVudENhY2hlTnVtYmVyIiwidGltZW91dCIsImhlYWRlcnMiLCJBY2NlcHQiLCJzdHViRm9ybSIsIkZvcm1EYXRhIiwiZmlsZXMiLCJmaWxlIiwiRmlsZSIsInN1cGVyYWdlbnQiLCJwcmV2ZW50Q2FjaGUiLCJhY2NlcHQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kIiwibG9nb3V0UmVxdWVzdFJlc3VsdCIsImtleVZhbCIsImF1dGhfdXNlcm5hbWUiLCJhdXRoX3Bhc3N3b3JkIiwiYXV0aF9tYXhhZ2UiLCJxdWVyeVN0cmluZ0RhdGEiLCJyZWR1Y2UiLCJhY2N1bSIsImF1dGhDb29raWVSZXNwb25zZSIsIm5vbkpTT05QIiwibG9jSGVhZGVycyIsImhhbmRsZUFzIiwidXNlIiwiY2FsbGJhY2tOYW1lIiwiR0VUUmVxdWVzdCIsInhtbGRvbSIsInN0YXR1c0NvZGUiLCJtb2REYXRlIiwidG9VVENTdHJpbmciLCJQT1NUUmVxdWVzdCIsInB1dFJlcXVlc3QiLCJkZWxldGVSZXF1ZXN0Iiwic2FmZUFkZCIsImxzdyIsIm1kNWNtbiIsInEiLCJudW0iLCJjbnQiLCJtZDVmZiIsIm1kNWdnIiwibWQ1aGgiLCJtZDVpaSIsImJpbmxNRDUiLCJvbGRhIiwib2xkYiIsIm9sZGMiLCJvbGRkIiwiYmlubDJyc3RyIiwib3V0cHV0IiwibGVuZ3RoMzIiLCJyc3RyMmJpbmwiLCJsZW5ndGg4IiwicnN0cjJoZXgiLCJzdHIycnN0clVURjgiLCJyYXdNRDUiLCJyc3RyTUQ1IiwicmF3SE1BQ01ENSIsImsiLCJia2V5IiwiaXBhZCIsIm9wYWQiLCJyc3RySE1BQ01ENSIsInJhdyIsImRlYnVnIiwiZm9ybWlkYWJsZSIsIlJlc3BvbnNlIiwiU3RyZWFtIiwidW56aXAiLCJleHRlbmQiLCJtaW1lIiwiaHR0cHMiLCJodHRwIiwiZnMiLCJxcyIsInpsaWIiLCJwa2ciLCJSZXF1ZXN0QmFzZSIsInJlcXVlc3QiLCJSZXF1ZXN0Iiwibm9vcCIsIl9pbml0SGVhZGVycyIsInJlcSIsInVhIiwiX2hlYWRlciIsImhlYWRlciIsIl9hZ2VudCIsIl9mb3JtRGF0YSIsIl9yZWRpcmVjdHMiLCJyZWRpcmVjdHMiLCJxc1JhdyIsIl9yZWRpcmVjdExpc3QiLCJfc3RyZWFtUmVxdWVzdCIsIm9uY2UiLCJjbGVhclRpbWVvdXQiLCJpc0pTT04iLCJpc1JlZGlyZWN0IiwiYWdlbnQiLCJwcm90b2NvbHMiLCJpbmhlcml0cyIsImF0dGFjaCIsImZpZWxkIiwiZmlsZW5hbWUiLCJjcmVhdGVSZWFkU3RyZWFtIiwiX2dldEZvcm1EYXRhIiwib24iLCJlbWl0IiwiYWJvcnQiLCJsb29rdXAiLCJwaXBlIiwic3RyZWFtIiwicGlwZWQiLCJfcGlwZUNvbnRpbnVlIiwiX21heFJlZGlyZWN0cyIsIl9yZWRpcmVjdCIsIl9lbWl0UmVzcG9uc2UiLCJfYWJvcnRlZCIsIl9zaG91bGRVbnppcCIsInVuemlwT2JqIiwiY3JlYXRlVW56aXAiLCJfYnVmZmVyIiwicmVzdW1lIiwiX2hlYWRlcnMiLCJjaGFuZ2VzT3JpZ2luIiwiY2xlYW5IZWFkZXIiLCJfZW5kQ2FsbGVkIiwiX2NhbGxiYWNrIiwicGFzcyIsImVuY29kZXIiLCJCdWZmZXIiLCJjYSIsImNlcnQiLCJfY2EiLCJfa2V5IiwicGZ4IiwiX3BmeCIsIl9wYXNzcGhyYXNlIiwicGFzc3BocmFzZSIsIl9jZXJ0IiwiaW5kaWNlcyIsInN0cmljdE51bGxIYW5kbGluZyIsIl9maW5hbGl6ZVF1ZXJ5U3RyaW5nIiwicmV0cmllcyIsIl9yZXRyaWVzIiwidW5peFBhcnRzIiwic29ja2V0UGF0aCIsInNldE5vRGVsYXkiLCJzZXRIZWFkZXIiLCJ0bXBKYXIiLCJfc2hvdWxkUmV0cnkiLCJfcmV0cnkiLCJfaXNSZXNwb25zZU9LIiwiU1RBVFVTX0NPREVTIiwibmV3X2VyciIsIl9tYXhSZXRyaWVzIiwibGlzdGVuZXJzIiwiX2lzSG9zdCIsIl9lbmQiLCJfc2V0VGltZW91dHMiLCJfaGVhZGVyU2VudCIsImNvbnRlbnRUeXBlIiwiZ2V0SGVhZGVyIiwiX3Jlc3BvbnNlVGltZW91dFRpbWVyIiwibXVsdGlwYXJ0IiwicmVkaXJlY3QiLCJfcGFyc2VyIiwicmVzcG9uc2VUeXBlIiwiX3Jlc3BvbnNlVHlwZSIsImltYWdlIiwiZm9ybSIsIkluY29taW5nRm9ybSIsImlzSW1hZ2VPclZpZGVvIiwic3VidHlwZSIsImlzVGV4dCIsInBhcnNlckhhbmRsZXNFbmQiLCJyZXNwb25zZUJ5dGVzTGVmdCIsIl9tYXhSZXNwb25zZVNpemUiLCJkZXN0cm95IiwidGltZWRvdXQiLCJnZXRQcm9ncmVzc01vbml0b3IiLCJ0b3RhbCIsImxvYWRlZCIsInByb2dyZXNzIiwiVHJhbnNmb3JtIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiY2IiLCJkaXJlY3Rpb24iLCJsZW5ndGhDb21wdXRhYmxlIiwiZm9ybURhdGEiLCJnZXRIZWFkZXJzIiwiZ2V0TGVuZ3RoIiwiY2h1bmtpbmciLCJSZWFkYWJsZSIsInRvdGFsTGVuZ3RoIiwicmVtYWluZGVyIiwiY3V0b2ZmIiwicmVtYWluZGVyQnVmZmVyIiwiYnVmZmVyVG9DaHVua3MiLCJ0b1VwcGVyQ2FzZSIsImVudiIsInNlbGVjdENvbG9yIiwiY3JlYXRlRGVidWciLCJjb2xvcnMiLCJwcmV2VGltZSIsImVuYWJsZWQiLCJfbGVuIiwiY3VyciIsIm1zIiwiZGlmZiIsImNvZXJjZSIsImZvcm1hdHRlciIsImZvcm1hdHRlcnMiLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwiY29sb3IiLCJpbnN0YW5jZXMiLCJkZWxpbWl0ZXIiLCJzdGFjayIsImRpc2FibGUiLCJlbmFibGUiLCJzYXZlIiwic2tpcHMiLCJodW1hbml6ZSIsImxvYWQiLCJqb2JzIiwiYWJvcnRlciIsInJ1bkpvYiIsImlzQXN5bmMiLCJzb3J0TWV0aG9kIiwiaXNOYW1lZExpc3QiLCJpbml0U3RhdGUiLCJrZXllZExpc3QiLCJ0ZXJtaW5hdG9yIiwiYXNjZW5kaW5nIiwiaXRlcmF0b3JIYW5kbGVyIiwicGFyc2VMaW5rcyIsIk1FVEhPRFMiLCJmb3JtYXRzIiwiaGV4VGFibGUiLCJhcnJheVRvT2JqZWN0IiwicGxhaW5PYmplY3RzIiwiYWNjIiwiY29tYmluZSIsImNvbXBhY3QiLCJyZWZzIiwiY29tcGFjdGVkIiwiY29tcGFjdFF1ZXVlIiwiZGVjb2RlciIsImNoYXJzZXQiLCJzdHJXaXRob3V0UGx1cyIsImVuY29kZSIsImRlZmF1bHRFbmNvZGVyIiwiJDAiLCJvdXQiLCJtZXJnZSIsImFsbG93UHJvdG90eXBlcyIsIm1lcmdlVGFyZ2V0IiwicGVyY2VudFR3ZW50aWVzIiwiUkZDMTczOCIsIlJGQzM5ODYiLCJlbmNvZGVTdHIiLCJzb2xyRnJpZW5kbHkiLCJ0ZXJtIiwiaXNGYWNldCIsImFuZCIsImlzTmdyYW0iLCJpc0V4YWN0TWF0Y2giLCJidWlsZFF1ZXJ5Iiwic3RydWN0IiwiaXNBbmQiLCJvciIsIl9lbnRyeXN0b3JlIiwicHJvcGVydGllcyIsInJlbGF0ZWRQcm9wZXJ0aWVzIiwibW9kaWZpZXJzIiwiX2FuZCIsIl9vciIsImZhY2V0cHJlZGljYXRlcyIsInJlbGF0ZWRGYWNldHByZWRpY2F0ZXMiLCJtb2RpZmllciIsIl9xIiwicmRmVHlwZSIsImlzUHVibGljIiwiZ2V0Q29udGV4dEJ5SWQiLCJyZXNvdXJjZVVSSUFyciIsInN0cnVjdHVyZSIsInRpdGxlIiwiX3RpdGxlX2xhbmciLCJub2RldHlwZSIsImluZGV4VHlwZSIsInJlbGF0ZWQiLCJfb2Zmc2V0IiwiZmFjZXQiLCJkaXNqdW5jdGl2ZVByb3BlcnRpZXMiLCJkaXNqdW5jdGl2ZSIsImFzeW5jQ2FsbFR5cGUiLCJvdiIsInRyYWlsIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJlZSIsImdldEZvcm1hdCIsImNvbnRleHRSZXNvdXJjZVVSSSIsImRvTm90UHVzaFRvUmVwb3NpdG9yeSIsIm5ld0NvbnRleHRVUkkiLCJjb21taXQiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCIkU3ltYm9sIiwibmF0aXZlSlNPTlN0cmluZ2lmeSIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJRT2JqZWN0IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwid3JhcCIsImRlc2NyaXB0aW9uIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiJHJlcGxhY2VyIiwiTmF0aXZlU3ltYm9sIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFByb3RvdHlwZSIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlIiwiZGVzYyIsIiRlbnRyaWVzIiwibmF0aXZlRnJlZXplIiwiZnJvbUVudHJpZXMiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwibmF0aXZlSXNFeHRlbnNpYmxlIiwibmF0aXZlSXNGcm96ZW4iLCJpc0Zyb3plbiIsIm5hdGl2ZUlzU2VhbGVkIiwiaXNTZWFsZWQiLCJuYXRpdmVLZXlzIiwibmF0aXZlUHJldmVudEV4dGVuc2lvbnMiLCJuYXRpdmVTZWFsIiwic2VhbCIsIiR2YWx1ZXMiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmciLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJvZiIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiRSIsIiRldmVyeSIsImZpbGwiLCIkZmlsdGVyIiwiJGZpbmQiLCJTS0lQU19IT0xFUyIsIiRmaW5kSW5kZXgiLCJmbGF0IiwiZGVwdGhBcmciLCJmbGF0TWFwIiwiJGluY2x1ZGVzIiwiJGluZGV4T2YiLCJuYXRpdmVJbmRleE9mIiwibmF0aXZlSm9pbiIsIkVTM19TVFJJTkdTIiwic2VwYXJhdG9yIiwiJG1hcCIsIiRyZWR1Y2UiLCIkcmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsIm5hdGl2ZVJldmVyc2UiLCJuYXRpdmVTbGljZSIsImZpbiIsIiRzb21lIiwibmF0aXZlU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJjb21wYXJlZm4iLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJhY3R1YWxTdGFydCIsIm5hdGl2ZUZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwidGVtcGxhdGUiLCJyYXdUZW1wbGF0ZSIsImxpdGVyYWxTZWdtZW50cyIsImNvZGVQb2ludEF0Iiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwibmF0aXZlRW5kc1dpdGgiLCJlbmRzV2l0aCIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwibmF0aXZlTWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJtYXRjaGVyIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiZ2V0RmxhZ3MiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJNQVRDSF9BTEwiLCJSRUdFWFBfU1RSSU5HIiwiUmVnRXhwUHJvdG90eXBlIiwicmVnRXhwQnVpbHRpbkV4ZWMiLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCIkbWF0Y2hBbGwiLCJmbGFnc1ZhbHVlIiwiZmxhZ3MiLCJtYXRjaEFsbCIsIiRwYWRFbmQiLCJwYWRFbmQiLCIkcGFkU3RhcnQiLCJwYWRTdGFydCIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIm5hdGl2ZVNlYXJjaCIsInNlYXJjaGVyIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsImFycmF5UHVzaCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwieiIsIm5hdGl2ZVN0YXJ0c1dpdGgiLCIkdHJpbSIsImZvcmNlZFN0cmluZ1RyaW1NZXRob2QiLCIkdHJpbVN0YXJ0IiwidHJpbVN0YXJ0IiwidHJpbUxlZnQiLCIkdHJpbUVuZCIsInRyaW1FbmQiLCJ0cmltUmlnaHQiLCJjcmVhdGVIVE1MIiwiZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCIsImFuY2hvciIsImJpZyIsImJsaW5rIiwiYm9sZCIsImZpeGVkIiwiZm9udGNvbG9yIiwiZm9udHNpemUiLCJpdGFsaWNzIiwic21hbGwiLCJzdHJpa2UiLCJzdXAiLCJOYXRpdmVSZWdFeHAiLCJDT1JSRUNUX05FVyIsIlJlZ0V4cFdyYXBwZXIiLCJwYXR0ZXJuIiwidGhpc0lzUmVnRXhwIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NBcmVVbmRlZmluZWQiLCJwcm94eSIsIm9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlIiwicmVnRXhwRmxhZ3MiLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJyZiIsInBhcnNlSW50SW1wbGVtZW50YXRpb24iLCJwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24iLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJCUk9LRU5fQ0xBU1NPRiIsInRvTnVtYmVyIiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiTnVtYmVyV3JhcHBlciIsIkVQU0lMT04iLCJnbG9iYWxJc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsInRoaXNOdW1iZXJWYWx1ZSIsIm5hdGl2ZVRvRml4ZWQiLCJ0b0ZpeGVkIiwiZnJhY3Rpb25EaWdpdHMiLCJmcmFjdERpZ2l0cyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJkYXRhVG9TdHJpbmciLCJ4MiIsIm5hdGl2ZVRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJuYXRpdmVBY29zaCIsImFjb3NoIiwic3FydCIsIk1BWF9WQUxVRSIsIm5hdGl2ZUFzaW5oIiwiYXNpbmgiLCJuYXRpdmVBdGFuaCIsImF0YW5oIiwiY2JydCIsIkxPRzJFIiwiY2x6MzIiLCJuYXRpdmVDb3NoIiwiY29zaCIsImZyb3VuZCIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCIkYWJzIiwiJHNpZ24iLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImFMZW4iLCJsYXJnIiwibmF0aXZlSW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsIkxPRzEwRSIsImxvZzEwIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJ0b0lTT1N0cmluZyIsInB2IiwiRGF0ZVByb3RvdHlwZSIsIm5hdGl2ZURhdGVUb0lTT1N0cmluZyIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJuYXRpdmVEYXRlVG9TdHJpbmciLCJkYXRlVG9QcmltaXRpdmUiLCJoaW50IiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwiZmV0Y2giLCJ2OCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJyZWFsIiwib25GaW5hbGx5IiwiY29sbGVjdGlvblN0cm9uZyIsIkludGVybmFsV2Vha01hcCIsImNvbGxlY3Rpb25XZWFrIiwiZW5mb3JjZUl0ZXJuYWxTdGF0ZSIsIklTX0lFMTEiLCIkV2Vha01hcCIsIldlYWtNYXBQcm90b3R5cGUiLCJuYXRpdmVEZWxldGUiLCJuYXRpdmVIYXMiLCJuYXRpdmVHZXQiLCJuYXRpdmVTZXQiLCJhcnJheUJ1ZmZlck1vZHVsZSIsIm5hdGl2ZUFycmF5QnVmZmVyU2xpY2UiLCJ2aWV3U291cmNlIiwidmlld1RhcmdldCIsInR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIiRjb3B5V2l0aGluIiwiJGZpbGwiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwibmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCJ0eXBlZEFycmF5VmFsdWVzIiwiJGpvaW4iLCIkbGFzdEluZGV4T2YiLCJtaWRkbGUiLCIkc2xpY2UiLCIkc29ydCIsImJlZ2luIiwiYmVnaW5JbmRleCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUT19MT0NBTEVfU1RSSU5HX0JVRyIsIlVpbnQ4QXJyYXlQcm90b3R5cGUiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlKb2luIiwibmF0aXZlQXBwbHkiLCJmdW5jdGlvbkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIm5hdGl2ZUNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsIlJlZmxlY3QiLCJkZWxldGVQcm9wZXJ0eSIsInJlY2VpdmVyIiwib2JqZWN0R2V0UHJvdG90eXBlT2YiLCJvYmplY3RJc0V4dGVuc2libGUiLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2NyaXB0b3IiLCJvYmplY3RTZXRQcm90b3R5cGVPZiIsIkRPTUl0ZXJhYmxlcyIsIkNPTExFQ1RJT05fTkFNRSIsIkNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInNjaGVkdWxlciIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiRU9GIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsIk5hdGl2ZVVSTCIsImdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUiLCJnZXRJbnRlcm5hbFVSTFN0YXRlIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJwYXJzZUhvc3QiLCJjb2RlUG9pbnRzIiwicGFyc2VJUHY2IiwiaXNTcGVjaWFsIiwicGFyc2VJUHY0IiwicGVyY2VudEVuY29kZSIsIkMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQiLCJwYXJ0c0xlbmd0aCIsIm51bWJlcnMiLCJwYXJ0IiwiaXB2NCIsIm51bWJlcnNTZWVuIiwiaXB2NFBpZWNlIiwic3dhcHMiLCJzd2FwIiwiYWRkcmVzcyIsInBpZWNlSW5kZXgiLCJjb21wcmVzcyIsInBvaW50ZXIiLCJjaGFyIiwic2VyaWFsaXplSG9zdCIsImlnbm9yZTAiLCJpcHY2IiwibWF4SW5kZXgiLCJjdXJyU3RhcnQiLCJjdXJyTGVuZ3RoIiwiZmluZExvbmdlc3RaZXJvU2VxdWVuY2UiLCJmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQiLCJwYXRoUGVyY2VudEVuY29kZVNldCIsInVzZXJpbmZvUGVyY2VudEVuY29kZVNldCIsInNwZWNpYWxTY2hlbWVzIiwiZnRwIiwiZ29waGVyIiwid3MiLCJ3c3MiLCJzY2hlbWUiLCJpbmNsdWRlc0NyZWRlbnRpYWxzIiwiY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0IiwiY2Fubm90QmVBQmFzZVVSTCIsImlzV2luZG93c0RyaXZlTGV0dGVyIiwibm9ybWFsaXplZCIsInN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIiLCJzaG9ydGVuVVJMc1BhdGgiLCJwYXRoU2l6ZSIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsInBhcnNlVVJMIiwic3RhdGVPdmVycmlkZSIsImJ1ZmZlckNvZGVQb2ludHMiLCJmYWlsdXJlIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJzZWVuUGFzc3dvcmRUb2tlbiIsImZyYWdtZW50IiwiY29kZVBvaW50IiwiZW5jb2RlZENvZGVQb2ludHMiLCJVUkxDb25zdHJ1Y3RvciIsImJhc2VTdGF0ZSIsInVybFN0cmluZyIsInNlYXJjaFBhcmFtc1N0YXRlIiwic2VyaWFsaXplVVJMIiwiZ2V0T3JpZ2luIiwiZ2V0UHJvdG9jb2wiLCJnZXRVc2VybmFtZSIsImdldFBhc3N3b3JkIiwiZ2V0SG9zdCIsImdldEhvc3RuYW1lIiwiZ2V0UG9ydCIsImdldFBhdGhuYW1lIiwiZ2V0U2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsIlVSTFByb3RvdHlwZSIsImFjY2Vzc29yRGVzY3JpcHRvciIsIm5hdGl2ZUNyZWF0ZU9iamVjdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm5hdGl2ZVJldm9rZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImJsb2IiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiT1ZFUkZMT1dfRVJST1IiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiY3VycmVudFZhbHVlIiwiaW5wdXRMZW5ndGgiLCJleHRyYSIsInVjczJkZWNvZGUiLCJiaWFzIiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudCIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInFNaW51c1QiLCJiYXNlTWludXNUIiwiZW5jb2RlZCIsImxhYmVscyIsInJ1bnRpbWUiLCJPcCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIml0ZXIiLCJza2lwVGVtcFJlc2V0Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIm5hbWVTdGFydENoYXIiLCJuYW1lQ2hhciIsInRhZ05hbWVQYXR0ZXJuIiwiU19UQUciLCJTX0FUVFIiLCJTX0FUVFJfU1BBQ0UiLCJTX0VRIiwiU19BVFRSX05PUVVPVF9WQUxVRSIsIlNfQVRUUl9FTkQiLCJTX1RBR19TUEFDRSIsIlNfVEFHX0NMT1NFIiwiY29weUxvY2F0b3IiLCJwYXJzZUVsZW1lbnRTdGFydFBhcnQiLCJjdXJyZW50TlNNYXAiLCJlbnRpdHlSZXBsYWNlciIsImF0dHJOYW1lIiwic2V0VGFnTmFtZSIsImxvY2FsTlNNYXAiLCJuc1ByZWZpeCIsIl9jb3B5IiwicGFyc2VIdG1sU3BlY2lhbENvbnRlbnQiLCJlbFN0YXJ0RW5kIiwiZWxFbmRTdGFydCIsImZpeFNlbGZDbG9zZWQiLCJjbG9zZU1hcCIsInBhcnNlRENDIiwibWF0Y2hzIiwicmVnIiwibGFzdE1hdGNoIiwiZW5kRFREIiwicGFyc2VJbnN0cnVjdGlvbiIsIkVsZW1lbnRBdHRyaWJ1dGVzIiwiX3NldF9wcm90b18iLCJ0aGl6IiwiZGVmYXVsdE5TTWFwQ29weSIsInN1cnJvZ2F0ZTEiLCJzdXJyb2dhdGUyIiwiZml4ZWRGcm9tQ2hhckNvZGUiLCJhcHBlbmRUZXh0IiwieHQiLCJsaW5lRW5kIiwibGluZVBhdHRlcm4iLCJsaW5lU3RhcnQiLCJwYXJzZVN0YWNrIiwidGFnU3RhcnQiLCJjb25maWciLCJlbmRNYXRjaCIsImxvY2F0b3IyIiwiZ2V0TG9jYWxOYW1lIiwiYmFzZTY0bWFwIiwicm90bCIsInJvdHIiLCJyYW5kb21CeXRlcyIsIndvcmRzIiwiaGV4VG9CeXRlcyIsImJ5dGVzVG9CYXNlNjQiLCJiYXNlNjQiLCJ0cmlwbGV0IiwiYmFzZTY0VG9CeXRlcyIsImltb2Q0IiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJicm93c2VyIiwiX19ud2pzIiwiX3R5cGVvZiIsIl9jb25zb2xlIiwibGFzdEMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJnZXRJdGVtIiwiREVCVUciLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsInRhYmxlIiwiJDEiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJ3IiwicGx1cmFsIiwibXNBYnMiLCJpc1BsdXJhbCIsImxvbmciLCJmbXRMb25nIiwiZm10U2hvcnQiLCJ0dHkiLCJpbnNwZWN0T3B0cyIsInN0ZGVyciIsImNvbG9yQ29kZSIsImhpZGVEYXRlIiwiZ2V0RGF0ZSIsImlzYXR0eSIsImZkIiwic3VwcG9ydHNDb2xvciIsIl8iLCJpbnNwZWN0Iiwib3MiLCJoYXNGbGFnIiwiZm9yY2VDb2xvciIsImdldFN1cHBvcnRMZXZlbCIsImhhc0Jhc2ljIiwiaGFzMjU2IiwiaGFzMTZtIiwidHJhbnNsYXRlTGV2ZWwiLCJpc1RUWSIsInBsYXRmb3JtIiwib3NSZWxlYXNlIiwicmVsZWFzZSIsIkNJX05BTUUiLCJURUFNQ0lUWV9WRVJTSU9OIiwiQ09MT1JURVJNIiwiVEVSTV9QUk9HUkFNX1ZFUlNJT04iLCJURVJNX1BST0dSQU0iLCJURVJNIiwiRk9SQ0VfQ09MT1IiLCJzdGRvdXQiLCJmbGFnIiwiYXJndiIsInRlcm1pbmF0b3JQb3MiLCJjcnlwdG8iLCJNdWx0aXBhcnRQYXJzZXIiLCJRdWVyeXN0cmluZ1BhcnNlciIsIk9jdGV0UGFyc2VyIiwiSlNPTlBhcnNlciIsIlN0cmluZ0RlY29kZXIiLCJFdmVudEVtaXR0ZXIiLCJvcHRzIiwiZW5kZWQiLCJtYXhGaWVsZHMiLCJtYXhGaWVsZHNTaXplIiwibWF4RmlsZVNpemUiLCJrZWVwRXh0ZW5zaW9ucyIsInVwbG9hZERpciIsInRtcGRpciIsInRtcERpciIsIm11bHRpcGxlcyIsImJ5dGVzUmVjZWl2ZWQiLCJieXRlc0V4cGVjdGVkIiwiX2ZsdXNoaW5nIiwiX2ZpZWxkc1NpemUiLCJfZmlsZVNpemUiLCJvcGVuZWRGaWxlcyIsInBhdXNlIiwiX2Vycm9yIiwiZmllbGRzIiwid3JpdGVIZWFkZXJzIiwiX3BhcnNlQ29udGVudExlbmd0aCIsIl9wYXJzZUNvbnRlbnRUeXBlIiwiYnl0ZXNQYXJzZWQiLCJvblBhcnQiLCJoYW5kbGVQYXJ0IiwiX3VwbG9hZFBhdGgiLCJfbWF5YmVFbmQiLCJfaW5pdE9jdGV0U3RyZWFtIiwiX2luaXRVcmxlbmNvZGVkIiwiX2luaXRNdWx0aXBhcnQiLCJfaW5pdEpTT05lbmNvZGVkIiwiZHVtbXlQYXJzZXIiLCJfd3JpdGVTdHJlYW0iLCJ1bmxpbmsiLCJfbmV3UGFyc2VyIiwiYm91bmRhcnkiLCJoZWFkZXJGaWVsZCIsImhlYWRlclZhbHVlIiwiaW5pdFdpdGhCb3VuZGFyeSIsIm9uUGFydEJlZ2luIiwicmVhZGFibGUiLCJ0cmFuc2ZlckVuY29kaW5nIiwidHJhbnNmZXJCdWZmZXIiLCJvbkhlYWRlckZpZWxkIiwib25IZWFkZXJWYWx1ZSIsIm9uSGVhZGVyRW5kIiwiX2ZpbGVOYW1lIiwib25IZWFkZXJzRW5kIiwib25QYXJ0RGF0YSIsIm9uUGFydEVuZCIsIm9uRW5kIiwib25GaWVsZCIsIm91dHN0YW5kaW5nV3JpdGVzIiwiZXh0IiwiZXh0bmFtZSIsImxhc3RNb2RpZmllZERhdGUiLCJjcmVhdGVIYXNoIiwiV3JpdGVTdHJlYW0iLCJqc29uIiwibXRpbWUiLCJkaWdlc3QiLCJQQVJTRVJfVU5JTklUSUFMSVpFRCIsIlNUQVJUIiwiU1RBUlRfQk9VTkRBUlkiLCJIRUFERVJfRklFTERfU1RBUlQiLCJIRUFERVJfRklFTEQiLCJIRUFERVJfVkFMVUVfU1RBUlQiLCJIRUFERVJfVkFMVUUiLCJIRUFERVJfVkFMVUVfQUxNT1NUX0RPTkUiLCJIRUFERVJTX0FMTU9TVF9ET05FIiwiUEFSVF9EQVRBX1NUQVJUIiwiUEFSVF9EQVRBIiwiUEFSVF9FTkQiLCJFTkQiLCJsb3dlciIsImJvdW5kYXJ5Q2hhcnMiLCJsb29rYmVoaW5kIiwic3RhdGVUb1N0cmluZyIsInN0YXRlTnVtYmVyIiwiY2wiLCJwcmV2SW5kZXgiLCJib3VuZGFyeUxlbmd0aCIsImJvdW5kYXJ5RW5kIiwiY2FsbGJhY2tTeW1ib2wiLCJkYXRhQ2FsbGJhY2siLCJtYXJrU3ltYm9sIiwiZXhwbGFpbiIsInF1ZXJ5c3RyaW5nIiwibWF4S2V5cyIsImNodW5rcyIsImJ5dGVzV3JpdHRlbiIsIkNvbWJpbmVkU3RyZWFtIiwicGFyc2VVcmwiLCJhc3luY2tpdCIsInBvcHVsYXRlIiwib3B0aW9uIiwiX292ZXJoZWFkTGVuZ3RoIiwiX3ZhbHVlTGVuZ3RoIiwiX3ZhbHVlc1RvTWVhc3VyZSIsIkxJTkVfQlJFQUsiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIl9tdWx0aVBhcnRIZWFkZXIiLCJmb290ZXIiLCJfbXVsdGlQYXJ0Rm9vdGVyIiwiX3RyYWNrTGVuZ3RoIiwidmFsdWVMZW5ndGgiLCJrbm93bkxlbmd0aCIsIl9sZW5ndGhSZXRyaWV2ZXIiLCJmaWxlU2l6ZSIsImNvbnRlbnREaXNwb3NpdGlvbiIsIl9nZXRDb250ZW50RGlzcG9zaXRpb24iLCJfZ2V0Q29udGVudFR5cGUiLCJjb250ZW50cyIsImdldEJvdW5kYXJ5IiwiZmlsZXBhdGgiLCJiYXNlbmFtZSIsImNsaWVudCIsIl9odHRwTWVzc2FnZSIsIl9zdHJlYW1zIiwiX2xhc3RCb3VuZGFyeSIsInVzZXJIZWFkZXJzIiwiZm9ybUhlYWRlcnMiLCJfYm91bmRhcnkiLCJfZ2VuZXJhdGVCb3VuZGFyeSIsImdldExlbmd0aFN5bmMiLCJoYXNLbm93bkxlbmd0aCIsInBhcmFsbGVsIiwic3VibWl0IiwiZGVmYXVsdHMiLCJEZWxheWVkU3RyZWFtIiwiZGF0YVNpemUiLCJtYXhEYXRhU2l6ZSIsInBhdXNlU3RyZWFtcyIsIl9yZWxlYXNlZCIsIl9jdXJyZW50U3RyZWFtIiwiY29tYmluZWRTdHJlYW0iLCJpc1N0cmVhbUxpa2UiLCJuZXdTdHJlYW0iLCJwYXVzZVN0cmVhbSIsIl9jaGVja0RhdGFTaXplIiwiX2hhbmRsZUVycm9ycyIsIl9nZXROZXh0IiwiX3BpcGVOZXh0IiwiX2VtaXRFcnJvciIsIl9yZXNldCIsIl91cGRhdGVEYXRhU2l6ZSIsIl9tYXhEYXRhU2l6ZUV4Y2VlZGVkIiwiX2J1ZmZlcmVkRXZlbnRzIiwiZGVsYXllZFN0cmVhbSIsInJlYWxFbWl0IiwiX2hhbmRsZUVtaXQiLCJzZXRFbmNvZGluZyIsIl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCIsImV4dGVuc2lvbnMiLCJwcmVmZXJlbmNlIiwiZGIiLCJFWFRSQUNUX1RZUEVfUkVHRVhQIiwiVEVYVF9UWVBFX1JFR0VYUCIsImNoYXJzZXRzIiwiZXh0ZW5zaW9uIiwiZXh0cyIsInNlcmlhbCIsInNlcmlhbE9yZGVyZWQiLCJkc3QiLCJSZXNwb25zZUJhc2UiLCJidWZmZXJlZCIsIl9zZXRTdGF0dXNQcm9wZXJ0aWVzIiwiX3NldEhlYWRlclByb3BlcnRpZXMiLCJ0b0Vycm9yIiwic2V0U3RhdHVzUHJvcGVydGllcyIsIm1peGluIiwiY3QiLCJsaW5rcyIsInN0YXR1c1R5cGUiLCJjbGllbnRFcnJvciIsInNlcnZlckVycm9yIiwiY3JlYXRlZCIsImFjY2VwdGVkIiwibm9Db250ZW50IiwiYmFkUmVxdWVzdCIsInVuYXV0aG9yaXplZCIsIm5vdEFjY2VwdGFibGUiLCJmb3JiaWRkZW4iLCJub3RGb3VuZCIsInVucHJvY2Vzc2FibGVFbnRpdHkiLCJfb24iLCJ0b1N0ciIsImdPUEQiLCJpc1BsYWluT2JqZWN0IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwic2V0UHJvcGVydHkiLCJuZXdWYWx1ZSIsImdldFByb3BlcnR5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsIk1pbWUiLCJERUJVR19NSU1FIiwiX2xvYWRpbmciLCJyZWFkRmlsZVN5bmMiLCJsaW5lIiwiZmFsbGJhY2siLCJkZWZhdWx0X3R5cGUiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsInB1c2hUb0FycmF5IiwidmFsdWVPckFycmF5IiwidG9JU08iLCJhZGRRdWVyeVByZWZpeCIsImFsbG93RG90cyIsImNoYXJzZXRTZW50aW5lbCIsImVuY29kZVZhbHVlc09ubHkiLCJzZXJpYWxpemVEYXRlIiwic2tpcE51bGxzIiwiZ2VuZXJhdGVBcnJheVByZWZpeCIsIm9iaktleXMiLCJhcnJheUZvcm1hdCIsImpvaW5lZCIsImFycmF5TGltaXQiLCJpZ25vcmVRdWVyeVByZWZpeCIsImludGVycHJldE51bWVyaWNFbnRpdGllcyIsInBhcmFtZXRlckxpbWl0IiwicGFyc2VBcnJheXMiLCJudW1iZXJTdHIiLCJwYXJzZUtleXMiLCJnaXZlbktleSIsImxlYWYiLCJjbGVhblJvb3QiLCIwIiwicGFyc2VPYmplY3QiLCJ0ZW1wT2JqIiwiY2xlYW5TdHIiLCJza2lwSW5kZXgiLCJicmFja2V0RXF1YWxzUG9zIiwicGFyc2VWYWx1ZXMiLCJuZXdPYmoiLCJfdGltZXIiLCJfc2VyaWFsaXplciIsIl90aW1lb3V0IiwiX3Jlc3BvbnNlVGltZW91dCIsImRlYWRsaW5lIiwicmV0cnkiLCJfcmV0cnlDYWxsYmFjayIsIkVSUk9SX0NPREVTIiwib3ZlcnJpZGUiLCJjcm9zc0RvbWFpbiIsIl9mdWxsZmlsbGVkUHJvbWlzZSIsImlubmVyUmVzb2x2ZSIsImlubmVyUmVqZWN0IiwiX29rQ2FsbGJhY2siLCJ1bnNldCIsInhociIsImJhc2U2NEVuY29kZXIiLCJfd2l0aENyZWRlbnRpYWxzIiwibWF4UmVzcG9uc2VTaXplIiwiaXNPYmoiLCJzb3J0UXVlcnkiLCJxdWVyeUFyciIsIl9hcHBlbmRRdWVyeVN0cmluZyIsInRyYWNlIiwiX3RpbWVvdXRFcnJvciIsImVycm5vIiwiQ29va2llQWNjZXNzIiwiQWdlbnRCYXNlIiwiQWdlbnQiLCJqYXIiLCJfc2F2ZUNvb2tpZXMiLCJfYXR0YWNoQ29va2llcyIsImFjY2VzcyIsIl9zZXREZWZhdWx0cyIsIl9kZWZhdWx0cyIsImRlZiIsImJpbmFyeSIsInJhd1Jlc3BvbnNlIiwicmVtb3ZlQ2FsbGJhY2siLCJfcmVmIiwicmVxdWVzdE9yQ29uZmlnIiwicmVxRnVuYyIsIl90aGlzIiwiY2FsbGJhY2tQYXJhbSIsInRpbWVvdXRMaW1pdCIsImVycm9yV3JhcHBlciIsIl9qc29ucCIsImNhbGxiYWNrV3JhcHBlciIsInF1ZXJ5U3RyaW5nIiwib25lcnJvciIsIkV2ZW50IiwiZnJlZUV4cG9ydHMiLCJmcmVlR2xvYmFsIiwicmVnZXhBc3RyYWxTeW1ib2xzIiwicmVnZXhBc2NpaVdoaXRlbGlzdCIsInJlZ2V4Qm1wV2hpdGVsaXN0IiwicmVnZXhFbmNvZGVOb25Bc2NpaSIsImVuY29kZU1hcCIsIiciLCJyZWdleEVzY2FwZSIsImVzY2FwZU1hcCIsInJlZ2V4SW52YWxpZEVudGl0eSIsInJlZ2V4SW52YWxpZFJhd0NvZGVQb2ludCIsInJlZ2V4RGVjb2RlIiwiZGVjb2RlTWFwIiwiZGVjb2RlTWFwTGVnYWN5IiwiZGVjb2RlTWFwTnVtZXJpYyIsImludmFsaWRSZWZlcmVuY2VDb2RlUG9pbnRzIiwicHJvcGVydHlOYW1lIiwiY29kZVBvaW50VG9TeW1ib2wiLCJzdHJpY3QiLCJwYXJzZUVycm9yIiwiaGV4RXNjYXBlIiwiZGVjRXNjYXBlIiwiZW5jb2RlRXZlcnl0aGluZyIsInVzZU5hbWVkUmVmZXJlbmNlcyIsImFsbG93VW5zYWZlU3ltYm9scyIsImVzY2FwZUNvZGVQb2ludCIsImRlY2ltYWwiLCJlc2NhcGVCbXBTeW1ib2wiLCJoaWdoIiwibG93IiwiJDIiLCIkMyIsIiQ0IiwiJDUiLCIkNiIsIiQ3IiwiJDgiLCJzZW1pY29sb24iLCJkZWNEaWdpdHMiLCJoZXhEaWdpdHMiLCJyZWZlcmVuY2UiLCJpc0F0dHJpYnV0ZVZhbHVlIiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJpc1VuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaGFzT3duUHJvcCIsImNyZWF0ZVVUQyIsImxvY2FsZSIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJwYXJzZWRQYXJ0cyIsImlzTm93VmFsaWQiLCJfZCIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsImJpZ0hvdXIiLCJjcmVhdGVJbnZhbGlkIiwiZnVuIiwibW9tZW50UHJvcGVydGllcyIsImNvcHlDb25maWciLCJfaXNBTW9tZW50T2JqZWN0IiwiX2kiLCJfZiIsIl9sIiwiX3R6bSIsIl9pc1VUQyIsIl9sb2NhbGUiLCJ1cGRhdGVJblByb2dyZXNzIiwiTW9tZW50IiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJhYnNGbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsImFsaWFzZXMiLCJhZGRVbml0QWxpYXMiLCJ1bml0Iiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkUHJvcCIsIm5vcm1hbGl6ZWRJbnB1dCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwibW9tIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwicDIiLCJwMyIsInA0IiwidG9rZW5zIiwiYWRkUGFyc2VUb2tlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIl9hIiwiWUVBUiIsIk1PTlRIIiwiREFURSIsIkhPVVIiLCJNSU5VVEUiLCJTRUNPTkQiLCJNSUxMSVNFQ09ORCIsIldFRUsiLCJXRUVLREFZIiwiZGF5c0luWWVhciIsImlzTGVhcFllYXIiLCJwYXJzZVR3b0RpZ2l0WWVhciIsImdldFNldFllYXIiLCJtYWtlR2V0U2V0Iiwia2VlcFRpbWUiLCJzZXQkMSIsIm1vbnRoIiwiZGF5c0luTW9udGgiLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJjb21wdXRlTW9udGhzUGFyc2UiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsIl9tb250aHNSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJ3ZWVrIiwid2Vla2RheSIsInJlc1llYXIiLCJyZXNEYXlPZlllYXIiLCJkYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtPZmZzZXQiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0Iiwic2hpZnRXZWVrZGF5cyIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiZGF5IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsImhGb3JtYXQiLCJob3VycyIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJNIiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiX2FiYnIiLCJnZXRTZXRHbG9iYWxMb2NhbGUiLCJnZXRMb2NhbGUiLCJkZWZpbmVMb2NhbGUiLCJhYmJyIiwiX2NvbmZpZyIsInBhcmVudExvY2FsZSIsImNob29zZUxvY2FsZSIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsIm5vd1ZhbHVlIiwiX3VzZVVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJjdXJyZW50RGF0ZUFycmF5Iiwid2Vla1llYXIiLCJ0ZW1wIiwid2Vla2RheU92ZXJmbG93IiwiVyIsImNyZWF0ZUxvY2FsIiwiX3dlZWsiLCJjdXJXZWVrIiwiZ2ciLCJfZGF5T2ZZZWFyIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX25leHREYXkiLCJzZXRGdWxsWWVhciIsImdldERheSIsInNldFVUQ01pbnV0ZXMiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4IiwiY29uZmlnRnJvbUlTTyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJwYXJzZWRBcnJheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJob3VyIiwiaXNQbSIsIm1lcmlkaWVtSG91ciIsIm1lcmlkaWVtRml4V3JhcCIsInByZXBhcmVDb25maWciLCJwcmVwYXJzZSIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJzY29yZSIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY29uZmlnRnJvbVN0cmluZyIsIm1pbnV0ZSIsIm1pbGxpc2Vjb25kIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwiaXNPYmplY3RFbXB0eSIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJpc29XZWVrIiwiZGF5cyIsInVuaXRIYXNEZWNpbWFsIiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJ1dGNPZmZzZXQiLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsInBhcnNlSXNvIiwiaXNCZWZvcmUiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiaW5wIiwiaXNBZnRlciIsImNyZWF0ZUFkZGVyIiwicGVyaW9kIiwidG1wIiwiYWRkU3VidHJhY3QiLCJpc0FkZGluZyIsImludmFsaWQiLCJzdWJ0cmFjdCIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwibmV3TG9jYWxlRGF0YSIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwiTVNfUEVSX1NFQ09ORCIsIk1TX1BFUl9NSU5VVEUiLCJNU19QRVJfSE9VUiIsIk1TX1BFUl80MDBfWUVBUlMiLCJtb2QkMSIsImRpdmlkZW5kIiwiZGl2aXNvciIsImxvY2FsU3RhcnRPZkRhdGUiLCJ1dGNTdGFydE9mRGF0ZSIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsIndlZWtzVGFyZ2V0IiwiZGF5T2ZZZWFyRGF0YSIsImlzb1dlZWtZZWFyIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldFNlY29uZCIsInBhcnNlTXMiLCJnZXRTZXRNaWxsaXNlY29uZCIsInByZVBhcnNlUG9zdEZvcm1hdCIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ6b25lRGVsdGEiLCJlbmRPZiIsInN0YXJ0T2ZEYXRlIiwiaXNvV2Vla2RheSIsImlucHV0U3RyaW5nIiwicG9zdGZvcm1hdCIsIndpdGhvdXRTdWZmaXgiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvQXJyYXkiLCJrZWVwT2Zmc2V0Iiwiem9uZSIsImlzTG9jYWwiLCJzdWZmaXgiLCJ1bml4IiwiY3JlYXRpb25EYXRhIiwiaXNvV2Vla3MiLCJ3ZWVrSW5mbyIsImlzb1dlZWtzSW5ZZWFyIiwicGFyc2VXZWVrZGF5IiwicGFyc2VJc29XZWVrZGF5Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsInBhcnNlWm9uZSIsInRab25lIiwiaGFzQWxpZ25lZEhvdXJPZmZzZXQiLCJpc0RTVCIsImlzVXRjT2Zmc2V0Iiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiaXNEU1RTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsInByb3RvJDEiLCJnZXQkMSIsImxpc3RNb250aHNJbXBsIiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsIl9jYWxlbmRhciIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwiX2ludmFsaWREYXRlIiwiX29yZGluYWwiLCJpc0Z1dHVyZSIsIl9yZWxhdGl2ZVRpbWUiLCJwYXN0RnV0dXJlIiwiaXNGb3JtYXQiLCJfbW9udGhzU2hvcnQiLCJtb250aE5hbWUiLCJfbW9udGhzUGFyc2VFeGFjdCIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiX3dlZWtkYXlzIiwiX3dlZWtkYXlzTWluIiwiX3dlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfd2Vla2RheXNQYXJzZSIsIl9zaG9ydFdlZWtkYXlzUGFyc2UiLCJfbWluV2Vla2RheXNQYXJzZSIsIl9mdWxsV2Vla2RheXNQYXJzZSIsImlzTG93ZXIiLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImRheXNUb01vbnRocyIsIm1vbnRoc1RvRGF5cyIsIm1ha2VBcyIsImFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwicmVsYXRpdmVUaW1lJDEiLCJ0b0lzb1N0cmluZyIsInVwZGF0ZUxvY2FsZSIsInRtcExvY2FsZSIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicm91bmRpbmdGdW5jdGlvbiIsInJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsIm15TW9tZW50IiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsInByaW50Iiwic3QiLCJfaW5kIiwiaW5kZW50ZXIiLCJtZXRhZGF0YUluZGVudCIsImVtZCIsInByb21pc2VVdGlsIiwiaXRlbXMiLCJvbkZhaWx1cmUiLCJ0b1Byb21pc2UiLCJpdGVtS2V5Iiwib25TdWNjZXNzIiwibWlsbGlzZWNzIiwiRW50cnlTdG9yZVV0aWwiLCJfcHJlbG9hZElkeCIsIm9mVHlwZSIsInByZWxvYWRGb3JUeXBlIiwibm9Db250ZXh0Iiwic2VhcmNoT2JqIiwiaW5Db250ZXh0IiwiZ2V0QnlSZXNvdXJjZVVSSSIsInR5cGVVUkkiLCJ1cmlzIiwicmVzdCIsImRlbGV0ZU5leHQiXSwibWFwcGlu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UixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxJQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FD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QUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQVMsUUFBUSxJQUFJLFFBQVEsSUFBUyxTQUFTLElBQUksT0FBTyxJQUFPLFFBQVEsSUFBSSxRQUFRLElBQU8sU0FBUyxJQUFJLFNBQVMsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFPLFNBQVNDLElBQUssT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQUksT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFPLFFBQVEsSUFBTyxRQUFRLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBTyxPQUFPLElBQU8sT0FBTyxJQUFJLFNBQVMsSUFBSSxNQUFNLElBQUksTUFBTSxVQUFZLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLFNBQVMsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsT0FBTyxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBSSxRQUFRLElBQU8sUUFBUSxJQUFTLFFBQVEsSUFBSSxNQUFNLElBQU8sT0FBTyxJQUFTLFFBQVEsSUFBUyxNQUFNLElBQU8sTUFBTSxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQU8sUUFBUSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFPLE1BQU0sSUFBTyxPQUFPLElBQU8sTUFBTSxJQUFTLFNBQVMsSUFBUyxLQUFLLElBQVMsS0FBSyxJQUFTLE1BQU0sSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsS0FBZSxTQUFTLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsYUFBYSxJQUFTLFdBQVcsSUFBUyxNQUFNLElBQVMsYUFBYSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxNQUFNLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxVQUFVLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxPQUFPLEtBQWUsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLE1BQU0sSUFBUyxLQUFLLElBQVMsUUFBUSxJQUFTLEtBQUssSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsTUFBTSxJQUFJLE9BQU8sSUFBTyxLQUFLLElBQU8sTUFBTSxJQUFPLFFBQVEsSUFBSSxLQUFLLElBQVMsTUFBTSxLQUFVLE9BQU8sSUFBSSxTQUFTLElBQVMsS0FBSyxLQUFVLE1BQU0sSUFBUyxRQUFRLElBQUksS0FBSyxJQUFTLE1BQU0sS0FBVSxPQUFPLElBQU8sTUFBTSxJQUFJLE9BQU8sSUFBTyxTQUFTLElBQVMsUUFBUSxJQUFTLEtBQUssSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxNQUFNLEtBQWUsT0FBTyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxNQUFNLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxLQUFLLElBQVMsTUFBTSxLQUFlLE9BQU8sSUFBUyxNQUFNLEtBQWUsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsU0FBUyxJQUFTLFVBQVUsSUFBUyxRQUFRLElBQVMsV0FBVyxJQUFTLFdBQVcsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsTUFBTSxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsT0FBTyxLQUFlLE9BQU8sSUFBUyxLQUFLLEtBQWUsTUFBTSxJQUFTLE1BQU0sSUFBUyxLQUFLLElBQVMsT0FBTyxLQUFlLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLEtBQUssSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxZQUFZLEtBQWUsT0FBTyxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsUUFBUSxLQUFlLFNBQVMsSUFBUyxRQUFRLEtBQWUsUUFBUSxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsS0FBZSxVQUFVLElBQVMsS0FBSyxJQUFTLE1BQU0sS0FBZSxPQUFPLElBQVMsS0FBSyxJQUFTLE1BQU0sS0FBZSxPQUFPLElBQVMsS0FBSyxLQUFlLE1BQU0sSUFBUyxLQUFLLEtBQWUsTUFBTSxLQUFlLE9BQU8sSUFBUyxNQUFNLElBQVMsTUFBTSxLQUFlLE9BQU8sSUFBUyxLQUFLLEtBQWUsT0FBTyxLQUFlLE1BQU0sSUFBUyxLQUFLLEtBQWUsT0FBTyxLQUFlLE1BQU0sSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLEtBQUssSUFBUyxPQUFPLElBQVMsS0FBSyxJQUFTLE9BQU8sSUFBUyxLQUFLLElBQVMsTUFBTSxJQUFTLEtBQUssSUFBUyxNQUFNLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLEtBQWUsbUJBQW1CLElBQVMsTUFBTSxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsTUFBTSxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxLQUFlLFNBQVMsSUFBUyxRQUFRLEtBQWUsU0FBUyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsS0FBZSxrQkFBa0IsSUFBUyxRQUFRLEtBQWUsb0JBQW9CLElBQVMsU0FBUyxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFFBQVEsS0FBZSxTQUFTLElBQVMsUUFBUSxLQUFlLFNBQVMsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxLQUFlLFVBQVUsSUFBUyxRQUFRLElBQVMsU0FBUyxLQUFlLFVBQVUsSUFBUyxTQUFTLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxLQUFLLEtBQWUsTUFBTSxJQUFTLEtBQUssS0FBZSxNQUFNLEtBQWUsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLEtBQWUsT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxVQUFVLEtBQWUsV0FBVyxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsUUFBUSxLQUFlLFNBQVMsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFdBQVcsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxVQUFVLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFdBQVcsSUFBUyxrQkFBa0IsSUFBUyxtQkFBbUIsSUFBUyxZQUFZLElBQVMsYUFBYSxJQUFTLFdBQVcsSUFBUyxXQUFXLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxNQUFNLElBQVMsT0FBTyxJQUFTLHVCQUF1QixJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsbUJBQW1CLElBQVMsb0JBQW9CLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxvQkFBb0IsSUFBUyxXQUFXLElBQVMsVUFBVSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxXQUFXLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsTUFBTSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsV0FBVyxJQUFTLGFBQWEsSUFBUyxlQUFlLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFNBQVMsSUFBUyxRQUFRLEtBQWUsU0FBUyxJQUFTLFVBQVUsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFdBQVcsSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLGtCQUFrQixJQUFTLG9CQUFvQixJQUFTLHNCQUFzQixJQUFTLG1CQUFtQixJQUFTLGdCQUFnQixJQUFTLGlCQUFpQixJQUFTLG1CQUFtQixJQUFTLHFCQUFxQixJQUFTLG9CQUFvQixJQUFTLHFCQUFxQixJQUFTLGtCQUFrQixJQUFTLG9CQUFvQixJQUFTLGdCQUFnQixJQUFTLGlCQUFpQixJQUFTLG1CQUFtQixJQUFTLHFCQUFxQixJQUFTLG9CQUFvQixJQUFTLHFCQUFxQixJQUFTLGtCQUFrQixJQUFTLG9CQUFvQixJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsZUFBZSxJQUFTLFFBQVEsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxVQUFVLElBQVMsU0FBUyxJQUFTLFdBQVcsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsV0FBVyxJQUFTLFdBQVcsSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLFdBQVcsSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLFdBQVcsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxVQUFVLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxVQUFVLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxXQUFXLElBQVMsa0JBQWtCLEtBQWUscUJBQXFCLElBQVMsbUJBQW1CLEtBQWUsc0JBQXNCLElBQVMsU0FBUyxJQUFTLFdBQVcsSUFBUyxVQUFVLElBQVMsU0FBUyxJQUFTLFdBQVcsSUFBUyxXQUFXLElBQVMsT0FBTyxJQUFTLGNBQWMsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLFFBQVEsSUFBUyxXQUFXLElBQVMsV0FBVyxJQUFTLFVBQVUsSUFBUyxXQUFXLElBQVMsVUFBVSxJQUFTLFdBQVcsSUFBUyxVQUFVLElBQVMsV0FBVyxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsVUFBVSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxXQUFXLElBQVMsU0FBUyxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsV0FBVyxJQUFTLFNBQVMsSUFBUyxPQUFPLElBQVMsVUFBVSxJQUFTLFdBQVcsSUFBUyxVQUFVLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsV0FBVyxJQUFTLFdBQVcsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsVUFBVSxJQUFTLE1BQU0sSUFBUyxLQUFLLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxVQUFVLElBQVMsV0FBVyxJQUFTLE9BQU8sSUFBUyxNQUFNLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxVQUFVLEtBQWUsV0FBVyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsTUFBTSxLQUFlLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsVUFBVSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxNQUFNLEtBQWUsT0FBTyxJQUFTLE1BQU0sS0FBZSxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFdBQVcsSUFBUyxXQUFXLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxLQUFLLElBQVMsS0FBSyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxXQUFXLEtBQWUsb0JBQW9CLElBQVMsaUJBQWlCLEtBQWUsMEJBQTBCLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLEtBQWUsUUFBUSxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsUUFBUSxJQUFTLE1BQU0sS0FBZSxPQUFPLElBQVMsTUFBTSxLQUFlLE9BQU8sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLEtBQUssSUFBUyxLQUFLLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFVBQVUsSUFBUyxPQUFPLEtBQWUsUUFBUSxJQUFTLE9BQU8sS0FBZSxRQUFRLElBQVMsU0FBUyxJQUFTLFNBQVMsS0FBZSxTQUFTLElBQVMsUUFBUSxLQUFlLFNBQVMsSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxVQUFVLElBQVMsVUFBVSxJQUFTLFFBQVEsSUFBUyxVQUFVLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsUUFBUSxLQUFlLFNBQVMsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBTyxTQUFTLElBQU8sT0FBTyxFQUFJLFNBQVMsSUFBTyxRQUFRLElBQU8sTUFBTSxJQUFTLE9BQU8sSUFBTyxPQUFPLElBQU8sT0FBTyxJQUFTLFNBQVMsSUFBTyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQU8sT0FBTyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQU8sT0FBTyxJQUFPLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsS0FBZSxPQUFPLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sSUFBTyxPQUFPLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQU8sUUFBUSxJQUFPLFFBQVEsSUFBTyxRQUFRLElBQU8sUUFBUSxJQUFPLE9BQU8sSUFBTyxPQUFPLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQU8sUUFBUSxJQUFPLFFBQVEsS0FBZSxPQUFPLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLElBQVMsT0FBTyxLQUFlLE1BQU0sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sSUFBUyxNQUFNLEtBQWUsT0FBTyxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQVMsU0FBUyxLQUFlLE1BQU0sSUFBUyxLQUFLLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxJQUFTLEtBQUssS0FBZSxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFPLE1BQU0sSUFBTyxNQUFNLElBQVMsS0FBSyxJQUFTLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxJQUFTLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBTyxRQUFRLElBQU8sUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQU8sT0FBTyxJQUFPLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxRQUFRLEdBQUssUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFNBQVMsS0FBZSxNQUFNLElBQVMsVUFBVSxLQUFlLE9BQU8sS0FBZSxPQUFPLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sSUFBUyxLQUFLLEtBQWUsT0FBTyxJQUFTLE9BQU8sSUFBUyxLQUFLLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFPLFFBQVEsSUFBTyxRQUFRLElBQU8sT0FBTyxJQUFPLE9BQU8sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLElBQVMsU0FBUyxJQUFTLFNBQVMsS0FBZSxNQUFNLEtBQWUsT0FBTyxJQUFTLE1BQU0sS0FBZSxPQUFPLElBQVMsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxLQUFlLE1BQU0sS0FBZSxPQUFPLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLElBQVMsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLEtBQWUsT0FBTyxJQUFTLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE1BQU0sSUFBUyxNQUFNLEtBQWUsT0FBTyxLQUFlLE1BQU0sSUFBUyxPQUFPLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLElBQU8sT0FBTyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBTyxRQUFRLElBQU8sUUFBUSxJQUFPLE9BQU8sSUFBTyxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxLQUFlLE1BQU0sS0FBZSxPQUFPLEtBQWUsT0FBTyxJQUFTLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLElBQVMsT0FBTyxJQUFTLFNBQVMsS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sSUFBUyxPQUFPLElBQVMsS0FBSyxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsS0FBZSxPQUFPLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sSUFBUyxLQUFLLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBTyxRQUFRLEtBQWUsTUFBTSxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsT0FBTyxLQUFlLE1BQU0sS0FBZSxPQUFPLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsU0FBUyxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxJQUFPLFNBQVMsSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFPLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFPLFFBQVEsSUFBTyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBTyxPQUFPLElBQU8sT0FBTyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxRQUFRLEtBQWUsTUFBTSxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxNQUFNLElBQVMsUUFBUSxJQUFTLFFBQVEsS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sS0FBZSxNQUFNLEtBQWUsT0FBTyxLQUFlLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sSUFBTyxTQUFTLElBQU8sU0FBUyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQU8sT0FBTyxJQUFTLE9BQU8sS0FBZSxPQUFPLEtBQWUsTUFBTSxLQUFlLE9BQU8sSUFBUyxNQUFNLElBQVMsT0FBTyxLQUFlLE9BQU8sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQU8sUUFBUSxJQUFPLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFVBQVUsSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxRQUFRLElBQVMsU0FBUyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsUUFBUSxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsS0FBSyxJQUFPLFFBQVEsSUFBUyxLQUFLLElBQVMsS0FBSyxJQUFTLEtBQUssSUFBUyxLQUFLLElBQVMsS0FBSyxJQUFTLFVBQVUsSUFBUyxVQUFVLElBQVMsS0FBSyxJQUFTLE1BQU0sSUFBUyxLQUFLLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxNQUFNLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxTQUFTLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsVUFBVSxJQUFTLE9BQU8sSUFBUyxNQUFNLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsUUFBUSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxRQUFRLElBQVMsUUFBUSxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsUUFBUSxJQUFTLFFBQVEsSUFBUyxNQUFNLElBQVMsTUFBTSxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLFNBQVMsSUFBUyxTQUFTLElBQVMsTUFBTSxJQUFTLE1BQU0sSUFBUyxTQUFTLElBQVMsU0FBUyxJQUFTLE1BQU0sSUFBUyxNQUFNLElBQVMsT0FBTyxJQUFTLE9BQU8sSUFBUyxPQUFPLElBQVMsT0FBTyxJQUFTLFFBQVEsSUFBUyxPQUFPLElBQVMsUUFBUSxJQUFTLFVBRXBtMEJDLEVBQWMsWUFDZEMsRUFBWSxDQUNmLElBQUssU0FDTCxJQUFLLFFBQ0xGLElBQU0sU0FDTixJQUFLLE9BS0wsSUFBSyxPQUtMLElBQUssVUFHRkcsRUFBcUIsa0NBQ3JCQyxFQUEyQixxUEFDM0JDLEVBQWMsaThnQkFDZEMsRUFBWSxDQUFDLE9BQVMsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFTLE9BQVMsSUFBUyxHQUFLLElBQVMsSUFBTSxJQUFTLElBQU0sS0FBZSxNQUFRLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxJQUFNLElBQVMsSUFBTSxJQUFTLE1BQVEsSUFBTyxNQUFRLElBQU8sR0FBSyxJQUFTLElBQU0sS0FBZSxJQUFNLEtBQWUsT0FBUyxJQUFPLE9BQVMsSUFBTyxRQUFVLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsSUFBTSxJQUFJLElBQU0sSUFBSSxJQUFNLElBQVMsSUFBTSxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsU0FBVyxJQUFTLEtBQU8sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLFNBQVcsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLFNBQVcsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLFNBQVcsSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLFNBQVcsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFPLFFBQVUsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLEtBQU8sS0FBZSxLQUFPLEtBQWUsR0FBSyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQUssY0FBZ0IsSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLE1BQVEsSUFBTyxNQUFRLElBQU8sS0FBTyxLQUFlLEtBQU8sS0FBZSxPQUFTLElBQVMsSUFBTSxJQUFJLE1BQVEsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFPLE9BQVMsSUFBTyxLQUFPLElBQU8sS0FBTyxJQUFPLFNBQVcsSUFBUyxNQUFRLElBQVMsU0FBVyxJQUFTLFlBQWMsSUFBUyxVQUFZLElBQVMsUUFBVSxJQUFTLFVBQVksSUFBUyxVQUFZLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLFNBQVcsSUFBUyxLQUFPLElBQVMsU0FBVyxJQUFTLE1BQVEsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsUUFBVSxJQUFTLFFBQVUsSUFBUyxRQUFVLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxXQUFhLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLElBQU0sS0FBZSxJQUFNLEtBQWUsT0FBUyxJQUFTLFFBQVUsSUFBUyxPQUFTLElBQVMsUUFBVSxJQUFTLFNBQVcsSUFBUyxVQUFZLElBQVMsU0FBVyxJQUFTLFFBQVUsSUFBUyxnQkFBa0IsSUFBUyxjQUFnQixJQUFTLFNBQVcsSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLE9BQVMsSUFBUyxhQUFlLElBQVMsWUFBYyxJQUFTLGNBQWdCLElBQVMsa0JBQW9CLElBQVMsa0JBQW9CLElBQVMsbUJBQXFCLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxJQUFNLEtBQVUsUUFBVSxLQUFlLEtBQU8sSUFBUyxLQUFPLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxJQUFNLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsU0FBVyxJQUFTLFFBQVUsSUFBUyxTQUFXLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBTyxLQUFPLEtBQWUsS0FBTyxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLEtBQU8sS0FBSyxNQUFRLElBQVMsU0FBVyxJQUFTLEtBQU8sSUFBUyxPQUFTLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFTLFNBQVcsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxxQkFBdUIsSUFBUyxLQUFPLEtBQWUsTUFBUSxJQUFTLE1BQVEsSUFBUyxRQUFVLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFPLE9BQVMsSUFBTyxNQUFRLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFPLFFBQVUsSUFBTyxRQUFVLElBQVMsS0FBTyxJQUFPLFVBQVksSUFBTyxVQUFZLElBQU8sSUFBTSxLQUFlLElBQU0sSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxVQUFZLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxnQkFBa0IsSUFBUyxpQkFBbUIsSUFBUyxXQUFhLElBQVMsWUFBYyxJQUFTLFlBQWMsSUFBUyxVQUFZLElBQVMsU0FBVyxJQUFPLFNBQVcsSUFBUyxZQUFjLElBQVMsV0FBYSxJQUFTLFlBQWMsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLFNBQVcsSUFBUyxPQUFTLElBQVMsUUFBVSxJQUFTLHlCQUEyQixJQUFTLHNCQUF3QixJQUFTLGdCQUFrQixJQUFTLE1BQVEsSUFBUyxTQUFXLElBQVMsTUFBUSxJQUFJLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQUksT0FBUyxJQUFJLEtBQU8sSUFBUyxPQUFTLElBQVMsV0FBYSxJQUFTLFVBQVksSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLFVBQVksSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLGdCQUFrQixJQUFTLEtBQU8sS0FBZSxLQUFPLElBQVMsT0FBUyxJQUFTLFVBQVksSUFBUyxLQUFPLElBQU8sS0FBTyxJQUFPLE9BQVMsSUFBUyxnQ0FBa0MsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxLQUFPLEtBQWUsS0FBTyxLQUFlLEtBQU8sSUFBUyxNQUFRLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxRQUFVLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxTQUFXLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxLQUFPLEtBQWUsT0FBUyxJQUFTLFFBQVUsSUFBUyxZQUFjLElBQVMsWUFBYyxJQUFTLFNBQVcsSUFBUyxXQUFhLElBQVMsT0FBUyxJQUFPLGVBQWlCLElBQVMsZ0JBQWtCLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxTQUFXLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxRQUFVLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxHQUFLLElBQVMsR0FBSyxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsU0FBVyxJQUFTLFFBQVUsSUFBUyxJQUFNLElBQU8sSUFBTSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLE9BQVMsSUFBUyxJQUFNLEtBQWUsSUFBTSxLQUFlLEtBQU8sSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLGlCQUFtQixJQUFPLGVBQWlCLElBQVMsdUJBQXlCLElBQVMsaUJBQW1CLElBQUksaUJBQW1CLElBQVMsS0FBTyxJQUFTLFFBQVUsSUFBUyxRQUFVLElBQVMsWUFBYyxJQUFTLE1BQVEsSUFBUyxJQUFNLElBQU8sY0FBZ0IsSUFBUyxRQUFVLElBQVMsTUFBUSxJQUFTLElBQU0sSUFBTyxPQUFTLElBQU8sY0FBZ0IsSUFB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S0FBZSxPQUFTLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsV0FBYSxJQUFTLFNBQVcsSUFBUyxPQUFTLElBQU8sT0FBUyxJQUFTLE9BQVMsSUFBTyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBTyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLEtBQU8sS0FBZSxLQUFPLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsR0FBSyxJQUFTLEdBQUssSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxLQUFPLElBQVMsU0FBVyxJQUFTLElBQU0sSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLFFBQVUsSUFBUyxTQUFXLElBQVMsS0FBTyxLQUFlLE9BQVMsSUFBUyxJQUFNLEtBQWUsSUFBTSxLQUFlLEdBQUssSUFBUyxHQUFLLElBQVMsSUFBTSxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLEdBQUssSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxLQUFPLElBQVMsU0FBVyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxNQUFRLElBQUksYUFBZSxJQUFTLGlCQUFtQixJQUFTLGlCQUFtQixJQUFTLGVBQWlCLElBQVMsWUFBYyxJQUFTLGtCQUFvQixJQUFTLGFBQWUsSUFBUyxLQUFPLElBQVMsS0FBTyxLQUFlLEtBQU8sSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLEdBQUssSUFBSSxHQUFLLElBQVMsR0FBSyxJQUFJLEtBQU8sSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxRQUFVLElBQVMsVUFBWSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsVUFBWSxJQUFTLFdBQWEsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLFVBQVksS0FBZSxLQUFPLEtBQWUsTUFBUSxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQU8sT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxRQUFVLElBQVMsTUFBUSxJQUFTLElBQU0sSUFBSSxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsVUFBWSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsSUFBTSxLQUFlLElBQU0sSUFBUyxhQUFlLElBQVMsU0FBVyxJQUFTLFNBQVcsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLGNBQWdCLElBQVMsZUFBaUIsSUFBUyxLQUFPLEtBQWUsS0FBTyxJQUFTLE9BQVMsSUFBUyxlQUFpQixJQUFTLEtBQU8sS0FBZSxLQUFPLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsYUFBZSxJQUFTLFVBQVksSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBTyxPQUFTLElBQU8sR0FBSyxJQUFTLE1BQVEsSUFBTyxNQUFRLElBQU8sSUFBTSxJQUFTLElBQU0sSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQU8sSUFBTSxJQUFTLElBQU0sS0FBZSxJQUFNLElBQVMsT0FBUyxJQUFPLE9BQVMsSUFBTyxHQUFLLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsR0FBSyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFdBQWEsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxHQUFLLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxTQUFXLElBQVMsT0FBUyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFTLFNBQVcsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLGFBQWUsSUFBUyxTQUFXLElBQVMsUUFBVSxJQUFTLGVBQWlCLElBQVMsZUFBaUIsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQU8sS0FBTyxLQUFlLEtBQU8sSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxHQUFLLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLEtBQU8sSUFBTyxLQUFPLElBQU8sTUFBUSxJQUFTLE1BQVEsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sS0FBZSxJQUFNLEtBQWUsTUFBUSxJQUFTLEtBQU8sS0FBZSxLQUFPLEtBQWUsS0FBTyxLQUFlLEtBQU8sS0FBZSxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sS0FBZSxJQUFNLEtBQWUsT0FBUyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxLQUFPLEtBQWUsS0FBTyxLQUFlLEtBQU8sS0FBZSxLQUFPLEtBQWUsTUFBUSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsV0FBYSxJQUFTLE1BQVEsSUFBTyxLQUFPLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLElBQU0sSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxNQUFRLEtBQWUsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFJLE9BQVMsSUFBSSxNQUFRLElBQVMsUUFBVSxJQUFTLFFBQVUsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLEtBQU8sSUFBSSxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLFFBQVUsSUFBUyxTQUFXLElBQVMsS0FBTyxJQUFTLEdBQUssSUFBUyxHQUFLLElBQVMsaUJBQW1CLElBQVMsVUFBWSxJQUFTLFVBQVksSUFBUyxVQUFZLElBQVMsYUFBZSxJQUFTLG9CQUFzQixJQUFTLGNBQWdCLElBQVMsWUFBYyxJQUFTLGtCQUFvQixJQUFTLGtCQUFvQixJQUFTLGVBQWlCLElBQVMsa0JBQW9CLElBQVMsVUFBWSxJQUFTLGdCQUFrQixJQUFTLGNBQWdCLElBQVMsZUFBaUIsSUFBUyxlQUFpQixJQUFTLGVBQWlCLElBQVMsZUFBaUIsSUFBUyxnQkFBa0IsSUFBUyxrQkFBb0IsSUFBUyxvQkFBc0IsSUFBUyxnQkFBa0IsSUFBUyxRQUFVLElBQVMsYUFBZSxJQUFTLGNBQWdCLElBQVMsZUFBaUIsSUFBUyxhQUFlLElBQVMsZ0JBQWtCLElBQVMsa0JBQW9CLElBQVMsaUJBQW1CLElBQVMsZ0JBQWtCLElBQVMsYUFBZSxJQUFTLGdCQUFrQixJQUFTLFdBQWEsSUFBUyxjQUFnQixJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxTQUFXLElBQVMsSUFBTSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsUUFBVSxJQUFTLFNBQVcsSUFBUyxLQUFPLEtBQWUsT0FBUyxJQUFTLFdBQWEsSUFBUyxRQUFVLElBQVMsVUFBWSxJQUFTLFdBQWEsSUFBUyxpQkFBbUIsSUFBUyxjQUFnQixJQUFTLFlBQWMsSUFBUyxRQUFVLElBQVMsU0FBVyxJQUFTLFFBQVUsSUFBUyxlQUFpQixJQUFTLFVBQVksSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLElBQU0sS0FBZSxJQUFNLEtBQWUsR0FBSyxJQUFTLElBQU0sSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsR0FBSyxJQUFTLEdBQUssSUFBUyxNQUFRLElBQVMsU0FBVyxJQUFTLFdBQWEsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLFdBQWEsSUFBUyxLQUFPLElBQVMsU0FBVyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsY0FBZ0IsSUFBUyxjQUFnQixJQUFTLGNBQWdCLElBQVMsbUJBQXFCLElBQVMsbUJBQXFCLElBQVMsbUJBQXFCLElBQVMsV0FBYSxJQUFTLGVBQWlCLElBQVMsZUFBaUIsSUFBUyxlQUFpQixJQUFTLGNBQWdCLElBQVMsZUFBaUIsSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxPQUFTLElBQVMsUUFBVSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQUksZUFBaUIsSUFBUyxnQkFBa0IsSUFBUyxJQUFNLElBQVMsUUFBVSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQUksT0FBUyxJQUFTLE1BQVEsSUFBUyxTQUFXLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxLQUFPLEtBQWUsS0FBTyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsS0FBTyxJQUFJLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxHQUFLLElBQUksR0FBSyxJQUFTLEdBQUssSUFBSSxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxRQUFVLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLFNBQVcsSUFBUyxRQUFVLElBQVMsVUFBWSxLQUFlLEtBQU8sS0FBZSxLQUFPLElBQU8sS0FBTyxJQUFTLEtBQU8sSUFBUyxRQUFVLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxPQUFTLElBQVMsV0FBYSxJQUFTLFdBQWEsSUFBUyxTQUFXLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsY0FBZ0IsSUFBUyxZQUFjLElBQVMsVUFBWSxJQUFTLElBQU0sS0FBZSxJQUFNLEtBQWUsSUFBTSxJQUFTLE1BQVEsSUFBTyxJQUFNLElBQVMsT0FBUyxJQUFJLE9BQVMsSUFBUyxPQUFTLElBQU8sTUFBUSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsUUFBVSxJQUFTLFVBQVksSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxHQUFLLElBQVMsS0FBTyxLQUFlLEtBQU8sSUFBUyxPQUFTLElBQVMsR0FBSyxJQUFTLEdBQUssSUFBUyxTQUFXLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLEtBQU8sS0FBZSxJQUFNLElBQVMsS0FBTyxLQUFlLE1BQVEsS0FBZSxNQUFRLElBQVMsUUFBVSxJQUFTLE1BQVEsSUFBUyxRQUFVLElBQVMsU0FBVyxJQUFTLEtBQU8sSUFBTyxNQUFRLEtBQWUsT0FBUyxLQUFlLEtBQU8sSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLFNBQVcsS0FBZSxL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TUFBUSxJQUFTLFFBQVUsS0FBZSxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsS0FBZSxRQUFVLEtBQWUsVUFBWSxJQUFTLFdBQWEsS0FBZSxLQUFPLElBQVMsT0FBUyxJQUFPLE9BQVMsSUFBTyxLQUFPLElBQVMsY0FBZ0IsSUFBUyxnQkFBa0IsSUFBUyxlQUFpQixJQUFTLGlCQUFtQixJQUFTLEdBQUssSUFBUyxHQUFLLElBQVMsSUFBTSxJQUFJLE9BQVMsSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxLQUFPLEtBQWUsS0FBTyxLQUFVLE9BQVMsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLEtBQU8sS0FBZSxLQUFPLEtBQVUsUUFBVSxLQUFlLE9BQVMsSUFBUyxRQUFVLEtBQWUsTUFBUSxLQUFlLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFPLE9BQVMsSUFBTyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBTyxNQUFRLElBQU8sSUFBTSxJQUFTLElBQU0sSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxJQUFNLEtBQWUsSUFBTSxLQUFlLEtBQU8sSUFBUyxPQUFTLElBQU8sT0FBUyxJQUFPLElBQU0sSUFBUyxNQUFRLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsSUFBTSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxRQUFVLElBQVMsUUFBVSxJQUFTLEtBQU8sSUFBUyxPQUFTLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxLQUFPLElBQVMscUJBQXVCLElBQVMsZUFBaUIsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLEdBQUssSUFBUyxHQUFLLElBQVMsTUFBUSxJQUFTLElBQU0sSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLEtBQU8sSUFBTyxLQUFPLElBQU8sT0FBUyxJQUFTLEtBQU8sSUFBUyxRQUFVLElBQVMsSUFBTSxJQUFTLEdBQUssSUFBUyxLQUFPLElBQVMsS0FBTyxLQUFlLE9BQVMsSUFBTyxPQUFTLElBQU8sS0FBTyxJQUFTLE9BQVMsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFTLE9BQVMsSUFBUyxTQUFXLElBQVMsS0FBTyxJQUFPLEtBQU8sSUFBTyxNQUFRLElBQVMsUUFBVSxJQUFTLFVBQVksSUFBUyxZQUFjLElBQVMsZ0JBQWtCLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBTyxTQUFXLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsU0FBVyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFJLE9BQVMsSUFBSSxPQUFTLElBQVMsS0FBTyxJQUFTLFFBQVUsSUFBUyxJQUFNLEtBQWUsSUFBTSxLQUFlLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsR0FBSyxJQUFTLEdBQUssSUFBUyxVQUFZLElBQVMsSUFBTSxJQUFTLE9BQVMsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBSSxTQUFXLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxVQUFZLElBQU8sT0FBUyxJQUFPLFFBQVUsSUFBUyxRQUFVLElBQVMsR0FBSyxJQUFPLGNBQWdCLElBQVMsU0FBVyxJQUFTLEtBQU8sS0FBZSxLQUFPLElBQVMsTUFBUSxJQUFPLEdBQUssSUFBUyxHQUFLLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxXQUFhLElBQVMsWUFBYyxJQUFTLFNBQVcsSUFBUyxjQUFnQixJQUFTLG1CQUFxQixJQUFTLGNBQWdCLElBQVMsT0FBUyxJQUFTLFlBQWMsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLFNBQVcsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLEtBQU8sSUFBUyxXQUFhLElBQVMsYUFBZSxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLEtBQU8sS0FBZSxLQUFPLEtBQWUsSUFBTSxJQUFTLElBQU0sSUFBUyxPQUFTLElBQVMsSUFBTSxLQUFlLElBQU0sS0FBZSxLQUFPLElBQVMsS0FBTyxLQUFlLEtBQU8sSUFBUyxPQUFTLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxZQUFjLElBQVMsUUFBVSxJQUFTLE1BQVEsSUFBSSxRQUFVLElBQVMsS0FBTyxJQUFJLEtBQU8sSUFBSSxNQUFRLElBQVMsS0FBTyxLQUFlLE9BQVMsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLFNBQVcsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBTyxLQUFPLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLFFBQVUsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxVQUFZLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBSSxPQUFTLElBQUksTUFBUSxJQUFTLFFBQVUsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQUksSUFBTSxJQUFTLElBQU0sSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsS0FBTyxJQUFTLEdBQUssSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLFNBQVcsSUFBUyxNQUFRLElBQVMsS0FBTyxJQUFTLElBQU0sSUFBTyxJQUFNLElBQU8sZUFBaUIsSUFBUyxtQkFBcUIsSUFBUyxxQkFBdUIsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLElBQU0sS0FBZSxJQUFNLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLGtCQUFvQixJQUFTLFdBQWEsSUFBUyxXQUFhLElBQVMsV0FBYSxJQUFTLGNBQWdCLElBQVMsb0JBQXNCLElBQVMsZUFBaUIsSUFBUyxhQUFlLElBQVMsbUJBQXFCLElBQVMsbUJBQXFCLElBQVMsZ0JBQWtCLElBQVMsbUJBQXFCLElBQVMsV0FBYSxJQUFTLGlCQUFtQixJQUFTLGVBQWlCLElBQVMsZ0JBQWtCLElBQVMsa0JBQW9CLElBQVMsaUJBQW1CLElBQVMsZ0JBQWtCLElBQVMsU0FBVyxJQUFTLGNBQWdCLElBQVMsZUFBaUIsSUFBUyxnQkFBa0IsSUFBUyxjQUFnQixJQUFTLGlCQUFtQixJQUFTLG1CQUFxQixJQUFTLGtCQUFvQixJQUFTLGlCQUFtQixJQUFTLGNBQWdCLElBQVMsaUJBQW1CLElBQVMsWUFBYyxJQUFTLGVBQWlCLElBQVMsS0FBTyxJQUFTLGFBQWUsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLElBQU0sSUFBUyxPQUFTLElBQVMsV0FBYSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sSUFBUyxPQUFTLElBQVMsUUFBVSxJQUFTLGFBQWUsSUFBUyxLQUFPLElBQUksT0FBUyxJQUFTLFNBQVcsSUFBUyxNQUFRLElBQVMsWUFBYyxJQUFTLE9BQVMsSUFBUyxLQUFPLEtBQWUsS0FBTyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFJLE1BQVEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxTQUFXLElBQVMsWUFBYyxJQUFTLFFBQVUsSUFBUyxHQUFLLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsR0FBSyxJQUFTLEdBQUssSUFBUyxLQUFPLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLEtBQU8sSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLE1BQVEsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxLQUFPLElBQU8sS0FBTyxJQUFJLE9BQVMsSUFBUyxTQUFXLElBQVMsTUFBUSxJQUFTLEtBQU8sSUFBUyxJQUFNLEtBQWUsSUFBTSxLQUFlLE9BQVMsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLGVBQWlCLElBQVMsZUFBaUIsSUFBUyxTQUFXLElBQVMsY0FBZ0IsSUFBUyxnQkFBa0IsSUFBUyxhQUFlLElBQVMsSUFBTSxJQUFPLE1BQVEsSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxRQUFVLElBQVMsUUFBVSxJQUFTLE1BQVEsSUFBUyxZQUFjLElBQVMsY0FBZ0IsSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxNQUFRLEtBQWUsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQUksS0FBTyxJQUFTLE9BQVMsSUFBUyxLQUFPLEtBQWUsS0FBTyxLQUFlLE9BQVMsSUFBUyxVQUFZLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxPQUFTLEtBQWUsTUFBUSxJQUFTLE9BQVMsS0FBZSxLQUFPLElBQVMsTUFBUSxJQUFTLE9BQVMsSUFBUyxTQUFXLElBQVMsV0FBYSxJQUFTLE1BQVEsSUFBUyxPQUFTLElBQVMsU0FBVyxJQUFTLFdBQWEsSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxtQkFBcUIsSUFBUyxhQUFlLElBQVMsa0JBQW9CLElBQVMsZUFBaUIsSUFBUyxvQkFBc0IsSUFBUyxZQUFjLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxLQUFPLElBQVMsS0FBTyxJQUFTLE1BQVEsSUFBUyxnQkFBa0IsSUFBUyxZQUFjLElBQVMsTUFBUSxJQUFPLElBQU0sSUFBUyxJQUFNLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxTQUFXLElBQVMsVUFBWSxJQUFTLFlBQWMsSUFBUyxVQUFZLElBQVMsV0FBYSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxXQUFhLElBQVMsWUFBYyxJQUFTLFNBQVcsSUFBUyxjQUFnQixJQUFTLG1CQUFxQixJQUFTLGNBQWdCLElBQVMsT0FBUyxJQUFTLFlBQWMsSUFBUyxTQUFXLElBQVMsU0FBVyxJQUFTLFFBQVUsSUFBUyxTQUFXLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxLQUFPLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxLQUFPLElBQU8sS0FBTyxJQUFPLEtBQU8sSUFBTyxPQUFTLElBQVMsUUFBVSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLFNBQVcsSUFBUyxjQUFnQixJQUFTLFFBQVUsSUFBUyxRQUFVLElBQVMsUUFBVSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFFBQVUsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLFNBQVcsSUFBUyxVQUFZLElBQVMsVUFBWSxJQUFTLFdBQWEsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsTUFBUSxJQUFTLE1BQVEsSUFBUyxRQUFVLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBTyxJQUFNLEtBQUssT0FBUyxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxPQUFTLElBQVMsSUFBTSxLQUFlLElBQU0sS0FBZSxPQUFTLElBQVMsVUFBWSxJQUFTLFVBQVksSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFNBQVcsSUFBUyxPQUFTLElBQVMsWUFBYyxJQUFTLFNBQVcsSUFBUyxXQUFhLEtBQWUsT0FBUyxJQUFTLFVBQVksSUFBUyxNQUFRLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBTyxNQUFRLElBQU8sTUFBUSxJQUFTLE1BQVEsSUFBUyxXQUFhLElBQVMsZUFBaUIsSUFBUyxXQUFhLElBQVMsTUFBUSxJQUFPLE9BQVMsSUFBUyxTQUFXLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsSUFBTSxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxRQUFVLElBQVMsS0FBTyxJQUFTLE9BQVMsSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLFNBQVcsSUFBUyxhQUFlLElBQVMsYUFBZSxJQUFTLGVBQWlCLElBQVMsVUFBWSxJQUFTLGNBQWdCLElBQVMsZ0JBQWtCLElBQVMsT0FBUyxJQUFTLEtBQU8sSUFBUyxTQUFXLElBQVMsVUFBWSxJQUFTLFFBQVUsSUFBUyxNQUFRLElBQVMsUUFBVSxJQUFTLFNB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UyxHQUFLLElBQVMsR0FBSyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxNQUFRLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxPQUFTLElBQVMsT0FBUyxJQUFTLE1BQVEsSUFBUyxLQUFPLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBTyxPQUFTLElBQU8sS0FBTyxJQUFTLEtBQU8sSUFBUyxNQUFRLElBQVMsTUFBUSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFPLElBQU0sS0FBZSxJQUFNLEtBQWUsS0FBTyxJQUFTLEtBQU8sSUFBUyxLQUFPLEtBQWUsS0FBTyxLQUFlLEtBQU8sS0FBZSxLQUFPLEtBQWUsS0FBTyxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQU8sS0FBTyxJQUFTLE9BQVMsSUFBUyxPQUFTLElBQVMsT0FBUyxJQUFTLE9BQVMsSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsT0FBUyxJQUFTLGVBQWlCLElBQVMsS0FBTyxJQUFTLEtBQU8sSUFBUyxJQUFNLEtBQWUsSUFBTSxJQUFTLEtBQU8sSUFBUyxLQUFPLElBQVMsUUFBVSxJQUFTLEtBQU8sS0FBZSxLQUFPLElBQVMsS0FBTyxLQUFlLEtBQU8sS0FBZSxJQUFNLElBQVMsS0FBTyxLQUN4OHVDQyxFQUFrQixDQUFDLE9BQVMsSUFBTyxPQUFTLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxNQUFRLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLElBQU0sSUFBSSxJQUFNLElBQUksTUFBUSxJQUFPLE1BQVEsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLEtBQU8sSUFBTyxLQUFPLElBQU8sT0FBUyxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sTUFBUSxJQUFPLEtBQU8sSUFBTyxLQUFPLElBQU8sS0FBTyxJQUFPLE9BQVMsSUFBTyxJQUFNLElBQU8sT0FBUyxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLElBQU0sSUFBTyxJQUFNLElBQU8sS0FBTyxJQUFPLEtBQU8sSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLE9BQVMsSUFBTyxHQUFLLElBQUksR0FBSyxJQUFJLE9BQVMsSUFBTyxPQUFTLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxNQUFRLElBQU8sT0FBUyxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sS0FBTyxJQUFPLEtBQU8sSUFBTyxNQUFRLElBQU8sR0FBSyxJQUFJLEdBQUssSUFBSSxLQUFPLElBQU8sTUFBUSxJQUFPLE9BQVMsSUFBTyxLQUFPLElBQU8sSUFBTSxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLE9BQVMsSUFBTyxNQUFRLElBQU8sTUFBUSxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sS0FBTyxJQUFPLEtBQU8sSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sS0FBTyxJQUFPLEtBQU8sSUFBTyxLQUFPLElBQU8sT0FBUyxJQUFPLE1BQVEsSUFBTyxLQUFPLElBQUksS0FBTyxJQUFJLE1BQVEsSUFBTyxJQUFNLElBQU8sSUFBTSxJQUFPLEtBQU8sSUFBTyxJQUFNLElBQU8sS0FBTyxJQUFPLEtBQU8sSUFBTyxLQUFPLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxNQUFRLElBQU8sTUFBUSxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sTUFBUSxJQUFPLE1BQVEsSUFBTyxPQUFTLElBQU8sT0FBUyxJQUFPLElBQU0sSUFBTyxLQUFPLElBQU8sS0FBTyxJQUFPLE9BQVMsSUFBTyxPQUFTLElBQU8sSUFBTSxJQUFPLEtBQU8sS0FDeGhEQyxFQUFtQixDQUFDLEVBQUksSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sSUFBUyxJQUFNLElBQVMsSUFBTSxJQUFTLElBQU0sS0FDN2FDLEVBQTZCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sUUFBUSxRQUFRLFFBQVEsU0FJdHBCN2dCLEVBQXFCM2dGLE9BQU9vcUQsYUFHNUJ6c0QsRUFEUyxHQUNl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RUFBUW5TLEtBQUtxN0QsWUFBWXgvQixlQUFlcEwsVUFBVUEsR0FBV3JkLE1BQU0sR0FDckV6RyxHQUNGd0YsRUFBTXhGLFFBQVFBLEcsU0FFT3dGLEVBQU1sSyxLQUFLNDBELEdBQWVqaEMsV0FBVyxHLGFBQXREOHRCLEUsUUFDTzdtRCxPQUFTLEcseUNBQ2I2bUQsRUFBUyxJLGFBRVosSUFBSXB3QyxNQUFKLHdCQUEyQjNNLEVBQVUsVUFBWSxhQUFqRCxtQ0FBd0Y4akIsSSwrSkFjaEZ4b0IsRyxzR0FDUm8rRyxFQUFPLEdBQ1B2NEcsRUFBSzlOLEtBQUtxN0QsWUFDVnhxRCxFQUFRL0MsRUFBR2dELFdBQ1h3MUcsRUFBT3g0RyxFQUFHcXJCLFVBRVZvdEYsRSwyQ0FBYSx1R0FDYkYsRUFBS3hqSCxPQUFTLEdBREQsd0JBRVQySyxFQUFNNjRHLEVBQUtwbkYsTUFGRixrQkFJUHFuRixFQUFLMW9GLElBQUlwd0IsR0FKRix1REFNYmlULFFBQVFnQyxJQUFSLDJDQUFnRGpWLEVBQWhELHdCQU5hLFFBUWYrNEcsSUFSZSxzQ0FVVnZwSCxHQVZVLHVELDhEQWFFaUwsRUFBS2xGLFFBQVEsU0FBQ3NLLEdBQ2pDZzVHLEVBQUt2a0gsS0FBS3VMLEVBQU1JLFVBQ2hCb0QsRUFBTXE4QixRQUFRNy9CLEssT0FGVjFLLEUsT0FLTjRqSCxFQUFXNWpILEciLCJmaWxlIjoiRW50cnlTdG9yZS5ub2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE5NSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBoaWRlKHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgTyA9ICdvYmplY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gTyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09IE8gJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSBPICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gTyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBEYXRhVmlldyA9IGdsb2JhbC5EYXRhVmlldztcbnZhciBEYXRhVmlld1Byb3RvdHlwZSA9IERhdGFWaWV3ICYmIERhdGFWaWV3LnByb3RvdHlwZTtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5ID0gZ2xvYmFsLlVpbnQ4Q2xhbXBlZEFycmF5O1xudmFyIFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlID0gVWludDhDbGFtcGVkQXJyYXkgJiYgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlO1xudmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5UHJvdG90eXBlICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheVByb3RvdHlwZSk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBpc1Byb3RvdHlwZU9mID0gT2JqZWN0UHJvdG90eXBlLmlzUHJvdG90eXBlT2Y7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IHVpZCgnVFlQRURfQVJSQVlfVEFHJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBEYXRhVmlldyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IE5BVElWRV9BUlJBWV9CVUZGRVIgJiYgISFzZXRQcm90b3R5cGVPZjtcbnZhciBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IGZhbHNlO1xudmFyIE5BTUU7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgSW50OEFycmF5OiAxLFxuICBVaW50OEFycmF5OiAxLFxuICBVaW50OENsYW1wZWRBcnJheTogMSxcbiAgSW50MTZBcnJheTogMixcbiAgVWludDE2QXJyYXk6IDIsXG4gIEludDMyQXJyYXk6IDQsXG4gIFVpbnQzMkFycmF5OiA0LFxuICBGbG9hdDMyQXJyYXk6IDQsXG4gIEZsb2F0NjRBcnJheTogOFxufTtcblxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGtsYXNzID09PSAnRGF0YVZpZXcnIHx8IGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwgY2xhc3NvZihpdCkpO1xufTtcblxudmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5Jyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChDKSB7XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mLmNhbGwoVHlwZWRBcnJheSwgQykpIHJldHVybiBDO1xuICB9IGVsc2UgZm9yICh2YXIgQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIE5BTUUpKSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiAoQyA9PT0gVHlwZWRBcnJheUNvbnN0cnVjdG9yIHx8IGlzUHJvdG90eXBlT2YuY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIEMpKSkge1xuICAgICAgcmV0dXJuIEM7XG4gICAgfVxuICB9IHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yJyk7XG59O1xuXG52YXIgZXhwb3J0UHJvdG8gPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKGZvcmNlZCkgZm9yICh2YXIgQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlLCBLRVkpKSB7XG4gICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldO1xuICAgIH1cbiAgfVxuICBpZiAoIVR5cGVkQXJyYXlQcm90b3R5cGVbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICByZWRlZmluZShUeXBlZEFycmF5UHJvdG90eXBlLCBLRVksIGZvcmNlZCA/IHByb3BlcnR5XG4gICAgICA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5UHJvdG90eXBlW0tFWV0gfHwgcHJvcGVydHkpO1xuICB9XG59O1xuXG52YXIgZXhwb3J0U3RhdGljID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkge1xuICB2YXIgQVJSQVksIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoZm9yY2VkKSBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB7XG4gICAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFUeXBlZEFycmF5W0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgICAvLyBWOCB+IENocm9tZSA0OS01MCBgJVR5cGVkQXJyYXklYCBtZXRob2RzIGFyZSBub24td3JpdGFibGUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZGVmaW5lKFR5cGVkQXJyYXksIEtFWSwgZm9yY2VkID8gcHJvcGVydHkgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVtLRVldIHx8IHByb3BlcnR5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9IGVsc2UgcmV0dXJuO1xuICB9XG4gIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7XG4gICAgICByZWRlZmluZShUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSwgcHJvcGVydHkpO1xuICAgIH1cbiAgfVxufTtcblxuZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gIGlmICghZ2xvYmFsW05BTUVdKSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbi8vIFdlYktpdCBidWcgLSB0eXBlZCBhcnJheXMgY29uc3RydWN0b3JzIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgdHlwZW9mIFR5cGVkQXJyYXkgIT0gJ2Z1bmN0aW9uJyB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICBUeXBlZEFycmF5ID0gZnVuY3Rpb24gVHlwZWRBcnJheSgpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH07XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0sIFR5cGVkQXJyYXkpO1xuICB9XG59XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhVHlwZWRBcnJheVByb3RvdHlwZSB8fCBUeXBlZEFycmF5UHJvdG90eXBlID09PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkucHJvdG90eXBlO1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gIH1cbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIG9uZSBtb3JlIG9iamVjdCBpbiBVaW50OENsYW1wZWRBcnJheSBwcm90b3R5cGUgY2hhaW5cbmlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlKSAhPT0gVHlwZWRBcnJheVByb3RvdHlwZSkge1xuICBzZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG59XG5cbmlmIChERVNDUklQVE9SUyAmJiAhaGFzKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGhpZGUoZ2xvYmFsW05BTUVdLCBUWVBFRF9BUlJBWV9UQUcsIE5BTUUpO1xuICB9XG59XG5cbi8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuaWYgKE5BVElWRV9BUlJBWV9CVUZGRVIgJiYgc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUpICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgc2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUsIE9iamVjdFByb3RvdHlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOQVRJVkVfQVJSQVlfQlVGRkVSOiBOQVRJVkVfQVJSQVlfQlVGRkVSLFxuICBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTLFxuICBUWVBFRF9BUlJBWV9UQUc6IFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEICYmIFRZUEVEX0FSUkFZX1RBRyxcbiAgYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LFxuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLFxuICBleHBvcnRQcm90bzogZXhwb3J0UHJvdG8sXG4gIGV4cG9ydFN0YXRpYzogZXhwb3J0U3RhdGljLFxuICBpc1ZpZXc6IGlzVmlldyxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXk6IFR5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXlQcm90b3R5cGU6IFR5cGVkQXJyYXlQcm90b3R5cGVcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9IE5BVElWRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdXG4gICAgfHwgKE5BVElWRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpXG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KCd0b1N0cmluZycpO1xuXG5zaGFyZWQoJ2luc3BlY3RTb3VyY2UnLCBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG59KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBoaWRlKHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGhpZGUoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dyYXBwZWQtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaGlkZShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIHF1b3QgPSAvXCIvZztcblxuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVodG1sXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gY2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBhIG1ldGhvZCwgbG93ZXJjYXNlXG4vLyBvZiBhIHRhZyBhbmQgZXNjYXBpbmcgcXVvdGVzIGluIGFyZ3VtZW50c1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW01FVEhPRF9OQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhbWV0aG9kIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXlzLWNvbnN0cnVjdG9ycy1yZXF1aXJlcy13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IEFycmF5QnVmZmVyVmlld0NvcmUuVFlQRURfQVJSQVlfVEFHO1xudmFyIFR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXk7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheVByb3RvdHlwZTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGlzVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuaXNUeXBlZEFycmF5O1xudmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcblxudmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTtcbiAgfSB9KTtcbn07XG5cbnZhciBpc0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBrbGFzcztcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihpdCkpID09ICdBcnJheUJ1ZmZlcicgfHwga2xhc3MgPT0gJ1NoYXJlZEFycmF5QnVmZmVyJztcbn07XG5cbnZhciBpc1R5cGVkQXJyYXlJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICByZXR1cm4gaXNUeXBlZEFycmF5KHRhcmdldClcbiAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgJiYga2V5IGluIHRhcmdldFxuICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbn07XG5cbnZhciB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBpc1R5cGVkQXJyYXlJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgPyBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMiwgdGFyZ2V0W2tleV0pXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xufTtcblxudmFyIHdyYXBwZWREZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGlmIChpc1R5cGVkQXJyYXlJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgJiYgaXNPYmplY3QoZGVzY3JpcHRvcilcbiAgICAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJylcbiAgICAmJiAhaGFzKGRlc2NyaXB0b3IsICdnZXQnKVxuICAgICYmICFoYXMoZGVzY3JpcHRvciwgJ3NldCcpXG4gICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGVcbiAgICAmJiAoIWhhcyhkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSB8fCBkZXNjcmlwdG9yLndyaXRhYmxlKVxuICAgICYmICghaGFzKGRlc2NyaXB0b3IsICdlbnVtZXJhYmxlJykgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlKVxuICApIHtcbiAgICB0YXJnZXRba2V5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gd3JhcHBlZERlZmluZVByb3BlcnR5O1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnVmZmVyJyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdieXRlT2Zmc2V0Jyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdsZW5ndGgnKTtcbiAgfVxuXG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgZGVmaW5lUHJvcGVydHk6IHdyYXBwZWREZWZpbmVQcm9wZXJ0eVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICB2YXIgQ09OU1RSVUNUT1JfTkFNRSA9IFRZUEUgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgVFlQRTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBUWVBFO1xuICAgIHZhciBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICByZXR1cm4gZGF0YS52aWV3W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSByb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4RkYgPyAweEZGIDogdmFsdWUgJiAweEZGO1xuICAgICAgZGF0YS52aWV3W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgbmF0aXZlRGVmaW5lUHJvcGVydHkodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCBvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aDtcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBieXRlT2Zmc2V0ID0gdG9PZmZzZXQob2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBieXRlT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBieXRlT2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVkQXJyYXlGcm9tLmNhbGwoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICA6IHR5cGVkQXJyYXlPZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgaWYgKGlzVHlwZWRBcnJheShkYXRhKSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIHJldHVybiB0eXBlZEFycmF5RnJvbS5jYWxsKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihUeXBlZEFycmF5Q29uc3RydWN0b3IsIFR5cGVkQXJyYXkpO1xuICAgICAgZm9yRWFjaChnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIGhpZGUoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBrZXksIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcltrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgIGhpZGUoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIGlmIChUWVBFRF9BUlJBWV9UQUcpIGhpZGUoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9UQUcsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbiAgICAkKHtcbiAgICAgIGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBUeXBlZEFycmF5Q29uc3RydWN0b3IgIT0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBzaGFtOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXU1xuICAgIH0sIGV4cG9ydGVkKTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgIGhpZGUoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkpIHtcbiAgICAgIGhpZGUoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dGlsXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihsZW5ndGgsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgc2NyaXB0ID0gJ3NjcmlwdCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGpzID0gJ2phdmEnICsgc2NyaXB0ICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoanMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgc2NyaXB0ICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnLycgKyBzY3JpcHQgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBoaWRlKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywgY3JlYXRlKG51bGwpKTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiaW1wb3J0IHsgR3JhcGggfSBmcm9tICdyZGZqc29uJztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgRW50cnkgZnJvbSAnLi9FbnRyeSc7XG5pbXBvcnQgRW50cnlJbmZvIGZyb20gJy4vRW50cnlJbmZvJztcbmltcG9ydCBGaWxlUmVzb3VyY2UgZnJvbSAnLi9GaWxlJztcbmltcG9ydCBHcmFwaFJlc291cmNlIGZyb20gJy4vR3JhcGgnO1xuaW1wb3J0IEdyb3VwIGZyb20gJy4vR3JvdXAnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0JztcbmltcG9ydCBQaXBlbGluZSBmcm9tICcuL1BpcGVsaW5lJztcbmltcG9ydCBTZWFyY2hMaXN0IGZyb20gJy4vU2VhcmNoTGlzdCc7XG5pbXBvcnQgU3RyaW5nUmVzb3VyY2UgZnJvbSAnLi9TdHJpbmcnO1xuaW1wb3J0IHR5cGVzIGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IFVzZXIgZnJvbSAnLi9Vc2VyJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBjb250YWlucyB1dGlsaXR5IG1ldGhvZHMgdGhhdCBlbmNhcHN1bGF0ZXMgRW50cnlTdG9yZXMgUkVTVCBsYXllciBmcm9tIHRoZSByZXN0XG4gKiBvZiB0aGUgY29kZS4gSXQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBFbnRyeVN0b3JlLmpzIEFQSSxcbiAqIG5vdCBieSBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzLlxuICpcbiAqIEhlbmNlLCAqKnlvdSBzaG91bGQgYXZvaWQgdXNpbmcgZmFjdG9yeSBtZXRob2RzIGRpcmVjdGx5IGluIGFwcGxpY2F0aW9uIGNvZGUgYXMgdGhlcmUgYXJlXG4gKiBtb3N0IHByb2JhYmx5IG90aGVyIHdheXMgdG8gYWNoaWV2ZSB0aGUgc2FtZSB0aGluZy4gTW9zdCBsaWtlbHkgYnkgdXNpbmcgbWV0aG9kIGluXG4gKiB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZX0hKipcbiAqXG4gKiBUaGUgdXRpbGl0eSBtZXRob2RzIGFyZSBjdXJyZW50bHkgbm90IHZpc2libGUgYXMgdGhleSBhcmUgbm90IGRvY3VtZW50ZWQgeWV0LlxuICogKFRoZSBtZXRob2RzIGNhbm5vdCBiZSBtYXJrZWQgYXMgcHJpdmF0ZSBhcyB0aGV5IG5lZWQgdG8gYmUgdXNlZCB0aHJvdWdob3V0IHRoZSBBUEkuKVxuICpcbiAqIEBleHBvcnRzIHN0b3JlL2ZhY3RvcnlcbiAqIEBuYW1lc3BhY2VcbiAqL1xuXG5sZXQgc29ydE9iaiA9IHsgc29ydEJ5OiAndGl0bGUnLCBwcmlvOiAnTGlzdCcgfTtcbmxldCBkZWZhdWx0TGltaXQgPSA1MDtcblxuY29uc3QgZ2V0Q29udGV4dEZvckVudHJ5ID0gKGVudHJ5VVJJLCBlbnRyeVN0b3JlKSA9PiB7XG4gIGNvbnN0IGJhc2VVUkkgPSBlbnRyeVN0b3JlLmdldEJhc2VVUkkoKTtcbiAgY29uc3QgY29udGV4dElkID0gZW50cnlVUkkuc3Vic3RyKGJhc2VVUkkubGVuZ3RoLCBlbnRyeVVSSS5pbmRleE9mKCcvJywgYmFzZVVSSS5sZW5ndGgpXG4gICAgLSBiYXNlVVJJLmxlbmd0aCk7XG4gIGNvbnN0IGNvbnRleHRzID0gZW50cnlTdG9yZS5nZXRDYWNoZWRDb250ZXh0c0lkeCgpO1xuICBsZXQgY29udGV4dCA9IGNvbnRleHRzW2NvbnRleHRJZF07XG4gIGlmICghY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBuZXcgQ29udGV4dChgJHtiYXNlVVJJfV9jb250ZXh0cy9lbnRyeS8ke2NvbnRleHRJZH1gLCBiYXNlVVJJXG4gICAgICArIGNvbnRleHRJZCwgZW50cnlTdG9yZSk7XG4gICAgY29udGV4dHNbY29udGV4dElkXSA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1SaWdodHMgPSAocmlnaHRzKSA9PiB7XG4gIGNvbnN0IG8gPSB7fTtcbiAgY29uc3QgciA9IHJpZ2h0cyB8fCBbXTtcbiAgZm9yIChsZXQgbiA9IDA7IG4gPCByLmxlbmd0aDsgbisrKSB7XG4gICAgb1tyW25dXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG87XG59O1xuXG5jb25zdCBmaXhOYW1lQW5kRGlzYWJsZWQgPSAocmVzT2JqLCBkYXRhKSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2UgfSA9IGRhdGE7XG4gIC8vIFNwZWNpYWwgY2FzZSBvZiBzZWFyY2hlcyBhbmQgc2ltaWxhciB3aGVuIG5hbWUgaXMgcHJvdmlkZWQgYnV0IG5vdCBmdWxsIHJlc291cmNlLlxuICBpZiAocmVzT2JqICE9IG51bGwpIHtcbiAgICBpZiAocmVzb3VyY2UgJiYgdHlwZW9mIHJlc291cmNlLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAocmVzT2JqIGluc3RhbmNlb2YgVXNlcikge1xuICAgICAgICByZXNPYmouX2RhdGEgPSByZXNPYmouX2RhdGEgfHwge307XG4gICAgICAgIHJlc09iai5fZGF0YS5uYW1lID0gcmVzb3VyY2UubmFtZTtcbiAgICAgIH0gZWxzZSB7IC8vIENvbnRleHQgYW5kIEdyb3VwXG4gICAgICAgIHJlc09iai5fbmFtZSA9IHJlc291cmNlLm5hbWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXNPYmogaW5zdGFuY2VvZiBVc2VyKSB7XG4gICAgICByZXNPYmouX2RhdGEgPSByZXNPYmouX2RhdGEgfHwge307XG4gICAgICBpZiAocmVzb3VyY2UgJiYgdHlwZW9mIHJlc291cmNlLmRpc2FibGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmVzT2JqLl9kYXRhLmRpc2FibGVkID0gcmVzb3VyY2UuZGlzYWJsZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBfdXBkYXRlT3JDcmVhdGVSZXNvdXJjZSA9IChlbnRyeSwgZGF0YSwgZm9yY2UpID0+IHtcbiAgY29uc3QgX2RhdGEgPSBkYXRhIHx8IHt9O1xuICBsZXQgcmVzb3VyY2UgPSBlbnRyeS5nZXRSZXNvdXJjZSh0cnVlKTtcbiAgY29uc3QgdXJpID0gZW50cnkuZ2V0VVJJKCk7XG4gIGNvbnN0IHJ1cmkgPSBlbnRyeS5nZXRSZXNvdXJjZVVSSSgpO1xuICBjb25zdCBjcnVyaSA9IGVudHJ5LmdldENvbnRleHQoKS5nZXRSZXNvdXJjZVVSSSgpO1xuICBjb25zdCBlcyA9IGVudHJ5LmdldEVudHJ5U3RvcmUoKTtcbiAgY29uc3QgZWkgPSBlbnRyeS5nZXRFbnRyeUluZm8oKTtcbiAgaWYgKCFyZXNvdXJjZSAmJiBlaS5nZXRFbnRyeVR5cGUoKSA9PT0gdHlwZXMuRVRfTE9DQUxcbiAgICAmJiBlaS5nZXRSZXNvdXJjZVR5cGUoKSA9PT0gdHlwZXMuUlRfSU5GT1JNQVRJT05SRVNPVVJDRSkge1xuICAgIHN3aXRjaCAoZW50cnkuZ2V0RW50cnlJbmZvKCkuZ2V0R3JhcGhUeXBlKCkpIHtcbiAgICAgIGNhc2UgdHlwZXMuR1RfQ09OVEVYVDogLy8gU3luY2hyb25vdXMgcmVzb3VyY2UsIGFzeW5jaHJvbm91cyBtZXRob2RzLlxuICAgICAgICAvLyBEdW1teSBVUkwgdG8gZmluZCB0aGUgcmlnaHQgY29udGV4dC5cbiAgICAgICAgcmVzb3VyY2UgPSBnZXRDb250ZXh0Rm9yRW50cnkoYCR7ZXMuZ2V0QmFzZVVSSSgpICsgZW50cnkuZ2V0SWQoKX0vYCxcbiAgICAgICAgICBlbnRyeS5nZXRFbnRyeVN0b3JlKCkpO1xuICAgICAgICByZXNvdXJjZS5fdXBkYXRlKF9kYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHR5cGVzLkdUX0xJU1Q6IC8vIFN5bmNocm9ub3VzIHJlc291cmNlLCBhc3luY2hyb25vdXMgbWV0aG9kcy5cbiAgICAgIGNhc2UgdHlwZXMuR1RfR1JPVVA6IC8vIFN5bmNocm9ub3VzIHJlc291cmNlLCBhc3luY2hyb25vdXMgbWV0aG9kcy5cbiAgICAgICAgaWYgKGVudHJ5LmlzR3JvdXAoKSkge1xuICAgICAgICAgIHJlc291cmNlID0gbmV3IEdyb3VwKHVyaSwgcnVyaSwgZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc291cmNlID0gbmV3IExpc3QodXJpLCBydXJpLCBlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9kYXRhLnJlc291cmNlICYmIF9kYXRhLnJlc291cmNlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgcmVzb3VyY2UuX3VwZGF0ZShfZGF0YS5yZXNvdXJjZSwgX2RhdGEucmVzb3VyY2UuY2hpbGRyZW4ubWFwKGNoaWxkID0+XG4gICAgICAgICAgICB1cGRhdGVPckNyZWF0ZShgJHtjcnVyaX0vZW50cnkvJHtjaGlsZC5lbnRyeUlkfWAsIGNoaWxkLCBlcykpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdHlwZXMuR1RfVVNFUjogLy8gQXN5bmNocm9ub3VzIHJlc291cmNlLCBzeW5jaHJvbm91cyBnZXR0ZXJzLlxuICAgICAgICBpZiAoZm9yY2UgfHwgX2RhdGEucmVzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIHJlc291cmNlID0gbmV3IFVzZXIodXJpLCBydXJpLCBlcywgX2RhdGEucmVzb3VyY2UgfHwge30pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0eXBlcy5HVF9TVFJJTkc6XG4gICAgICAgIGlmIChmb3JjZSB8fCBfZGF0YS5yZXNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzb3VyY2UgPSBuZXcgU3RyaW5nUmVzb3VyY2UodXJpLCBydXJpLCBlcywgX2RhdGEucmVzb3VyY2UgfHwgJycpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0eXBlcy5HVF9HUkFQSDogLy8gU3luYyBvciBBc3luYz9cbiAgICAgICAgaWYgKGZvcmNlIHx8IF9kYXRhLnJlc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICByZXNvdXJjZSA9IG5ldyBHcmFwaFJlc291cmNlKHVyaSwgcnVyaSwgZXMsIF9kYXRhLnJlc291cmNlIHx8IHt9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdHlwZXMuR1RfUElQRUxJTkU6IC8vIFN5bmMgb3IgQXN5bmM/XG4gICAgICAgIGlmIChmb3JjZSB8fCBfZGF0YS5yZXNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzb3VyY2UgPSBuZXcgUGlwZWxpbmUodXJpLCBydXJpLCBlcywgX2RhdGEucmVzb3VyY2UgfHwge30pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0eXBlcy5HVF9QSVBFTElORVJFU1VMVDogLy8gSWYgbG9jYWwsIFBpcGVsaW5lcmVzdWx0IHJlc291cmNlIGlzIGEgZmlsZS5cbiAgICAgIGNhc2UgdHlwZXMuR1RfTk9ORTogLy8gVXBsb2FkZWQgZmlsZS5cbiAgICAgICAgcmVzb3VyY2UgPSBuZXcgRmlsZVJlc291cmNlKHVyaSwgcnVyaSwgZXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICAgIGVudHJ5Ll9yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgIGZpeE5hbWVBbmREaXNhYmxlZChyZXNvdXJjZSwgX2RhdGEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChyZXNvdXJjZSA9PSBudWxsIHx8IF9kYXRhLnJlc291cmNlID09IG51bGwpIHtcbiAgICBmaXhOYW1lQW5kRGlzYWJsZWQocmVzb3VyY2UsIF9kYXRhKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocmVzb3VyY2UuX3VwZGF0ZSkge1xuICAgIGlmIChlbnRyeS5pc0xpc3QoKSB8fCBlbnRyeS5pc0dyb3VwKCkpIHtcbiAgICAgIGlmIChfZGF0YS5yZXNvdXJjZSAmJiBfZGF0YS5yZXNvdXJjZS5jaGlsZHJlbikge1xuICAgICAgICByZXNvdXJjZS5fdXBkYXRlKF9kYXRhLnJlc291cmNlLCBfZGF0YS5yZXNvdXJjZS5jaGlsZHJlbi5tYXAoY2hpbGQgPT5cbiAgICAgICAgICB1cGRhdGVPckNyZWF0ZShgJHtjcnVyaX0vZW50cnkvJHtjaGlsZC5lbnRyeUlkfWAsXG4gICAgICAgICAgICBjaGlsZCwgZW50cnkuZ2V0RW50cnlTdG9yZSgpKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNvdXJjZS5fdXBkYXRlKF9kYXRhLnJlc291cmNlKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IF91cGRhdGVFbnRyeSA9IChlbnRyeSwgZGF0YSkgPT4ge1xuICBlbnRyeS5fbWV0YWRhdGEgPSBkYXRhLm1ldGFkYXRhID8gbmV3IEdyYXBoKGRhdGEubWV0YWRhdGEpIDogbnVsbDtcbiAgZW50cnkuX2NhY2hlZEV4dGVybmFsTWV0YWRhdGEgPSBkYXRhWydjYWNoZWQtZXh0ZXJuYWwtbWV0YWRhdGEnXSA/IG5ldyBHcmFwaChkYXRhWydjYWNoZWQtZXh0ZXJuYWwtbWV0YWRhdGEnXSkgOiBudWxsO1xuICBlbnRyeS5faW5mZXJyZWRNZXRhZGF0YSA9IGRhdGEuaW5mZXJyZWQgPyBuZXcgR3JhcGgoZGF0YS5pbmZlcnJlZCkgOiBudWxsO1xuICBlbnRyeS5fZXh0cmFjdGVkTWV0YWRhdGEgPSBkYXRhWydleHRyYWN0ZWQtbWV0YWRhdGEnXSA/IG5ldyBHcmFwaChkYXRhWydleHRyYWN0ZWQtbWV0YWRhdGEnXSkgOiBudWxsO1xuICBlbnRyeS5fcmVsYXRpb24gPSBkYXRhLnJlbGF0aW9ucyA/IG5ldyBHcmFwaChkYXRhLnJlbGF0aW9ucykgOiBuZXcgR3JhcGgoKTtcbiAgZW50cnkuX3JpZ2h0cyA9IHRyYW5zZm9ybVJpZ2h0cyhkYXRhLnJpZ2h0cyk7XG4gIC8vIFNvbWV0aW1lcyB3ZSBnZXQgdGhlIG5hbWUgdGhhdCBpcyByZWFsbHkgcGFydCBvZiB0aGUgcmVzb3VyY2Ugd2l0aG91dCBnZXR0aW5nIHRoZSBmdWxsXG4gIC8vIHJlc291cmNlLCBpbiB0aGlzIGNhc2Ugd2Ugc3RvcmUgdGhpcyBpbiB0aGUgZW50cnlpbmZvLlxuICBpZiAoZGF0YS5uYW1lIHx8IChkYXRhLnJlc291cmNlICYmIGRhdGEucmVzb3VyY2UubmFtZSkpIHtcbiAgICBjb25zdCBlaSA9IGVudHJ5LmdldEVudHJ5SW5mbygpO1xuICAgIC8vIGVpLl9hbGlhcyA9IGRhdGEuYWxpYXM7XG4gICAgZWkuX25hbWUgPSBkYXRhLm5hbWUgfHwgZGF0YS5yZXNvdXJjZS5uYW1lO1xuICB9XG4gIC8vIFNvbWV0aW1lcyB3ZSBnZXQgdGhlIGRpc2FibGVkIHN0YXRlIHRoYXQgaXMgcmVhbGx5IHBhcnQgb2YgdGhlIHJlc291cmNlXG4gIC8vIHdpdGhvdXQgZ2V0dGluZyB0aGUgZnVsbCByZXNvdXJjZSwgaW4gdGhpcyBjYXNlIHdlIHN0b3JlIHRoaXMgaW4gdGhlIGVudHJ5aW5mby5cbiAgaWYgKGRhdGEuZGlzYWJsZWQgfHwgKGRhdGEucmVzb3VyY2UgJiYgZGF0YS5yZXNvdXJjZS5kaXNhYmxlZCkpIHtcbiAgICBjb25zdCBlaSA9IGVudHJ5LmdldEVudHJ5SW5mbygpO1xuICAgIGVpLl9kaXNhYmxlZCA9IGRhdGEuZGlzYWJsZWQgfHwgZGF0YS5yZXNvdXJjZS5kaXNhYmxlZDtcbiAgfVxuICByZXR1cm4gZW50cnk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZW50cnlTdG9yZVxuICogQHBhcmFtIGNvbnRleHRFbnRyeVVSSVxuICogQHJldHVybiB7c3RvcmUvQ29udGV4dH1cbiAqL1xuY29uc3QgZ2V0Q29udGV4dCA9IChlbnRyeVN0b3JlLCBjb250ZXh0RW50cnlVUkkpID0+IHtcbiAgY29uc3QgYmFzZVVSSSA9IGVudHJ5U3RvcmUuZ2V0QmFzZVVSSSgpO1xuICBjb25zdCBjb250ZXh0c0Jhc2VVUkkgPSBgJHtiYXNlVVJJfV9jb250ZXh0cy9lbnRyeS9gO1xuICBjb25zdCBjb250ZXh0SWQgPSBjb250ZXh0RW50cnlVUkkuc3Vic3RyKGNvbnRleHRzQmFzZVVSSS5sZW5ndGgpO1xuICBjb25zdCBjb250ZXh0cyA9IGVudHJ5U3RvcmUuZ2V0Q2FjaGVkQ29udGV4dHNJZHgoKTtcbiAgbGV0IGNvbnRleHQgPSBjb250ZXh0c1tjb250ZXh0SWRdO1xuICBpZiAoIWNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gbmV3IENvbnRleHQoY29udGV4dEVudHJ5VVJJLCBiYXNlVVJJICsgY29udGV4dElkLCBlbnRyeVN0b3JlKTtcbiAgICBjb250ZXh0c1tjb250ZXh0SWRdID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBlbnRyeVN0b3JlXG4gKiBAcGFyYW0gZW50cnlVUklcbiAqIEByZXR1cm4ge0xpc3R9XG4gKi9cbmNvbnN0IGdldExpc3QgPSAoZW50cnlTdG9yZSwgZW50cnlVUkkpID0+IHtcbiAgY29uc3QgY2FjaGUgPSBlbnRyeVN0b3JlLmdldENhY2hlKCk7XG4gIGxldCBlbnRyeSA9IGNhY2hlLmdldChlbnRyeVVSSSk7XG4gIGlmICghZW50cnkpIHsgIC8vIElmIG5vIGVudHJ5IGlzIGluIGNhY2hlLCBjcmVhdGUgYW4gZW1wdHkgZW50cnlcbiAgICAvLyBBc3N1bWluZyB0aGVyZSBpcyBhbiBpbmZvIG9iamVjdC4uLiBUT0RPIGNoZWNrIHNvIG5vdCBpbmZvX3N0dWIgcmVtYWlucyBpbiByZXN0IGxheWVyLlxuICAgIGNvbnN0IGVudHJ5SW5mbyA9IG5ldyBFbnRyeUluZm8oZW50cnlVUkksIG5ldyBHcmFwaCgpLCBlbnRyeVN0b3JlKTtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEZvckVudHJ5KGVudHJ5VVJJLCBlbnRyeVN0b3JlKTtcbiAgICBlbnRyeSA9IG5ldyBFbnRyeShjb250ZXh0LCBlbnRyeUluZm8pO1xuICAgIGNvbnN0IHJlc291cmNlVVJJID0gZW50cnlVUkkucmVwbGFjZSgnL2VudHJ5LycsICcvcmVzb3VyY2UvJyk7XG4gICAgZW50cnkuX3Jlc291cmNlID0gbmV3IExpc3QoZW50cnlVUkksIHJlc291cmNlVVJJLCBlbnRyeVN0b3JlKTtcbiAgICBjYWNoZS5jYWNoZShlbnRyeSwgdHJ1ZSk7IC8vIEFkZCB0byBjYWNoZSBzaWxlbnRseVxuICAgIGVudHJ5LnNldFJlZnJlc2hOZWVkZWQodHJ1ZSk7ICAvLyBNYWtlIHN1cmUgaXQgbmVlZHMgdG8gYmUgdXBkYXRlZCBiZWZvcmUgYWNjZXNzZWRcbiAgfVxuICAvLyBSZXR1cm5pbmcgb25seSB0aGUgbGlzdCB3aGljaCBoYXMgbm8gcmVmZXJlbmNlIHRvIHRoZSBlbnRyeSBpc29sYXRlcyB0aGUgZW50cnkgZnJvbVxuICAvLyBiZWluZyBhY2Nlc3NlZCBiZWZvcmUgcmVmcmVzaGVkLlxuICByZXR1cm4gZW50cnkuX3Jlc291cmNlO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGVudHJ5VVJJXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIGVudHJ5U3RvcmVcbiAqIEByZXR1cm4ge0VudHJ5fVxuICovXG5jb25zdCB1cGRhdGVPckNyZWF0ZSA9IChlbnRyeVVSSSwgZGF0YSwgZW50cnlTdG9yZSkgPT4ge1xuICBjb25zdCBjYWNoZSA9IGVudHJ5U3RvcmUuZ2V0Q2FjaGUoKTtcbiAgbGV0IGVudHJ5ID0gY2FjaGUuZ2V0KGVudHJ5VVJJKTtcbiAgaWYgKGVudHJ5KSB7XG4gICAgZW50cnkuZ2V0RW50cnlJbmZvKCkuc2V0R3JhcGgobmV3IEdyYXBoKGRhdGEuaW5mbykpO1xuICB9IGVsc2Uge1xuICAgIC8vIEFzc3VtaW5nIHRoZXJlIGlzIGFuIGluZm8gb2JqZWN0Li4uIFRPRE8gY2hlY2sgc28gbm90IGluZm9fc3R1YiByZW1haW5zIGluIHJlc3QgbGF5ZXIuXG4gICAgY29uc3QgZW50cnlJbmZvID0gbmV3IEVudHJ5SW5mbyhlbnRyeVVSSSwgbmV3IEdyYXBoKGRhdGEuaW5mbyksIGVudHJ5U3RvcmUpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yRW50cnkoZW50cnlVUkksIGVudHJ5U3RvcmUpO1xuICAgIGVudHJ5ID0gbmV3IEVudHJ5KGNvbnRleHQsIGVudHJ5SW5mbyk7XG4gIH1cbiAgX3VwZGF0ZUVudHJ5KGVudHJ5LCBkYXRhKTtcbiAgX3VwZGF0ZU9yQ3JlYXRlUmVzb3VyY2UoZW50cnksIGRhdGEpO1xuICBjYWNoZS5jYWNoZShlbnRyeSk7IC8vIEFkZCB0byBvciByZWZyZXNoIHRoZSBjYWNoZS5cbiAgcmV0dXJuIGVudHJ5O1xufTtcblxuLyoqXG4gKlxuICogQHR5cGUge191cGRhdGVPckNyZWF0ZVJlc291cmNlfVxuICovXG5jb25zdCB1cGRhdGVPckNyZWF0ZVJlc291cmNlID0gX3VwZGF0ZU9yQ3JlYXRlUmVzb3VyY2U7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7RW50cnl9IGVudHJ5XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICovXG5jb25zdCB1cGRhdGUgPSAoZW50cnksIGRhdGEpID0+IHtcbiAgZW50cnkuZ2V0RW50cnlJbmZvKCkuc2V0R3JhcGgobmV3IEdyYXBoKGRhdGEuaW5mbykpO1xuICBfdXBkYXRlT3JDcmVhdGVSZXNvdXJjZShlbnRyeSwgZGF0YSk7XG4gIF91cGRhdGVFbnRyeShlbnRyeSwgZGF0YSk7XG4gIGVudHJ5LmdldEVudHJ5U3RvcmUoKS5nZXRDYWNoZSgpLmNhY2hlKGVudHJ5KTsgLy8gQWRkIHRvIG9yIHJlZnJlc2ggdGhlIGNhY2hlLlxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGVudHJ5U3RvcmVcbiAqIEBwYXJhbSBxdWVyeVxuICogQHJldHVybiB7U2VhcmNoTGlzdH1cbiAqL1xuY29uc3QgY3JlYXRlU2VhcmNoTGlzdCA9IChlbnRyeVN0b3JlLCBxdWVyeSkgPT4gbmV3IFNlYXJjaExpc3QoZW50cnlTdG9yZSwgcXVlcnkpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIGxpc3RcbiAqIEBwYXJhbSBlbnRyeVN0b3JlXG4gKiBAcmV0dXJuIHtBcnJheS48RW50cnk+fVxuICovXG5jb25zdCBleHRyYWN0U2VhcmNoUmVzdWx0cyA9IChkYXRhLCBsaXN0LCBlbnRyeVN0b3JlKSA9PiB7XG4gIC8vIFVwZGF0ZSBvciBjcmVhdGUgYWxsIGVudHJpZXMgcmVjZWl2ZWRcbiAgLy8gVE9ETyBjaGFuZ2UgcmVzdCBhcGkgc28gb2Zmc2V0IGlzIGluc2lkZSBvZiByZXNvdXJjZS5cbiAgZGF0YS5yZXNvdXJjZS5vZmZzZXQgPSBkYXRhLnJlc291cmNlLm9mZnNldCB8fCBkYXRhLm9mZnNldDtcbiAgLy8gVE9ETyBjaGFuZ2UgcmVzdCBhcGkgc28gc2l6ZSBpcyBpbnNpZGUgb2YgcmVzb3VyY2UuXG4gIGRhdGEucmVzb3VyY2Uuc2l6ZSA9IGRhdGEucmVzb3VyY2Uuc2l6ZSB8fCBkYXRhLnJlc3VsdHM7XG4gIGNvbnN0IGJhc2VVUkkgPSBlbnRyeVN0b3JlLmdldEJhc2VVUkkoKTtcbiAgY29uc3QgZW50cmllcyA9IGRhdGEucmVzb3VyY2UuY2hpbGRyZW4ubWFwKGNoaWxkID0+IHVwZGF0ZU9yQ3JlYXRlKFxuICAgIGAke2Jhc2VVUkkgKyBjaGlsZC5jb250ZXh0SWR9L2VudHJ5LyR7Y2hpbGQuZW50cnlJZH1gLCBjaGlsZCwgZW50cnlTdG9yZSkpO1xuICBsaXN0Ll91cGRhdGUoZGF0YS5yZXNvdXJjZSwgZW50cmllcyk7XG4gIHJldHVybiBlbnRyaWVzO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGVudHJ5VVJJXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGdldENhY2hlZEV4dGVybmFsTWV0YWRhdGFVUkkgPSBlbnRyeVVSSSA9PiBlbnRyeVVSSS5yZXBsYWNlKCcvZW50cnkvJywgJy9jYWNoZWQtZXh0ZXJuYWwtbWV0YWRhdGEvJyk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2Yge0BsaW5rIHN0b3JlL2ZhY3RvcnkjZ2V0RW50cnlJZH1cbiAqL1xuY29uc3QgZ2V0SWQgPSB1cmkgPT4gdXJpLnN1YnN0cih1cmkubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gdXJpXG4gKiBAcGFyYW0gYmFzZVxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuY29uc3QgZ2V0RW50cnlJZCA9ICh1cmksIGJhc2UpID0+IHtcbiAgbGV0IF91cmkgPSB1cmk7XG4gIGlmIChiYXNlKSB7XG4gICAgX3VyaSA9IF91cmkuc3Vic3RyKGJhc2UubGVuZ3RoIC0gMSk7IC8vIGluY2x1ZGUgdGhlIC8gYmVmb3JlLlxuICB9XG4gIGNvbnN0IHJlcyA9IF91cmkubWF0Y2goL1xcLyhbXi9dKylcXC8oZW50cnl8cmVzb3VyY2V8bWV0YWRhdGF8cmVsYXRpb24pXFwvKFtePy9dKykoXFw/LiopPyQvKTtcbiAgaWYgKHJlcykge1xuICAgIHJldHVybiByZXNbM107XG4gIH0gZWxzZSBpZiAoX3VyaS5sYXN0SW5kZXhPZignLycpID09PSAwKSB7XG4gICAgcmV0dXJuIF91cmkuc3Vic3RyKDEpO1xuICB9IGVsc2UgaWYgKCFiYXNlKSB7XG4gICAgcmV0dXJuIF91cmkuc3Vic3RyKF91cmkubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gdXJpXG4gKiBAcGFyYW0gYmFzZVxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuY29uc3QgZ2V0Q29udGV4dElkID0gKHVyaSwgYmFzZSkgPT4ge1xuICBsZXQgX3VyaSA9IHVyaTtcbiAgaWYgKGJhc2UpIHtcbiAgICBfdXJpID0gX3VyaS5zdWJzdHIoYmFzZS5sZW5ndGggLSAxKTsgLy8gaW5jbHVkZSB0aGUgLyBiZWZvcmUuXG4gIH1cbiAgY29uc3QgcmVzID0gX3VyaS5tYXRjaCgvXFwvKFteL10rKVxcLyhlbnRyeXxyZXNvdXJjZXxtZXRhZGF0YXxyZWxhdGlvbilcXC8oW14/L10rKShcXD8uKik/JC8pO1xuICBpZiAocmVzKSB7XG4gICAgcmV0dXJuIHJlc1sxXTtcbiAgfSBlbHNlIGlmIChfdXJpLmluZGV4T2YoJy8nKSA9PT0gLTEgfHwgIWJhc2UpIHtcbiAgICByZXR1cm4gJ19jb250ZXh0cyc7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBlbnRyeVN0b3JlXG4gKiBAcGFyYW0gdXJpXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGdldEVudHJ5VVJJRnJvbVVSSSA9IChlbnRyeVN0b3JlLCB1cmkpID0+IHtcbiAgY29uc3QgYmFzZSA9IGVudHJ5U3RvcmUuZ2V0QmFzZVVSSSgpO1xuICByZXR1cm4gYCR7YmFzZSArIGdldENvbnRleHRJZCh1cmksIGJhc2UpfS9lbnRyeS8ke2dldEVudHJ5SWQodXJpLCBiYXNlKX1gO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGVudHJ5U3RvcmVcbiAqIEBwYXJhbSBjb250ZXh0SWRcbiAqIEBwYXJhbSBlbnRyeUlkXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGdldEVudHJ5VVJJID0gKGVudHJ5U3RvcmUsIGNvbnRleHRJZCwgZW50cnlJZCkgPT4gYCR7ZW50cnlTdG9yZS5nZXRCYXNlVVJJKCl9JHtjb250ZXh0SWR9L2VudHJ5LyR7ZW50cnlJZH1gO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZW50cnlTdG9yZVxuICogQHBhcmFtIHVyaVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBnZXRNZXRhZGF0YVVSSUZyb21VUkkgPSAoZW50cnlTdG9yZSwgdXJpKSA9PiB7XG4gIGNvbnN0IGJhc2UgPSBlbnRyeVN0b3JlLmdldEJhc2VVUkkoKTtcbiAgcmV0dXJuIGAke2Jhc2UgKyBnZXRDb250ZXh0SWQodXJpLCBiYXNlKX0vbWV0YWRhdGEvJHtnZXRFbnRyeUlkKHVyaSwgYmFzZSl9YDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBlbnRyeVN0b3JlXG4gKiBAcGFyYW0gY29udGV4dElkXG4gKiBAcGFyYW0gZW50cnlJZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBnZXRNZXRhZGF0YVVSSSA9IChlbnRyeVN0b3JlLCBjb250ZXh0SWQsIGVudHJ5SWQpID0+XG4gIGAke2VudHJ5U3RvcmUuZ2V0QmFzZVVSSSgpfSR7Y29udGV4dElkfS9lbnRyeS8ke2VudHJ5SWR9YDtcblxuLyoqXG4gKlxuICogQHBhcmFtIGVudHJ5U3RvcmVcbiAqIEBwYXJhbSBjb250ZXh0SWRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgZ2V0UmVzb3VyY2VCYXNlID0gKGVudHJ5U3RvcmUsIGNvbnRleHRJZCkgPT5cbiAgYCR7ZW50cnlTdG9yZS5nZXRCYXNlVVJJKCkgKyBjb250ZXh0SWR9L3Jlc291cmNlL2A7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBlbnRyeVN0b3JlXG4gKiBAcGFyYW0gY29udGV4dElkXG4gKiBAcGFyYW0gZW50cnlJZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBnZXRSZXNvdXJjZVVSSSA9IChlbnRyeVN0b3JlLCBjb250ZXh0SWQsIGVudHJ5SWQpID0+IHtcbiAgaWYgKGNvbnRleHRJZCA9PT0gJ19jb250ZXh0cycpIHtcbiAgICByZXR1cm4gZW50cnlTdG9yZS5nZXRCYXNlVVJJKCkgKyBlbnRyeUlkO1xuICB9XG4gIHJldHVybiBgJHtlbnRyeVN0b3JlLmdldEJhc2VVUkkoKSArIGNvbnRleHRJZH0vcmVzb3VyY2UvJHtlbnRyeUlkfWA7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIGNvbnRleHRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgZ2V0VVJJRnJvbUNyZWF0ZWQgPSAoZGF0YSwgY29udGV4dCkgPT5cbiAgYCR7Y29udGV4dC5nZXRSZXNvdXJjZVVSSSgpfS9lbnRyeS8ke2RhdGEuZW50cnlJZH1gO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZW50cnlVUklcbiAqIEBwYXJhbSBwYXJhbXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgZ2V0RW50cnlMb2FkVVJJID0gKGVudHJ5VVJJLCBwYXJhbXMpID0+IHtcbiAgY29uc3QgX3BhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgbGV0IHN0ckwgPSAnJztcbiAgaWYgKF9wYXJhbXMubGltaXQgPiAwIHx8IF9wYXJhbXMubGltaXQgPT09IC0xKSB7XG4gICAgc3RyTCA9IGAmbGltaXQ9JHtfcGFyYW1zLmxpbWl0fWA7XG4gIH0gZWxzZSB7XG4gICAgc3RyTCA9IGAmbGltaXQ9JHtkZWZhdWx0TGltaXR9YDtcbiAgfVxuICBjb25zdCBzdHJPID0gX3BhcmFtcy5vZmZzZXQgPT0gbnVsbCB8fCBfcGFyYW1zLm9mZnNldCA9PT0gMCA/ICcnIDogYCZvZmZzZXQ9JHtfcGFyYW1zLm9mZnNldH1gO1xuICBjb25zdCBzb3J0ID0gX3BhcmFtcy5zb3J0ID09IG51bGwgPyBzb3J0T2JqIDogX3BhcmFtcy5zb3J0O1xuICBsZXQgc3RyU29ydCA9ICcnO1xuICBsZXQgc3RyRGVzYyA9ICcnO1xuICBsZXQgc3RyUHJpbyA9ICcnO1xuICBpZiAoc29ydCAhPSBudWxsKSB7XG4gICAgc3RyU29ydCA9IHNvcnQuc29ydEJ5ID09IG51bGwgPyAnJyA6IGAmc29ydD0ke3NvcnQuc29ydEJ5fWA7XG4gICAgc3RyRGVzYyA9IHNvcnQuZGVzY2VuZGluZyA9PT0gdHJ1ZSA/ICcmb3JkZXI9ZGVzYycgOiAnJztcbiAgICBzdHJQcmlvID0gc29ydC5wcmlvID09IG51bGwgPyAnJyA6IGAmcHJpbz0ke3NvcnQucHJpb31gO1xuICAgIC8vIFRPRE8gbGFuZyByZW1haW5zLlxuICB9XG4gIHJldHVybiBgJHtlbnRyeVVSSX0/aW5jbHVkZUFsbCR7c3RyTH0ke3N0ck99JHtzdHJTb3J0fSR7c3RyRGVzY30ke3N0clByaW99YDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwcm90b3R5cGVFbnRyeVxuICogQHBhcmFtIHBhcmVudExpc3RFbnRyeVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBnZXRFbnRyeUNyZWF0ZVVSSSA9IChwcm90b3R5cGVFbnRyeSwgcGFyZW50TGlzdEVudHJ5KSA9PiB7XG4gIGxldCB1cmkgPSBgJHtwcm90b3R5cGVFbnRyeS5nZXRDb250ZXh0KCkuZ2V0UmVzb3VyY2VVUkkoKX0/YDtcbiAgaWYgKHByb3RvdHlwZUVudHJ5KSB7XG4gICAgY29uc3QgZWkgPSBwcm90b3R5cGVFbnRyeS5nZXRFbnRyeUluZm8oKTtcbiAgICBpZiAocHJvdG90eXBlRW50cnkuZ2V0U3BlY2lmaWNJZCgpICE9IG51bGwpIHtcbiAgICAgIHVyaSA9IGAke3VyaX1pZD0ke3Byb3RvdHlwZUVudHJ5LmdldFNwZWNpZmljSWQoKX0mYDtcbiAgICB9XG4gICAgaWYgKHByb3RvdHlwZUVudHJ5LmlzTGluaygpKSB7XG4gICAgICB1cmkgPSBgJHt1cml9cmVzb3VyY2U9JHtlbmNvZGVVUklDb21wb25lbnQocHJvdG90eXBlRW50cnkuZ2V0UmVzb3VyY2VVUkkoKSl9JmA7XG4gICAgfVxuICAgIGlmIChwcm90b3R5cGVFbnRyeS5pc1JlZmVyZW5jZSgpIHx8IHByb3RvdHlwZUVudHJ5LmlzTGlua1JlZmVyZW5jZSgpKSB7IC8vIGV4dGVybmFsIG1ldGFkYXRhXG4gICAgICB1cmkgPSBgJHt1cml9cmVzb3VyY2U9JHtlbmNvZGVVUklDb21wb25lbnQocHJvdG90eXBlRW50cnkuZ2V0UmVzb3VyY2VVUkkoKSl9JmA7XG4gICAgICB1cmkgPSBgJHt1cml9Y2FjaGVkLWV4dGVybmFsLW1ldGFkYXRhPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGVpLmdldEV4dGVybmFsTWV0YWRhdGFVUkkoKSl9JmA7XG4gICAgfVxuICAgIGlmIChlaS5nZXRFbnRyeVR5cGUoKSAhPT0gdHlwZXMuRVRfTE9DQUwpIHsgLy8gbG9jYWwsIGxpbmssIGxpbmtyZWZlcmVuY2UsIHJlZmVyZW5jZVxuICAgICAgdXJpID0gYCR7dXJpfWVudHJ5dHlwZT0ke2VpLmdldEVudHJ5VHlwZSgpLnRvTG93ZXJDYXNlKCl9JmA7XG4gICAgfVxuICAgIC8vIGluZm9ybWF0aW9ucmVzb3VyY2UsIG5hbWVkcmVzb3VyY2VcbiAgICBpZiAoZWkuZ2V0UmVzb3VyY2VUeXBlKCkgIT09IHR5cGVzLlJUX0lORk9STUFUSU9OUkVTT1VSQ0UpIHtcbiAgICAgIC8vIFRPRE8gQnVnIGluIFJFU1QgbGF5ZXIsIHNob3VsZCBiZSByZXNvdXJjZXR5cGUsIGlzIG5vdyBpbmZvcm1hdGlvbnJlc291cmNlIGlubnN0ZWFkXG4gICAgICB1cmkgPSBgJHt1cml9aW5mb3JtYXRpb25yZXNvdXJjZT1mYWxzZSZgO1xuICAgIH1cbiAgICBpZiAoZWkuZ2V0R3JhcGhUeXBlKCkgIT09IHR5cGVzLkdUX05PTkUpIHtcbiAgICAgIHVyaSA9IGAke3VyaX1ncmFwaHR5cGU9JHtlaS5nZXRHcmFwaFR5cGUoKS50b0xvd2VyQ2FzZSgpfSZgO1xuICAgIH1cbiAgfVxuICBpZiAocGFyZW50TGlzdEVudHJ5KSB7XG4gICAgdXJpID0gYCR7dXJpfWxpc3Q9JHtwYXJlbnRMaXN0RW50cnkuZ2V0UmVzb3VyY2VVUkkoKX0mYDtcbiAgfVxuXG4gIHJldHVybiB1cmkuc2xpY2UoMCwgLTEpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHByb3RvdHlwZUVudHJ5XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGdldEVudHJ5Q3JlYXRlUG9zdERhdGEgPSAocHJvdG90eXBlRW50cnkpID0+IHtcbiAgY29uc3QgcG9zdERhdGEgPSB7fTtcbiAgbGV0IGVtcHR5ID0gdHJ1ZTtcbiAgY29uc3QgbWQgPSBwcm90b3R5cGVFbnRyeS5nZXRNZXRhZGF0YSgpO1xuICBpZiAobWQgIT0gbnVsbCAmJiAhbWQuaXNFbXB0eSgpKSB7XG4gICAgcG9zdERhdGEubWV0YWRhdGEgPSBtZC5leHBvcnRSREZKU09OKCk7XG4gICAgZW1wdHkgPSBmYWxzZTtcbiAgfVxuICBjb25zdCByZSA9IHByb3RvdHlwZUVudHJ5LmdldFJlc291cmNlKHRydWUpO1xuICBpZiAocmUgIT0gbnVsbCAmJiByZS5nZXRTb3VyY2UgIT0gbnVsbCkge1xuICAgIHBvc3REYXRhLnJlc291cmNlID0gcmUuZ2V0U291cmNlKCk7XG4gICAgZW1wdHkgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBlaSA9IHByb3RvdHlwZUVudHJ5LmdldEVudHJ5SW5mbygpLmdldEdyYXBoKCk7XG4gIGlmIChlaSAhPSBudWxsICYmICFlaS5pc0VtcHR5KCkpIHtcbiAgICBwb3N0RGF0YS5pbmZvID0gZWkuZXhwb3J0UkRGSlNPTigpO1xuICAgIGVtcHR5ID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgY2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSA9IHByb3RvdHlwZUVudHJ5LmdldENhY2hlZEV4dGVybmFsTWV0YWRhdGEoKTtcbiAgaWYgKGNhY2hlZEV4dGVybmFsTWV0YWRhdGEgIT0gbnVsbCAmJiAhY2FjaGVkRXh0ZXJuYWxNZXRhZGF0YS5pc0VtcHR5KCkpIHtcbiAgICBwb3N0RGF0YVsnY2FjaGVkLWV4dGVybmFsLW1ldGFkYXRhJ10gPSBjYWNoZWRFeHRlcm5hbE1ldGFkYXRhLmV4cG9ydFJERkpTT04oKTtcbiAgICBlbXB0eSA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBlbXB0eSA/ICcnIDogSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGVudHJ5XG4gKiBAcGFyYW0gZnJvbUxpc3RFbnRyeVxuICogQHBhcmFtIHRvTGlzdEVudHJ5XG4gKiBAcGFyYW0gYmFzZVVSSVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBnZXRNb3ZlVVJJID0gKGVudHJ5LCBmcm9tTGlzdEVudHJ5LCB0b0xpc3RFbnRyeSwgYmFzZVVSSSkgPT4ge1xuICBjb25zdCBlbnRyeVVSSSA9IGVudHJ5LmdldFVSSSgpLnN1YnN0cihiYXNlVVJJLmxlbmd0aCk7IC8vIE9ubHkgc2VuZCBzb21ldGhpbmcgbGlrZSAzL2VudHJ5LzJcbiAgY29uc3QgZnVyaSA9IGZyb21MaXN0RW50cnkuZ2V0UmVzb3VyY2VVUkkoKS5zdWJzdHIoYmFzZVVSSS5sZW5ndGgpO1xuICByZXR1cm4gYCR7dG9MaXN0RW50cnkuZ2V0UmVzb3VyY2VVUkkoKX0/bW92ZUVudHJ5PSR7ZW50cnlVUkl9JmZyb21MaXN0PSR7ZnVyaX1gO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGJhc2VVUklcbiAqIEBwYXJhbSB1cmlcbiAqIEBwYXJhbSBmb3JtYXRIaW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGdldFByb3h5VVJJID0gKGJhc2VVUkksIHVyaSwgZm9ybWF0SGludCkgPT4ge1xuICBsZXQgdXJsID0gYCR7YmFzZVVSSX1wcm94eT91cmw9JHtlbmNvZGVVUklDb21wb25lbnQodXJpKX1gO1xuICBpZiAoZm9ybWF0SGludCAhPSBudWxsKSB7XG4gICAgdXJsICs9IGAmZnJvbUZvcm1hdD0ke2Zvcm1hdEhpbnR9YDtcbiAgfVxuICByZXR1cm4gdXJsO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHVyaVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBnZXRQdXRGaWxlVVJJID0gdXJpID0+XG4gIGAke3VyaSArICh1cmkuaW5kZXhPZignPycpIDwgMCA/ICc/JyA6ICcmJyl9bWV0aG9kPXB1dCZ0ZXh0YXJlYT10cnVlYDtcblxuLyoqXG4gKiBAcGFyYW0gc29ydE9iamVjdFxuICovXG5jb25zdCBzZXRTb3J0ID0gKHNvcnRPYmplY3QpID0+IHtcbiAgc29ydE9iaiA9IHNvcnRPYmplY3Q7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3tzb3J0Qnk6IHN0cmluZywgcHJpbzogc3RyaW5nfX1cbiAqL1xuY29uc3QgZ2V0U29ydCA9ICgpID0+IHNvcnRPYmo7XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuY29uc3QgZ2V0RGVmYXVsdExpbWl0ID0gKCkgPT4gZGVmYXVsdExpbWl0O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gbGltaXRcbiAqL1xuY29uc3Qgc2V0RGVmYXVsdExpbWl0ID0gKGxpbWl0KSA9PiB7XG4gIGRlZmF1bHRMaW1pdCA9IGxpbWl0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRDb250ZXh0LFxuICBnZXRMaXN0LFxuICB1cGRhdGVPckNyZWF0ZSxcbiAgdXBkYXRlT3JDcmVhdGVSZXNvdXJjZSxcbiAgdXBkYXRlLFxuICBjcmVhdGVTZWFyY2hMaXN0LFxuICBleHRyYWN0U2VhcmNoUmVzdWx0cyxcbiAgZ2V0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YVVSSSxcbiAgZ2V0SWQsXG4gIGdldEVudHJ5SWQsXG4gIGdldENvbnRleHRJZCxcbiAgZ2V0RW50cnlVUklGcm9tVVJJLFxuICBnZXRFbnRyeVVSSSxcbiAgZ2V0TWV0YWRhdGFVUklGcm9tVVJJLFxuICBnZXRNZXRhZGF0YVVSSSxcbiAgZ2V0UmVzb3VyY2VCYXNlLFxuICBnZXRSZXNvdXJjZVVSSSxcbiAgZ2V0VVJJRnJvbUNyZWF0ZWQsXG4gIGdldEVudHJ5TG9hZFVSSSxcbiAgZ2V0RW50cnlDcmVhdGVVUkksXG4gIGdldEVudHJ5Q3JlYXRlUG9zdERhdGEsXG4gIGdldE1vdmVVUkksXG4gIGdldFByb3h5VVJJLFxuICBnZXRQdXRGaWxlVVJJLFxuICBzZXRTb3J0LFxuICBnZXRTb3J0LFxuICBnZXREZWZhdWx0TGltaXQsXG4gIHNldERlZmF1bHRMaW1pdCxcbn07XG4iLCJpbXBvcnQgZmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciByZXNvdXJjZXMgY29udGFpbmVkIGJ5IGVudHJpZXMsIGRvIG5vdCB1c2UgZGlyZWN0bHksXG4gKiBpbnN0ZWFkIHVzZSBhIHN1YmNsYXNzLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL1Jlc291cmNlXG4gKiBAc2VlIHN1YmNsYXNzIHtAbGluayBzdG9yZS9Db250ZXh0fVxuICogQHNlZSBzdWJjbGFzcyB7QGxpbmsgc3RvcmUvTGlzdH1cbiAqIEBzZWUgc3ViY2xhc3Mge0BsaW5rIHN0b3JlL0dyYXBofVxuICogQHNlZSBzdWJjbGFzcyB7QGxpbmsgc3RvcmUvU3RyaW5nfVxuICogQHNlZSBzdWJjbGFzcyB7QGxpbmsgc3RvcmUvRmlsZX1cbiAqIEBzZWUgc3ViY2xhc3Mge0BsaW5rIHN0b3JlL1VzZXJ9XG4gKiBAc2VlIHN1YmNsYXNzIHtAbGluayBzdG9yZS9Hcm91cH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzb3VyY2Uge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5VVJJIC0gVVJJIHRvIGFuIGVudHJ5IHdoZXJlIHRoaXMgcmVzb3VyY2UgaXMgY29udGFpbmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VVUkkgLSBVUkkgdG8gdGhlIHJlc291cmNlLlxuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5U3RvcmV9IGVudHJ5U3RvcmUgLSB0aGUgQVBJJ3MgcmVwb3NpdG9yeSBpbnN0YW5jZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJ5VVJJLCByZXNvdXJjZVVSSSwgZW50cnlTdG9yZSkge1xuICAgIHRoaXMuX2VudHJ5VVJJID0gZW50cnlVUkk7XG4gICAgdGhpcy5fcmVzb3VyY2VVUkkgPSByZXNvdXJjZVVSSTtcbiAgICB0aGlzLl9lbnRyeVN0b3JlID0gZW50cnlTdG9yZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIEFQSSdzIHJlcG9zaXRvcnkgaW5zdGFuY2VcbiAgICpcbiAgICogQHJldHVybnMge3N0b3JlL0VudHJ5U3RvcmV9XG4gICAqL1xuICBnZXRFbnRyeVN0b3JlKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVN0b3JlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgZW50cnkgdGhhdCBjb250YWlucyB0aGlzIHJlc291cmNlLiBBc2tpbmcgZm9yIHRoZSBlbnRyeSBkaXJlY3RseVxuICAgKiAoZGlyZWN0PXRydWUsIHJhdGhlciB0aGFuIGdldHRpbmdcbiAgICogaXQgYXN5bmNocm9ub3VzbHkgdmlhIGEgcHJvbWlzZSkgc2hvdWxkIHdvcmsgZm9yIGFsbCByZXNvdXJjZXMgZXhjZXB0IGNvbnRleHQgcmVzb3VyY2VzLlxuICAgKlxuICAgKiA+IF8qKkFkdmFuY2VkIGV4cGxhbmF0aW9uOioqXG4gICAqID4gQ29udGV4dCByZXNvdXJjZXMgYXJlIG9mdGVuIGNyZWF0ZWQgb3Bwb3J0dW5pc3RpY2FsbHkgYnkgdGhlIEFQSSB3aXRob3V0IGFsc29cbiAgICogPiBsb2FkaW5nIHRoZSBjb250ZXh0IGVudHJ5IGFsb25nIHdpdGggaXQsIGUuZy4gd2hlbiBsb2FkaW5nIGVudHJpZXMgZHVyaW5nIGEgc2VhcmNoXG4gICAqID4gb3BlcmF0aW9uLiBUaGUgcmVhc29uIHdoeSB0aGUgY29udGV4dCBlbnRyaWVzIGFyZSBub3QgbG9hZGVkIGFsb25nIHdpdGggdGhlIGNvbnRleHRcbiAgICogPiByZXNvdXJjZSBpcyB0aGF0IHN1Y2ggYW4gYXBwcm9hY2gsIGRlcGVuZGluZyBvbiB0aGUgdXNlLWNhc2UsIG1heSBsZWFkIHRvIGRyYW1hdGljXG4gICAqID4gaW5jcmVhc2VzIGluIHRoZSBhbW91bnQgb2YgcmVxdWVzdHMgdG8gdGhlIHJlcG9zaXRvcnkuX1xuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxzdG9yZS9FbnRyeT58c3RvcmUvRW50cnl9IGlmIGRpcmVjdD10cnVlIGFuIEVudHJ5IGlzIHJldHVybmVkIChvciB1bmRlZmluZWQgaWYgbm90XG4gICAqIGluIGNhY2hlLCBvbmx5IGhhcHBlbnMgc29tZXRpbWVzIGZvciBDb250ZXh0cykgb3RoZXJ3aXNlIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IG9uXG4gICAqIHN1Y2Nlc3MgcHJvdmlkZXMgdGhlIGVudHJ5IGZvciB0aGlzIHJlc291cmNlLlxuICAgKi9cbiAgZ2V0RW50cnkoZGlyZWN0ID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlTdG9yZS5nZXRFbnRyeSh0aGlzLl9lbnRyeVVSSSwgeyBkaXJlY3QgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHJlc291cmNlcyBvd24gVVJJLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0UmVzb3VyY2VVUkkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlVVJJO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBVUkkgdG8gdGhlIGVudHJ5IGNvbnRhaW5pbmcgdGhpcyByZXNvdXJjZS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldEVudHJ5VVJJKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVVSSTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaWQgZm9yIHRoZSBlbnRyeSBjb250YWluaW5nIHRoaXMgcmVzb3VyY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRJZCgpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5nZXRFbnRyeUlkKHRoaXMuX2VudHJ5VVJJKTtcbiAgfVxuXG4gIF91cGRhdGUoZGF0YSkge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB9XG5cbiAgZ2V0U291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG59XG4iLCJjb25zdCBuc3MgPSB7XG4gIGljYWw6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAyLzEyL2NhbC9pY2FsIycsXG4gIHZjYXJkOiAnaHR0cDovL3d3dy53My5vcmcvMjAwNi92Y2FyZC9ucyMnLFxuICBkY3Rlcm1zOiAnaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zLycsXG4gIHNrb3M6ICdodHRwOi8vd3d3LnczLm9yZy8yMDA0LzAyL3Nrb3MvY29yZSMnLFxuICByZGZzOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hIycsXG4gIHJkZjogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnLFxuICBvd2w6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAyLzA3L293bCMnLFxuICB2czogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDMvMDYvc3ctdm9jYWItc3RhdHVzL25zIycsXG4gIGZvYWY6ICdodHRwOi8veG1sbnMuY29tL2ZvYWYvMC4xLycsXG4gIHdvdDogJ2h0dHA6Ly94bWxucy5jb20vd290LzAuMS8nLFxuICBkYzogJ2h0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvJyxcbiAgeHNkOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjJyxcbiAgZGNhdDogJ2h0dHA6Ly93d3cudzMub3JnL25zL2RjYXQjJyxcbiAgb3JnOiAnaHR0cDovL3d3dy53My5vcmcvbnMvb3JnIycsXG4gIGduOiAnaHR0cDovL3d3dy5nZW9uYW1lcy5vcmcvb250b2xvZ3kjJyxcbiAgbG9jbjogJ2h0dHA6Ly93d3cudzMub3JnL25zL2xvY24jJyxcbiAgc2NoZW1hOiAnaHR0cDovL3NjaGVtYS5vcmcvJyxcbiAgZXg6ICdodHRwOi8vZXhhbXBsZS5jb20vJyxcbiAgZ3NwOiAnaHR0cDovL3d3dy5vcGVuZ2lzLm5ldC9vbnQvZ2Vvc3BhcnFsIycsXG4gIG9kcnM6ICdodHRwOi8vc2NoZW1hLnRoZW9kaS5vcmcvb2RycyMnLFxufTtcbmxldCBuc2NvdW50ZXIgPSAwO1xuY29uc3QgX25zaWZ5ID0gKG5zLCBleHBhbmRlZCwgbG9jYWxuYW1lKSA9PiB7XG4gIGlmICghbnNzW25zXSkge1xuICAgIG5zc1tuc10gPSBleHBhbmRlZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFiYnJldjogbnMsXG4gICAgbnM6IGV4cGFuZGVkLFxuICAgIGxvY2FsbmFtZSxcbiAgICBmdWxsOiBleHBhbmRlZCArIGxvY2FsbmFtZSxcbiAgICBwcmV0dHk6IGAke25zfToke2xvY2FsbmFtZX1gLFxuICB9O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW4gdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqIGFiYnJldiAtIHRoZSBzaG9ydCBuYW1lc3BhY2VcbiAqIG5zIC0gd2hhdCB0aGUgc2hvcnQgbmFtZXNwYWNlIGFiYnJldmlhdGVzXG4gKiBsb2NhbG5hbWUgLSB0aGUgbG9jYWxuYW1lIG9mIHRoZSBVUkksIGdpdmVuIHRoZSBjdXJyZW50IG5hbWVzcGFjZVxuICogZnVsbCAtIHRoZSBvcmlnaW5hbCBVUklcbiAqIHByZXR0eSAtIHRoZSBzaG9ydGVuZWQgdmVyc2lvbiBvZiB0aGUgVVJJIHVzaW5nIHRoZSBhYmJyZXZpYXRpb24sIGUuZy4gZm9hZjpuYW1lXG4gKlxuICogQHBhcmFtIHVyaVxuICogQHJldHVybiB7e2FiYnJldiwgbnMsIGxvY2FsbmFtZSwgZnVsbCwgcHJldHR5fX1cbiAqL1xuY29uc3QgbnNpZnkgPSAodXJpKSA9PiB7XG4gIGNvbnN0IGVucyA9IE9iamVjdC5rZXlzKG5zcykuZmluZChucyA9PiB1cmkuaW5kZXhPZihuc3NbbnNdKSA9PT0gMCk7XG4gIGlmIChlbnMpIHtcbiAgICByZXR1cm4gX25zaWZ5KGVucywgbnNzW2Vuc10sIHVyaS5zdWJzdHJpbmcobnNzW2Vuc10ubGVuZ3RoKSk7XG4gIH1cblxuICBsZXQgc2xhc2ggPSB1cmkubGFzdEluZGV4T2YoJy8nKTtcbiAgY29uc3QgaGFzaCA9IHVyaS5sYXN0SW5kZXhPZignIycpO1xuICBpZiAoaGFzaCA+IHNsYXNoKSB7XG4gICAgc2xhc2ggPSBoYXNoO1xuICB9XG4gIG5zY291bnRlciArPSAxO1xuICByZXR1cm4gX25zaWZ5KGBucyR7bnNjb3VudGVyfWAsIHVyaS5zdWJzdHJpbmcoMCwgc2xhc2ggKyAxKSwgdXJpLnN1YnN0cmluZyhzbGFzaCArIDEpKTtcbn07XG5cbi8qKlxuICogT25seSBhYmJyZXZpYXRlcyBhIFVSSSBpZiBpdCBjYW4gYmUgbWF0Y2hlZCB0byBvbmUgb2YgdGhlIGFscmVhZHkgcmVnaXN0ZXJlZCBuYW1lc3BhY2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgZm9yIGV4YW1wbGU6IGh0dHA6Ly94bWxucy5jb20vZm9hZi8wLjEvbmFtZVxuICogQHJldHVybiB7c3RyaW5nfSBpbiB0aGUgZm9ybSBcImZvYWY6bmFtZVwiXG4gKi9cbmNvbnN0IHNob3J0ZW5Lbm93biA9ICh1cmkpID0+IHtcbiAgY29uc3QgZW5zID0gT2JqZWN0LmtleXMobnNzKS5maW5kKG5zID0+IHVyaS5pbmRleE9mKG5zc1tuc10pID09PSAwKTtcbiAgaWYgKGVucykge1xuICAgIHJldHVybiBfbnNpZnkoZW5zLCBuc3NbZW5zXSwgdXJpLnN1YnN0cmluZyhuc3NbZW5zXS5sZW5ndGgpKS5wcmV0dHk7XG4gIH1cbiAgcmV0dXJuIHVyaTtcbn07XG5cbi8qKlxuICogQWJicmV2aWF0ZXMgYWxsIHVyaXMsIGlmIG5vIG1hdGNoaW5nIG5hbWVzcGFjZSBpcyBmb3VuZCBhIHN1aXRhYmxlIG9uZSBpcyBnZW5lcmF0ZWQgYW5kXG4gKiByZWdpc3RlcmVkIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBmb3IgZXhhbXBsZTogaHR0cDovL3htbG5zLmNvbS9mb2FmLzAuMS9uYW1lXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGluIHRoZSBmb3JtIFwiZm9hZjpuYW1lXCIgb3IgXCJuczE6bmFtZVwiIGlmIGZvYWYgd291bGQgbm90IGJlIHJlZ2lzdGVyZWQgYWxyZWFkeS5cbiAqL1xuY29uc3Qgc2hvcnRlbiA9IHVyaSA9PiBuc2lmeSh1cmkpLnByZXR0eTtcblxuLyoqXG4gKiBFeHBhbmRzIGFuIGFiYnJldmlhdGVkIFVSSSBmcm9tIHRoZSBsaXN0IG9mIHJlZ2lzdGVyZWQgbmFtZXNwYWNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbnN1cmkgYSBuYW1lc3BhY2VkIHVyaSBsaWtlIFwiZm9hZjpuYW1lXCJcbiAqIEByZXR1cm4ge3N0cmluZ30gYSBmdWxsIFVSSSBsaWtlIFwiaHR0cDovL3htbG5zLmNvbS9mb2FmLzAuMS9uYW1lXCJcbiAqL1xuY29uc3QgZXhwYW5kID0gKG5zdXJpKSA9PiB7XG4gIGNvbnN0IGFyciA9IG5zdXJpLnNwbGl0KCc6Jyk7XG4gIGlmIChhcnIubGVuZ3RoID09PSAyICYmIG5zcy5oYXNPd25Qcm9wZXJ0eShhcnJbMF0pKSB7XG4gICAgcmV0dXJuIG5zc1thcnJbMF1dICsgYXJyWzFdO1xuICB9XG4gIHJldHVybiBuc3VyaTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgbmFtZXNwYWNlLCBib3RoIHRoZSBhYmJyZXZpYXRpb24gYW5kIGl0cyBleHBhbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5zIHRoZSBhYmJyZXZpYXRpb24sIGUuZy4gXCJmb2FmXCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmdWxsIHRoZSBleHBhbnNpb24gZm9yIHRoZSBhYmJyZXZpYXRpb24sIGUuZy4gXCJodHRwOi8veG1sbnMuY29tL2ZvYWYvMC4xL25hbWVcIlxuICovXG5jb25zdCBhZGQgPSAobnMsIGZ1bGwpID0+IHtcbiAgaWYgKHR5cGVvZiBucyA9PT0gJ3N0cmluZycpIHtcbiAgICBuc3NbbnNdID0gZnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbnMgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXMobnMpLmZvckVhY2goKG5za2V5KSA9PiB7XG4gICAgICBuc3NbbnNrZXldID0gbnNbbnNrZXldO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgY3VycmVudGx5IHJlZ2lzdGVyZWQgbmFtZXNwYWNlcyBhcyBhbiBvYmplY3Qgd2l0aCBhYmJyZXZpYXRpb25zIGFzXG4gKiBrZXlzIGFuZCB0aGVpciBleHBhbnNpb25zIGFzIHRoZSB2YWx1ZXMuXG4gKlxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5jb25zdCByZWdpc3RyeSA9ICgpID0+IG5zcztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5zaWZ5LFxuICAgIHNob3J0ZW5Lbm93bixcbiAgICBzaG9ydGVuLFxuICAgIGV4cGFuZCxcbiAgICBhZGQsXG4gICAgcmVnaXN0cnksXG59O1xuIiwiLy8gRm91ciBoZWxwZXIgbWV0aG9kcywgZnJvbSBkb2pvLlxuY29uc3QgaXNPYmplY3QgPSBpdCA9PiBpdCAhPT0gdW5kZWZpbmVkICYmXG4gIChpdCA9PT0gbnVsbCB8fCB0eXBlb2YgaXQgPT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoaXQpIHx8IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzU3RyaW5nID0gaXQgPT4gKHR5cGVvZiBpdCA9PT0gJ3N0cmluZycgfHwgaXQgaW5zdGFuY2VvZiBTdHJpbmcpO1xuXG5jb25zdCBpc0Z1bmN0aW9uID0gaXQgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxuY29uc3Qgc3RhdGVtZW50RXF1YWxzID0gKHMxLCBzMikgPT5cbiAgczEucyA9PT0gczIucyAmJiBzMS5wID09PSBzMi5wICYmIG9iamVjdEVxdWFscyhzMS5vLCBzMi5vKTtcblxuLyoqXG4gKiBBZGRzIGEgc3RhdGVtZW50IHRvIGEgZ3JhcGggb2JqZWN0IGFjY29yZGluZyB0byB0aGUgcmRmL2pzb24gc3BlY2lmaWNhdGlvbi5cbiAqIER1cGxpY2F0ZXMgb2YgdGhlIHNhbWUgc3RhdGVtZW50IGFyZSBub3QgYWxsb3dlZCBpbiBhIGdyYXBoLFxuICogaGVuY2UgdGhleSBhcmUgbm90IGFsbG93ZWQgdG8gYmUgYWRkZWQuXG4gKlxuICogVGhlIG9iamVjdCBpbiB0aGUgc3RhdGVtZW50IGFyZSByZXByZXNlbnRlZCB2aWEgYW4gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZzpcbiAqIDx1bD48bGk+dHlwZSAtIG9uZSBvZiAndXJpJywgJ2xpdGVyYWwnIG9yICdibm9kZScgKDxiPnJlcXVpcmVkPC9iPiBhbmQgbXVzdCBiZSBsb3dlcmNhc2UpLjwvbGk+XG4gKiA8bGk+dmFsdWUgLSB0aGUgbGV4aWNhbCB2YWx1ZSBvZiB0aGUgb2JqZWN0ICg8Yj5yZXF1aXJlZDwvYj4sIGZ1bGwgVVJJcyBzaG91bGQgYmUgdXNlZCxcbiAqIG5vdCBuYW1lc3BhY2VkIHVzaW5nIGFiYnJldmlhdGlvbnMpPC9saT5cbiAqIDxsaT5sYW5nIC0gdGhlIGxhbmd1YWdlIG9mIGEgbGl0ZXJhbCB2YWx1ZSAoPGI+b3B0aW9uYWw8L2I+XG4gKiBidXQgaWYgc3VwcGxpZWQgaXQgbXVzdCBub3QgYmUgZW1wdHkpPC9saT5cbiAqIDxsaT5kYXRhdHlwZSAtIHRoZSBkYXRhdHlwZSBVUkkgb2YgdGhlIGxpdGVyYWwgdmFsdWUgKDxiPm9wdGlvbmFsPC9iPik8L2xpPlxuICogVGhlICdsYW5nJyBhbmQgJ2RhdGF0eXBlJyBrZXlzIHNob3VsZCBvbmx5IGJlIHVzZWQgaWYgdGhlIHZhbHVlIG9mIHRoZSAndHlwZScga2V5IGlzIFwibGl0ZXJhbFwiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBncmFwaCBhY2NvcmRpbmcgdG8gdGhlIHJkZi9qc29uIHNwZWNpZmljYXRpb24uXG4gKiBAcGFyYW0ge1N0cmluZ30gcyBhIFVSSSByZXByZXNlbnRpbmcgdGhlIHN1YmplY3QgaW4gYSBzdGF0ZW1lbnQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcCBhIFVSSSByZXByZXNlbnRpbmcgdGhlIHByZWRpY2F0ZSBpbiBhIHN0YXRlbWVudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvIGFuIG9iamVjdCByZXByZXNlbnRpbmcgZWl0aGVyIGEgcmVzb3VyY2Ugb3IgYSBsaXRlcmFsLFxuICogIHNlZSBmb3JtYXQgZGVzY3JpYmVkIGFib3ZlLlxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgamF2YXNjcmlwdCBvYmplY3QgY29ycmVzcG9uZGluZyB0byB0aGUgc3RhdGVtZW50cyBvYmplY3QganVzdCBhZGRlZCxcbiAqICBub3RlIHRoYXQgaXQgbWlnaHQgYmUgYSBjbG9uZSBvZiB0aGUgb2JqZWN0IGdpdmVuIGluIHRoZSBwYXJhbWV0ZXIgb1xuICogKGZvciBpbnN0YW5jZSB3aGVuIHRoZSBzdGF0ZW1lbnQgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGdyYXBoKS5cbiAqIEB0aHJvd3Mge1N0cmluZ30gYW4gZXJyb3IgbWVzc2FnZSBpZiB0aGUgYXJndW1lbnRzIGFyZSBub3QgdmFsaWQuXG4gKiBAc2VlIFRoZSA8YSBocmVmPVwiaHR0cDovL24yLnRhbGlzLmNvbS93aWtpL1JERl9KU09OX1NwZWNpZmljYXRpb25cIj5SREYgSlNPTiBTcGVjaWZpY2F0aW9uPC9hPi5cbiAqL1xuY29uc3QgYWRkID0gKGdyYXBoLCBzLCBwLCBvKSA9PiB7XG4gIGNoZWNrRm9yV3JvbmdBcmdzKFtncmFwaCwgcywgcCwgb10pO1xuICBpZiAoZ3JhcGhbc10gPT09IHVuZGVmaW5lZCkge1xuICAgIGdyYXBoW3NdID0ge307XG4gICAgZ3JhcGhbc11bcF0gPSBbb107XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgaWYgKGdyYXBoW3NdW3BdID09PSB1bmRlZmluZWQpIHtcbiAgICBncmFwaFtzXVtwXSA9IFtvXTtcbiAgICByZXR1cm4gbztcbiAgfVxuICBsZXQgaTtcbiAgY29uc3Qgb2JqcyA9IGdyYXBoW3NdW3BdO1xuICBmb3IgKGkgPSBvYmpzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKG9iamVjdEVxdWFscyhvLCBvYmpzW2ldKSkge1xuICAgICAgcmV0dXJuIG9ianNbaV07XG4gICAgfVxuICB9XG4gIG9ianMucHVzaChvKTtcbiAgcmV0dXJuIG87XG59O1xuXG4vKipcbiAqIFRyaWVzIHRvIHJlbW92ZSB0aGUgc3BlY2lmaWVkIHN0YXRlbWVudCBmcm9tIHRoZSBnaXZlbiBncmFwaC5cbiAqIElmIGl0IGlzIHN1Y2Nlc3NmdWwgaXQgcmV0dXJucyB0aGUgb2JqZWN0IG9mIHRoZSBzdGF0bWVudCByZW1vdmVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBncmFwaFxuICogQHBhcmFtIHtPYmplY3R9IHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwXG4gKiBAcGFyYW0ge09iamVjdH0gb1xuICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH0gdGhlIG9iamVjdCBvZiB0aGUgc3RhdGVtZW50IHJlbW92ZWQsXG4gKiAgdW5kZWZpbmVkIGlmIG5vIG1hdGNoaW5nIHN0YXRlbWVudCBjb3VsZCBiZSByZW1vdmVkLlxuICogQHRocm93cyB7U3RyaW5nfSBhbiBlcnJvciBtZXNzYWdlIGlmIHRoZSBhcmd1bWVudHMgYXJlIG5vdCB2YWxpZC5cbiAqIEBzZWUgZXhwb3J0cy5hZGQgZm9yIGEgbG9uZ2VyIHRyZWF0bWVudCBvZiB0aGUgYWxsb3dlZCBhcmd1bWVudHMuXG4gKi9cbmNvbnN0IHJlbW92ZSA9IChncmFwaCwgcywgcCwgbykgPT4ge1xuICBjaGVja0Zvcldyb25nQXJncyhbZ3JhcGgsIHMsIHAsIG9dKTtcbiAgaWYgKGdyYXBoW3NdID09PSB1bmRlZmluZWQgfHwgZ3JhcGhbc11bcF0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgbGV0IGk7XG4gIGNvbnN0IG9ianMgPSBncmFwaFtzXVtwXTtcbiAgZm9yIChpID0gb2Jqcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChvYmplY3RFcXVhbHMobywgb2Jqc1tpXSkpIHtcbiAgICAgIGNvbnN0IF9vID0gb2Jqc1tpXTtcbiAgICAgIG9ianMuc3BsaWNlKGksIDEpO1xuICAgICAgY2xlYW51cChncmFwaCwgcywgcCk7XG4gICAgICByZXR1cm4gX287XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ3JhcGggY29udGFpbnMgdGhlIHNwZWNpZmllZCBzdGF0ZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGdyYXBoXG4gKiBAcGFyYW0ge1N0cmluZ30gc1xuICogQHBhcmFtIHtTdHJpbmd9IHBcbiAqIEBwYXJhbSB7T2JqZWN0fSBvXG4gKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfSB0aGUgb2JqZWN0IG9mIHRoZSBmb3VuZCBzdGF0ZW1lbnQgaWYgdGhlIGdyYXBoIGNvbnRhaW5zIHRoZVxuICogc3BlY2lmaWVkIHN0YXRlbWVudCwgdW5kZWZpbmVkIG90aGVyd2lzZS5cbiAqIEB0aHJvd3Mge1N0cmluZ30gYW4gZXJyb3IgbWVzc2FnZSBpZiB0aGUgYXJndW1lbnRzIGFyZSBub3QgdmFsaWQuXG4gKi9cbmNvbnN0IGNvbnRhaW5zID0gKGdyYXBoLCBzLCBwLCBvKSA9PiB7XG4gIGNoZWNrRm9yV3JvbmdBcmdzKFtncmFwaCwgcywgcCwgb10pO1xuICBpZiAoZ3JhcGhbc10gPT09IHVuZGVmaW5lZCB8fCBncmFwaFtzXVtwXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBsZXQgaTtcbiAgY29uc3Qgb2JqcyA9IGdyYXBoW3NdW3BdO1xuICBmb3IgKGkgPSBvYmpzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKG9iamVjdEVxdWFscyhvLCBvYmpzW2ldKSkge1xuICAgICAgcmV0dXJuIG9ianNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgZW1wdHkgc3RydWN0dXJlcyBpbiB0aGUgZ3JhcGggZm9yIHRoZSBnaXZlbiBzdWJqZWN0IGFuZCBwcmVkaWNhdGUuXG4gKiBJdCBjaGVja3MgaWYgdGhlcmUgYXJlIHN1YmplY3RzIHdpdGhvdXQgb3V0Z29pbmcgcHJvcGVydGllcyBvclxuICogaWYgdGhlcmUgYXJlIHByb3BlcnRpZXMgd2l0aCBubyBvYmplY3RzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgbmVlZCBmb3IgdGhpcyBmdW5jdGlvbiBpcyBhIGNvbnNlcXVlbmNlIG9mIHRoZSBub3JtYWxpemVkIGNoYXJhY3RlclxuICogb2YgdGhlIFJERiBKU09OIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZ3JhcGhcbiAqIEBwYXJhbSB7T2JqZWN0fSBzXG4gKiBAcGFyYW0ge09iamVjdH0gcFxuICovXG5jb25zdCBjbGVhbnVwID0gKGdyYXBoLCBzLCBwKSA9PiB7XG4gIGlmIChncmFwaFtzXVtwXS5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgZ3JhcGhbc11bcF07XG4gICAgaWYgKE9iamVjdC5rZXlzKGdyYXBoW3NdKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGRlbGV0ZSBncmFwaFtzXTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBhcmd1bWVudHMgZm9yIHRoZSBhZGQgZnVuY3Rpb24gYXJlIHZhbGlkXG4gKiAoYW5kIGFsbCBvdGhlciBmdW5jdGlvbnMgdGhhdCBoYXZlIHRoZSBzYW1lIHNpZ25hdHVyZSkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBhbiBhcnJheSBvZiB0aGUgYXJndW1lbnRzIGZvciB0aGUgYWRkIGZ1bmN0aW9uLlxuICogQHRocm93cyB7U3RyaW5nfSB3aXRoIGEgbWVzc2FnZSBpZiB0aGUgYXJndW1lbnRzIGFyZSBub3QgdmFsaWQuXG4gKiBAc2VlIGV4cG9ydHMuYWRkXG4gKi9cbmNvbnN0IGNoZWNrRm9yV3JvbmdBcmdzID0gKGFyZ3MpID0+IHtcbiAgaWYgKCFpc09iamVjdChhcmdzWzBdKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignR3JhcGggaXMgbm90IGEgb2JqZWN0LicpO1xuICB9IGVsc2UgaWYgKCFpc1N0cmluZyhhcmdzWzFdKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU3ViamVjdCBpcyBub3QgYSBzdHJpbmcuJyk7XG4gIH0gZWxzZSBpZiAoIWlzU3RyaW5nKGFyZ3NbMl0pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQcmVkaWNhdGUgaXMgbm90IGEgc3RyaW5nLicpO1xuICB9IGVsc2UgaWYgKCFpc09iamVjdChhcmdzWzNdKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0IGlzIG5vdCBhIG9iamVjdC4nKTtcbiAgfSBlbHNlIGlmIChhcmdzWzNdLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk9iamVjdCBoYXMgbm8gdHlwZSBhdHRyaWJ1dGUsIG11c3QgYmUgb25lIG9mICd1cmknLCAnbGl0ZXJhbCcsIG9yXCIgK1xuICAgICAgXCIgJ2Jub2RlJ1wiKTtcbiAgfSBlbHNlIGlmIChhcmdzWzNdLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09iamVjdCBoYXMgbm8gdmFsdWUgYXR0cmlidXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxleGljYWwgdmFsdWUgJyArXG4gICAgICAnb2YgdGhlIG9iamVjdC4nKTtcbiAgfVxuICAvLyBUT0RPIGNoZWNrIHRoYXQgc3ViamVjdCwgcHJlZGljYXRlIGFuZCBvYmplY3QuZGF0YXR5cGUgYXJlIHVyaXMuXG4gIC8vIFRPRE8gQWxzbyBjaGVjayB0aGF0IG9iamVjdC52YWx1ZSBpcyBhIFVSSSBpZiB0aGUgdHlwZSBpcyB1cmkuXG59O1xuXG4vKipcbiAqIENvbXBhcmVzIHR3byBzdGF0ZW1lbnQgb2JqZWN0cyBhY2NvcmRpbmcgdG8gdGhlIFJERiBKU09OIFNwZWNpZmljYXRpb24uXG4gKiBJZiBib3RoIG8xIGFuZCBvMiBhcmUgc3RyaW5ncyB0aGV5IGFyZSBzaW1wbHkgY29tcGFyZWQuXG4gKiBJZiBvbmUgb2YgbzEgYW5kIG8yIGFyZSBhIHN0cmluZyBhbmQgdGhlIG90aGVyIGlzIGFuIG9iamVjdCB0aGUgc3RyaW5nIGlzIGNvbXBhcmVkIHdpdGggdGhlXG4gKiB2YWx1ZSBvZiB0aGUgb2JqZWN0IGlnbm9yaW5nIGFueSBvdGhlciBhdHRyaWJ1dGVzIG9mIHRoZSBvYmplY3QuXG4gKiBJZiBib3RoIG8xIGFuZCBvMiBhcmUgbnVsbCBvciB1bmRlZmluZWQgdGhleSBhcmUgY29uc2lkZXJlZCBlcXVhbC5cbiAqXG4gKiBAcGFyYW0geyp9IG8xXG4gKiBAcGFyYW0geyp9IG8yXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSB0eXBlLCBsZXhpY2FsIHZhbHVlLCBsYW5ndWFnZSwgYW5kIGRhdGF0eXBlLlxuICovXG5jb25zdCBvYmplY3RFcXVhbHMgPSAobzEsIG8yKSA9PiB7XG4gIGlmIChvMSA9PT0gbzIgfHwgKG8xID09IG51bGwgJiYgbzEgPT09IG8yKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIE5vdGUsIHVzaW5nXG4gIGlmIChpc1N0cmluZyhvMSkpIHtcbiAgICBpZiAoaXNTdHJpbmcobzIpKSB7XG4gICAgICByZXR1cm4gbzEgPT09IG8yO1xuICAgIH1cbiAgICByZXR1cm4gbzEgPT09IG8yLnZhbHVlO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKG8yKSkge1xuICAgIHJldHVybiBvMS52YWx1ZSA9PT0gbzI7XG4gIH1cbiAgcmV0dXJuIG8xLnR5cGUgPT09IG8yLnR5cGUgJiYgbzEudmFsdWUgPT09IG8yLnZhbHVlICYmIG8xLmxhbmcgPT09IG8yLmxhbmcgJiZcbiAgICBvMS5kYXRhdHlwZSA9PT0gbzIuZGF0YXR5cGU7XG59O1xuXG5jb25zdCBmaW5kRGlyZWN0T3JSREZWYWx1ZSA9IChncmFwaCwgc3ViamVjdCwgcHJlZGljYXRlKSA9PiB7XG4gIGNvbnN0IGFyciA9IGdyYXBoLmZpbmQoc3ViamVjdCwgcHJlZGljYXRlKTtcbiAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGFyclswXS5nZXRUeXBlKCkgIT09ICdibm9kZScpIHtcbiAgICAgIHJldHVybiBhcnJbMF0uZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGdyYXBoLmZpbmRGaXJzdFZhbHVlKGFyclswXS5nZXRWYWx1ZSgpLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3ZhbHVlJyk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNPYmplY3QsXG4gIGlzU3RyaW5nLFxuICBpc0Z1bmN0aW9uLFxuICBzdGF0ZW1lbnRFcXVhbHMsXG4gIGFkZCxcbiAgcmVtb3ZlLFxuICBjb250YWlucyxcbiAgY2xlYW51cCxcbiAgY2hlY2tGb3JXcm9uZ0FyZ3MsXG4gIG9iamVjdEVxdWFscyxcbiAgZmluZERpcmVjdE9yUkRGVmFsdWUsXG59XG4iLCJpbXBvcnQgbnMgZnJvbSAnLi9uYW1lc3BhY2VzJztcblxuLyoqXG4gKiByZGZqc29uLlN0YXRlbWVudCBSZXByZXNlbnRzIGEgc3RhdGVtZW50IGluIGEgZ3JhcGguXG4gKiBOZXZlciBjcmVhdGUgZGlyZWN0bHksIHVzZSB0aGUgbWV0aG9kcyBpbiByZGZqc29uLkdyYXBoLlxuICogQ29uc3RydWN0cyBhIHN0YXRlbWVudCBmcm9tIHRoZSBwcm92aWRlZCBwYXJ0cywgdGhlIG9iamVjdCBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lXG4gKiBhY3R1YWwgamF2YXNjcmlwdCBvYmplY3QgYXMgaXMgdXNlZCBpbiB0aGUgZ3JhcGguXG4gKlxuICogQGV4cG9ydHMgcmRmanNvbi9TdGF0bWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZW1lbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBncmFwaCB0aGUgcmRmanNvbi5HcmFwaCB3ZSB3aWxsIG1hbmlwdWxhdGUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzIHRoZSBzdWJqZWN0IGluIHRoZSBzdGF0ZW1lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHAgdGhlIHByZWRpY2F0ZSBpbiB0aGUgc3RhdGVtZW50LlxuICAgKiBAcGFyYW0ge09iamVjdH0gbyB0aGUgb2JqZWN0IGluIHRoZSBzdGF0ZW1lbnQuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gYXNzZXJ0ZWQgaW5kaWNhdGVzIGlmIHRoZSBzdGF0ZW1lbnQgaXMgYXNzZXJ0ZWQgaW4gdGhlIGFjY29tcGFuaWVkIGdyYXBoLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGdyYXBoLCBzLCBwLCBvLCBhc3NlcnRlZCkge1xuICAgIHRoaXMuX2dyYXBoID0gZ3JhcGg7XG4gICAgdGhpcy5fcyA9IHM7XG4gICAgdGhpcy5fcCA9IHA7XG4gICAgdGhpcy5fbyA9IG87XG4gICAgdGhpcy5fby5fc3RhdGVtZW50ID0gdGhpcztcbiAgICB0aGlzLl9hc3NlcnRlZCA9IGFzc2VydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBHcmFwaCB0aGlzIFN0YXRlbWVudCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqIEByZXR1cm5zIHtyZGZqc29uLkdyYXBofVxuICAgKi9cbiAgZ2V0R3JhcGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGFzc2VydGVkIHN0YXRlbWVudCBpcyBwcmVzZW50IGluIGl0cyBhc3NvY2lhdGVkIEdyYXBoXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gYXNzZXJ0ZWRcbiAgICovXG4gIHNldEFzc2VydGVkKGFzc2VydGVkKSB7XG4gICAgaWYgKGFzc2VydGVkICE9PSB0aGlzLl9hc3NlcnRlZCkge1xuICAgICAgaWYgKGFzc2VydGVkKSB7XG4gICAgICAgIHRoaXMuX2dyYXBoLmFkZCh0aGlzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGhpcy5fc2lsZW50VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZ3JhcGgucmVtb3ZlKHRoaXMsIHRoaXMuX3NpbGVudFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2Fzc2VydGVkID0gYXNzZXJ0ZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhlIFN0YXRlbWVudCBpcyBhc3NlcnRlZCBpbiB0aGUgR3JhcGguXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKi9cbiAgaXNBc3NlcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXNzZXJ0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHN1YmplY3Qgb2YgdGhpcyBzdGF0ZW1lbnQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBnZXRTdWJqZWN0KCkge1xuICAgIHJldHVybiB0aGlzLl9zO1xuICB9XG5cbiAgaXNTdWJqZWN0QmxhbmsoKSB7XG4gICAgaWYgKHRoaXMuX3NJc0JsYW5rICE9PSB0cnVlICYmIHRoaXMuX3NJc0JsYW5rICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5fc0lzQmxhbmsgPSB0aGlzLl9zLmluZGV4T2YoJ186JykgPT09IDA7XG4gICAgICAvLyB0aGlzLl9zSXNCbGFuayA9IHRoaXMuX2dyYXBoLl9ibm9kZXNbdGhpcy5fc10gPT09IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zSXNCbGFuaztcbiAgfVxuXG4gIGlzT2JqZWN0QmxhbmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHlwZSgpID09PSAnYm5vZGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN1YmplY3Qgb2YgdGhpcyBzdGF0ZW1lbnQsIG90aGVyIFN0YXRlbWVudHMgd2l0aCB0aGlzIHJlc291cmNlIGFzIHN1YmplY3Qgb3Igb2JqZWN0XG4gICAqIGlzIG5vdCBhZmZlY3RlZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHMgbXVzdCBiZSBhIHZhbGlkIFVSSS5cbiAgICovXG4gIHNldFN1YmplY3Qocykge1xuICAgIHRoaXMuX3NpbGVudFZhbHVlID0gZmFsc2U7XG4gICAgY29uc3QgX3MgPSBucy5leHBhbmQocyk7XG4gICAgaWYgKHRoaXMuX2Fzc2VydGVkKSB7XG4gICAgICB0aGlzLl9ncmFwaC5yZW1vdmUodGhpcyk7XG4gICAgICB0aGlzLl9zID0gX3M7XG4gICAgICB0aGlzLl9ncmFwaC5hZGQodGhpcyk7XG4gICAgICBkZWxldGUgdGhpcy5fc0lzQmxhbms7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3MgPSBfcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHByZWRpY2F0ZSBvZiB0aGlzIFN0YXRlbWVudC5cbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldFByZWRpY2F0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcmVkaWNhdGUgb2YgdGhpcyBzdGF0ZW1lbnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwIG11c3QgYmUgYSB2YWxpZCBVUkkuXG4gICAqL1xuICBzZXRQcmVkaWNhdGUocCkge1xuICAgIHRoaXMuX3NpbGVudFZhbHVlID0gZmFsc2U7XG4gICAgY29uc3QgX3AgPSBucy5leHBhbmQocCk7XG4gICAgaWYgKHRoaXMuX2Fzc2VydGVkKSB7XG4gICAgICB0aGlzLl9ncmFwaC5yZW1vdmUodGhpcyk7XG4gICAgICB0aGlzLl9wID0gX3A7XG4gICAgICB0aGlzLl9ncmFwaC5hZGQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3AgPSBfcDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1N0cmluZ3x1bmRlZmluZWR9XG4gICAqL1xuICBnZXROYW1lZEdyYXBoKCkge1xuICAgIHJldHVybiB0aGlzLl9vLm5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBuZ1xuICAgKi9cbiAgc2V0TmFtZWRHcmFwaChuZykge1xuICAgIHRoaXMuX28ubmcgPSBuZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IG9mIHRoZSBTdGF0ZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRPYmplY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX287XG4gIH1cblxuXG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3Qgb2YgdGhlIFN0YXRlbWVudC5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGdldENsZWFuT2JqZWN0KCkge1xuICAgIGNvbnN0IF9vID0gdGhpcy5fbztcbiAgICBjb25zdCBvID0ge1xuICAgICAgdmFsdWU6IF9vLnZhbHVlLFxuICAgICAgdHlwZTogX28udHlwZSxcbiAgICB9O1xuICAgIGlmICh0aGlzLl9vLm5nKSB7XG4gICAgICBvLm5nID0gX28ubmc7XG4gICAgfVxuICAgIGlmIChfby5sYW5nKSB7XG4gICAgICBvLmxhbmcgPSBfby5sYW5nO1xuICAgIH1cbiAgICBpZiAodGhpcy5fby5kYXRhdHlwZSkge1xuICAgICAgby5kYXRhdHlwZSA9IF9vLmRhdGF0eXBlO1xuICAgIH1cbiAgICByZXR1cm4gbztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBvbmUgb2YgdXJpLCBibm9kZSBhbmQgbGl0ZXJhbFxuICAgKi9cbiAgZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fby50eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIG11c3QgYmUgb25lIG9mIHVyaSwgYm5vZGUgYW5kIGxpdGVyYWwuXG4gICAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgc2V0VHlwZSh0eXBlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDaGFuZ2luZyB0aGUgdHlwZSBvZiBhbiBvYmplY3QgaXMgbm90IHN1cHBvcnRlZCwgY3JlYXRlIGEgbmV3JyArXG4gICAgICAnIHN0YXRlbWVudCBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHR5cGUgaXMgdXJpIGl0IGlzIGEgVVJJLCBpZiB0eXBlIGlzIGEgbGl0ZXJhbCBpdCBpcyB0aGUgbGl0ZXJhbCBzdHJpbmcuXG4gICAqIElmIHR5cGUgaXMgYSBibm9kZSB0aGUgdmFsdWUgaXMgYSBpbnRlcm5hbCBibm9kZSBpZGVudGl0eSwgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3JcbiAgICogcmVmZXJlbmNlcyB3aXRoaW4gdGhlIGN1cnJlbnQgZ3JhcGguXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fby52YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1cmksIGxpdGVyYWwgb3IgYm5vZGUgb2YgdGhlIGN1cnJlbnQgU3RhdGVtZW50IGRlcGVuZGluZyBvbiB0aGUgdHlwZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIG11c3QgYmUgYSB1cmkgaWYgdGhlIHR5cGUgc28gaW5kaWNhdGVzLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaWxlbnQ9ZmFsc2VdIHRoZSBncmFwaCBpcyBub3QgbWFya2VkIGFzIFwiY2hhbmdlZFwiIGlmIHNldCB0byB0cnVlXG4gICAqL1xuICBzZXRWYWx1ZSh2YWx1ZSwgc2lsZW50ID0gZmFsc2UpIHtcbiAgICB0aGlzLl9zaWxlbnRWYWx1ZSA9IHNpbGVudCA9PT0gdHJ1ZTtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuX28udmFsdWUpIHtcbiAgICAgIHRoaXMuX28udmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLmlzQXNzZXJ0ZWQoKSAmJiBzaWxlbnQgIT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5fZ3JhcGguc2V0Q2hhbmdlZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBhIGxhbmd1YWdlIGV4cHJlc3NlZCB1c2luZyBSRkMtMzA2NlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX28ubGFuZztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsYW5ndWFnZSBvZiB0aGUgb2JqZWN0LCBvbmx5IGFjY2VwdGFibGUgaWYgdGhlIHR5cGUgaXMgbGl0ZXJhbC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGxhbmcgdGhlIGxhbmd1YWdlIGV4cHJlc3NlZCB1c2luZyBSRkMtMzAtNjZcbiAgICovXG4gIHNldExhbmd1YWdlKGxhbmcsIHNpbGVudCkge1xuICAgIHRoaXMuX3NpbGVudFZhbHVlID0gc2lsZW50ID09PSB0cnVlO1xuICAgIGlmICh0aGlzLl9vLnR5cGUgIT09ICdsaXRlcmFsJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IHRoZSBsYW5ndWFnZSBmb3IgYSByZXNvdXJjZSwgaGFzIHRvIGJlIGEgbGl0ZXJhbCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fby5sYW5nICE9PSBsYW5nKSB7XG4gICAgICB0aGlzLl9vLmxhbmcgPSBsYW5nO1xuICAgICAgaWYgKHRoaXMuaXNBc3NlcnRlZCgpICYmIHNpbGVudCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9ncmFwaC5zZXRDaGFuZ2VkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhdHlwZSBvZiB0aGlzIG9iamVjdCwgb25seSBhY2NlcHRhYmxlIGlmIHRoZSB0eXBlIGlzIGxpdGVyYWwuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBkYXRhdHlwZSBpcyBhbHdheXMgcmVwcmVzZW50ZWQgdmlhIGEgVVJJLlxuICAgKi9cbiAgZ2V0RGF0YXR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX28uZGF0YXR5cGU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkYXRhdHlwZSwgb25seSBhY2NlcHRhYmxlIGlmIHRoZSB0eXBlIGlzIGxpdGVyYWwgYW5kIG5vIGxhbmd1YWdlIGlzIHNldC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGF0eXBlIHRoZSBkYXRhdHlwZSBleHByZXNzZWQgYXMgYSBVUkkuXG4gICAqL1xuICBzZXREYXRhdHlwZShkYXRhdHlwZSwgc2lsZW50KSB7XG4gICAgdGhpcy5fc2lsZW50VmFsdWUgPSBzaWxlbnQgPT09IHRydWU7XG4gICAgaWYgKHRoaXMuX28udHlwZSAhPT0gJ2xpdGVyYWwnIHx8IHRoaXMuX28ubGFuZyAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgdGhlIGRhdGF0eXBlIGZvciBhIHJlc291cmNlLCBoYXMgdG8gYmUgYSBsaXRlcmFsJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9vLmRhdGF0eXBlICE9PSBkYXRhdHlwZSkge1xuICAgICAgdGhpcy5fby5kYXRhdHlwZSA9IGRhdGF0eXBlO1xuICAgICAgaWYgKHRoaXMuaXNBc3NlcnRlZCgpICYmIHNpbGVudCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9ncmFwaC5zZXRDaGFuZ2VkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIiwiaW1wb3J0IEdyYXBoIGZyb20gJy4vR3JhcGgnO1xuaW1wb3J0IG5zIGZyb20gJy4vbmFtZXNwYWNlcyc7XG5pbXBvcnQgbWQ1IGZyb20gJ21kNSc7XG5cbi8qKlxuICogQ29waWVzIG92ZXIgYSBzdWJzZXQgb2Ygc3RhdGVtZW50cyBmcm9tIG9uZSBtZXRhZGF0YSBncmFwaCB0byBhbm90aGVyLlxuICogVGhlIHN0YXRlbWVudHMgY29waWVkIGFyZSB0aG9zZSB3aXRoIHRoZSBwcm92aWRlZCB1cmkgaW4gc3ViamVjdCBwb3NpdGlvbiwgb3JcbiAqIHN0YXRlbWVudHMgcmVhY2hhYmxlIHZpYSBpbnRlcm1lZGlhdGUgYmxhbmsgbm9kZXMgZnJvbSB0aGF0IHVyaS5cbiAqIFN0YXRlbWVudHMgYXJlIG5vdCBjb3BpZWQgb3ZlciBpZiB0aGUgcHJlZGljYXRlIGlzIGxpc3RlZCBpbiB0aGUgaWdub3JlIGFycmF5LFxuICogdW5sZXNzIHRoZSBleGNsdWRlQWZ0ZXJJZ25vcmUgaXMgc3BlY2lmaWVkIGluIHdoaWNoIGNhc2UgdGhlIHRyaXBsZSBpcyBpbmNsdWRlZFxuICogYnV0IG5vIGZ1cnRoZXIgdHJpcGxlcyByZWFjaGFibGUgdmlhIHRoZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBpbkdyYXBoIGdyYXBoIHdoaWNoIGhvbGRzIHJkZiBkYXRhIGluIGdyYXBoIGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBhIHN0YXJ0aW5nIHBvaW50IHRvIGZpbmQgYWxsIHN0YXRlbWVudHMgdG8gaW5jbHVkZVxuICogQHBhcmFtIHtvYmplY3Q9fSBpZ25vcmUgaXMgYW4gb2JqZWN0IHdpdGggcHJlZGljYXRlcyBhcyBhdHRyaWJ1dGVzLFxuICogd2hpY2ggYXJlIHRvIGJlIGlnbm9yZWQgKGV4Y2x1ZGVkKVxuICogQHBhcmFtIHtyZGZqc29uL0dyYXBoPX0gb3V0R3JhcGggb3B0aW9uYWwgZ3JhcGggd2hpY2ggd2lsbCBob2xkIGNvcGllZCBzdGF0ZW1lbnRzLFxuICogIGlmIG5vIG91dEdyYXBoIGlzIHByb3ZpZGVkIGEgbmV3IHdpbGwgYmUgY3JlYXRlZC5cbiAqIEByZXR1cm4ge3JkZmpzb24vR3JhcGh9IHNhbWUgYXMgdGhlIHByb3ZpZGVkIG91dEdyYXBoXG4gKi9cbmNvbnN0IGV4dHJhY3QgPSAoaW5HcmFwaCwgb3V0R3JhcGgsIHVyaSwgaWdub3JlLCBleGNsdWRlQWZ0ZXJJZ25vcmUpID0+IHtcbiAgY29uc3QgX291dEdyYXBoID0gb3V0R3JhcGggfHwgbmV3IEdyYXBoKCk7XG4gIGNvbnN0IF9pZ25vcmUgPSBpZ25vcmUgfHwge307XG4gIGluR3JhcGguZmluZCh1cmksIG51bGwsIG51bGwpLmZvckVhY2goKHN0bXQpID0+IHtcbiAgICBpZiAoIV9pZ25vcmVbc3RtdC5nZXRQcmVkaWNhdGUoKV0pIHtcbiAgICAgIG91dEdyYXBoLmFkZChzdG10KTtcbiAgICAgIGlmIChzdG10LmdldFR5cGUoKSA9PT0gJ2Jub2RlJykge1xuICAgICAgICBleHRyYWN0KGluR3JhcGgsIG91dEdyYXBoLCBzdG10LmdldFZhbHVlKCksIF9pZ25vcmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXhjbHVkZUFmdGVySWdub3JlKSB7XG4gICAgICBvdXRHcmFwaC5hZGQoc3RtdCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dEdyYXBoO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFuIGVudGlyZSBzdWJncmFwaCBmcm9tIGEgZ2l2ZW4gZ3JhcGguXG4gKiBUaGUgc3ViZ3JhcGggaXMgY2FsY3VsYXRlZCBieSB0cmF2ZXJzaW5nIHRyaXBsZXMgaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uXG4gKiBmcm9tIGEgc3RhcnRpbmcgcmVzb3VyY2UuIEEgdHJpcGxlIGlzIGluY2x1ZGVkIGluIHRoZSBzdWJncmFwaCBpZiBpdCBjYW4gYmUgcmVhY2hlZFxuICogdmlhIGEgcGF0aCBvZiB0cmlwbGVzIGZyb20gdGhlIHN0YXJ0aW5nIHJlc291cmNlIHRoYXQgb25seSBwYXNzZXMgdHJpcGxlcyB0aGF0IGhhdmVcbiAqIGJsYW5rIG5vZGVzIGluIG9iamVjdCBwb3NpdGlvbi4gVGhlIHRyaXBsZXMgaW4gdGhlIHBhdGggbWF5IG5vdCBpbmNsdWRlIHByZWRpY2F0ZXNcbiAqIGluIHRoZSBpZ25vcmUgbGlzdCBleGNlcHQgdGhlIGxhc3QgdHJpcGxlIGluIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSB7cmRmanNvbi9HcmFwaH0gZ3JhcGggdGhlIGdyYXBoIHRvIHJlbW92ZSB0cmlwbGVzIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgdGhlIHN0YXJ0aW5nIHJlc291cmNlIHRvIGNhbGN1bGF0ZSB0aGUgc3ViZ3JhcGggZnJvbVxuICogQHBhcmFtIHtvYmplY3R9IGlnbm9yZSBhbiBoYXNoIG9mIHByZWRpY2F0ZXMgKHdpdGggdGhlIGJvb2xlYW4gdHJ1ZSBhcyB2YWx1ZSlcbiAqIHRvIGlnbm9yZSB3aGVuIGNhbGN1bGF0aW5nIHRoZSBzdWJncmFwaCB0byByZW1vdmUsIHNlZSBleHBsYW5hdGlvbiBhYm92ZS5cbiAqL1xuY29uc3QgcmVtb3ZlID0gKGdyYXBoLCB1cmksIGlnbm9yZSkgPT4ge1xuICBjb25zdCBfaWdub3JlID0gaWdub3JlIHx8IHt9O1xuICBncmFwaC5maW5kKHVyaSwgbnVsbCwgbnVsbCkuZm9yRWFjaCgoc3RtdCkgPT4ge1xuICAgIGdyYXBoLnJlbW92ZShzdG10KTtcbiAgICBpZiAoIV9pZ25vcmVbc3RtdC5nZXRQcmVkaWNhdGUoKV0pIHtcbiAgICAgIGlmIChzdG10LmdldFR5cGUoKSA9PT0gJ2Jub2RlJykge1xuICAgICAgICByZW1vdmUoZ3JhcGgsIHN0bXQuZ2V0VmFsdWUoKSwgX2lnbm9yZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZpbmdlcnByaW50IG9mIGEgZ3JhcGggYnkgaW5jbHVkaW5nIGFsbCBzdGF0ZW1lbnRzJyBzdWJqZWN0cywgcHJlZGljYXRlc1xuICogYW5kIG9iamVjdHMgYnV0IGV4Y2x1ZGluZyBibGFuayBub2RlcyB3aGVyZXZlciB0aGV5IG9jY3VyLiBUaGUgcmVzdWx0IGlzIHNvcnRlZCBhbmQgYVxuICogbWQ1LXN1bSBpcyBjYWxjdWxhdGVkLlxuICpcbiAqIFR3byBpc29tb3JwaGljIGdyYXBocyB3aWxsIGFsd2F5cyBoYXZlIHRoZSBzYW1lIGZpbmdlcnByaW50LCBpLmUuIGdyYXBocyB0aGF0IGFyZSBzaW1pbGFyXG4gKiB3aGVuIGRpc3JlZ2FyZGluZyBuYW1lcyBvZiBibGFuayBub2Rlcy5cbiAqXG4gKiBVbmZvcnR1bmF0ZWx5LCB0aGVyZSBhcmUgZmFsc2UgcG9zaXRpdmllcywgaS5lLiB0d28gZ3JhcGhzIG1heSB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXNcbiAqIGhhdmUgdGhlIHNhbWUgZmluZ2VycHJpbnQgZGVzcGl0ZSB0aGUgZmFjdCB0aGF0IHRoZXkgYXJlIG5vdCBpc29tb3JwaGljLlxuICogVGhlcmUgYXJlIHR3byBzaXR1YXRpb25zIHdoZW4gdGhpcyBjYW4gb2NjdXI6XG4gKlxuICogTWQ1IGNvbGxpc2lvbnM6IER1ZSB0byB0aGUgd2F5IG1kNSB3b3JrcyB0aGVyZSBhcmUgc2l0dWF0aW9ucyB3aGVuIHR3byBkaWZmZXJlbnRcbiAqIGlucHV0cyBjYW4gZ2VuZXJhdGUgdGhlIHNhbWUgc3VtLiBIb3dldmVyLCB0aGlzIGlzIHZlcnkgdW5saWtlbHkgdG8gaGFwcGVuIGZvciByZWd1bGFyIFJERlxuICogZ3JhcGhzLlxuICpcbiAqIEFsZ29yaXRobSBkZWZpY2llbmNpZXM6IElmIHRoZSBncmFwaCBoYXMgYmxhbmsgbm9kZXMgdGhhdCBhcmUgY29ubmVjdGVkIHRvIGVhY2ggb3RoZXIsXG4gKiB0aGUgZmluZ2VycHJpbnQgYWxnb3JpdGhtIG1heSBmYWlsLlxuICpcbiAqIEJyaWVmbHkgYWJvdXQgdGhlIGFsZ29yaXRobTogU2luY2UgYmxhbmsgbm9kZXMgYXJlIG9mdGVuIHJlbmFtZWQgdXBvbiBzZXJpYWxpemF0aW9uIGFuXG4gKiBkZS1zZXJpYWxpemF0aW9uIHRoZXNlIGNhbm5vdCBiZSB1c2VkIGluIHRoZSBmaW5nZXJwcmludGluZyBhbGdvcml0aG0uIFRvIG92ZXJjb21lIHRoaXNcbiAqIHByb2JsZW0gdGhlIGFsZ29yaXRobSBnaXZlcyBlYWNoIGJsYW5rIG5vZGUgYW4gaWRlbnRpZmllciB2aWEgYSBkZXRlcm1pbmlzdGljIHByb2Nlc3NcbiAqIHRoYXQgdGFrZXMgYWxsIGluY29taW5nIGFuZCBvdXRnb2luZyB0cmlwbGVzIGludG8gYWNjb3VudC4gQ2xlYXJseSB0aGlzIGFwcHJvYWNoIHdpbGwgZ2l2ZVxuICogdHdvIGJsYW5rIG5vZGVzIGluIHR3byBkaWZmZXJlbnQgZ3JhcGhzIHRoZSBzYW1lIGlkZW50aWZpZXIgaWYgdGhleSBoYXZlIHRoZSBzYW1lIGluY29taW5nXG4gKiBhbmQgb3V0Z29pbmcgdHJpcGxlcy4gQnV0LCB0aGV5IG1heSBzdGlsbCBjb3JyZXNwb25kIHRvIGRpZmZlcmVudCBibGFuayBub2Rlc1xuICogKGluIHRoZSBpc29tb3JwaGljIHNlbnNlKSBpZiBsb25nZXIgYmxhbmsgbm9kZSB0cmF2ZXJzYWwgcGF0aCBhcmUgdGFrZW4gaW50byBhY2NvdW50LlxuICpcbiAqIExldHMgTG9vayBhdCB0d28gZGlmZmVyZW50IGdyYXBocyB0aGF0IHdpbGwgaGF2ZSB0aGUgc2FtZSBmaW5nZXJwcmludDpcbiAqIEdyYXBoIDE6IEpvaG4gaW5kaXJlY3RseSBrbm93cyBFcmljIGFuZCBBbm5hIGluZGlyZWN0bHkga25vd3MgTGluZGFcbiAqIF86YjEgICAgIGZvYWY6bmFtZSAgICAnSm9obidcbiAqIF86YjEgICAgIGZvYWY6a25vd3MgICBfOmIyXG4gKiBfOmIyICAgICBmb2FmOmtub3dzICAgXzpiM1xuICogXzpiMyAgICAgZm9hZjpuYW1lICAgIFwiRXJpY1wiXG4gKiBfOmI0ICAgICBmb2FmOm5hbWUgICAgJ0FubmEnXG4gKiBfOmI0ICAgICBmb2FmOmtub3dzICAgXzpiNVxuICogXzpiNSAgICAgZm9hZjprbm93cyAgIF86YjZcbiAqIF86YjYgICAgIGZvYWY6bmFtZSAgICBcIkxpbmRhXCJcbiAqXG4gKiBHcmFwaCAyOiBKb2huIGluZGlyZWN0bHkga25vd3MgTGluZGEgYW5kIEFubmEgaW5kaXJlY3RseSBrbm93cyBFcmljXG4gKiBfOmIxICAgICBmb2FmOm5hbWUgICAgJ0pvaG4nXG4gKiBfOmIxICAgICBmb2FmOmtub3dzICAgXzpiMlxuICogXzpiMiAgICAgZm9hZjprbm93cyAgIF86YjNcbiAqIF86YjMgICAgIGZvYWY6bmFtZSAgICBcIkxpbmRhXCJcbiAqIF86YjQgICAgIGZvYWY6bmFtZSAgICAnQW5uYSdcbiAqIF86YjQgICAgIGZvYWY6a25vd3MgICBfOmI1XG4gKiBfOmI1ICAgICBmb2FmOmtub3dzICAgXzpiNlxuICogXzpiNiAgICAgZm9hZjpuYW1lICAgIFwiRXJpY1wiXG4gKlxuICogSW4gcHJhY3Rpc2UgdGhpcyBzaXR1YXRpb24gb25seSBvY2N1cnMgd2hlbiB5b3UgaGF2ZSBsb25nZXIgcGF0aHMgb2YgYmxhbmsgbm9kZXMgd2l0aG91dFxuICogYWRkaXRpb25hbCBkaXN0aW5ndWlzaGluZyB0cmlwbGVzLiBIb3dldmVyLCBmcm9tIGEgbW9kZWxpbmcgc3RhbmRwb2ludCB0aGVzZSBraW5kIG9mXG4gKiBleHByZXNzaW9ucyB3aXRoIGxvbmcgY2hhaW5zIG9mIG5vZGVzIGFyZSBzZWxkb20gdXNlZCBhbmQgaWYgdGhleSBhcmUgdXNlZCwgdGhlcmUgYXJlXG4gKiBjZXJ0YWlubHkgZGlzdGluZ3Vpc2hpbmcgdHJpcGxlcyBhbG9uZyB0aGUgd2F5LlxuICpcbiAqIFRoZSBjb25jbHVzaW9uIGlzIHRoYXQgY2hlY2tpbmcgaWYgcmVhbCB3b3JsZCBncmFwaHMgYXJlIHRoZSBzYW1lIG9yIG5vdCBjYW4gYmUgc2FmZWx5XG4gKiBkZXRlcm1pbmVkIHdpdGggdGhlIGhlbHAgb2YgdGhpcyBmaW5nZXJwcmludCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBncmFwaCBpcyB0aGUgZ3JhcGggdG8gZmluZ2VycHJpbnQuXG4gKiBAcGFyYW0ge2FycmF5fSBleGNsdWRlUHJvcGVydGllcyBhIGxpc3Qgb2YgcHJvcGVydGllcyB0byBleGNsdWRlIHdoZW4gY2FsY3VsYXRpbmdcbiAqIHRoZSBmaW5nZXJwcmludC5cbiAqIEByZXR1cm4ge3N0cmluZ30gYSBtZDUgc3VtIG9mIHRoZSBncmFwaC5cbiAqL1xuY29uc3QgZmluZ2VycHJpbnQgPSAoZ3JhcGgsIGV4Y2x1ZGVQcm9wZXJ0aWVzKSA9PiB7XG4gIGNvbnN0IGZwZyA9IFtdO1xuICBjb25zdCBleGNsdWRlID0gbmV3IFNldCgoZXhjbHVkZVByb3BlcnRpZXMgfHwgW10pLm1hcChwcm9wID0+IG5zLmV4cGFuZChwcm9wKSkpO1xuICBjb25zdCBibGFua1N0bXRzID0gW107XG4gIGNvbnN0IGJsYW5rSWR4ID0ge307XG5cbiAgY29uc3Qgc2VyaWFsaXplT2JqID0gKHN0bXQpID0+IHtcbiAgICBsZXQgdmFsID0gc3RtdC5nZXRWYWx1ZSgpO1xuICAgIGlmIChzdG10LmdldExhbmd1YWdlKCkpIHtcbiAgICAgIHZhbCArPSBgQCR7c3RtdC5nZXRMYW5ndWFnZSgpfWA7XG4gICAgfVxuICAgIGlmIChzdG10LmdldERhdGF0eXBlKCkpIHtcbiAgICAgIHZhbCArPSBgXl4ke3N0bXQuZ2V0RGF0YXR5cGUoKX1gO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9O1xuICBjb25zdCBhZGRUb0JsYW5rUmVscyA9IChibiwgc3RyKSA9PiB7XG4gICAgY29uc3QgaWR4ID0gYmxhbmtJZHhbYm5dIHx8IHsgcmVsczogW10gfTtcbiAgICBibGFua0lkeFtibl0gPSBpZHg7XG4gICAgaWR4LnJlbHMucHVzaChzdHIpO1xuICB9O1xuXG4gIGdyYXBoLmZpbmQoKS5mb3JFYWNoKChzdG10KSA9PiB7XG4gICAgY29uc3QgcyA9IHN0bXQuZ2V0U3ViamVjdCgpO1xuICAgIGNvbnN0IHAgPSBzdG10LmdldFByZWRpY2F0ZSgpO1xuICAgIGlmIChleGNsdWRlLmhhcyhwKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvQmxhbmsgPSBzdG10LmdldFR5cGUoKSA9PT0gJ2Jub2RlJztcbiAgICBjb25zdCBzQmxhbmsgPSBzdG10LmlzU3ViamVjdEJsYW5rKCk7XG4gICAgaWYgKHNCbGFuayB8fCBvQmxhbmspIHtcbiAgICAgIGJsYW5rU3RtdHMucHVzaChzdG10KTtcbiAgICAgIGlmIChzQmxhbmspIHtcbiAgICAgICAgYWRkVG9CbGFua1JlbHMoc3RtdC5nZXRTdWJqZWN0KCksIG9CbGFuayA/IHAgOiBwICsgc2VyaWFsaXplT2JqKHN0bXQpKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdG10LmdldFR5cGUoKSA9PT0gJ2Jub2RlJykge1xuICAgICAgICBhZGRUb0JsYW5rUmVscyhzdG10LmdldFZhbHVlKCksIHNCbGFuayA/IHAgOiBzICsgcCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnBnLnB1c2gocyArIHAgKyBzZXJpYWxpemVPYmooc3RtdCkpO1xuICB9KTtcblxuICAvLyBDYWxjdWxhdGUgYSBzdGFibGUgaGFzaCBmb3IgZWFjaCBibGFuayBiYXNlZCBvbiBpbmNvbWluZyBhbmQgb3V0Z29pbmcgdHJpcHBsZXMuXG4gIE9iamVjdC52YWx1ZXMoYmxhbmtJZHgpLmZvckVhY2goKGJsYW5rKSA9PiB7XG4gICAgYmxhbmsucmVscy5zb3J0KCk7XG4gICAgYmxhbmsuaGFzaCA9IG1kNShibGFuay5yZWxzLmpvaW4oJycpKTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBzdGF0ZW1lbnRzIHdpdGggYmxhbmtzIGluIHRoZW1cbiAgYmxhbmtTdG10cy5mb3JFYWNoKChzdG10KSA9PiB7XG4gICAgY29uc3QgZnBzID0gW107XG4gICAgZnBzLnB1c2goc3RtdC5pc1N1YmplY3RCbGFuaygpID8gYmxhbmtJZHhbc3RtdC5nZXRTdWJqZWN0KCldLmhhc2ggOiBzdG10LmdldFN1YmplY3QoKSk7XG4gICAgZnBzLnB1c2goc3RtdC5nZXRQcmVkaWNhdGUoKSk7XG4gICAgZnBzLnB1c2goc3RtdC5nZXRUeXBlKCkgPT09ICdibm9kZScgPyBibGFua0lkeFtzdG10LmdldFZhbHVlKCldLmhhc2ggOiBzZXJpYWxpemVPYmooc3RtdCkpO1xuICAgIGZwZy5wdXNoKGZwcy5qb2luKCcnKSk7XG4gIH0pO1xuXG4gIGZwZy5zb3J0KCk7XG4gIHJldHVybiBtZDUoZnBnLmpvaW4oJycpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZXh0cmFjdCxcbiAgcmVtb3ZlLFxuICBmaW5nZXJwcmludCxcbn07XG4iLCJpbXBvcnQgcmRmanNvblV0aWwgZnJvbSAnLi9mb3JtYXRzL3JkZmpzb24vdXRpbCc7XG5pbXBvcnQgbnMgZnJvbSAnLi9uYW1lc3BhY2VzJztcbmltcG9ydCBTdGF0ZW1lbnQgZnJvbSAnLi9TdGF0ZW1lbnQnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICogQHJldHVybnMgeyp9XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB6ZXJvT3JPbmUgPSBhcnIgPT4gKGFyci5sZW5ndGggPT09IDAgPyBhcnIgOiBbYXJyWzBdXSk7XG5cbi8qKlxuICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBncmFwaFxuICogQHBhcmFtIHtyZGZqc29uL1N0YXRlbWVudFtdfSBzdGF0ZW1lbnRzIGFuIGFycmF5XG4gKiBAcGFyYW0ge0Jvb2xlYW49fSBwZXJTdWJqZWN0IGlmIHRydWUgbWVhbnMgdGhhdCBhbGwgY29uc2VjdXRpdmUgY2FsbHMgd2lsbCBiZSBmb2N1c2VkIG9uXG4gKiBhbGwgdGhlIHN1YmplY3RzIG9mIHRoZSBzcGVjaWZpZWQgc3RhdG1lbnRzLCBvdGhlcndpc2UgdGhlIHJlc291cmNlIG9iamVjdHMgb2YgdGhlIHN0YXRlbWVudHNcbiAqIHdpbGwgYmUgdGhlIGZvY3VzLiBBc3N1bWVkIHRvIGJlIGZhbHNlIHVubGVzcyBleHBsaWNpdGx5IHNldCB0byB0cnVlLlxuICpcbiAqIEByZXR1cm5zIHt7b2JqZWN0OiBGdW5jdGlvbiwgb2JqZWN0czogRnVuY3Rpb24sIGNvbnN0cjogRnVuY3Rpb24sIGVhY2g6IEZ1bmN0aW9uLCBub2RlczpcbiAqIEZ1bmN0aW9uLCB2YWx1ZXM6IEZ1bmN0aW9uLCBmaXJzdFZhbHVlOiBGdW5jdGlvbn19XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBwZXJTdGF0ZW1lbnQgPSAoZ3JhcGgsIHN0YXRlbWVudHMsIHBlclN1YmplY3QpID0+ICh7XG4gIG9iamVjdChwcmVkaWNhdGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBzdWJqO1xuICAgICAgaWYgKHBlclN1YmplY3QpIHtcbiAgICAgICAgc3ViaiA9IHN0YXRlbWVudHNbaV0uZ2V0U3ViamVjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdCA9IHN0YXRlbWVudHNbaV0uZ2V0VHlwZSgpO1xuICAgICAgICBpZiAodCA9PT0gJ3VyaScgfHwgdCA9PT0gJ2Jub2RlJykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHN1YmogPSBzdGF0ZW1lbnRzW2ldLmdldFZhbHVlKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdG10cyA9IGdyYXBoLmZpbmQoc3ViaiwgcHJlZGljYXRlKTtcbiAgICAgIGlmIChzdG10cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBlclN0YXRlbWVudChncmFwaCwgW3N0bXRzWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwZXJTdGF0ZW1lbnQoZ3JhcGgsIFtdKTtcbiAgfSxcbiAgb2JqZWN0cyhwcmVkaWNhdGUpIHtcbiAgICBsZXQgbnN0YXRzID0gW107XG4gICAgbGV0IGk7XG4gICAgaWYgKHBlclN1YmplY3QgPT09IHRydWUpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0ZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5zdGF0cyA9IG5zdGF0cy5jb25jYXQoZ3JhcGguZmluZChzdGF0ZW1lbnRzW2ldLmdldFN1YmplY3QoKSwgcHJlZGljYXRlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0ZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHQgPSBzdGF0ZW1lbnRzW2ldLmdldFR5cGUoKTtcbiAgICAgICAgaWYgKHQgPT09ICd1cmknIHx8IHQgPT09ICdibm9kZScpIHtcbiAgICAgICAgICBuc3RhdHMgPSBuc3RhdHMuY29uY2F0KGdyYXBoLmZpbmQoc3RhdGVtZW50c1tpXS5nZXRWYWx1ZSgpLCBwcmVkaWNhdGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGVyU3RhdGVtZW50KGdyYXBoLCBuc3RhdHMpO1xuICB9LFxuICBjb25zdHIocHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICBsZXQgX29iamVjdCA9IG9iamVjdDtcbiAgICBpZiAocmRmanNvblV0aWwuaXNTdHJpbmcoX29iamVjdCkpIHtcbiAgICAgIF9vYmplY3QgPSB7IHR5cGU6ICd1cmknLCB2YWx1ZTogX29iamVjdCB9O1xuICAgIH1cbiAgICBjb25zdCBuc3RhdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN1YmogPSBwZXJTdWJqZWN0ID8gc3RhdGVtZW50c1tpXS5nZXRTdWJqZWN0KCkgOiBzdGF0ZW1lbnRzW2ldLmdldFZhbHVlKCk7XG4gICAgICBpZiAoZ3JhcGguZmluZChzdWJqLCBwcmVkaWNhdGUsIF9vYmplY3QpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbnN0YXRzLnB1c2goc3RhdGVtZW50c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwZXJTdGF0ZW1lbnQoZ3JhcGgsIG5zdGF0cywgcGVyU3ViamVjdCk7XG4gIH0sXG4gIC8qKlxuICAgKiBGb3IgZWFjaCBtYXRjaCB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgd2l0aCBhIGZvY3VzZWQgaXRlcmF0b3IuXG4gICAqL1xuICBlYWNoKGNhbGxiYWNrLCB0eXBlKSB7XG4gICAgaWYgKHBlclN1YmplY3QgPT09IHRydWUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdWJqID0gc3RhdGVtZW50c1tpXS5nZXRTdWJqZWN0KCk7XG4gICAgICAgIGNvbnN0IHQgPSBzdWJqLnN1YnN0cmluZygwLCAyKSA9PT0gJ186JyA/ICdibm9kZScgOiAndXJpJztcbiAgICAgICAgaWYgKHR5cGUgPT0gbnVsbCB8fCB0eXBlID09PSB0KSB7XG4gICAgICAgICAgY2FsbGJhY2socGVyU3RhdGVtZW50KGdyYXBoLCBzdGF0ZW1lbnRzW2ldLCBwZXJTdWJqZWN0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdGF0ZW1lbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNhbGxiYWNrKHBlclN0YXRlbWVudChncmFwaCwgc3RhdGVtZW50c1tqXSwgcGVyU3ViamVjdCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbm9kZXModHlwZSkge1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGlmIChwZXJTdWJqZWN0ID09PSB0cnVlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3ViaiA9IHN0YXRlbWVudHNbaV0uZ2V0U3ViamVjdCgpO1xuICAgICAgICBjb25zdCB0ID0gc3Viai5zdWJzdHJpbmcoMCwgMikgPT09ICdfOicgPyAnYm5vZGUnIDogJ3VyaSc7XG4gICAgICAgIGlmICh0eXBlID09IG51bGwgfHwgdHlwZSA9PT0gdCkge1xuICAgICAgICAgIHJlcy5wdXNoKHsgdHlwZTogdCwgdmFsdWU6IHN0YXRlbWVudHNbaV0uZ2V0U3ViamVjdCgpIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RhdGVtZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAodHlwZSA9PSBudWxsIHx8IHR5cGUgPT09IHN0YXRlbWVudHNbal0uZ2V0VHlwZSgpKSB7XG4gICAgICAgICAgcmVzLnB1c2goc3RhdGVtZW50c1tqXS5nZXRPYmplY3QoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfSxcbiAgdmFsdWVzKHR5cGUpIHtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBpZiAocGVyU3ViamVjdCA9PT0gdHJ1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN1YmogPSBzdGF0ZW1lbnRzW2ldLmdldFN1YmplY3QoKTtcbiAgICAgICAgY29uc3QgdCA9IHN1Ymouc3Vic3RyaW5nKDAsIDIpID09PSAnXzonID8gJ2Jub2RlJyA6ICd1cmknO1xuICAgICAgICBpZiAodHlwZSA9PSBudWxsIHx8IHR5cGUgPT09IHQpIHtcbiAgICAgICAgICByZXMucHVzaChzdGF0ZW1lbnRzW2ldLmdldFN1YmplY3QoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdGF0ZW1lbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICh0eXBlID09IG51bGwgfHwgdHlwZSA9PT0gc3RhdGVtZW50c1tqXS5nZXRUeXBlKCkpIHtcbiAgICAgICAgICByZXMucHVzaChzdGF0ZW1lbnRzW2pdLmdldFZhbHVlKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0sXG4gIGZpcnN0VmFsdWUodHlwZSkge1xuICAgIGlmIChwZXJTdWJqZWN0ID09PSB0cnVlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3ViaiA9IHN0YXRlbWVudHNbaV0uZ2V0U3ViamVjdCgpO1xuICAgICAgICBjb25zdCB0ID0gc3Viai5zdWJzdHJpbmcoMCwgMikgPT09ICdfOicgPyAnYm5vZGUnIDogJ3VyaSc7XG4gICAgICAgIGlmICh0eXBlID09IG51bGwgfHwgdHlwZSA9PT0gdCkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZW1lbnRzW2ldLmdldFN1YmplY3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXRlbWVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gbnVsbCB8fCB0eXBlID09PSBzdGF0ZW1lbnRzW2pdLmdldFR5cGUoKSkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZW1lbnRzW2pdLmdldFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbn0pO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFuIEFQSSBmb3IgYWNjZXNzaW5nIGFuZCBtYW5pcHVsYXRpbmcgYW4gUkRGIEdyYXBoLlxuICpcbiAqIFRoZSBHcmFwaCBBUEkgd3JhcHMgYSBwdXJlIFJERiBKU09OIG9iamVjdCB0byBtYWtlIGl0IGVhc3kgdG8gYWNjZXNzIGFuZCBtYW5pcHVsYXRlIG9uIHRoZVxuICogbGV2ZWwgb2YgcmRmanNvbi9TdGF0ZW1lbnRzLlxuICogTm90ZSB0aGF0IGZvciBlZmZpY2llbmN5IHJlYXNvbnMgdGhlIFJERiBKU09OIG9iamVjdCB3aWxsIGJlIGV4dGVuZGVkLCBoZW5jZSBpdCB3aWxsXG4gKiBjb250YWluIGF0dHJpYnV0ZXMgdGhhdCBnb2VzIGJleW9uZCB0aGUgc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBUaGUgcHVyZSBSREYgSlNPTiBvYmplY3Q6XG4gKiA8dWw+PGxpPmNhbiBzdGlsbCBiZSBpbnNwZWN0ZWQgaW5kZXBlbmRlbnRseSwgaXQgd2lsbCBjb250YWluIHRoZSBjb3JyZWN0IFJERiBleHByZXNzaW9uLlxuICogICAgIDwvbGk+XG4gKiAgICAgPGxpPmNhbm5vdCBiZSBtb2RpZmllZCBkaXJlY3RseSBzaW5jZSBpdCB3aWxsIGNvbmZsaWN0IHdpdGggbWFuaXB1bGF0aW9ucyB2aWEgdGhpc1xuICogICAgIGNsYXNzLCB0aGUgZXhjZXB0aW9uIGlzIHRoZSBzdGF0ZW1lbnQgb2JqZWN0IGF0dHJpYnV0ZXMgd2hpY2ggY2FuIGJlIHVwZGF0ZWQuPC9saT5cbiAqICAgICA8bGk+aXMgbm93IHVuc3VpdGFibGUgdG8gYmUgY29tbXVuaWNhdGVkIGZvciBpbnN0YW5jZSBiYWNrIHRvIGEgc2VydmVyIHN0b3JhZ2VcbiAqICAgICAgZHVlIHRvIHRoZSBleHRyYSBhdHRyaWJ1dGVzLiBVc2UgdGhlIGV4cG9ydFJERkpTT04gZnVuY3Rpb24gdG8gZ2V0IGEgY2xlYW4gUkRGXG4gKiAgICAgIEpTT04gb2JqZWN0LjwvbGk+PC91bD5cbiAqXG4gKiBAZXhwb3J0cyByZGZqc29uL0dyYXBoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBpcyBzaGVhcCwgbm8gaW5kZXhlcyBvciBhZGRpdGlvbmFsIHN0YXRlbWVudHMgYXJlIGNyZWF0ZWQgdW50aWwgcmVxdWVzdGVkXG4gICAqIG9yIGNyZWF0ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gZ3JhcGggYSBwdXJlIFJERiBKU09OIG9iamVjdCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gdGhhdCB3aWxsIGJlXG4gICAqIG1hbmlwdWxhdGVkIGludGVybmFsbHkuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbj19IHZhbGlkYXRlIGluZGljYXRlcyB3ZXRoZXIgdG8gdmFsaWRhdGUgdGhlIGdyYXBoIGRpcmVjdGx5IG9yIG5vdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGdyYXBoID0gbnVsbCwgdmFsaWRhdGUpIHtcbiAgICB0aGlzLl9ncmFwaCA9IGdyYXBoIHx8IHt9O1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIGluZGV4IG9mIGJub2Rlcywgd2lsbCBuZXZlciBzaHJpbmsgYWZ0ZXIgY3JlYXRpb24gb2YgdGhpcyBncmFwaCBpbnN0YW5jZS5cbiAgICAgKiBOZXcgYm5vZGVzIHdpbGwgYmUgYWRkZWQgYnV0IGJub2RlcyBjb250YWluZWQgaW4gcmVtb3ZlZCBzdGF0ZW1lbnRzIHdpbGwgYmUga2VwdFxuICAgICAqIGluIGNhc2UgdGhlIHN0YXRlbWVudCBpcyBvbmx5IHRlbXBvcmFyaWx5IHVuYXNzZXJ0ZWQuXG4gICAgICovXG4gICAgdGhpcy5fYm5vZGVzID0ge307XG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSB0aGUgZ3JhcGggaGFzIGJlZW4gaXRlcmF0ZWQgdGhyb3VnaCBhbmQgYWxsIGZvdW5kIGJub2RlcyBoYXZlIGJlZW4gYWRkZWQgdG8gaW5kZXguXG4gICAgICovXG4gICAgdGhpcy5fYm5vZGVzSW5kZXhlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHZhbGlkYXRlICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgIH1cbiAgICB0aGlzLl9jaGFuZ2VkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ3JhcGggY29udGFpbnMgbm8gYXNzZXJ0ZWQgc3RhdGVtZW50cy5cbiAgICovXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuICFPYmplY3Qua2V5cyh0aGlzLl9ncmFwaCkuZmluZCgocykgPT4ge1xuICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLl9ncmFwaFtzXTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykuZmluZChwID0+XG4gICAgICAgIHByb3BzW3BdLmZpbmQobyA9PiBvLl9zdGF0ZW1lbnQgPT0gbnVsbCB8fCBvLl9zdGF0ZW1lbnQuaXNBc3NlcnRlZCgpKSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBvbkNoYW5nZSgpIHtcbiAgfVxuXG4gIHNldENoYW5nZWQoY2hhbmdlZCkge1xuICAgIHRoaXMuX2NoYW5nZWQgPSAhIShjaGFuZ2VkID09PSB0cnVlIHx8IGNoYW5nZWQgPT0gbnVsbCk7XG4gICAgaWYgKHRoaXMuX2NoYW5nZWQpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBpc0NoYW5nZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYW5nZWQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbGwgc3RhdGVtZW50cyBvZiBhIGdyYXBoIHRvIHRoZSBjdXJyZW50IGdyYXBoLlxuICAgKiBXaWxsIGNyZWF0ZSBuZXcgYmxhbmsgbm9kZXMgaWRzIGluIHRoZSBzb3VyY2UgZ3JhcGggdG8gYXZvaWQgY2xhc2hlcyB3aXRoIHRhcmdldCBncmFwaC5cbiAgICpcbiAgICogQHBhcmFtIGdyYXBoXG4gICAqL1xuICBhZGRBbGwoZ3JhcGgsIG5nKSB7XG4gICAgY29uc3QgYm5vZGVJZHggPSB7fTtcbiAgICBsZXQgYm47XG4gICAgY29uc3Qgc3RtdHMgPSBncmFwaC5maW5kKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG10cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3RtdCA9IHN0bXRzW2ldO1xuICAgICAgbGV0IHMgPSBzdG10LmdldFN1YmplY3QoKTtcbiAgICAgIGxldCBwID0gc3RtdC5nZXRQcmVkaWNhdGUoKTtcbiAgICAgIGNvbnN0IG8gPSBzdG10LmdldENsZWFuT2JqZWN0KCk7XG4gICAgICBpZiAobmcpIHtcbiAgICAgICAgby5uZyA9IG5nO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5pbmRleE9mKCdfOicpID09PSAwKSB7XG4gICAgICAgIGJuID0gYm5vZGVJZHhbc10gfHwgdGhpcy5fbmV3Qk5vZGUoKTtcbiAgICAgICAgYm5vZGVJZHhbc10gPSBibjtcbiAgICAgICAgcyA9IGJuO1xuICAgICAgfVxuICAgICAgaWYgKHAuaW5kZXhPZignXzonKSA9PT0gMCkge1xuICAgICAgICBibiA9IGJub2RlSWR4W3BdIHx8IHRoaXMuX25ld0JOb2RlKCk7XG4gICAgICAgIGJub2RlSWR4W3BdID0gYm47XG4gICAgICAgIHAgPSBibjtcbiAgICAgIH1cbiAgICAgIGlmIChvLnR5cGUgPT09ICdibm9kZScpIHtcbiAgICAgICAgYm4gPSBibm9kZUlkeFtvLnZhbHVlXSB8fCB0aGlzLl9uZXdCTm9kZSgpO1xuICAgICAgICBibm9kZUlkeFtvLnZhbHVlXSA9IGJuO1xuICAgICAgICBvLnZhbHVlID0gYm47XG4gICAgICB9XG4gICAgICB0aGlzLmFkZChzLCBwLCBvKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN0YXRlbWVudCB0byB0aGUgZ3JhcGgsIGVpdGhlciBhbiBleGlzdGluZyBzdGF0ZW1lbnQgb3IgY3JlYXRlcyBhbiBuZXcgb25lIGZyb20gdGhlXG4gICAqIHRyaXBsZSBwYXR0ZXJuLiBJZiBhIHN0YXRlbWVudCBpbnN0YW5jZSBpcyB1c2VkIGl0IG1heSBvcmlnaW5hdGUgZnJvbSBhbm90aGVyIGdyYXBoLCBhbHRob3VnaFxuICAgKiBwb3RlbnRpYWwgYm5vZGVzIGFyZSBub3QgcmVuYW1lZC5cbiAgICpcbiAgICogQHBhcmFtIHtyZGZqc29uL1N0YXRlbWVudHxzdHJpbmd9IHMgZWl0aGVyIHRoZSBzdWJqZWN0IGluIGEgdHJpcGxlIHBhdHRlcm4gb3IgYSBTdGF0ZW1lbnRcbiAgICogaW5zdGFuY2UgdG8gYWRkLFxuICAgKiBpbiB0aGUgbGF0dGVyIGNhc2UgdGhlIG90aGVyIHBhcmFtZXRlcnMgbXVzdCBiZSB1bmRlZmluZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHAgdGhlIHByZWRpY2F0ZSBvZiB0aGUgdHJpcGxlIHRvIGFkZC5cbiAgICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBvIHRoZSBvYmplY3Qgd2hlcmUgdGhlIGF0dHJpYnV0ZXMgdHlwZSwgdmFsdWUsIGxhbmcgYW5kIGRhdGF0eXBlIGFyZVxuICAgKiB1c2VkIHRvIGRlc2NyaWJlIHRoZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NpbGVudD1mYWxzZV0gc2lsZW50IGlmIHRoZSBjaGFuZ2Ugc2hvdWxkIG1hcmsgdGhlIGdyYXBoIGFzIGNoYW5nZWRcbiAgICogQHJldHVybnMge3JkZmpzb24vU3RhdGVtZW50fVxuICAgKi9cbiAgYWRkKHMsIHAgPSBudWxsLCBvID0gbnVsbCwgc2lsZW50ID0gZmFsc2UpIHtcbiAgICBpZiAocyBpbnN0YW5jZW9mIFN0YXRlbWVudCkge1xuICAgICAgY29uc3QgX3AgPSBzLmdldFByZWRpY2F0ZSgpO1xuICAgICAgY29uc3QgX28gPSBzLmdldE9iamVjdCgpO1xuICAgICAgY29uc3QgX3MgPSBzLmdldFN1YmplY3QoKTtcbiAgICAgIHRoaXMuX3RyYWNrQk5vZGVzKF9zLCBfcCwgX28pO1xuICAgICAgY29uc3QgbzEgPSB0aGlzLl9ncmFwaE9iamVjdChfbyk7XG4gICAgICBjb25zdCBvMiA9IHJkZmpzb25VdGlsLmFkZCh0aGlzLl9ncmFwaCwgX3MsIF9wLCBvMSk7XG4gICAgICBpZiAoc2lsZW50ICE9PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuc2V0Q2hhbmdlZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2dldChfcywgX3AsIG8yLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHMsIHAsIG8sIHRydWUsIHNpbGVudCk7XG4gIH1cblxuICBhZGRMKHMsIHAsIHZhbHVlLCBsYW5nKSB7XG4gICAgY29uc3QgbyA9IHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZSB9O1xuICAgIGlmICh0eXBlb2YgbGFuZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG8ubGFuZyA9IGxhbmc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZShzLCBwLCBvLCB0cnVlKTtcbiAgfVxuXG4gIGFkZEQocywgcCwgdmFsdWUsIGRhdGF0eXBlKSB7XG4gICAgY29uc3QgbyA9IHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZSB9O1xuICAgIGlmICh0eXBlb2YgZGF0YXR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvLmRhdGF0eXBlID0gbnMuZXhwYW5kKGRhdGF0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHMsIHAsIG8sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgc3RhdGVtZW50IGFuZCBhc3NvY2lhdGVzIGl0IHRvIHRoZSBncmFwaCwgdW5sZXNzIGFzc2VydCBpcyBleHBsaWNpdGx5IHNldCB0b1xuICAgKiBmYWxzZSBpdCBpcyBhbHNvIGFkZGVkIHRvIHRoZSBncmFwaC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmc9fSBzIHRoZSBzdWJqZWN0IGFzIGEgdXJpLCBpZiB1bmRlZmluZWQgYSBuZXcgYmxhbmsgbm9kZSBpcyBjcmVhdGVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcCB0aGUgcHJlZGljYXRlIGFzIGEgdXJpLCBpZiB1bmRlZmluZWQgYSBuZXcgYmxhbmsgbm9kZSBpcyBjcmVhdGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gbyB0aGUgb2JqZWN0IGluIHRoZSBmb3JtIG9mIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBhdHRyaWJ1dGVzOlxuICAgKiAndHlwZScsICd2YWx1ZScsICdsYW5nJywgYW5kICdkYXRhdHlwZScuIElmIHVuZGVmaW5lZCBhIG5ldyBibGFuayBub2RlIGlzIGNyZWF0ZWQuXG4gICAqICBJZiBhIHN0cmluZyBpcyBwcm92aWRlZCBpdCBpcyBhc3N1bWVkIHRvIGJlIGEgdXJsLCBpLmUuIHNlbmRpbmcgaW4gXCJ0aGUgdXJsXCIgaXMgdGhlIHNhbWUgYXNcbiAgICogIHNlbmRpbmcgaW4ge3R5cGU6IFwidXJpXCIsIHZhbHVlOiBcInRoZSB1cmxcIn0uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2Fzc2VydD10cnVlXSBpbmRpY2F0ZWQgaWYgdGhlIHN0YXRlbWVudCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGdyYXBoIGRpcmVjdGx5LlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkIHRydWUgaXMgYXNzdW1lZC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbc2lsZW50PWZhbHNlXSBzaWxlbnQgaWYgdGhlIGNoYW5nZSBzaG91bGQgbWFyayB0aGUgZ3JhcGggYXMgY2hhbmdlZFxuICAgKiBAcmV0dXJucyB7cmRmanNvbi9TdGF0ZW1lbnR9XG4gICAqIEBzZWUgcmRmanNvbi9yZGZqc29uI2FkZFxuICAgKi9cbiAgY3JlYXRlKHMgPSBudWxsLCBwID0gbnVsbCwgbyA9IG51bGwsIGFzc2VydCA9IHRydWUsIHNpbGVudCA9IGZhbHNlKSB7XG4gICAgbGV0IF9zID0gcztcbiAgICBsZXQgX3AgPSBwO1xuICAgIGxldCBfbyA9IG87XG4gICAgaWYgKF9zID09IG51bGwpIHtcbiAgICAgIF9zID0gdGhpcy5fbmV3Qk5vZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3MgPSBucy5leHBhbmQoX3MpO1xuICAgIH1cbiAgICBpZiAoX3AgPT0gbnVsbCkge1xuICAgICAgX3AgPSB0aGlzLl9uZXdCTm9kZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcCA9IG5zLmV4cGFuZChfcCk7XG4gICAgfVxuXG4gICAgaWYgKF9vID09IG51bGwpIHtcbiAgICAgIF9vID0geyB0eXBlOiAnYm5vZGUnLCB2YWx1ZTogdGhpcy5fbmV3Qk5vZGUoKSB9O1xuICAgIH0gZWxzZSBpZiAocmRmanNvblV0aWwuaXNTdHJpbmcoX28pKSB7XG4gICAgICBfbyA9IHsgdHlwZTogJ3VyaScsIHZhbHVlOiBucy5leHBhbmQoX28pIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBvYmplY3QgaXMgY29waWVkIHRvIGF2b2lkIHJldXNlIG9mIHNhbWUgb2JqZWN0IGluIG11bHRpcGxlIHBsYWNlcyBvZiB0aGUgZ3JhcGhcbiAgICAgIC8vIGxlYWRpbmcgdG8gc3RyYW5nZSB1cGRhdGVzLlxuICAgICAgX28gPSB7IHR5cGU6IF9vLnR5cGUsIHZhbHVlOiBfby52YWx1ZSwgbGFuZzogX28ubGFuZywgZGF0YXR5cGU6IF9vLmRhdGF0eXBlIH07XG4gICAgICBpZiAoX28udHlwZSA9PT0gJ3VyaScgJiYgX28udmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBfby52YWx1ZSA9IG5zLmV4cGFuZChfby52YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoX28uZGF0YXR5cGUpIHtcbiAgICAgICAgX28uZGF0YXR5cGUgPSBucy5leHBhbmQoX28uZGF0YXR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXNzZXJ0ICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgbzEgPSByZGZqc29uVXRpbC5hZGQodGhpcy5fZ3JhcGgsIF9zLCBfcCwgX28pO1xuICAgICAgaWYgKHNpbGVudCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnNldENoYW5nZWQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZShfcywgX3AsIG8xLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdGF0ZW1lbnQodGhpcywgX3MsIF9wLCBfbywgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGZ1bmN0aW9uIHRoYXQgY29tYmluZXMgdGhlIGZpbmQgYW5kIHJlbW92ZSBmdW5jdGlvbnMuXG4gICAqIEBwYXJhbSB7U3RyaW5nPX0gcyB0aGUgc3ViamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZz19IHAgdGhlIHByZWRpY2F0ZVxuICAgKiBAcGFyYW0ge09iamVjdD19IG8gdGhlIG9iamVjdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaWxlbnQ9ZmFsc2VdIHNpbGVudCBpZiB0aGUgY2hhbmdlIHNob3VsZCBtYXJrIHRoZSBncmFwaCBhcyBjaGFuZ2VkXG4gICAqIEBzZWUgcmRmanNvbi9HcmFwaCNmaW5kXG4gICAqIEBzZWUgcmRmanNvbi9HcmFwaCNyZW1vdmVcbiAgICovXG4gIGZpbmRBbmRSZW1vdmUocywgcCwgbywgc2lsZW50ID0gZmFsc2UpIHtcbiAgICBjb25zdCBzdG10cyA9IHRoaXMuZmluZChzLCBwLCBvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0bXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlbW92ZShzdG10c1tpXSwgc2lsZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gc3RhdGVtZW50IGZyb20gdGhlIGdyYXBoLlxuICAgKiBJZiB5b3UgcGxhbiB0byBrZWVwIHRoZSBzdGF0ZW1lbnQgYXJvdW5kIGFuZCBhc3NlcnQgaXQgbGF0ZXIsXG4gICAqIGl0IGlzIHJlY29tbWVuZGVkIHRvIG9ubHkgdXNlIHRoZSByZGZqc29uL1N0YXRlbWVudCNzZXRBc3NlcnRlZCBtZXRob2QgaW5zdGVhZC5cbiAgICpcbiAgICogQHBhcmFtIHtyZGZqc29uL1N0YXRlbWVudH0gc3RhdGVtZW50IHRoZSBzdGF0ZW1lbnQgdG8gcmVtb3ZlIGZyb20gdGhlIGdyYXBoLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaWxlbnQ9ZmFsc2VdIHNpbGVudCBpZiB0aGUgY2hhbmdlIHNob3VsZCBtYXJrIHRoZSBncmFwaCBhcyBjaGFuZ2VkXG4gICAqIEBzZWUgcmRmanNvbi9TdGF0ZW1lbnQjc2V0QXNzZXJ0ZWRcbiAgICovXG4gIHJlbW92ZShzdGF0ZW1lbnQsIHNpbGVudCA9IGZhbHNlKSB7XG4gICAgY29uc3QgcyA9IHN0YXRlbWVudC5nZXRTdWJqZWN0KCk7XG4gICAgY29uc3QgcCA9IHN0YXRlbWVudC5nZXRQcmVkaWNhdGUoKTtcbiAgICBjb25zdCBvID0gc3RhdGVtZW50LmdldE9iamVjdCgpO1xuICAgIHRoaXMuX3RyYWNrQk5vZGVzKHMsIHAsIG8pO1xuICAgIGlmIChyZGZqc29uVXRpbC5yZW1vdmUodGhpcy5fZ3JhcGgsIHMsIHAsIG8pICE9IG51bGwpIHtcbiAgICAgIGlmIChzaWxlbnQgIT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5zZXRDaGFuZ2VkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBzdGF0ZW1lbnRzIHRoYXQgZnVsZmlsbHMgdGhlIGdpdmVuIHBhdHRlcm4uIEFueSBjb21iaW5hdGlvbiBvZiB0aGUgYXJndW1lbnRzIG1heVxuICAgKiBiZSBsZWZ0IG91dC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmc9fSBzIHRoZSBzdWJqZWN0IGluIHRoZSBzdGF0ZW1lbnRzIHRvIGJlIHJldHVybmVkLCB1bmRlZmluZWQgaW5kaWNhdGVzIHRoYXRcbiAgICogYW55IHN1YmplY3QgaXMgb2suXG4gICAqIEBwYXJhbSB7U3RyaW5nPX0gcCB0aGUgcHJlZGljYXRlIGluIHRoZSBzdGF0ZW1lbnRzIHRvIGJlIHJldHVybmVkLCB1bmRlZmluZWQgaW5kaWNhdGVzXG4gICAqIHRoYXQgYW55IHByZWRpY2F0ZSBpcyBvay5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvIHRoZSBvYmplY3QgaW4gdGhlIHN0YXRlbWVudHMgdG8gYmUgcmV0dXJuZWQsIHVuZGVmaW5lZCBpbmRpY2F0ZXMgdGhhdFxuICAgKiBhbnkgb2JqZWN0IGlzIG9rLlxuICAgKiBPYmpldHMgb2YgbWF0Y2hpbmcgc3RhdGVtZW50cyBoYXZlIHRvIGJlIGVxdWFsIGFjY29yZGluZyB0byB0aGUgb2JqZWN0RXF1YWxzIG1ldGhvZC5cbiAgICogQHJldHVybiB7cmRmanNvbi9TdGF0ZW1lbnRbXX1cbiAgICogQHNlZSByZGZqc29uL3JkZmpzb24jb2JqZWN0RXF1YWxzXG4gICAqL1xuICBmaW5kKHMsIHAsIG8pIHtcbiAgICBsZXQgX3MgPSBzO1xuICAgIGxldCBfcCA9IHA7XG4gICAgbGV0IF9vID0gbztcbiAgICAvLyBub25lLCBzLCBwLCBzJnBcbiAgICBpZiAodHlwZW9mIF9zID09PSAnc3RyaW5nJykge1xuICAgICAgX3MgPSBucy5leHBhbmQoX3MpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIF9wID09PSAnc3RyaW5nJykge1xuICAgICAgX3AgPSBucy5leHBhbmQoX3ApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIF9vID09PSAnb2JqZWN0JyAmJiBfbyAhPT0gbnVsbCAmJiBfby50eXBlID09PSAndXJpJykge1xuICAgICAgX28udmFsdWUgPSBucy5leHBhbmQoX28udmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF9vID09PSAnc3RyaW5nJykge1xuICAgICAgX28gPSB7IHR5cGU6ICd1cmknLCB2YWx1ZTogbnMuZXhwYW5kKF9vKSB9O1xuICAgIH1cbiAgICBpZiAoX28gPT0gbnVsbCkge1xuICAgICAgLy8gbm9uZSwgc1xuICAgICAgaWYgKF9wID09IG51bGwpIHtcbiAgICAgICAgaWYgKF9zID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZmluZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kUyhfcyk7XG5cbiAgICAgICAgLy8gcCwgcyZwXG4gICAgICB9XG4gICAgICAvLyBwXG4gICAgICBpZiAoX3MgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmluZFAoX3ApO1xuICAgICAgICAvLyBzJnBcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9maW5kU1AoX3MsIF9wKTtcbiAgICB9XG4gICAgLy8gbywgcyZvXG4gICAgaWYgKF9wID09IG51bGwpIHtcbiAgICAgIGlmIChfcyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kTyhfbyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fZmluZFNPKF9zLCBfbyk7XG4gICAgfVxuXG4gICAgLy8gcCZvXG4gICAgaWYgKF9zID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl9maW5kUE8oX3AsIF9vKTtcbiAgICB9XG5cbiAgICAvLyBzJnAmb1xuICAgIGNvbnN0IHN0bXQgPSB0aGlzLl9nZXQoX3MsIF9wLCByZGZqc29uVXRpbC5jb250YWlucyh0aGlzLl9ncmFwaCwgX3MsIF9wLCBfbyksIHRydWUpO1xuICAgIGlmIChzdG10ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIFtzdG10XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBvZiBvYmplY3Qgb2YgdGhlIGZpcnN0IG1hdGNoaW5nIFN0YXRlbWVudFxuICAgKiBmb3IgdGhlIGdpdmVuIHN1YmplY3QgYW5kIHByZWRpY2F0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmc9fSBzIHRoZSBzdWJqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nPX0gcCB0aGUgcHJlZGljYXRlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHZhbHVlLCBtYXkgYmUgYSBsaXRlcmFsIG9yIGEgVVJJLCBpZiB1bmRlZmluZWQgbm8gbWF0Y2hpbmcgc3RhdGVtZW50XG4gICAqIChhbmQgdmFsdWUpIGNvdWxkIGJlIGZvdW5kLlxuICAgKiBAc2VlIHJkZmpzb24vR3JhcGgjZmluZFxuICAgKi9cbiAgZmluZEZpcnN0VmFsdWUocywgcCkge1xuICAgIGNvbnN0IGFyciA9IHRoaXMuZmluZChzLCBwKTtcbiAgICBpZiAoYXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBhcnJbMF0uZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBwcm9qZWN0aW9uLCBhIHBsYWluIG9iamVjdCB3aXRoIHNpbXBsZSBhdHRyaWJ1dGUgdmFsdWUgcGFpcnMgZ2l2ZW4gYSBzdWJqZWN0XG4gICAqIGFuZCBhIG1hcHBpbmcuXG4gICAqIFRoZSBtYXBwaW5nIGlzIGFuIG9iamVjdCB3aGVyZSB0aGUgc2FtZSBhdHRyaWJ1dGVzIGFwcGVhciBidXQgd2l0aCB0aGUgcHJlZGljYXRlcyBhcmUgdmFsdWVzLlxuICAgKiBIZW5jZSwgZWFjaCBhdHRyaWJ1dGUgZ2l2ZXMgcmlzZSB0byBhIHNlYXJjaCBmb3IgYWxsIHN0YXRlbWVudHMgd2l0aCB0aGUgZ2l2ZW4gc3ViamVjdCBhbmRcbiAgICogdGhlIHByZWRpY2F0ZSBzcGVjaWZpZWQgYnkgdGhlIGF0dHJpYnV0ZS5cbiAgICogVGhlIHJlc3VsdCBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBtYXBwaW5nIGF0dHJpYnV0ZXMgd2l0aCB2YWx1ZXMgZnJvbSB0aGUgdGhlIGZpcnN0XG4gICAqIG1hdGNoZWQgc3RhdGVtZW50cyBvYmplY3QgdmFsdWUgaWYgdGhlcmUgYXJlIGFueS5cbiAgICogVG8gYWNjZXNzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gbGlrZSBtdWx0aXBsZSBzdGF0ZW1lbnQgb3IgdGhlIHN0YXRlbWVudHNcbiAgICogKHR5cGUsIGxhbmd1YWdlLCBkYXRhdHlwZSkgYSBcIipcIiBwcmVwZW5kZWQgdmVyc2lvbiBvZiBlYWNoIGF0dHJpYnV0ZSBjYW4gYmUgcHJvdmlkZWQgdGhhdFxuICAgKiBjb250YWlucyBhIGxpc3Qgb2YgbWF0Y2hpbmcgU3RhdGVtZW50cyBpZiBzbyBpbmRpY2F0ZWQgYnkgdGhlIG11bHRpcGxlVmFsdWVTdHlsZSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzIHRoZSBzdWJqZWN0IHRvIHVzZSBmb3IgdGhlIHByb2plY3Rpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXBwaW5nIHRoZSBtYXBwaW5nIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IG11bHRpcGxlVmFsdWVTdHlsZSBpZiBwcm92aWRlZCBhbiBhcnJheSBpcyBwcm92aWRlZCBmb3IgdGhhdCBwcm9wZXJ0eVxuICAgKiBwcmVmaXhlZCB3aXRoIFwiKlwiLCB0aGUgYXJyYXkgc2hvdWxkIGJlIGluZGljYXRlZCB0byBiZSBlaXRoZXJcbiAgICogXCJzdGF0ZW1lbnRzXCIsIFwidmFsdWVzXCIgb3IgXCJvYmplY3RzXCIuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBwcm9qID0gZ3JhcGgucHJvamVjdGlvbihcImh0dHA6Ly9leGFtcGxlLmNvbVwiLCB7XG4gICAqICAgICBcInRpdGxlXCI6ICAgICAgIFwiaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL3RpdGxlXCIsXG4gICAqICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL2Rlc2NyaXB0aW9uXCJcbiAgICogfSk7XG4gICAqIC8vIFRoZSBvYmplY3QgcHJvaiBub3cgaGFzIHRoZSBhdHRyaWJ1dGVzIHRpdGxlLCAqdGl0bGUsIGRlc2NyaXB0aW9uLCBhbmQgKmRlc2NyaXB0aW9uLlxuICAgKlxuICAgKiAvLyBBY2Nlc3NpbmcgdGhlIHRpdGxlIG9mIGh0dHA6Ly9leGFtcGxlLmNvbVxuICAgKiBjb25zb2xlLmxvZyhwcm9qLnRpdGxlKTtcbiAgICpcbiAgICogLy8gVG8gZ2V0IGhvbGQgb2YgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhdmFpbGFibGUgaW4gdGhlIHN0YXRlbWVudCxcbiAgICogLy8gZm9yIGluc3RhbmNlIHRoZSBsYW5ndWFnZSBvZiBhIGxpdGVyYWw6XG4gICAqIGNvbnNvbGUubG9nKHByb2pbXCIqdGl0bGVcIl1bMF0uZ2V0TGFuZ3VhZ2UoKSlcbiAgICpcbiAgICovXG4gIHByb2plY3Rpb24ocywgbWFwcGluZywgbXVsdGlwbGVWYWx1ZVN0eWxlKSB7XG4gICAgY29uc3QgbWFwcGVkID0ge307XG4gICAgT2JqZWN0LmtleXMobWFwcGluZykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCBwcm9wID0gbWFwcGluZ1trZXldO1xuICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5maW5kKHMsIHByb3ApO1xuICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChrZXlbMF0gPT09ICcqJykge1xuICAgICAgICAgIG1hcHBlZFtrZXkuc3Vic3RyKDEpXSA9IHZhbHVlcy5tYXAodmFsID0+IHZhbC5nZXRWYWx1ZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXBwZWRba2V5XSA9IHZhbHVlc1swXS5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAobXVsdGlwbGVWYWx1ZVN0eWxlIHx8ICdub25lJykge1xuICAgICAgICAgIGNhc2UgJ3N0YXRlbWVudCc6XG4gICAgICAgICAgICBtYXBwZWRbYCoke2tleX1gXSA9IHZhbHVlcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ29iamVjdHMnOlxuICAgICAgICAgICAgbWFwcGVkW2AqJHtrZXl9YF0gPSB2YWx1ZXMubWFwKHYgPT4gdi5nZXRDbGVhbk9iamVjdCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3ZhbHVlcyc6XG4gICAgICAgICAgICBtYXBwZWRbYCoke2tleX1gXSA9IHZhbHVlcy5tYXAodiA9PiB2LmdldFZhbHVlKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXBwZWQ7XG4gIH1cblxuICBzdWJqZWN0cyhwLCBvKSB7XG4gICAgcmV0dXJuIHBlclN0YXRlbWVudCh0aGlzLCB0aGlzLmZpbmQobnVsbCwgcCwgbyksIHRydWUpO1xuICB9XG5cbiAgc3ViamVjdChwLCBvKSB7XG4gICAgcmV0dXJuIHBlclN0YXRlbWVudCh0aGlzLCB6ZXJvT3JPbmUodGhpcy5maW5kKG51bGwsIHAsIG8pKSwgdHJ1ZSk7XG4gIH1cblxuICBvYmplY3RzKHMsIHApIHtcbiAgICByZXR1cm4gcGVyU3RhdGVtZW50KHRoaXMsIHRoaXMuZmluZChzLCBwLCBudWxsKSk7XG4gIH1cblxuICBvYmplY3QocywgcCkge1xuICAgIHJldHVybiBwZXJTdGF0ZW1lbnQodGhpcywgemVyb09yT25lKHRoaXMuZmluZChzLCBwLCBudWxsKSkpO1xuICB9XG5cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIHJkZjpMaXN0IGZvciB0aGUgcHJvdmlkZWQgYXJyYXkuXG4gICAqIEBwYXJhbSB7YXJyYXl9IGxpc3QgYW4gYXJyYXkgb2Ygb2JqZWN0cywgc2FtZSBhcyB0aGUgb2JqZWN0IHBhcmFtZXRlciB0byB0aGUgYWRkIG1ldGhvZC5cbiAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGJsYW5rIG5vZGUgaWQsIG9yIHJkZjpuaWwgaWYgdGhlIGxpc3QgaXMgZW1wdHlcbiAgICovXG4gIGFkZExpc3QobGlzdCkge1xuICAgIHJldHVybiB0aGlzLl9hZGRMaXN0KGxpc3QsICdhZGQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgcmRmOkxpc3QgZm9yIHRoZSBwcm92aWRlZCBhcnJheSBvZiBsaXRlcmFscyB3aXRoIHRoZSBjb21tb24gbGFuZ3VhZ2UuXG4gICAqIEBwYXJhbSB7YXJyYXlbc3RyaW5nXX0gYW4gYXJyYXkgb2YgbGl0ZXJhbHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aGUgbGFuZ3VhZ2UgY29tbW9uIHRvIGFsbCB0aGUgbGl0ZXJhbHMgaW4gdGhlIGFycmF5XG4gICAqIChpZiB0aGlzIGlzIG5vdCB3aGF0IHlvdSB3YW50IHlvdSBoYXZlIHRvIHVzZSB0aGUgYWRkTGlzdCBtZXRob2Qgd2l0aCBvYmplY3RzIGluc3RlYWQpLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgYmxhbmsgbm9kZSBpZCwgb3IgcmRmOm5pbCBpZiB0aGUgbGlzdCBpcyBlbXB0eVxuICAgKi9cbiAgYWRkTGlzdEwobGlzdCwgbGFuZ3VhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkTGlzdChsaXN0LCAnYWRkTCcsIGxhbmd1YWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgcmRmOkxpc3QgZm9yIHRoZSBwcm92aWRlZCBhcnJheSBvZiBsaXRlcmFscyB3aXRoIHRoZSBjb21tb24gZGF0YXR5cGUuXG4gICAqIEBwYXJhbSB7YXJyYXlbc3RyaW5nXX0gYW4gYXJyYXkgb2YgbGl0ZXJhbHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aGUgZGF0YXR5cGUgY29tbW9uIHRvIGFsbCB0aGUgbGl0ZXJhbHMgaW4gdGhlIGFycmF5XG4gICAqIChpZiB0aGlzIGlzIG5vdCB3aGF0IHlvdSB3YW50IHlvdSBoYXZlIHRvIHVzZSB0aGUgYWRkTGlzdCBtZXRob2Qgd2l0aCBvYmplY3RzIGluc3RlYWQpLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgYmxhbmsgbm9kZSBpZCwgb3IgcmRmOm5pbCBpZiB0aGUgbGlzdCBpcyBlbXB0eVxuICAgKi9cbiAgYWRkTGlzdEQobGlzdCwgZGF0YXR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkTGlzdChsaXN0LCAnYWRkRCcsIGRhdGF0eXBlKTtcbiAgfVxuXG4gIF9hZGRMaXN0KGxpc3QsIG1ldGhvZCwgbGFuZ29yRGF0YXR5cGUpIHtcbiAgICBsZXQgbGlzdG5vZGU7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpIHx8IGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICBsaXN0bm9kZSA9IG5zLmV4cGFuZCgncmRmOm5pbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0bm9kZSA9IHRoaXMuX25ld0JOb2RlKCk7XG4gICAgICBsZXQgY3Vyc29yID0gbGlzdG5vZGU7XG4gICAgICBjb25zdCBuaWxQb3NpdGlvbiA9IGxpc3QubGVuZ3RoIC0gMTtcbiAgICAgIGxpc3QuZm9yRWFjaCgobWVtYmVyLCBpZHgpID0+IHtcbiAgICAgICAgdGhpc1ttZXRob2RdKGN1cnNvciwgJ3JkZjpmaXJzdCcsIG1lbWJlciwgbGFuZ29yRGF0YXR5cGUpO1xuICAgICAgICBpZiAoaWR4ICE9PSBuaWxQb3NpdGlvbikge1xuICAgICAgICAgIGN1cnNvciA9IHRoaXMuYWRkKGN1cnNvciwgJ3JkZjpyZXN0JykuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFkZChjdXJzb3IsICdyZGY6cmVzdCcsICdyZGY6bmlsJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdG5vZGU7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgdHJpcHBsZXMgdGhhdCBtYWtlcyB1cCB0aGUgbGlzdCBzdGFydGluZyBmcm9tIHRoZSBnaXZlbiByZXNvdXJjZS5cbiAgICogQHBhcmFtIG8gLSB0aGUgcmVzb3VyY2UgZnJvbSB3aGljaCB0aGUgbGlzdCBzdGFydHMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGxpc3Qgd2FzIGlkZW50aWZlZCBhcyBhIHZhbGlkIGxpc3QgYW5kIHJlbW92ZWQuXG4gICAqL1xuICByZW1vdmVMaXN0KG8pIHtcbiAgICBsZXQgbGlzdEZvdW5kID0gZmFsc2U7XG4gICAgbGV0IGN1cnNvciA9IHR5cGVvZiBvID09PSAnb2JqZWN0JyA/IG8udmFsdWUgOiBvO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBuaWwgPSBucy5leHBhbmQoJ3JkZjpuaWwnKTtcbiAgICAgIGxpc3RGb3VuZCA9IGN1cnNvciA9PT0gbmlsO1xuICAgICAgd2hpbGUgKGN1cnNvciAhPT0gbmlsICYmIGN1cnNvciAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmZpbmRGaXJzdFZhbHVlKGN1cnNvciwgJ3JkZjpyZXN0Jyk7XG4gICAgICAgIHRoaXMuZmluZEFuZFJlbW92ZShjdXJzb3IpO1xuICAgICAgICBjdXJzb3IgPSBuZXh0O1xuICAgICAgICBsaXN0Rm91bmQgPSBjdXJzb3IgIT0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEludmFsaWQgbGlzdCBmb3Igb2JqZWN0OiAke2N1cnNvcn1gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3RGb3VuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgcmRmOkxpc3QgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvIC0gdGhlIGZpcnN0IHJlc291cmNlIG5vZGUgb2YgdGhlIChsaW5rZWQpIGxpc3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gb2Ygb2JqZWN0cyAodGhlIHNhbWUgYXMgaXMgcmV0dXJuZWQgZnJvbSBTdGF0ZW1lbnQuZ2V0T2JqZWN0KCkpXG4gICAqL1xuICBnZXRMaXN0KG8pIHtcbiAgICBsZXQgY3Vyc29yID0gdHlwZW9mIG8gPT09ICdvYmplY3QnID8gby52YWx1ZSA6IG87XG4gICAgY29uc3QgbGlzdCA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBuaWwgPSBucy5leHBhbmQoJ3JkZjpuaWwnKTtcbiAgICAgIHdoaWxlIChjdXJzb3IgIT09IG5pbCAmJiBjdXJzb3IgIT0gbnVsbCkge1xuICAgICAgICBsaXN0LnB1c2godGhpcy5maW5kKGN1cnNvciwgJ3JkZjpmaXJzdCcpWzBdLmdldE9iamVjdCgpKTtcbiAgICAgICAgY3Vyc29yID0gdGhpcy5maW5kRmlyc3RWYWx1ZShjdXJzb3IsICdyZGY6cmVzdCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihgSW52YWxpZCBsaXN0IGZvciBvYmplY3Q6ICR7Y3Vyc29yfWApO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgZmlyc3QgbGlzdCB0byBiZSBmb3VuZCBnaXZlbiBhIHN1YmplY3QgYW5kIHByZWRpY2F0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHMgLSB0aGUgc3ViamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcCAtIHRoZSBwcmVkaWNhdGVcbiAgICogQHJldHVybnMge1N0cmluZ1tdfSBhcnJheSBvZiBzdHJpbmdzLCBhc3N1bWluZyB0aGUgbm9kZXR5cGUsIGRhdGF0eXBlIG9yXG4gICAqIGxhbmd1YWdlIGlzIGVpdGhlciBub3QgcHJlc2VudCBvciB2aXRhbC5cbiAgICovXG4gIGZpbmRGaXJzdExpc3RBc1ZhbHVlcyhzLCBwKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGlzdCh0aGlzLmZpbmRGaXJzdFZhbHVlKHMsIHApKS5tYXAob2JqID0+IG9iai52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgYW5kIHJlbW92ZXMgYWxsIG1hdGNoZWQgbGlzdHMgaW5jbHVkaW5nIHRoZSB0cmlwbGVzIHBvaW50aW5nIHRvIHRoZW0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzIC0gdGhlIHN1YmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IHAgLSB0aGUgcHJlZGljYXRlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYXQgbGVhc3Qgb25lIGxpc3Qgd2FzIHJlbW92ZWRcbiAgICovXG4gIGZpbmRBbmRSZW1vdmVMaXN0cyhzLCBwKSB7XG4gICAgbGV0IHJlbW92ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpbmQocywgcCkuZm9yRWFjaCgoc3RtdCkgPT4ge1xuICAgICAgaWYgKHRoaXMucmVtb3ZlTGlzdChzdG10LmdldFZhbHVlKCkpKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKHN0bXQpO1xuICAgICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVtb3ZlZDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge09iamVjdH0gYSBwbGFpbiBSREYgSlNPTiBvYmplY3Qgd2l0aG91dCB0aGUgYWRkaXRpb25hbCBhcnRpZmFjdHMgY3JlYXRlZCBieSB0aGlzXG4gICAqIEdyYXBoIGNsYXNzLlxuICAgKiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIHN1aXRhYmxlIGZvciBzZXJpbGl6YXRpb24gYW5kIGNvbW11bmljYXRlZCB3aXRoIG90aGVyIHN5c3RlbXMuXG4gICAqL1xuICBleHBvcnRSREZKU09OKCkge1xuICAgIGNvbnN0IGdyYXBoID0gdGhpcy5fZ3JhcGg7XG4gICAgY29uc3QgbmdyYXBoID0ge307XG4gICAgT2JqZWN0LmtleXMoZ3JhcGgpLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGNvbnN0IHN1YmogPSBncmFwaFtzXTtcbiAgICAgIG5ncmFwaFtzXSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoc3ViaikuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICBjb25zdCBuT2JqQXJyID0gW107XG4gICAgICAgIG5ncmFwaFtzXVtwXSA9IG5PYmpBcnI7XG4gICAgICAgIHN1YmpbcF0uZm9yRWFjaCgobykgPT4ge1xuICAgICAgICAgIGNvbnN0IG5vID0geyB0eXBlOiBvLnR5cGUsIHZhbHVlOiBvLnZhbHVlIH07XG4gICAgICAgICAgaWYgKG8ubmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgbm8ubmcgPSBvLm5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoby5sYW5nICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5vLmxhbmcgPSBvLmxhbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvLmRhdGF0eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5vLmRhdGF0eXBlID0gby5kYXRhdHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbk9iakFyci5wdXNoKG5vKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmdyYXBoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGEgVVJJIGluIHN1YmplY3QgcG9zaXRpb24gd2l0aCBhbm90aGVyLFxuICAgKiBhc3N1bWluZyB0aGUgdGFyZ2V0IFVSSSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZ3JhcGggYWxyZWFkeS5cbiAgICpcbiAgICogQHBhcmFtIHNvdXJjZVVSSVxuICAgKiBAcGFyYW0gdGFyZ2V0VVJJXG4gICAqIEByZXR1cm5zIHtHcmFwaH1cbiAgICogQGRlcHJlY2F0ZWQgVXNlIHJlcGxhY2VVUkkgaW5zdGVhZC5cbiAgICovXG4gIHJlcGxhY2VTdWJqZWN0KHNvdXJjZVVSSSwgdGFyZ2V0VVJJKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZVVSSShzb3VyY2VVUkksIHRhcmdldFVSSSk7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9jY3VyZW5jZXMgb2YgYSBVUkkgaW4gdGhlIGdyYXBoIHdpdGggYW5vdGhlciBVUkkuXG4gICAqIEFzc3VtZXMgdGhlIHRhcmdldCBVUkkgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGdyYXBoIGFscmVhZHkuXG4gICAqXG4gICAqIEBwYXJhbSBzb3VyY2VVUklcbiAgICogQHBhcmFtIHRhcmdldFVSSVxuICAgKiBAcmV0dXJucyB7R3JhcGh9XG4gICAqL1xuICByZXBsYWNlVVJJKHNvdXJjZVVSSSwgdGFyZ2V0VVJJKSB7XG4gICAgY29uc3QgZ3JhcGggPSB0aGlzLl9ncmFwaDtcbiAgICBpZiAoZ3JhcGguaGFzT3duUHJvcGVydHkoc291cmNlVVJJKSkge1xuICAgICAgaWYgKCFncmFwaC5oYXNPd25Qcm9wZXJ0eSgodGFyZ2V0VVJJKSkpIHtcbiAgICAgICAgZ3JhcGhbdGFyZ2V0VVJJXSA9IGdyYXBoW3NvdXJjZVVSSV07XG4gICAgICAgIGRlbGV0ZSBncmFwaFtzb3VyY2VVUkldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVwbGFjZSBzdWJqZWN0IHdpdGggdGFyZ2V0IFVSSSBzaW5jZSBpdCBhbHJlYWR5IGV4aXN0cy4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mb3JFYWNoKChzLCBwLCBvKSA9PiB7XG4gICAgICAgIGlmIChvLnR5cGUgPT09ICd1cmknICYmIG8udmFsdWUgPT09IHNvdXJjZVVSSSkge1xuICAgICAgICAgIG8udmFsdWUgPSB0YXJnZXRVUkk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMgPT09IHRhcmdldFVSSSAmJiBvLl9zdGF0ZW1lbnQpIHtcbiAgICAgICAgICBvLl9zdGF0ZW1lbnQuX3MgPSB0YXJnZXRVUkk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVwbGFjZUJsYW5rV2l0aFVSSShzb3VyY2VCbGFuaywgdGFyZ2V0VVJJKSB7XG4gICAgY29uc3QgZ3JhcGggPSB0aGlzLl9ncmFwaDtcbiAgICBpZiAoZ3JhcGguaGFzT3duUHJvcGVydHkoc291cmNlQmxhbmspKSB7XG4gICAgICBpZiAoIWdyYXBoLmhhc093blByb3BlcnR5KCh0YXJnZXRVUkkpKSkge1xuICAgICAgICBncmFwaFt0YXJnZXRVUkldID0gZ3JhcGhbc291cmNlQmxhbmtdO1xuICAgICAgICBkZWxldGUgZ3JhcGhbc291cmNlQmxhbmtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVwbGFjZSBzdWJqZWN0IHdpdGggdGFyZ2V0IFVSSSBzaW5jZSBpdCBhbHJlYWR5IGV4aXN0cy4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mb3JFYWNoKChzLCBwLCBvKSA9PiB7XG4gICAgICAgIGlmIChvLnR5cGUgPT09ICdibm9kZScgJiYgby52YWx1ZSA9PT0gc291cmNlQmxhbmspIHtcbiAgICAgICAgICBvLnZhbHVlID0gdGFyZ2V0VVJJO1xuICAgICAgICAgIG8udHlwZSA9ICd1cmknO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzID09PSB0YXJnZXRVUkkgJiYgby5fc3RhdGVtZW50KSB7XG4gICAgICAgICAgby5fc3RhdGVtZW50Ll9zID0gdGFyZ2V0VVJJO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX2Jub2Rlc1tzb3VyY2VCbGFua107XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyBncmFwaC5cbiAgICogQHJldHVybnMge3JkZmpzb24vR3JhcGh9XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoKHRoaXMuZXhwb3J0UkRGSlNPTigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgcHJvcGVydGllcyBmb3IgYSBnaXZlbiBzdWJqZWN0LlxuICAgKiBOb3RlOiBPcHRpbWFsLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcyB0aGUgc3ViamVjdCB0byBmaW5kIHByb3BlcnRpZXMgZm9yXG4gICAqIEByZXR1cm4ge0FycmF5W1N0cmluZ119IG9mIHN0cmluZ3NcbiAgICovXG4gIGZpbmRQcm9wZXJ0aWVzKHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fZ3JhcGhbc10gfHwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB0aGUgZ3JhcGggYW5kIHJldHVybnMgYSByZXBvcnQuXG4gICAqIElmIGVycm9ycyBhcmUgZGV0ZWN0ZWQgYW4gZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICogVGhlIHZhbGlkYXRpb24gcmVwb3J0IGlzIGEgb2JqZWN0IHdpdGggYSB2YWxpZCBhdHRyaWJ1dGUgd2hpY2ggaXMgZWl0aGVyIGZhbHNlIG9yIHRydWUuXG4gICAqIElmIGl0IGlzIGZhbHNlIGFuIGFycmF5IG9mIGVycm9ycyBhcmUgcHJvdmlkZWQgd2hlcmUgZWFjaCBlcnJvciBpcyBhbiBvYmplY3QgY29udGFpbmluZ1xuICAgKiBhIG1lc3NhZ2UgYW5kIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB3aGljaCBzdWJqZWN0LHByZWRpY2F0ZSBhbmQgb2JqZWN0IGluZGV4IGluIHRoZVxuICAgKiByZGpzb24gamF2YXNjcmlwdCBvYmplY3QgdGhhdCBjYXVzZWQgdGhlIGVycm9yLi5cbiAgICpcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH0gaWYgdGhlcmUgd2hlcmUgbm8gZXJyb3JzXG4gICAqIEB0aHJvd3Mge09iamVjdH0gdGhlIHZhbGlkYXRpb24gcmVwb3J0LlxuICAgKi9cbiAgdmFsaWRhdGUoKSB7XG4gICAgdGhpcy5yZXBvcnQgPSB0aGlzLl92YWxpZGF0ZSgpO1xuICAgIGlmICghdGhpcy5yZXBvcnQudmFsaWQpIHtcbiAgICAgIHRocm93ICh0aGlzLnJlcG9ydCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlcG9ydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBZb3Ugc2hvdWxkIG5vdCB1c2UgdGhpcyBmdW5jdGlvbiB1bmxlc3MgeW91IGFyZSBWRVJZIGNlcnRhaW4gb2Ygd2hhdCB5b3UgYXJlIGRvaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gYk5vZGVJZFxuICAgKi9cbiAgcmVnaXN0ZXJCTm9kZShiTm9kZUlkKSB7XG4gICAgdGhpcy5fYm5vZGVzW2JOb2RlSWRdID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlcyB0aHJvdWdoIGFsbCBzdGF0ZW1lbnRzIG9mIHRoZSBncmFwaCBhbmQgY2FsbHMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIHRoZW0uXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGYgYXJlIGNhbGxlZCBmb3IgZWFjaCBzdGF0ZW1lbnQgd2l0aCB0aGUgdGhyZWUgYXJndW1lbnRzXG4gICAqICAoaW4gb3JkZXIpIHN1YmplY3QsIHByZWRpY2F0ZSwgYW5kIG9iamVjdC5cbiAgICovXG4gIGZvckVhY2goZikge1xuICAgIGNvbnN0IGdyYXBoID0gdGhpcy5fZ3JhcGg7XG4gICAgT2JqZWN0LmtleXMoZ3JhcGgpLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGNvbnN0IHN1YmogPSBncmFwaFtzXTtcbiAgICAgIE9iamVjdC5rZXlzKHN1YmopLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgc3VialtwXS5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgICAgZihzLCBwLCBvKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlcyB0aHJvdWdoIGFsbCBzdGF0ZW1lbnRzIG9mIHRoZSBncmFwaCBhbmQgY2FsbHMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIHRoZW0gYW5kXG4gICAqIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGYgYXJlIGNhbGxlZCBmb3IgZWFjaCBzdGF0ZW1lbnQgd2l0aCB0aGUgdGhyZWUgYXJndW1lbnRzXG4gICAqICAoaW4gb3JkZXIpIHN1YmplY3QsIHByZWRpY2F0ZSwgYW5kIG9iamVjdCwgZiBzaG91bGQgcmV0dXJuIGEgdmFsdWUgdGhhdCBpcyBhZGRlZCB0byB0aGVcbiAgICogIGFycmF5XG4gICAqIEByZXR1cm4ge2FycmF5fSBhbiBhcnJheSB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gYXBwbGllZCBmb3IgZWFjaCBzdGF0ZW1lbnQuXG4gICAqL1xuICBtYXAoZikge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaCgoc3RtdCkgPT4ge1xuICAgICAgYXJyLnB1c2goZihzdG10KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wYXJlcyB0aGlzIGdyYXBoIHdpdGggYW5vdGhlciwgdHJ1ZSBpZiB0aGV5IGFyZSBpc29tb3JwaGljLlxuICAgKiBDb21wYXJpc2lvbiBpcyBkb25lIHVzaW5nIHRoZSBmaW5nZXJwcmludCBtZWNoYW5pc20uIEhlbmNlLCB0aGlzIG1ldGhvZCBpcyBub3QgZnVsbHByb29mLlxuICAgKlxuICAgKiBAcGFyYW0ge3JkZmpzb24vR3JhcGh9IGdyYXBoIHRvIGNvbXBhcmUgdG9cbiAgICogQHBhcmFtIHthcnJheX0gZXhjbHVkZVByb3BlcnRpZXMgYW4gYXJyYXkgb2YgcHJvcGVydGllcyB0byBleGNsdWRlIGluIGNvbXBhcmlzaW9uIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdyYXBocyBhcmUgaXNvbW9ycGhpYyBkaXNyZWdhcmRpbmcgdGhlIGV4Y2x1ZGVkIHByb3BlcnRpZXMuXG4gICAqIEBzZWUge3JkZmpzb24vdXRpbHMjZmluZ2VycHJpbnR9XG4gICAqL1xuICBlcXVhbHMoZ3JhcGgsIGV4Y2x1ZGVQcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIHV0aWxzLmZpbmdlcnByaW50KHRoaXMsIGV4Y2x1ZGVQcm9wZXJ0aWVzKSA9PT0gdXRpbHMuZmluZ2VycHJpbnQoZ3JhcGgsIGV4Y2x1ZGVQcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBhbW91bnRzIG9mIHRyaXBsZXMgaW4gdGhlIGdyYXBoLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgc2l6ZSgpIHtcbiAgICBsZXQgc2l6ZSA9IDA7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLl9ncmFwaCkuZm9yRWFjaCgoc3Viak9iaikgPT4ge1xuICAgICAgT2JqZWN0LnZhbHVlcyhzdWJqT2JqKS5mb3JFYWNoKChvYmplY3RzKSA9PiB7XG4gICAgICAgIHNpemUgKz0gb2JqZWN0cy5sZW5ndGg7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIElmIHRoZSBvYmplY3QgYWxyZWFkeSBjb250YWlucyBhIHN0YXRlbWVudCB0aGF0IGlzIHJldHVybmVkLCBvdGhlcndpc2UgYSBuZXcgaXMgY3JlYXRlZC5cbiAgICogSWYgdGhlIG9iamVjdCBpcyBub3Qgc3BlY2lmaWVkIHVuZGVmaW5lZCBpcyByZXR1cm5lZC5cbiAgICogQHJldHVybiB7U3RhdGVtZW50fHVuZGVmaW5lZH0gYSBzdGF0ZW1lbnQgdGhhdCBiZWxvbmdzIHRvIHRoaXMgZ3JhcGguXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0KHMsIHAsIG8sIGFzc2VydGVkKSB7XG4gICAgaWYgKG8gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZ2V0T3JDcmVhdGUocywgcCwgbywgYXNzZXJ0ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBvYmplY3QgYWxyZWFkeSBjb250YWlucyBhIHN0YXRlbWVudCB0aGF0IGlzIHJldHVybmVkLCBvdGhlcndpc2UgYSBuZXcgaXMgY3JlYXRlZC5cbiAgICogQHJldHVybiB7cmRmanNvbi9TdGF0ZW1lbnR9IGEgc3RhdGVtZW50IHRoYXQgYmVsb25ncyB0byB0aGlzIGdyYXBoLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE9yQ3JlYXRlKHMsIHAsIG8sIGFzc2VydGVkKSB7XG4gICAgaWYgKG8uX3N0YXRlbWVudCA9PSBudWxsKSB7XG4gICAgICBvLl9zdGF0ZW1lbnQgPSBuZXcgU3RhdGVtZW50KHRoaXMsIHMsIHAsIG8sIGFzc2VydGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIG8uX3N0YXRlbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGlmIHRoZSBvYmplY3Qgb3JpZ2luYXRlcyBmcm9tIGFub3RoZXIgZ3JhcGggYSBjb3B5IGlzIG1hZGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ3JhcGhPYmplY3Qobykge1xuICAgIGlmIChvLl9zdGF0ZW1lbnQgPT0gbnVsbCB8fFxuICAgICAgby5fc3RhdGVtZW50Ll9ncmFwaCA9PT0gdGhpcykge1xuICAgICAgcmV0dXJuIG87XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IG8udHlwZSwgdmFsdWU6IG8udmFsdWUsIGxhbmc6IG8ubGFuZywgZGF0YXR5cGU6IG8uZGF0YXR5cGUgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgc3RhdGVtZW50cyB3aXRoIGEgZ2l2ZW4gc3ViamVjdCBhbmQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gcFxuICAgKiBAcmV0dXJucyB7cmRmanNvbi9TdGF0ZW1lbnRbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9maW5kU1AocywgcCkge1xuICAgIGlmICh0aGlzLl9ncmFwaFtzXSA9PSBudWxsIHx8IHRoaXMuX2dyYXBoW3NdW3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoW3NdW3BdLm1hcChvID0+IHRoaXMuX2dldChzLCBwLCBvLCB0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgYWxsIHN0YXRlbWVudHMgd2l0aCBhIGdpdmVuIHN1YmplY3QuXG4gICAqIE5vdGU6IE9wdGltYWwuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzXG4gICAqIEByZXR1cm5zIHtyZGZqc29uL1N0YXRlbWVudFtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2ZpbmRTKHMpIHtcbiAgICBjb25zdCBzdWJqID0gdGhpcy5fZ3JhcGhbc107XG4gICAgY29uc3Qgc3BBcnJzID0gT2JqZWN0LmtleXMoc3ViaiB8fCB7fSkubWFwKHAgPT4gdGhpcy5fZmluZFNQKHMsIHApKTtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgc3BBcnJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgc3RhdGVtZW50cyBmb3IgdGhlIGVudGlyZSBncmFwaC5cbiAgICogTm90ZTogT3B0aW1hbC5cbiAgICogQHJldHVybnMge3JkZmpzb24vU3RhdGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZmluZCgpIHtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goKHMxLCBwMSwgbzEpID0+IHtcbiAgICAgIGFyci5wdXNoKHRoaXMuX2dldChzMSwgcDEsIG8xLCB0cnVlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgc3RhdGVtZW50cyB3aXRoIGEgZ2l2ZW4gcHJlZGljYXRlLlxuICAgKiBOb3RlOiBDbG9zZSB0byBvcHRpbWFsIHdpdGhvdXQgZnVydGhlciBpbmRleGluZywgdG8gbWFueSBjaGVja3MgZHVlIHRvIGl0ZXJhdGlvbiB2aWEgX21hcC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBcbiAgICogQHJldHVybnMge3JkZmpzb24vU3RhdGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZmluZFAocCkge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaCgoczEsIHAxLCBvMSkgPT4ge1xuICAgICAgaWYgKHAgPT09IHAxKSB7XG4gICAgICAgIGFyci5wdXNoKHRoaXMuX2dldChzMSwgcDEsIG8xLCB0cnVlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlcyB0aHJvdWdoIGFsbCBzdGF0ZW1lbnRzIHRvIGZpbmQgdGhvc2Ugd2l0aCBzcGVjaWZpZWQgb2JqZWN0LlxuICAgKiBOb3RlOiBPcHRpbWFsIHdpdGhvdXQgYWRkaXRpb25hbCBpbmRleGluZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9cbiAgICogQHJldHVybnMge3JkZmpzb24vU3RhdGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZmluZE8obykge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaCgoczEsIHAxLCBvMSkgPT4ge1xuICAgICAgaWYgKHJkZmpzb25VdGlsLm9iamVjdEVxdWFscyhvLCBvMSkpIHtcbiAgICAgICAgYXJyLnB1c2godGhpcy5fZ2V0KHMxLCBwMSwgbzEsIHRydWUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBzdGF0ZW1lbnRzIHdpdGggYSBnaXZlbiBzdWJqZWN0IGFuZCBvYmplY3QuXG4gICAqIE5vdGU6IENsb3NlIHRvIG9wdGltYWwgd2l0aG91dCBmdXJ0aGVyIGluZGV4aW5nLCB0byBtYW55IGNoZWNrcyBkdWUgdG8gaXRlcmF0aW9uIHZpYSBfbWFwLlxuICAgKiBAcmV0dXJucyB7cmRmanNvbi9TdGF0ZW1lbnRbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9maW5kU08ocywgbykge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaCgoczEsIHAxLCBvMSkgPT4ge1xuICAgICAgaWYgKHMgPT09IHMxICYmIHJkZmpzb25VdGlsLm9iamVjdEVxdWFscyhvLCBvMSkpIHtcbiAgICAgICAgYXJyLnB1c2godGhpcy5fZ2V0KHMxLCBwMSwgbzEsIHRydWUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBzdGF0ZW1lbnRzIHdpdGggYSBnaXZlbiBwcmVkaWNhdGUgYW5kIG9iamVjdC5cbiAgICogTm90ZTogQ2xvc2UgdG8gb3B0aW1hbCB3aXRob3V0IGZ1cnRoZXIgaW5kZXhpbmcsIHRvIG1hbnkgY2hlY2tzIGR1ZSB0byBpdGVyYXRpb24gdmlhIF9tYXAuXG4gICAqIEByZXR1cm5zIHtyZGZqc29uL1N0YXRlbWVudFtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2ZpbmRQTyhwLCBvKSB7XG4gICAgY29uc3QgYXJyID0gW107XG4gICAgdGhpcy5mb3JFYWNoKChzMSwgcDEsIG8xKSA9PiB7XG4gICAgICBpZiAocCA9PT0gcDEgJiYgcmRmanNvblV0aWwub2JqZWN0RXF1YWxzKG8sIG8xKSkge1xuICAgICAgICBhcnIucHVzaCh0aGlzLl9nZXQoczEsIHAxLCBvMSwgdHJ1ZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcnI7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF92YWxpZGF0ZSgpIHtcbiAgICBjb25zdCBncmFwaCA9IHRoaXMuX2dyYXBoO1xuICAgIGNvbnN0IHJlcG9ydCA9IHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIG5yOiAwIH07XG4gICAgT2JqZWN0LmtleXMoZ3JhcGgpLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGNvbnN0IHN1YmogPSBncmFwaFtzXTtcbiAgICAgIGlmIChyZGZqc29uVXRpbC5pc09iamVjdChzdWJqKSkge1xuICAgICAgICBPYmplY3Qua2V5cyhzdWJqKS5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb2JqQXJyID0gc3VialtwXTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpBcnIpKSB7XG4gICAgICAgICAgICBvYmpBcnIuZm9yRWFjaCgobywgb2luZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChyZGZqc29uVXRpbC5pc09iamVjdChvKSkge1xuICAgICAgICAgICAgICAgIGlmIChvLnR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHJkZmpzb25VdGlsLmlzU3RyaW5nKG8udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydC5uciArPSAxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0LmVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICAgIHAsXG4gICAgICAgICAgICAgICAgICAgICAgb2luZGV4OiAob2luZGV4ICsgMSksXG4gICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYE9iamVjdCAke29pbmRleCArIDF9IGluIG9iamVjdCBhcnJheSBtdXN0IGhhdmUgdGhlICd2YWx1ZScgYXR0cmlidXRlIHBvaW50aW5nIHRvIGEgc3RyaW5nLmBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydC52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXBvcnQuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgICAgICBvaW5kZXg6IChvaW5kZXggKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYE9iamVjdCAke29pbmRleCArIDF9IGluIG9iamVjdCBhcnJheSBsYWNrcyB0aGUgYXR0cmlidXRlIHR5cGUsIG11c3QgYmUgZWl0aGVyICdsaXRlcmFsJywgJ3Jlc291cmNlJyBvciAnYm5vZGUnLmBcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgcmVwb3J0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcG9ydC5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICAgIG9pbmRleDogKG9pbmRleCArIDEpLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEVsZW1lbnQgJHtvaW5kZXggKyAxfSBpbiBvYmplY3QgYXJyYXkgaXMgbm90IGFuIG9iamVjdC5gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVwb3J0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXBvcnQuZXJyb3JzLnB1c2goeyBzLCBwLCBtZXNzYWdlOiAnUHJlZGljYXRlIG11c3QgcG9pbnQgdG8gYW4gYXJyYXkgb2Ygb2JqZWN0cy4nIH0pO1xuICAgICAgICAgICAgcmVwb3J0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcG9ydC5lcnJvcnMucHVzaCh7IHMsIG1lc3NhZ2U6ICdTdWJqZWN0IG11c3QgcG9pbnQgdG8gYW4gb2JqZWN0LicgfSk7XG4gICAgICAgIHJlcG9ydC52YWxpZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXBvcnQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBibm9kZSB0aGF0IGlzIHVuaXF1ZSBpbiB0aGUgY3VycmVudCBncmFwaC5cbiAgICogQm5vZGVzIGluIHRlbXBvcmFyaWx5IHVuYXNzZXJ0ZWQgc3RhdGVtZW50cyAoY3VycmVudGx5IHJlbW92ZWQgZnJvbSB0aGUgZ3JhcGgpXG4gICAqIGFyZSBhdm9pZGVkIGFzIHdlbGwuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbmV3Qk5vZGUoKSB7XG4gICAgdGhpcy5faW5kZXhCTm9kZXMoKTtcbiAgICBsZXQgcDtcbiAgICBsZXQgbjtcbiAgICBsZXQgYm5vZGU7XG4gICAgZm9yIChwID0gMTsgcCA8IDIwOyBwKyspIHtcbiAgICAgIGZvciAobiA9IDE7IG4gPD0gcDsgbisrKSB7XG4gICAgICAgIGJub2RlID0gYF86JHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoTWF0aC5wb3coMTAsIHApICsgMSkpfWA7XG4gICAgICAgIGlmICh0aGlzLl9ibm9kZXNbYm5vZGVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5fYm5vZGVzW2Jub2RlXSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGJub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIGNyZWF0aW5nIGEgbmV3IGJsYW5rIG5vZGUsIGluY3JlYWRpYmxlIHVucHJvYmFibGUuLi4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBibm9kZXMgaW4gdGhlIGdyYXBoIHRvIHRoZSBibm9kZSBpbmRleC5cbiAgICogVGhlIGluZGV4IGNhbiBiZSBjYWxjdWxhdGVkIGxhdGUsIGp1c3QgYmVmb3JlIHRoZSBmaXJzdCBjYWxsIHRvIGNyZWF0ZS5cbiAgICogKEJub2RlcyBpbiBzdGF0ZW1lbnRzIHRoYXQgYXJlIHJlbW92ZWQgYXJlIGFkZGVkIGluIGFkdmFuY2UgdG8gdGhlIGluZGV4IGFzXG4gICAqIHRoZXkgbWF5IGJlIG9ubHkgdGVtcG9yYXJpbHkgdW5hc3NlcnRlZCBhbmQgd2hlbiB0aGV5IGFyZSBhc3NlcnRlZCBhZ2FpblxuICAgKiB0aGV5IHNob3VsZCBub3Qgb3ZlcmxhcCB3aXRoIG5ld2x5IGNyZWF0ZWQgYm5vZGVzLilcbiAgICogQWZ0ZXIgdGhlIGluZGV4IGlzIGNyZWF0ZWQgYWxsIHN0YXRlbW50cyBhZGRlZCB1cGRhdGUgdGhlIGluZGV4LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luZGV4Qk5vZGVzKCkge1xuICAgIGlmICh0aGlzLl9ibm9kZXNJbmRleGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGdyYXBoID0gdGhpcy5fZ3JhcGg7XG4gICAgT2JqZWN0LmtleXMoZ3JhcGgpLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGlmIChzLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgICAgdGhpcy5fYm5vZGVzW3NdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN1YmogPSBncmFwaFtzXTtcbiAgICAgIE9iamVjdC5rZXlzKHN1YmopLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgaWYgKHAuaW5kZXhPZignXzonKSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2Jub2Rlc1twXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3VialtwXS5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgICAgaWYgKG8udHlwZSA9PT0gJ2Jub2RlJykge1xuICAgICAgICAgICAgdGhpcy5fYm5vZGVzW28udmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5fYm5vZGVzSW5kZXhlZCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbnkgYm5vZGVzIGluIHRoZSBnaXZlbiBwYXJhbWV0ZXJzIHRvIHRoZSBpbmRleCAodGhlIGluZGV4IG1heSBzdGlsbCBiZSBpbmNvbXBsZXRlKS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHMgdGhlIHN1YmplY3QgaW4gYSBzdGF0ZW1lbnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwIHRoZSBwcmVkaWNhdGUgaW4gYSBzdGF0ZW1lbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvIHRoZSBvYmplY3QgaW4gYSBzdGF0ZW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdHJhY2tCTm9kZXMocywgcCwgbykge1xuICAgIGlmIChzLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgIHRoaXMuX2Jub2Rlc1tzXSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChwLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgIHRoaXMuX2Jub2Rlc1twXSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChvLnR5cGUgPT09ICdibm9kZScpIHtcbiAgICAgIHRoaXMuX2Jub2Rlc1tvLnZhbHVlXSA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuIiwiLy8gIEltcGxlbWVudGluZyBVUkktc3BlY2lmaWMgZnVuY3Rpb25zXG4vL1xuLy9cdFNlZSBSRkMgMjM4NlxuLy9cbi8vIFRoaXMgaXMgb3Igd2FzICAgaHR0cDovL3d3dy53My5vcmcvMjAwNS8xMC9hamF3L3VyaS5qc1xuLy8gMjAwNSBXM0Mgb3BlbiBzb3VyY2UgbGljZW5jZVxuLy9cbi8vXG4vLyAgVGFrZSBhIFVSSSBnaXZlbiBpbiByZWxhdGl2ZSBvciBhYnNvbHV0ZSBmb3JtIGFuZCBhIGJhc2Vcbi8vICBVUkksIGFuZCByZXR1cm4gYW4gYWJzb2x1dGUgVVJJXG4vL1xuLy8gIFNlZSBhbHNvIGh0dHA6Ly93d3cudzMub3JnLzIwMDAvMTAvc3dhcC91cmlwYXRoLnB5XG4vL1xuXG5jb25zdCBqb2luID0gKGdpdmVuLCBiYXNlKSA9PiB7XG4gIC8vIGlmICh0eXBlb2YgZnlpICE9ICd1bmRlZmluZWQnKSBmeWkoXCIgICBVUkkgZ2l2ZW49XCIrZ2l2ZW4rXCIgYmFzZT1cIitiYXNlKVxuICB2YXIgYmFzZUhhc2ggPSBiYXNlLmluZGV4T2YoJyMnKTtcbiAgaWYgKGJhc2VIYXNoID4gMCkgYmFzZSA9IGJhc2Uuc2xpY2UoMCwgYmFzZUhhc2gpO1xuICBpZiAoZ2l2ZW4ubGVuZ3RoID09IDApIHJldHVybiBiYXNlOyAvLyBiZWZvcmUgY2hvcHBpbmcgaXRzIGZpbGVuYW1lIG9mZlxuICBpZiAoZ2l2ZW4uaW5kZXhPZignIycpID09IDApIHJldHVybiBiYXNlICsgZ2l2ZW47XG4gIHZhciBjb2xvbiA9IGdpdmVuLmluZGV4T2YoJzonKTtcbiAgaWYgKGNvbG9uID49IDApIHJldHVybiBnaXZlbjtcdC8vIEFic29sdXRlIFVSSSBmb3JtIG92ZXJyaWRlcyBiYXNlIFVSSVxuICB2YXIgYmFzZUNvbG9uID0gYmFzZS5pbmRleE9mKCc6Jyk7XG4gIGlmIChiYXNlQ29sb24gPCAwKSB7XG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIGJhc2UgVVJMIFwiICsgYmFzZSk7XG4gICAgcmV0dXJuIGdpdmVuO1xuICB9XG4gIHZhciBiYXNlU2NoZW1lID0gYmFzZS5zbGljZSgwLCBiYXNlQ29sb24gKyAxKTsgIC8vIGVnIGh0dHA6XG4gIGlmIChnaXZlbi5pbmRleE9mKFwiLy9cIikgPT0gMCkgeyAgICAvLyBTdGFydHMgd2l0aCAvL1xuICAgIHJldHVybiBiYXNlU2NoZW1lICsgZ2l2ZW47XG4gIH1cbiAgdmFyIGJhc2VTaW5nbGU7XG4gIGlmIChiYXNlLmluZGV4T2YoJy8vJywgYmFzZUNvbG9uKSA9PSBiYXNlQ29sb24gKyAxKSB7ICAvLyBBbnkgaG9zdHBhcnQ/XG4gICAgYmFzZVNpbmdsZSA9IGJhc2UuaW5kZXhPZihcIi9cIiwgYmFzZUNvbG9uICsgMyk7XG4gICAgaWYgKGJhc2VTaW5nbGUgPCAwKSB7XG4gICAgICBpZiAoYmFzZS5sZW5ndGggLSBiYXNlQ29sb24gLSAzID4gMCkge1xuICAgICAgICByZXR1cm4gYmFzZSArIFwiL1wiICsgZ2l2ZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYmFzZVNjaGVtZSArIGdpdmVuO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2luZ2xlID0gYmFzZS5pbmRleE9mKFwiL1wiLCBiYXNlQ29sb24gKyAxKTtcbiAgICBpZiAoYmFzZVNpbmdsZSA8IDApIHtcbiAgICAgIGlmIChiYXNlLmxlbmd0aCAtIGJhc2VDb2xvbiAtIDEgPiAwKSB7XG4gICAgICAgIHJldHVybiBiYXNlICsgXCIvXCIgKyBnaXZlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiYXNlU2NoZW1lICsgZ2l2ZW47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChnaXZlbi5pbmRleE9mKCcvJykgPT0gMCkge1x0Ly8gc3RhcnRzIHdpdGggLyBidXQgbm90IC8vXG4gICAgcmV0dXJuIGJhc2Uuc2xpY2UoMCwgYmFzZVNpbmdsZSkgKyBnaXZlbjtcbiAgfVxuXG4gIHZhciBwYXRoID0gYmFzZS5zbGljZShiYXNlU2luZ2xlKTtcbiAgdmFyIGxhc3RTbGFzaCA9IHBhdGgubGFzdEluZGV4T2YoJy8nKTtcbiAgaWYgKGxhc3RTbGFzaCA8IDApIHJldHVybiBiYXNlU2NoZW1lICsgZ2l2ZW47XG4gIGlmICgobGFzdFNsYXNoID49IDApICYmIChsYXN0U2xhc2ggPCAocGF0aC5sZW5ndGggLSAxKSkpIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBsYXN0U2xhc2ggKyAxKTsgLy8gQ2hvcCB0cmFpbGluZyBmaWxlbmFtZSBmcm9tIGJhc2VcbiAgfVxuXG4gIHBhdGggPSBwYXRoICsgZ2l2ZW47XG4gIHdoaWxlIChwYXRoLm1hdGNoKC9bXlxcL10qXFwvXFwuXFwuXFwvLykpIHsvLyBtdXN0IGFwcGx5IHRvIHJlc3VsdCBvZiBwcmV2XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvW15cXC9dKlxcL1xcLlxcLlxcLy8sICcnKTsgLy8gRUNNQXNjcmlwdCBzcGVjIDcuOC41XG4gIH1cbiAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwuXFwvL2csICcnKTsgLy8gc3BlYyB2YWd1ZSBvbiBlc2NhcGluZ1xuICByZXR1cm4gYmFzZS5zbGljZSgwLCBiYXNlU2luZ2xlKSArIHBhdGg7XG59O1xuXG4vKiogcmV0dXJucyBVUkkgd2l0aG91dCB0aGUgZnJhZyAqKi9cbmNvbnN0IGRvY3BhcnQgPSAodXJpKSA9PiB7XG4gIHZhciBpID0gdXJpLmluZGV4T2YoXCIjXCIpO1xuICBpZiAoaSA8IDApIHJldHVybiB1cmk7XG4gIHJldHVybiB1cmkuc2xpY2UoMCwgaSk7XG59O1xuXG4vKiogcmV0dXJuIHRoZSBwcm90b2NvbCBvZiBhIHVyaSAqKi9cbmNvbnN0IHByb3RvY29sID0gdXJpID0+IHVyaS5zbGljZSgwLCB1cmkuaW5kZXhPZignOicpKVxuXG5leHBvcnQge1xuICBqb2luLFxuICBwcm90b2NvbCxcbiAgZG9jcGFydFxufTtcbiIsImltcG9ydCB7am9pbn0gZnJvbSAnLi91cmknO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIFRBQlVMQVRPUiBSREYgUEFSU0VSXG4gKlxuICogVmVyc2lvbiAwLjFcbiAqICBQYXJzZXIgYmVsaWV2ZWQgdG8gYmUgaW4gZnVsbCBwb3NpdGl2ZSBSREYvWE1MIHBhcnNpbmcgY29tcGxpYW5jZVxuICogIHdpdGggdGhlIHBvc3NpYmxlIGV4Y2VwdGlvbiBvZiBoYW5kbGluZyBkZXByZWNhdGVkIFJERiBhdHRyaWJ1dGVzXG4gKiAgYXBwcm9wcmlhdGVseS4gUGFyc2VyIGlzIGJlbGlldmVkIHRvIGNvbXBseSBmdWxseSB3aXRoIG90aGVyIFczQ1xuICogIGFuZCBpbmR1c3RyeSBzdGFuZGFyZHMgd2hlcmUgYXBwcm9wcmlhdGUgKERPTSwgRUNNQVNjcmlwdCwgJmMuKVxuICpcbiAqICBBdXRob3I6IERhdmlkIFNoZWV0cyA8ZHNoZWV0c0BtaXQuZWR1PlxuICogIFNWTiBJRDogJElkJFxuICpcbiAqIFczQ8KuIFNPRlRXQVJFIE5PVElDRSBBTkQgTElDRU5TRVxuICogaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDAyL2NvcHlyaWdodC1zb2Z0d2FyZS0yMDAyMTIzMVxuICogVGhpcyB3b3JrIChhbmQgaW5jbHVkZWQgc29mdHdhcmUsIGRvY3VtZW50YXRpb24gc3VjaCBhcyBSRUFETUVzLCBvclxuICogb3RoZXIgcmVsYXRlZCBpdGVtcykgaXMgYmVpbmcgcHJvdmlkZWQgYnkgdGhlIGNvcHlyaWdodCBob2xkZXJzIHVuZGVyXG4gKiB0aGUgZm9sbG93aW5nIGxpY2Vuc2UuIEJ5IG9idGFpbmluZywgdXNpbmcgYW5kL29yIGNvcHlpbmcgdGhpcyB3b3JrLFxuICogeW91ICh0aGUgbGljZW5zZWUpIGFncmVlIHRoYXQgeW91IGhhdmUgcmVhZCwgdW5kZXJzdG9vZCwgYW5kIHdpbGxcbiAqIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVybXMgYW5kIGNvbmRpdGlvbnMuXG4gKlxuICogUGVybWlzc2lvbiB0byBjb3B5LCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgYW5kIGl0c1xuICogZG9jdW1lbnRhdGlvbiwgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgZm9yIGFueSBwdXJwb3NlIGFuZFxuICogd2l0aG91dCBmZWUgb3Igcm95YWx0eSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB5b3UgaW5jbHVkZVxuICogdGhlIGZvbGxvd2luZyBvbiBBTEwgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSBhbmQgZG9jdW1lbnRhdGlvbiBvclxuICogcG9ydGlvbnMgdGhlcmVvZiwgaW5jbHVkaW5nIG1vZGlmaWNhdGlvbnM6XG4gKlxuICogMS4gVGhlIGZ1bGwgdGV4dCBvZiB0aGlzIE5PVElDRSBpbiBhIGxvY2F0aW9uIHZpZXdhYmxlIHRvIHVzZXJzIG9mXG4gKiB0aGUgcmVkaXN0cmlidXRlZCBvciBkZXJpdmF0aXZlIHdvcmsuXG4gKiAyLiBBbnkgcHJlLWV4aXN0aW5nIGludGVsbGVjdHVhbCBwcm9wZXJ0eSBkaXNjbGFpbWVycywgbm90aWNlcywgb3IgdGVybXMgYW5kXG4gKiBjb25kaXRpb25zLiBJZiBub25lIGV4aXN0LCB0aGUgVzNDIFNvZnR3YXJlIFNob3J0IE5vdGljZSBzaG91bGQgYmVcbiAqIGluY2x1ZGVkIChoeXBlcnRleHQgaXMgcHJlZmVycmVkLCB0ZXh0IGlzIHBlcm1pdHRlZCkgd2l0aGluIHRoZSBib2R5XG4gKiBvZiBhbnkgcmVkaXN0cmlidXRlZCBvciBkZXJpdmF0aXZlIGNvZGUuXG4gKiAzLiBOb3RpY2Ugb2YgYW55IGNoYW5nZXMgb3IgbW9kaWZpY2F0aW9ucyB0byB0aGUgZmlsZXMsIGluY2x1ZGluZyB0aGVcbiAqIGRhdGUgY2hhbmdlcyB3ZXJlIG1hZGUuIChXZSByZWNvbW1lbmQgeW91IHByb3ZpZGUgVVJJcyB0byB0aGUgbG9jYXRpb25cbiAqIGZyb20gd2hpY2ggdGhlIGNvZGUgaXMgZGVyaXZlZC4pXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBBTkQgRE9DVU1FTlRBVElPTiBJUyBQUk9WSURFRCBcIkFTIElTLFwiIEFORCBDT1BZUklHSFRcbiAqIEhPTERFUlMgTUFLRSBOTyBSRVBSRVNFTlRBVElPTlMgT1IgV0FSUkFOVElFUywgRVhQUkVTUyBPUiBJTVBMSUVELFxuICogSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTywgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgT1IgRklUTkVTU1xuICogRk9SIEFOWSBQQVJUSUNVTEFSIFBVUlBPU0UgT1IgVEhBVCBUSEUgVVNFIE9GIFRIRSBTT0ZUV0FSRSBPUlxuICogRE9DVU1FTlRBVElPTiBXSUxMIE5PVCBJTkZSSU5HRSBBTlkgVEhJUkQgUEFSVFkgUEFURU5UUywgQ09QWVJJR0hUUyxcbiAqIFRSQURFTUFSS1MgT1IgT1RIRVIgUklHSFRTLlxuICpcbiAqIENPUFlSSUdIVCBIT0xERVJTIFdJTEwgTk9UIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIFNQRUNJQUxcbiAqIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBBUklTSU5HIE9VVCBPRiBBTlkgVVNFIE9GIFRIRSBTT0ZUV0FSRSBPUlxuICogRE9DVU1FTlRBVElPTi5cbiAqXG4gKiBUaGUgbmFtZSBhbmQgdHJhZGVtYXJrcyBvZiBjb3B5cmlnaHQgaG9sZGVycyBtYXkgTk9UIGJlIHVzZWQgaW5cbiAqIGFkdmVydGlzaW5nIG9yIHB1YmxpY2l0eSBwZXJ0YWluaW5nIHRvIHRoZSBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljLFxuICogd3JpdHRlbiBwcmlvciBwZXJtaXNzaW9uLiBUaXRsZSB0byBjb3B5cmlnaHQgaW4gdGhpcyBzb2Z0d2FyZSBhbmQgYW55XG4gKiBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gd2lsbCBhdCBhbGwgdGltZXMgcmVtYWluIHdpdGggY29weXJpZ2h0XG4gKiBob2xkZXJzLlxuICovXG4vKipcbiAqIEBjbGFzcyBDbGFzcyBkZWZpbmluZyBhbiBSREZQYXJzZXIgcmVzb3VyY2Ugb2JqZWN0IHRpZWQgdG8gYW4gUkRGU3RvcmVcbiAqXG4gKiBAYXV0aG9yIERhdmlkIFNoZWV0cyA8ZHNoZWV0c0BtaXQuZWR1PlxuICogQHZlcnNpb24gMC4xXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0gc3RvcmUgQW4gUkRGU3RvcmUgb2JqZWN0XG4gKi9cbnZhciBSREZQYXJzZXI7XG5SREZQYXJzZXIgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgLyoqIFN0YW5kYXJkIG5hbWVzcGFjZXMgdGhhdCB3ZSBrbm93IGhvdyB0byBoYW5kbGUgQGZpbmFsXG4gICAqICBAbWVtYmVyIFJERlBhcnNlclxuICAgKi9cbiAgUkRGUGFyc2VyWyducyddID0ge1xuICAgICdSREYnOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNcIixcbiAgICAnUkRGUyc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI1wiXG4gIH07XG4gIC8qKiBET00gTGV2ZWwgMiBub2RlIHR5cGUgbWFnaWMgbnVtYmVycyBAZmluYWxcbiAgICogIEBtZW1iZXIgUkRGUGFyc2VyXG4gICAqL1xuICBSREZQYXJzZXJbJ25vZGVUeXBlJ10gPSB7XG4gICAgJ0VMRU1FTlQnOiAxLCAnQVRUUklCVVRFJzogMiwgJ1RFWFQnOiAzLFxuICAgICdDREFUQV9TRUNUSU9OJzogNCwgJ0VOVElUWV9SRUZFUkVOQ0UnOiA1LFxuICAgICdFTlRJVFknOiA2LCAnUFJPQ0VTU0lOR19JTlNUUlVDVElPTic6IDcsXG4gICAgJ0NPTU1FTlQnOiA4LCAnRE9DVU1FTlQnOiA5LCAnRE9DVU1FTlRfVFlQRSc6IDEwLFxuICAgICdET0NVTUVOVF9GUkFHTUVOVCc6IDExLCAnTk9UQVRJT04nOiAxMlxuICB9O1xuXG4gIC8qKlxuICAgKiBGcmFtZSBjbGFzcyBmb3IgbmFtZXNwYWNlIGFuZCBiYXNlIFVSSSBsb29rdXBzXG4gICAqIEJhc2UgbG9va3VwcyB3aWxsIGFsd2F5cyByZXNvbHZlIGJlY2F1c2UgdGhlIHBhcnNlciBrbm93c1xuICAgKiB0aGUgZGVmYXVsdCBiYXNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpc1snZnJhbWVGYWN0b3J5J10gPSBmdW5jdGlvbiAocGFyc2VyLCBwYXJlbnQsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ05PREUnOiAxLFxuICAgICAgJ0FSQyc6IDIsXG4gICAgICAncGFyZW50JzogcGFyZW50LFxuICAgICAgJ3BhcnNlcic6IHBhcnNlcixcbiAgICAgICdzdG9yZSc6IHBhcnNlclsnc3RvcmUnXSxcbiAgICAgICdlbGVtZW50JzogZWxlbWVudCxcbiAgICAgICdsYXN0Q2hpbGQnOiAwLFxuICAgICAgJ2Jhc2UnOiBudWxsLFxuICAgICAgJ2xhbmcnOiBudWxsLFxuICAgICAgJ25vZGUnOiBudWxsLFxuICAgICAgJ25vZGVUeXBlJzogbnVsbCxcbiAgICAgICdsaXN0SW5kZXgnOiAxLFxuICAgICAgJ3JkZmlkJzogbnVsbCxcbiAgICAgICdkYXRhdHlwZSc6IG51bGwsXG4gICAgICAnY29sbGVjdGlvbic6IGZhbHNlLFxuXG4gICAgICAvKiogVGVybWluYXRlIHRoZSBmcmFtZSBhbmQgbm90aWZ5IHRoZSBzdG9yZSB0aGF0IHdlJ3JlIGRvbmUgKi9cbiAgICAgICd0ZXJtaW5hdGVGcmFtZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXNbJ2NvbGxlY3Rpb24nXSkge1xuICAgICAgICAgIHRoaXNbJ25vZGUnXVsnY2xvc2UnXSgpXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKiBBZGQgYSBzeW1ib2wgb2YgYSBjZXJ0YWluIHR5cGUgdG8gdGhlIHRoaXMgZnJhbWUgKi9cbiAgICAgICdhZGRTeW1ib2wnOiBmdW5jdGlvbiAodHlwZSwgdXJpKSB7XG4gICAgICAgIHVyaSA9IGpvaW4odXJpLCB0aGlzWydiYXNlJ10pO1xuICAgICAgICB0aGlzWydub2RlJ10gPSB0aGlzWydzdG9yZSddWydzeW0nXSh1cmkpO1xuICAgICAgICB0aGlzWydub2RlVHlwZSddID0gdHlwZVxuICAgICAgfSxcblxuICAgICAgLyoqIExvYWQgYW55IGNvbnN0cnVjdGVkIHRyaXBsZXMgaW50byB0aGUgc3RvcmUgKi9cbiAgICAgICdsb2FkVHJpcGxlJzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpc1sncGFyZW50J11bJ3BhcmVudCddWydjb2xsZWN0aW9uJ10pIHtcbiAgICAgICAgICB0aGlzWydwYXJlbnQnXVsncGFyZW50J11bJ25vZGUnXVsnYXBwZW5kJ10odGhpc1snbm9kZSddKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXNbJ3N0b3JlJ11bJ2FkZCddKHRoaXNbJ3BhcmVudCddWydwYXJlbnQnXVsnbm9kZSddLFxuICAgICAgICAgICAgdGhpc1sncGFyZW50J11bJ25vZGUnXSxcbiAgICAgICAgICAgIHRoaXNbJ25vZGUnXSxcbiAgICAgICAgICAgIHRoaXNbJ3BhcnNlciddWyd3aHknXSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpc1sncGFyZW50J11bJ3JkZmlkJ10gIT0gbnVsbCkgeyAvLyByZWlmeVxuICAgICAgICAgIHZhciB0cmlwbGUgPSB0aGlzWydzdG9yZSddWydzeW0nXShcbiAgICAgICAgICAgIGpvaW4oXCIjXCIgKyB0aGlzWydwYXJlbnQnXVsncmRmaWQnXSxcbiAgICAgICAgICAgICAgdGhpc1snYmFzZSddKSk7XG4gICAgICAgICAgdGhpc1snc3RvcmUnXVsnYWRkJ10odHJpcGxlLFxuICAgICAgICAgICAgdGhpc1snc3RvcmUnXVsnc3ltJ10oXG4gICAgICAgICAgICAgIFJERlBhcnNlclsnbnMnXVsnUkRGJ11cbiAgICAgICAgICAgICAgKyBcInR5cGVcIiksXG4gICAgICAgICAgICB0aGlzWydzdG9yZSddWydzeW0nXShcbiAgICAgICAgICAgICAgUkRGUGFyc2VyWyducyddWydSREYnXVxuICAgICAgICAgICAgICArIFwiU3RhdGVtZW50XCIpLFxuICAgICAgICAgICAgdGhpc1sncGFyc2VyJ11bJ3doeSddKTtcbiAgICAgICAgICB0aGlzWydzdG9yZSddWydhZGQnXSh0cmlwbGUsXG4gICAgICAgICAgICB0aGlzWydzdG9yZSddWydzeW0nXShcbiAgICAgICAgICAgICAgUkRGUGFyc2VyWyducyddWydSREYnXVxuICAgICAgICAgICAgICArIFwic3ViamVjdFwiKSxcbiAgICAgICAgICAgIHRoaXNbJ3BhcmVudCddWydwYXJlbnQnXVsnbm9kZSddLFxuICAgICAgICAgICAgdGhpc1sncGFyc2VyJ11bJ3doeSddKTtcbiAgICAgICAgICB0aGlzWydzdG9yZSddWydhZGQnXSh0cmlwbGUsXG4gICAgICAgICAgICB0aGlzWydzdG9yZSddWydzeW0nXShcbiAgICAgICAgICAgICAgUkRGUGFyc2VyWyducyddWydSREYnXVxuICAgICAgICAgICAgICArIFwicHJlZGljYXRlXCIpLFxuICAgICAgICAgICAgdGhpc1sncGFyZW50J11bJ25vZGUnXSxcbiAgICAgICAgICAgIHRoaXNbJ3BhcnNlciddWyd3aHknXSk7XG4gICAgICAgICAgdGhpc1snc3RvcmUnXVsnYWRkJ10odHJpcGxlLFxuICAgICAgICAgICAgdGhpc1snc3RvcmUnXVsnc3ltJ10oXG4gICAgICAgICAgICAgIFJERlBhcnNlclsnbnMnXVsnUkRGJ11cbiAgICAgICAgICAgICAgKyBcIm9iamVjdFwiKSxcbiAgICAgICAgICAgIHRoaXNbJ25vZGUnXSxcbiAgICAgICAgICAgIHRoaXNbJ3BhcnNlciddWyd3aHknXSlcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqIENoZWNrIGlmIGl0J3MgT0sgdG8gbG9hZCBhIHRyaXBsZSAqL1xuICAgICAgJ2lzVHJpcGxlVG9Mb2FkJzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXNbJ3BhcmVudCddICE9IG51bGxcbiAgICAgICAgICAmJiB0aGlzWydwYXJlbnQnXVsncGFyZW50J10gIT0gbnVsbFxuICAgICAgICAgICYmIHRoaXNbJ25vZGVUeXBlJ10gPT0gdGhpc1snTk9ERSddXG4gICAgICAgICAgJiYgdGhpc1sncGFyZW50J11bJ25vZGVUeXBlJ10gPT0gdGhpc1snQVJDJ11cbiAgICAgICAgICAmJiB0aGlzWydwYXJlbnQnXVsncGFyZW50J11bJ25vZGVUeXBlJ11cbiAgICAgICAgICA9PSB0aGlzWydOT0RFJ10pXG4gICAgICB9LFxuXG4gICAgICAvKiogQWRkIGEgc3ltYm9saWMgbm9kZSB0byB0aGlzIGZyYW1lICovXG4gICAgICAnYWRkTm9kZSc6IGZ1bmN0aW9uICh1cmkpIHtcbiAgICAgICAgdGhpc1snYWRkU3ltYm9sJ10odGhpc1snTk9ERSddLCB1cmkpO1xuICAgICAgICBpZiAodGhpc1snaXNUcmlwbGVUb0xvYWQnXSgpKSB7XG4gICAgICAgICAgdGhpc1snbG9hZFRyaXBsZSddKClcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqIEFkZCBhIGNvbGxlY3Rpb24gbm9kZSB0byB0aGlzIGZyYW1lICovXG4gICAgICAnYWRkQ29sbGVjdGlvbic6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpc1snbm9kZVR5cGUnXSA9IHRoaXNbJ05PREUnXTtcbiAgICAgICAgdGhpc1snbm9kZSddID0gdGhpc1snc3RvcmUnXVsnY29sbGVjdGlvbiddKCk7XG4gICAgICAgIHRoaXNbJ2NvbGxlY3Rpb24nXSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzWydpc1RyaXBsZVRvTG9hZCddKCkpIHtcbiAgICAgICAgICB0aGlzWydsb2FkVHJpcGxlJ10oKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKiogQWRkIGEgY29sbGVjdGlvbiBhcmMgdG8gdGhpcyBmcmFtZSAqL1xuICAgICAgJ2FkZENvbGxlY3Rpb25BcmMnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXNbJ25vZGVUeXBlJ10gPSB0aGlzWydBUkMnXVxuICAgICAgfSxcblxuICAgICAgLyoqIEFkZCBhIGJub2RlIHRvIHRoaXMgZnJhbWUgKi9cbiAgICAgICdhZGRCTm9kZSc6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0aGlzWydwYXJzZXInXVsnYm5vZGVzJ11baWRdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXNbJ25vZGUnXSA9IHRoaXNbJ3BhcnNlciddWydibm9kZXMnXVtpZF1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1snbm9kZSddID0gdGhpc1sncGFyc2VyJ11bJ2Jub2RlcyddW2lkXSA9IHRoaXNbJ3N0b3JlJ11bJ2Jub2RlJ10oKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzWydub2RlJ10gPSB0aGlzWydzdG9yZSddWydibm9kZSddKClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbJ25vZGVUeXBlJ10gPSB0aGlzWydOT0RFJ107XG4gICAgICAgIGlmICh0aGlzWydpc1RyaXBsZVRvTG9hZCddKCkpIHtcbiAgICAgICAgICB0aGlzWydsb2FkVHJpcGxlJ10oKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKiogQWRkIGFuIGFyYyBvciBwcm9wZXJ0eSB0byB0aGlzIGZyYW1lICovXG4gICAgICAnYWRkQXJjJzogZnVuY3Rpb24gKHVyaSkge1xuICAgICAgICBpZiAodXJpID09IFJERlBhcnNlclsnbnMnXVsnUkRGJ10gKyBcImxpXCIpIHtcbiAgICAgICAgICB1cmkgPSBSREZQYXJzZXJbJ25zJ11bJ1JERiddICsgXCJfXCIgKyB0aGlzWydwYXJlbnQnXVsnbGlzdEluZGV4J10rK1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbJ2FkZFN5bWJvbCddKHRoaXNbJ0FSQyddLCB1cmkpXG4gICAgICB9LFxuXG4gICAgICAvKiogQWRkIGEgbGl0ZXJhbCB0byB0aGlzIGZyYW1lICovXG4gICAgICAnYWRkTGl0ZXJhbCc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpc1sncGFyZW50J11bJ2RhdGF0eXBlJ10pIHtcbiAgICAgICAgICB0aGlzWydub2RlJ10gPSB0aGlzWydzdG9yZSddWydsaXRlcmFsJ10oXG4gICAgICAgICAgICB2YWx1ZSwgXCJcIiwgdGhpc1snc3RvcmUnXVsnc3ltJ10oXG4gICAgICAgICAgICAgIHRoaXNbJ3BhcmVudCddWydkYXRhdHlwZSddKSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzWydub2RlJ10gPSB0aGlzWydzdG9yZSddWydsaXRlcmFsJ10oXG4gICAgICAgICAgICB2YWx1ZSwgdGhpc1snbGFuZyddKVxuICAgICAgICB9XG4gICAgICAgIHRoaXNbJ25vZGVUeXBlJ10gPSB0aGlzWydOT0RFJ107XG4gICAgICAgIGlmICh0aGlzWydpc1RyaXBsZVRvTG9hZCddKCkpIHtcbiAgICAgICAgICB0aGlzWydsb2FkVHJpcGxlJ10oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKiBPdXIgdHJpcGxlIHN0b3JlIHJlZmVyZW5jZSBAcHJpdmF0ZSAqL1xuICB0aGlzWydzdG9yZSddID0gc3RvcmU7XG4gIC8qKiBPdXIgaWRlbnRpZmllZCBibGFuayBub2RlcyBAcHJpdmF0ZSAqL1xuICB0aGlzWydibm9kZXMnXSA9IHt9O1xuICAvKiogQSBjb250ZXh0IGZvciBjb250ZXh0LWF3YXJlIHN0b3JlcyBAcHJpdmF0ZSAqL1xuICB0aGlzWyd3aHknXSA9IG51bGw7XG4gIC8qKiBSZWlmaWNhdGlvbiBmbGFnICovXG4gIHRoaXNbJ3JlaWZ5J10gPSBmYWxzZTtcblxuICAvKipcbiAgICogQnVpbGQgb3VyIGluaXRpYWwgc2NvcGUgZnJhbWUgYW5kIHBhcnNlIHRoZSBET00gaW50byB0cmlwbGVzXG4gICAqIEBwYXJhbSBkb2N1bWVudCBUaGUgRE9NIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlIFRoZSBiYXNlIFVSTCB0byB1c2VcbiAgICogQHBhcmFtIHtPYmplY3R9IHdoeSBUaGUgY29udGV4dCB0byB3aGljaCB0aGlzIHJlc291cmNlIGJlbG9uZ3NcbiAgICovXG4gIHRoaXNbJ3BhcnNlJ10gPSBmdW5jdGlvbiAoZG9jdW1lbnQsIGJhc2UsIHdoeSkge1xuICAgIHZhciBjaGlsZHJlbiA9IGRvY3VtZW50WydjaGlsZE5vZGVzJ10sIHJvb3Q7XG5cbiAgICAvLyBjbGVhbiB1cCBmb3IgdGhlIG5leHQgcnVuXG4gICAgdGhpc1snY2xlYW5QYXJzZXInXSgpO1xuXG4gICAgLy8gZmlndXJlIG91dCB0aGUgcm9vdCBlbGVtZW50XG4gICAgaWYgKGRvY3VtZW50Wydub2RlVHlwZSddID09IFJERlBhcnNlclsnbm9kZVR5cGUnXVsnRE9DVU1FTlQnXSkge1xuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjaGlsZHJlblsnbGVuZ3RoJ107IGMrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5bY11bJ25vZGVUeXBlJ11cbiAgICAgICAgICA9PSBSREZQYXJzZXJbJ25vZGVUeXBlJ11bJ0VMRU1FTlQnXSkge1xuICAgICAgICAgIHJvb3QgPSBjaGlsZHJlbltjXTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGRvY3VtZW50Wydub2RlVHlwZSddID09IFJERlBhcnNlclsnbm9kZVR5cGUnXVsnRUxFTUVOVCddKSB7XG4gICAgICByb290ID0gZG9jdW1lbnRcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSREZQYXJzZXI6IGNhbid0IGZpbmQgcm9vdCBpbiBcIiArIGJhc2VcbiAgICAgICAgKyBcIi4gSGFsdGluZy4gXCIpO1xuICAgIH1cblxuICAgIHRoaXNbJ3doeSddID0gd2h5O1xuXG4gICAgLy8gb3VyIHRvcG1vc3QgZnJhbWVcblxuICAgIHZhciBmID0gdGhpc1snZnJhbWVGYWN0b3J5J10odGhpcyk7XG4gICAgZlsnYmFzZSddID0gYmFzZTtcbiAgICBmWydsYW5nJ10gPSAnJztcblxuICAgIHRoaXNbJ3BhcnNlRE9NJ10odGhpc1snYnVpbGRGcmFtZSddKGYsIHJvb3QpKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9O1xuICB0aGlzWydwYXJzZURPTSddID0gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgLy8gYSBET00gdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGluIHBhcnNpbmdcbiAgICB2YXIgZWxlbWVudFVSSSA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsWyduYW1lc3BhY2VVUkknXSArIGVsWydsb2NhbE5hbWUnXVxuICAgIH07XG4gICAgdmFyIGRpZyA9IHRydWU7IC8vIGlmIHdlJ2xsIGRpZyBkb3duIGluIHRoZSB0cmVlIG9uIHRoZSBuZXh0IGl0ZXJcblxuICAgIHdoaWxlIChmcmFtZVsncGFyZW50J10pIHtcbiAgICAgIHZhciByZGZpZCwgYm5pZDtcbiAgICAgIHZhciBkb20gPSBmcmFtZVsnZWxlbWVudCddO1xuICAgICAgdmFyIGF0dHJzID0gZG9tWydhdHRyaWJ1dGVzJ107XG5cbiAgICAgIGlmIChkb21bJ25vZGVUeXBlJ11cbiAgICAgICAgPT0gUkRGUGFyc2VyWydub2RlVHlwZSddWydURVhUJ11cbiAgICAgICAgfHwgZG9tWydub2RlVHlwZSddXG4gICAgICAgID09IFJERlBhcnNlclsnbm9kZVR5cGUnXVsnQ0RBVEFfU0VDVElPTiddKSB7Ly93ZSBoYXZlIGEgbGl0ZXJhbFxuICAgICAgICBmcmFtZVsnYWRkTGl0ZXJhbCddKGRvbVsnbm9kZVZhbHVlJ10pXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChlbGVtZW50VVJJKGRvbSlcbiAgICAgICAgIT0gUkRGUGFyc2VyWyducyddWydSREYnXSArIFwiUkRGXCIpIHsgLy8gbm90IHJvb3RcbiAgICAgICAgaWYgKGZyYW1lWydwYXJlbnQnXSAmJiBmcmFtZVsncGFyZW50J11bJ2NvbGxlY3Rpb24nXSkge1xuICAgICAgICAgIC8vIHdlJ3JlIGEgY29sbGVjdGlvbiBlbGVtZW50XG4gICAgICAgICAgZnJhbWVbJ2FkZENvbGxlY3Rpb25BcmMnXSgpO1xuICAgICAgICAgIGZyYW1lID0gdGhpc1snYnVpbGRGcmFtZSddKGZyYW1lLCBmcmFtZVsnZWxlbWVudCddKTtcbiAgICAgICAgICBmcmFtZVsncGFyZW50J11bJ2VsZW1lbnQnXSA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZyYW1lWydwYXJlbnQnXSB8fCAhZnJhbWVbJ3BhcmVudCddWydub2RlVHlwZSddXG4gICAgICAgICAgfHwgZnJhbWVbJ3BhcmVudCddWydub2RlVHlwZSddID09IGZyYW1lWydBUkMnXSkge1xuICAgICAgICAgIC8vIHdlIG5lZWQgYSBub2RlXG4gICAgICAgICAgdmFyIGFib3V0ID0gZG9tWydnZXRBdHRyaWJ1dGVOb2RlTlMnXShcbiAgICAgICAgICAgIFJERlBhcnNlclsnbnMnXVsnUkRGJ10sIFwiYWJvdXRcIik7XG4gICAgICAgICAgcmRmaWQgPSBkb21bJ2dldEF0dHJpYnV0ZU5vZGVOUyddKFxuICAgICAgICAgICAgUkRGUGFyc2VyWyducyddWydSREYnXSwgXCJJRFwiKTtcbiAgICAgICAgICBpZiAoYWJvdXQgJiYgcmRmaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJERlBhcnNlcjogXCIgKyBkb21bJ25vZGVOYW1lJ11cbiAgICAgICAgICAgICAgKyBcIiBoYXMgYm90aCByZGY6aWQgYW5kIHJkZjphYm91dC5cIlxuICAgICAgICAgICAgICArIFwiIEhhbHRpbmcuIE9ubHkgb25lIG9mIHRoZXNlXCJcbiAgICAgICAgICAgICAgKyBcIiBwcm9wZXJ0aWVzIG1heSBiZSBzcGVjaWZpZWQgb24gYVwiXG4gICAgICAgICAgICAgICsgXCIgbm9kZS5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhYm91dCA9PSBudWxsICYmIHJkZmlkKSB7XG4gICAgICAgICAgICBmcmFtZVsnYWRkTm9kZSddKFwiI1wiICsgcmRmaWRbJ25vZGVWYWx1ZSddKTtcbiAgICAgICAgICAgIGRvbVsncmVtb3ZlQXR0cmlidXRlTm9kZSddKHJkZmlkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChhYm91dCA9PSBudWxsICYmIHJkZmlkID09IG51bGwpIHtcbiAgICAgICAgICAgIGJuaWQgPSBkb21bJ2dldEF0dHJpYnV0ZU5vZGVOUyddKFxuICAgICAgICAgICAgICBSREZQYXJzZXJbJ25zJ11bJ1JERiddLCBcIm5vZGVJRFwiKTtcbiAgICAgICAgICAgIGlmIChibmlkKSB7XG4gICAgICAgICAgICAgIGZyYW1lWydhZGRCTm9kZSddKGJuaWRbJ25vZGVWYWx1ZSddKTtcbiAgICAgICAgICAgICAgZG9tWydyZW1vdmVBdHRyaWJ1dGVOb2RlJ10oYm5pZClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZyYW1lWydhZGRCTm9kZSddKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcmFtZVsnYWRkTm9kZSddKGFib3V0Wydub2RlVmFsdWUnXSk7XG4gICAgICAgICAgICBkb21bJ3JlbW92ZUF0dHJpYnV0ZU5vZGUnXShhYm91dClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUeXBlZCBub2Rlc1xuICAgICAgICAgIHZhciByZGZ0eXBlID0gZG9tWydnZXRBdHRyaWJ1dGVOb2RlTlMnXShcbiAgICAgICAgICAgIFJERlBhcnNlclsnbnMnXVsnUkRGJ10sIFwidHlwZVwiKTtcbiAgICAgICAgICBpZiAoUkRGUGFyc2VyWyducyddWydSREYnXSArIFwiRGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgIT0gZWxlbWVudFVSSShkb20pKSB7XG4gICAgICAgICAgICByZGZ0eXBlID0geyAnbm9kZVZhbHVlJzogZWxlbWVudFVSSShkb20pIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJkZnR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpc1snc3RvcmUnXVsnYWRkJ10oZnJhbWVbJ25vZGUnXSxcbiAgICAgICAgICAgICAgdGhpc1snc3RvcmUnXVsnc3ltJ10oXG4gICAgICAgICAgICAgICAgUkRGUGFyc2VyWyducyddWydSREYnXSArIFwidHlwZVwiKSxcbiAgICAgICAgICAgICAgdGhpc1snc3RvcmUnXVsnc3ltJ10oXG4gICAgICAgICAgICAgICAgam9pbihcbiAgICAgICAgICAgICAgICAgIHJkZnR5cGVbJ25vZGVWYWx1ZSddLFxuICAgICAgICAgICAgICAgICAgZnJhbWVbJ2Jhc2UnXSkpLFxuICAgICAgICAgICAgICB0aGlzWyd3aHknXSk7XG4gICAgICAgICAgICBpZiAocmRmdHlwZVsnbm9kZU5hbWUnXSkge1xuICAgICAgICAgICAgICBkb21bJ3JlbW92ZUF0dHJpYnV0ZU5vZGUnXShyZGZ0eXBlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFByb3BlcnR5IEF0dHJpYnV0ZXNcbiAgICAgICAgICBmb3IgKHZhciB4ID0gYXR0cnNbJ2xlbmd0aCddIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgICAgICAgIHRoaXNbJ3N0b3JlJ11bJ2FkZCddKGZyYW1lWydub2RlJ10sXG4gICAgICAgICAgICAgIHRoaXNbJ3N0b3JlJ11bJ3N5bSddKFxuICAgICAgICAgICAgICAgIGVsZW1lbnRVUkkoYXR0cnNbeF0pKSxcbiAgICAgICAgICAgICAgdGhpc1snc3RvcmUnXVsnbGl0ZXJhbCddKFxuICAgICAgICAgICAgICAgIGF0dHJzW3hdWydub2RlVmFsdWUnXSxcbiAgICAgICAgICAgICAgICBmcmFtZVsnbGFuZyddKSxcbiAgICAgICAgICAgICAgdGhpc1snd2h5J10pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyB3ZSBzaG91bGQgYWRkIGFuIGFyYyAob3IgaW1wbGljaXQgYm5vZGUrYXJjKVxuICAgICAgICAgIGZyYW1lWydhZGRBcmMnXShlbGVtZW50VVJJKGRvbSkpO1xuXG4gICAgICAgICAgLy8gc2F2ZSB0aGUgYXJjJ3MgcmRmOklEIGlmIGl0IGhhcyBvbmVcbiAgICAgICAgICBpZiAodGhpc1sncmVpZnknXSkge1xuICAgICAgICAgICAgcmRmaWQgPSBkb21bJ2dldEF0dHJpYnV0ZU5vZGVOUyddKFxuICAgICAgICAgICAgICBSREZQYXJzZXJbJ25zJ11bJ1JERiddLCBcIklEXCIpO1xuICAgICAgICAgICAgaWYgKHJkZmlkKSB7XG4gICAgICAgICAgICAgIGZyYW1lWydyZGZpZCddID0gcmRmaWRbJ25vZGVWYWx1ZSddO1xuICAgICAgICAgICAgICBkb21bJ3JlbW92ZUF0dHJpYnV0ZU5vZGUnXShyZGZpZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcGFyc2V0eXBlID0gZG9tWydnZXRBdHRyaWJ1dGVOb2RlTlMnXShcbiAgICAgICAgICAgIFJERlBhcnNlclsnbnMnXVsnUkRGJ10sIFwicGFyc2VUeXBlXCIpO1xuICAgICAgICAgIHZhciBkYXRhdHlwZSA9IGRvbVsnZ2V0QXR0cmlidXRlTm9kZU5TJ10oXG4gICAgICAgICAgICBSREZQYXJzZXJbJ25zJ11bJ1JERiddLCBcImRhdGF0eXBlXCIpO1xuICAgICAgICAgIGlmIChkYXRhdHlwZSkge1xuICAgICAgICAgICAgZnJhbWVbJ2RhdGF0eXBlJ10gPSBkYXRhdHlwZVsnbm9kZVZhbHVlJ107XG4gICAgICAgICAgICBkb21bJ3JlbW92ZUF0dHJpYnV0ZU5vZGUnXShkYXRhdHlwZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGFyc2V0eXBlKSB7XG4gICAgICAgICAgICB2YXIgbnYgPSBwYXJzZXR5cGVbJ25vZGVWYWx1ZSddO1xuICAgICAgICAgICAgaWYgKG52ID09IFwiTGl0ZXJhbFwiKSB7XG4gICAgICAgICAgICAgIGZyYW1lWydkYXRhdHlwZSddXG4gICAgICAgICAgICAgICAgPSBSREZQYXJzZXJbJ25zJ11bJ1JERiddICsgXCJYTUxMaXRlcmFsXCI7XG4gICAgICAgICAgICAgIC8vICh0aGlzLmJ1aWxkRnJhbWUoZnJhbWUpKS5hZGRMaXRlcmFsKGRvbSlcbiAgICAgICAgICAgICAgLy8gc2hvdWxkIHdvcmsgYnV0IGRvZXNuJ3RcbiAgICAgICAgICAgICAgZnJhbWUgPSB0aGlzWydidWlsZEZyYW1lJ10oZnJhbWUpO1xuICAgICAgICAgICAgICBmcmFtZVsnYWRkTGl0ZXJhbCddKGRvbSk7XG4gICAgICAgICAgICAgIGRpZyA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChudiA9PSBcIlJlc291cmNlXCIpIHtcbiAgICAgICAgICAgICAgZnJhbWUgPSB0aGlzWydidWlsZEZyYW1lJ10oZnJhbWUsIGZyYW1lWydlbGVtZW50J10pO1xuICAgICAgICAgICAgICBmcmFtZVsncGFyZW50J11bJ2VsZW1lbnQnXSA9IG51bGw7XG4gICAgICAgICAgICAgIGZyYW1lWydhZGRCTm9kZSddKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG52ID09IFwiQ29sbGVjdGlvblwiKSB7XG4gICAgICAgICAgICAgIGZyYW1lID0gdGhpc1snYnVpbGRGcmFtZSddKGZyYW1lLCBmcmFtZVsnZWxlbWVudCddKTtcbiAgICAgICAgICAgICAgZnJhbWVbJ3BhcmVudCddWydlbGVtZW50J10gPSBudWxsO1xuICAgICAgICAgICAgICBmcmFtZVsnYWRkQ29sbGVjdGlvbiddKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbVsncmVtb3ZlQXR0cmlidXRlTm9kZSddKHBhcnNldHlwZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXR0cnNbJ2xlbmd0aCddICE9IDApIHtcbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IGRvbVsnZ2V0QXR0cmlidXRlTm9kZU5TJ10oXG4gICAgICAgICAgICAgIFJERlBhcnNlclsnbnMnXVsnUkRGJ10sIFwicmVzb3VyY2VcIik7XG4gICAgICAgICAgICBibmlkID0gZG9tWydnZXRBdHRyaWJ1dGVOb2RlTlMnXShcbiAgICAgICAgICAgICAgUkRGUGFyc2VyWyducyddWydSREYnXSwgXCJub2RlSURcIik7XG5cbiAgICAgICAgICAgIGZyYW1lID0gdGhpc1snYnVpbGRGcmFtZSddKGZyYW1lKTtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZSkge1xuICAgICAgICAgICAgICBmcmFtZVsnYWRkTm9kZSddKHJlc291cmNlWydub2RlVmFsdWUnXSk7XG4gICAgICAgICAgICAgIGRvbVsncmVtb3ZlQXR0cmlidXRlTm9kZSddKHJlc291cmNlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJuaWQpIHtcbiAgICAgICAgICAgICAgICBmcmFtZVsnYWRkQk5vZGUnXShibmlkWydub2RlVmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgZG9tWydyZW1vdmVBdHRyaWJ1dGVOb2RlJ10oYm5pZClcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmcmFtZVsnYWRkQk5vZGUnXSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh4ID0gYXR0cnNbJ2xlbmd0aCddIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzWydidWlsZEZyYW1lJ10oZnJhbWUpO1xuICAgICAgICAgICAgICBmWydhZGRBcmMnXShlbGVtZW50VVJJKGF0dHJzW3hdKSk7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50VVJJKGF0dHJzW3hdKVxuICAgICAgICAgICAgICAgID09IFJERlBhcnNlclsnbnMnXVsnUkRGJ10gKyBcInR5cGVcIikge1xuICAgICAgICAgICAgICAgICh0aGlzWydidWlsZEZyYW1lJ10oZikpWydhZGROb2RlJ10oXG4gICAgICAgICAgICAgICAgICBhdHRyc1t4XVsnbm9kZVZhbHVlJ10pXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgKHRoaXNbJ2J1aWxkRnJhbWUnXShmKSlbJ2FkZExpdGVyYWwnXShcbiAgICAgICAgICAgICAgICAgIGF0dHJzW3hdWydub2RlVmFsdWUnXSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChkb21bJ2NoaWxkTm9kZXMnXVsnbGVuZ3RoJ10gPT0gMCkge1xuICAgICAgICAgICAgKHRoaXNbJ2J1aWxkRnJhbWUnXShmcmFtZSkpWydhZGRMaXRlcmFsJ10oXCJcIilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gcmRmOlJERlxuXG4gICAgICAvLyBkaWcgZHVnXG4gICAgICBkb20gPSBmcmFtZVsnZWxlbWVudCddO1xuICAgICAgd2hpbGUgKGZyYW1lWydwYXJlbnQnXSkge1xuICAgICAgICB2YXIgcGZyYW1lID0gZnJhbWU7XG4gICAgICAgIHdoaWxlIChkb20gPT0gbnVsbCkge1xuICAgICAgICAgIGZyYW1lID0gZnJhbWVbJ3BhcmVudCddO1xuICAgICAgICAgIGRvbSA9IGZyYW1lWydlbGVtZW50J11cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2ggPSBkb21bJ2NoaWxkTm9kZXMnXTtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IGNoICE9IG51bGwgPyBjaFtmcmFtZVsnbGFzdENoaWxkJ11dIDogbnVsbDtcbiAgICAgICAgaWYgKGNhbmRpZGF0ZSA9PSBudWxsIHx8ICFkaWcpIHtcbiAgICAgICAgICBmcmFtZVsndGVybWluYXRlRnJhbWUnXSgpO1xuICAgICAgICAgIGlmICghKGZyYW1lID0gZnJhbWVbJ3BhcmVudCddKSkge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9IC8vIGRvbmVcbiAgICAgICAgICBkb20gPSBmcmFtZVsnZWxlbWVudCddO1xuICAgICAgICAgIGRpZyA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoY2FuZGlkYXRlWydub2RlVHlwZSddXG4gICAgICAgICAgICAhPSBSREZQYXJzZXJbJ25vZGVUeXBlJ11bJ0VMRU1FTlQnXVxuICAgICAgICAgICAgJiYgY2FuZGlkYXRlWydub2RlVHlwZSddXG4gICAgICAgICAgICAhPSBSREZQYXJzZXJbJ25vZGVUeXBlJ11bJ1RFWFQnXVxuICAgICAgICAgICAgJiYgY2FuZGlkYXRlWydub2RlVHlwZSddXG4gICAgICAgICAgICAhPSBSREZQYXJzZXJbJ25vZGVUeXBlJ11bJ0NEQVRBX1NFQ1RJT04nXSlcbiAgICAgICAgICB8fCAoKGNhbmRpZGF0ZVsnbm9kZVR5cGUnXVxuICAgICAgICAgICAgPT0gUkRGUGFyc2VyWydub2RlVHlwZSddWydURVhUJ11cbiAgICAgICAgICAgIHx8IGNhbmRpZGF0ZVsnbm9kZVR5cGUnXVxuICAgICAgICAgICAgPT0gUkRGUGFyc2VyWydub2RlVHlwZSddWydDREFUQV9TRUNUSU9OJ10pXG4gICAgICAgICAgICAmJiBkb21bJ2NoaWxkTm9kZXMnXVsnbGVuZ3RoJ10gIT0gMSkpIHtcbiAgICAgICAgICBmcmFtZVsnbGFzdENoaWxkJ10rK1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBub3QgYSBsZWFmXG4gICAgICAgICAgZnJhbWVbJ2xhc3RDaGlsZCddKys7XG4gICAgICAgICAgZnJhbWUgPSB0aGlzWydidWlsZEZyYW1lJ10ocGZyYW1lLFxuICAgICAgICAgICAgZG9tWydjaGlsZE5vZGVzJ11bZnJhbWVbJ2xhc3RDaGlsZCddIC0gMV0pO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIHdoaWxlXG4gIH07XG5cbiAgLyoqXG4gICAqIENsZWFucyBvdXQgc3RhdGUgZnJvbSBhIHByZXZpb3VzIHBhcnNlIHJ1blxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpc1snY2xlYW5QYXJzZXInXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzWydibm9kZXMnXSA9IHt9O1xuICAgIHRoaXNbJ3doeSddID0gbnVsbFxuICB9O1xuXG4gIC8qKlxuICAgKiBCdWlsZHMgc2NvcGUgZnJhbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXNbJ2J1aWxkRnJhbWUnXSA9IGZ1bmN0aW9uIChwYXJlbnQsIGVsZW1lbnQpIHtcbiAgICB2YXIgZnJhbWUgPSB0aGlzWydmcmFtZUZhY3RvcnknXSh0aGlzLCBwYXJlbnQsIGVsZW1lbnQpO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGZyYW1lWydiYXNlJ10gPSBwYXJlbnRbJ2Jhc2UnXTtcbiAgICAgIGZyYW1lWydsYW5nJ10gPSBwYXJlbnRbJ2xhbmcnXVxuICAgIH1cbiAgICBpZiAoZWxlbWVudCA9PSBudWxsXG4gICAgICB8fCBlbGVtZW50Wydub2RlVHlwZSddID09IFJERlBhcnNlclsnbm9kZVR5cGUnXVsnVEVYVCddXG4gICAgICB8fCBlbGVtZW50Wydub2RlVHlwZSddID09IFJERlBhcnNlclsnbm9kZVR5cGUnXVsnQ0RBVEFfU0VDVElPTiddKSB7XG4gICAgICByZXR1cm4gZnJhbWVcbiAgICB9XG5cbiAgICB2YXIgYXR0cnMgPSBlbGVtZW50WydhdHRyaWJ1dGVzJ107XG5cbiAgICB2YXIgYmFzZSA9IGVsZW1lbnRbJ2dldEF0dHJpYnV0ZU5vZGUnXShcInhtbDpiYXNlXCIpO1xuICAgIGlmIChiYXNlICE9IG51bGwpIHtcbiAgICAgIGZyYW1lWydiYXNlJ10gPSBiYXNlWydub2RlVmFsdWUnXTtcbiAgICAgIGVsZW1lbnRbJ3JlbW92ZUF0dHJpYnV0ZSddKFwieG1sOmJhc2VcIilcbiAgICB9XG4gICAgdmFyIGxhbmcgPSBlbGVtZW50WydnZXRBdHRyaWJ1dGVOb2RlJ10oXCJ4bWw6bGFuZ1wiKTtcbiAgICBpZiAobGFuZyAhPSBudWxsKSB7XG4gICAgICBmcmFtZVsnbGFuZyddID0gbGFuZ1snbm9kZVZhbHVlJ107XG4gICAgICBlbGVtZW50WydyZW1vdmVBdHRyaWJ1dGUnXShcInhtbDpsYW5nXCIpXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCBleHRyYW5lb3VzIHhtbCBhbmQgeG1sbnMgYXR0cmlidXRlc1xuICAgIGZvciAodmFyIHggPSBhdHRyc1snbGVuZ3RoJ10gLSAxOyB4ID49IDA7IHgtLSkge1xuICAgICAgaWYgKGF0dHJzW3hdWydub2RlTmFtZSddWydzdWJzdHInXSgwLCAzKSA9PSBcInhtbFwiKSB7XG4gICAgICAgIGVsZW1lbnRbJ3JlbW92ZUF0dHJpYnV0ZU5vZGUnXShhdHRyc1t4XSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZyYW1lXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBSREZQYXJzZXI7XG4iLCJpbXBvcnQgeyBqb2luIH0gZnJvbSAnLi91cmknO1xuLy8gVGhlc2UgYXJlIHRoZSBjbGFzc2VzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIFJERiBhbmQgTjMgZGF0YSBtb2RlbHNcbi8vXG4vLyBEZXNpZ25lZCB0byBsb29rIGxpa2UgcmRmbGliIGFuZCBjd20gZGVzaWducy5cbi8vXG4vLyBJc3N1ZXM6IFNob3VsZCB0aGUgbmFtZXMgc3RhcnQgd2l0aCBSREYgdG8gbWFrZSB0aGVtXG4vLyAgICAgIHVuaXF1ZSBhcyBwcm9ncmFtLXdpZGUgc3ltYm9scz9cbi8vXG4vLyBXM0Mgb3BlbiBzb3VyY2UgbGljZW5jZSAyMDA1LlxuLy9cblxuY29uc3QgUkRGVHJhY2tpbmcgPSAwO1xuLy8gQXJlIHdlIHJlcXVpcmluZyByZWFzb25zIGZvciBzdGF0ZW1lbnRzP1xuXG4vL3Rha2VzIGluIGFuIG9iamVjdCBhbmQgbWFrZXMgaXQgYW4gb2JqZWN0IGlmIGl0J3MgYSBsaXRlcmFsXG5jb25zdCBtYWtlVGVybSA9ICh2YWwpID0+IHtcbiAgLy8gIGZ5aShcIk1ha2luZyB0ZXJtIGZyb20gXCIgKyB2YWwpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG5ldyBSREZMaXRlcmFsKHZhbCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhbGVydChgQ2FuJ3QgbWFrZSB0ZXJtIGZyb20gJHt2YWx9IG9mIHR5cGUgJHt0eXBlb2YgdmFsfWApOyAvLyBAQCBhZGQgbnVtYmVyc1xufTtcblxuLy9cdFN5bWJvbFxuY29uc3QgUkRGRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUkRGRW1wdHkucHJvdG90eXBlLnRlcm1UeXBlID0gJ2VtcHR5JztcblxuUkRGRW1wdHkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJyc7XG59O1xuXG5SREZFbXB0eS5wcm90b3R5cGUudG9OVCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICcnXG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgUkRGU3ltYm9sX3RvTlQgPSBmdW5jdGlvbiAoeCkge1xuICByZXR1cm4gKCc8JyArIHgudXJpICsgJz4nKTtcbn07XG5cbmNvbnN0IHRvTlQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSREZTeW1ib2xfdG9OVCh0aGlzKTtcbn07XG5cbmNvbnN0IFJERlN5bWJvbCA9IGZ1bmN0aW9uICh1cmkpIHtcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUkRGU3ltYm9sLnByb3RvdHlwZS50ZXJtVHlwZSA9ICdzeW1ib2wnO1xuXG5SREZTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nID0gdG9OVDtcblxuUkRGU3ltYm9sLnByb3RvdHlwZS50b05UID0gdG9OVDtcblxuLy9cdEJsYW5rIE5vZGVcblxubGV0IFJERk5leHRJZCA9IDA7ICAvLyBHb2JhbCBnZW5pZFxuY29uc3QgTlRBbm9ueW1vdXNOb2RlUHJlZml4ID0gJ186bic7XG5cbmNvbnN0IFJERkJsYW5rTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pZCA9IFJERk5leHRJZCsrO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJERkJsYW5rTm9kZS5wcm90b3R5cGUudGVybVR5cGUgPSAnYm5vZGUnO1xuXG5SREZCbGFua05vZGUucHJvdG90eXBlLnRvTlQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBOVEFub255bW91c05vZGVQcmVmaXggKyB0aGlzLmlkO1xufTtcblJERkJsYW5rTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBSREZCbGFua05vZGUucHJvdG90eXBlLnRvTlQ7XG5cbi8vXHRMaXRlcmFsXG5cbmNvbnN0IFJERkxpdGVyYWwgPSBmdW5jdGlvbiAodmFsdWUsIC8qU3RyaW5nPSovIGxhbmcsIC8qU3RyaW5nPSovZGF0YXR5cGUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmxhbmcgPSBsYW5nO1x0ICAvLyBzdHJpbmdcbiAgdGhpcy5kYXRhdHlwZSA9IGRhdGF0eXBlOyAgLy8gdGVybVxuICByZXR1cm4gdGhpcztcbn07XG5cblJERkxpdGVyYWwucHJvdG90eXBlLnRlcm1UeXBlID0gJ2xpdGVyYWwnO1xuXG5SREZMaXRlcmFsLnByb3RvdHlwZS50b05UID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzdHIgPSB0aGlzLnZhbHVlO1xuICBpZiAodHlwZW9mIHN0ciAhPSAnc3RyaW5nJykge1xuICAgIHRocm93IEVycm9yKCdWYWx1ZSBvZiBSREYgbGl0ZXJhbCBpcyBub3Qgc3RyaW5nOiAnICsgc3RyKTtcbiAgfVxuICBzdHIgPSBzdHIucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKTsgIC8vIGVzY2FwZVxuICBzdHIgPSBzdHIucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpO1xuICBzdHIgPSAnXCInICsgc3RyICsgJ1wiJztcblxuICBpZiAodGhpcy5kYXRhdHlwZSkge1xuICAgIC8vYWxlcnQodGhpcy5kYXRhdHlwZS50ZXJtVHlwZStcIiAgIFwiK3R5cGVvZiB0aGlzLmRhdGF0eXBlKVxuICAgIHN0ciA9IHN0ciArICdeXicgKyB0aGlzLmRhdGF0eXBlOy8vLnRvTlQoKVxuICB9XG4gIGlmICh0aGlzLmxhbmcpIHtcbiAgICBzdHIgPSBzdHIgKyAnQCcgKyB0aGlzLmxhbmc7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblJERkxpdGVyYWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy52YWx1ZTtcbn07XG5cbmNvbnN0IFJERkNvbGxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaWQgPSBSREZOZXh0SWQrKztcbiAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xufTtcblxuUkRGQ29sbGVjdGlvbi5wcm90b3R5cGUudGVybVR5cGUgPSAnY29sbGVjdGlvbic7XG5cblJERkNvbGxlY3Rpb24ucHJvdG90eXBlLnRvTlQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBOVEFub255bW91c05vZGVQcmVmaXggKyB0aGlzLmlkO1xufTtcblJERkNvbGxlY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gUkRGQ29sbGVjdGlvbi5wcm90b3R5cGUudG9OVDtcblxuUkRGQ29sbGVjdGlvbi5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGVsKSB7XG4gIHRoaXMuZWxlbWVudHMucHVzaChlbCk7XG59O1xuXG5SREZDb2xsZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbG9zZWQgPSB0cnVlO1xufTtcblxuLy9cdFN0YXRlbWVudFxuLy9cbi8vICBUaGlzIGlzIGEgdHJpcGxlIHdpdGggYW4gb3B0aW9uYWwgcmVhc29uLlxuLy9cbi8vICAgVGhlIHJlYXNvbiBjYW4gcG9pbnQgdG8gcHJvdmVuZWNlIG9yIGluZmVyZW5jZVxuLy9cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBSREZTdGF0ZW1lbnRfdG9OVCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLnN1YmplY3QudG9OVCgpICsgJyAnXG4gICAgKyB0aGlzLnByZWRpY2F0ZS50b05UKCkgKyAnICdcbiAgICArIHRoaXMub2JqZWN0LnRvTlQoKSArICcgLicpO1xufTtcblxuY29uc3QgUkRGU3RhdGVtZW50ID0gZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCB3aHkpIHtcbiAgdGhpcy5zdWJqZWN0ID0gbWFrZVRlcm0oc3ViamVjdCk7XG4gIHRoaXMucHJlZGljYXRlID0gbWFrZVRlcm0ocHJlZGljYXRlKTtcbiAgdGhpcy5vYmplY3QgPSBtYWtlVGVybShvYmplY3QpO1xuICBpZiAodHlwZW9mIHdoeSAhPSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud2h5ID0gd2h5O1xuICB9IGVsc2UgaWYgKFJERlRyYWNraW5nKSB7XG4gICAgY29uc29sZS5sb2coJ1dBUk5JTkc6IE5vIHJlYXNvbiBvbiAnICsgc3ViamVjdCArICcgJyArIHByZWRpY2F0ZSArICcgJyArIG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5SREZTdGF0ZW1lbnQucHJvdG90eXBlLnRvTlQgPSBSREZTdGF0ZW1lbnRfdG9OVDtcblJERlN0YXRlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBSREZTdGF0ZW1lbnRfdG9OVDtcblxuLy9cdEZvcm11bGFcbi8vXG4vL1x0U2V0IG9mIHN0YXRlbWVudHMuXG5cbmNvbnN0IFJERkZvcm11bGEgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc3RhdGVtZW50cyA9IFtdO1xuICB0aGlzLmNvbnN0cmFpbnRzID0gW107XG4gIHRoaXMuaW5pdEJpbmRpbmdzID0gW107XG4gIHRoaXMub3B0aW9uYWwgPSBbXTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKmZ1bmN0aW9uIFJERlF1ZXJ5Rm9ybXVsYSgpIHtcbiAgdGhpcy5zdGF0ZW1lbnRzID0gW11cbiAgdGhpcy5jb25zdHJhaW50cyA9IFtdXG4gIHRoaXMuaW5pdEJpbmRpbmdzID0gW11cbiAgdGhpcy5vcHRpb25hbCA9IFtdXG4gIHJldHVybiB0aGlzXG59Ki9cblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJERkZvcm11bGFfdG9OVCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICd7XFxuJyArIHRoaXMuc3RhdGVtZW50cy5qb2luKCdcXG4nKSArICd9Jztcbn07XG5cbi8vUkRGUXVlcnlGb3JtdWxhLnByb3RvdHlwZSA9IG5ldyBSREZGb3JtdWxhKClcbi8vUkRGUXVlcnlGb3JtdWxhLnRlcm1UeXBlID0gJ3F1ZXJ5Rm9ybXVsYSdcblJERkZvcm11bGEucHJvdG90eXBlLnRlcm1UeXBlID0gJ2Zvcm11bGEnO1xuUkRGRm9ybXVsYS5wcm90b3R5cGUudG9OVCA9IFJERkZvcm11bGFfdG9OVDtcblJERkZvcm11bGEucHJvdG90eXBlLnRvU3RyaW5nID0gUkRGRm9ybXVsYV90b05UO1xuXG5SREZGb3JtdWxhLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoc3ViaiwgcHJlZCwgb2JqLCB3aHkpIHtcbiAgdGhpcy5zdGF0ZW1lbnRzLnB1c2gobmV3IFJERlN0YXRlbWVudChzdWJqLCBwcmVkLCBvYmosIHdoeSkpO1xufTtcblxuLy8gQ29udmVuaWVuY2UgbWV0aG9kcyBvbiBhIGZvcm11bGEgYWxsb3cgdGhlIGNyZWF0aW9uIG9mIG5ldyBSREYgdGVybXM6XG5cblJERkZvcm11bGEucHJvdG90eXBlLnN5bSA9IGZ1bmN0aW9uICh1cmksIG5hbWUpIHtcbiAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlc1t1cmldICsgbmFtZTtcbiAgfVxuICByZXR1cm4gbmV3IFJERlN5bWJvbCh1cmkpO1xufTtcblxuUkRGRm9ybXVsYS5wcm90b3R5cGUubGl0ZXJhbCA9IGZ1bmN0aW9uICh2YWwsIGxhbmcsIGR0KSB7XG4gIHJldHVybiBuZXcgUkRGTGl0ZXJhbCh2YWwudG9TdHJpbmcoKSwgbGFuZywgZHQpO1xufTtcblxuUkRGRm9ybXVsYS5wcm90b3R5cGUuYm5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgUkRGQmxhbmtOb2RlKCk7XG59O1xuXG5SREZGb3JtdWxhLnByb3RvdHlwZS5mb3JtdWxhID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IFJERkZvcm11bGEoKTtcbn07XG5cblJERkZvcm11bGEucHJvdG90eXBlLmNvbGxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgUkRGQ29sbGVjdGlvbigpO1xufTtcblxuLypSREZGb3JtdWxhLnByb3RvdHlwZS5xdWVyeUZvcm11bGEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSREZRdWVyeUZvcm11bGEoKVxufSovXG5cbmNvbnN0IFJERlZhcmlhYmxlQmFzZSA9ICd2YXJpZDonOyAvLyBXZSBkZWVtIHZhcmlhYmUgeCB0byBiZSB0aGUgc3ltYm9sIHZhcmlkOnhcblxuLy9BbiBSREZWYXJpYWJsZSBpcyBhIHR5cGUgb2Ygcy9wL28gdGhhdCdzIG5vdCBsaXRlcmFsLiBBbGwgaXQgaG9sZHMgaXMgaXQncyBVUkkuXG4vL0l0IGhhcyB0eXBlICd2YXJpYWJsZScsIGFuZCBhIGZ1bmN0aW9uIHRvTlQgdGhhdCB0dXJucyBpdCBpbnRvIE5UcmlwbGUgZm9ybVxuY29uc3QgUkRGVmFyaWFibGUgPSBmdW5jdGlvbiAocmVsKSB7XG4gIHRoaXMudXJpID0gam9pbihyZWwsIFJERlZhcmlhYmxlQmFzZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUkRGVmFyaWFibGUucHJvdG90eXBlLnRlcm1UeXBlID0gJ3ZhcmlhYmxlJztcblJERlZhcmlhYmxlLnByb3RvdHlwZS50b05UID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy51cmkuc2xpY2UoMCwgUkRGVmFyaWFibGVCYXNlLmxlbmd0aCkgPT0gUkRGVmFyaWFibGVCYXNlKSB7XG4gICAgcmV0dXJuIGA/JHt0aGlzLnVyaS5zbGljZShSREZWYXJpYWJsZUJhc2UubGVuZ3RoKX1gO1xuICB9IC8vIEBAIHBvb3IgbWFuJ3MgcmVmVG9cbiAgcmV0dXJuIGA/JHt0aGlzLnVyaX1gO1xufTtcblxuUkRGVmFyaWFibGUucHJvdG90eXBlLnRvU3RyaW5nID0gUkRGVmFyaWFibGUucHJvdG90eXBlLnRvTlQ7XG5SREZWYXJpYWJsZS5wcm90b3R5cGUuY2xhc3NPcmRlciA9IDc7XG5cblJERkZvcm11bGEucHJvdG90eXBlLnZhcmlhYmxlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBSREZWYXJpYWJsZShuYW1lKTtcbn07XG5cblJERlZhcmlhYmxlLnByb3RvdHlwZS5oYXNoU3RyaW5nID0gUkRGVmFyaWFibGUucHJvdG90eXBlLnRvTlQ7XG5cbi8vIFBhcnNlIGEgc2luZ2xlIHRva2VuXG4vL1xuLy8gVGhlIGJub2RlIGJpdCBzaG91bGQgbm90IGJlIHVzZWQgb24gcHJvZ3JhbS1leHRlcm5hbCB2YWx1ZXM7IGRlc2lnbmVkXG4vLyBmb3IgaW50ZXJuYWwgd29yayBzdWNoIGFzIHN0b3JpbmcgYSBibm9kZSBpZCBpbiBhbiBIVE1MIGF0dHJpYnV0ZS5cbi8vIE5vdCBjb2RlZCBmb3IgbGl0ZXJhbHMuXG5cblJERkZvcm11bGEucHJvdG90eXBlLmZyb21OVCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgY29uc3QgY2ggPSBzdHIuc2xpY2UoMCwgMSk7XG4gIGlmIChjaCA9PT0gJzwnKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltKHN0ci5zbGljZSgxLCBsZW4gLSAxKSk7XG4gIH1cbiAgaWYgKGNoID09PSAnXycpIHtcbiAgICBjb25zdCB4ID0gbmV3IFJERkJsYW5rTm9kZSgpO1xuICAgIHguaWQgPSBwYXJzZUludChzdHIuc2xpY2UoMykpO1xuICAgIFJERk5leHRJZC0tO1xuICAgIHJldHVybiB4XG4gIH1cbiAgYWxlcnQoYENhbid0IHlldCBjb252ZXJ0IGZyb20gTlQ6ICcke3N0cn0nLCAke3N0clswXX1gKTtcbn07XG5cbmV4cG9ydCB7XG4gIFJERlN5bWJvbCxcbiAgUkRGRm9ybXVsYSxcbiAgUkRGQmxhbmtOb2RlLFxuICBSREZMaXRlcmFsLFxufTtcbiIsImltcG9ydCB4bWxkb20gZnJvbSAneG1sZG9tJztcbmltcG9ydCBHcmFwaCBmcm9tICcuLi9HcmFwaCc7XG5pbXBvcnQgbnMgZnJvbSAnLi4vbmFtZXNwYWNlcyc7XG5pbXBvcnQgdXRpbCBmcm9tICcuL3JkZmpzb24vdXRpbCc7XG5pbXBvcnQgUmRmcGFyc2VyIGZyb20gJy4vcmRmeG1sL1JkZnBhcnNlcic7XG5pbXBvcnQgeyBSREZCbGFua05vZGUsIFJERkZvcm11bGEsIFJERkxpdGVyYWwsIFJERlN5bWJvbCB9IGZyb20gJy4vcmRmeG1sL3Rlcm1zJztcblxuY29uc3Qgc3AgPSAnICAnO1xuY29uc3Qgc3AyID0gJyAgICAnO1xuXG5sZXQgeG1sMnN0cmluZztcbmxldCBzdHJpbmcyeG1sO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHR5cGVvZiB3aW5kb3cuRE9NUGFyc2VyICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgQWN0aXZlWE9iamVjdCAhPT0gJ3VuZGVmaW5lZCcpKSB7IC8vIEluIGJyb3dzZXJcbiAgeG1sMnN0cmluZyA9IHhtbCA9PiB4bWwueG1sO1xuXG4gIHN0cmluZzJ4bWwgPSAodGV4dCkgPT4ge1xuICAgIGxldCBkb2M7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh3aW5kb3cuRE9NUGFyc2VyKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh0ZXh0LCAndGV4dC94bWwnKTtcbiAgICAgIH0gZWxzZSB7IC8vIEludGVybmV0IEV4cGxvcmVyXG4gICAgICAgIGRvYyA9IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MRE9NJyk7XG4gICAgICAgIGRvYy5hc3luYyA9ICdmYWxzZSc7XG4gICAgICAgIGRvYy5sb2FkWE1MKHRleHQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRvYyA9IG51bGw7XG4gICAgfVxuICAgIGlmICghZG9jIHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50IHx8IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgncGFyc2VyZXJyb3InKS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHBhcnNlIHRleHQgYXMgeG1sJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvYztcbiAgfTtcbn0gZWxzZSB7IC8vIE5vdCBpbiBicm93c2VyXG4gICAgICAgICAvLyBOb24tYnJvd3NlciBlbnZpcm9ubWVudCwgcmVxdWlyZXMgdGhlIFhNTFNlcmlhbGl6ZXIgYW5kIHhtbGRvbSBsaWJyYXJpZXMuXG4gIHhtbDJzdHJpbmcgPSB4bWwgPT4gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh4bWwpO1xuXG4gIGNvbnN0IERPTVBhcnNlciA9IHhtbGRvbS5ET01QYXJzZXI7XG4gIHN0cmluZzJ4bWwgPSB0ZXh0ID0+IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgJ3RleHQveG1sJyk7XG59XG5cbmNvbnN0IHRocm93SWZSZWxhdGl2ZSA9ICh1cmwpID0+IHtcbiAgLy8gUmVtb3ZlZCB0ZXN0IGZvciBcXCB0ZW1wb3JhcnlcbiAgaWYgKC9bXCI8Pl5ge3x9XS9pLnRlc3QodXJsKSkge1xuICAgIHRocm93IEVycm9yKHtcbiAgICAgIG1lc3NhZ2U6IGBVUkwgXCIke3VybH1cIiBpcyBub3QgYWxsb3dlZCB0byBjb250YWluIHNwZWNpYWwgY2hhcmFjdGVycyBcIiA8ID4gXFxcXCBeIFxcYCB7IHwgb3IgfS5gLFxuICAgICAgY2hhcmFjdGVyOiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gaWYgKC8gL2kudGVzdCh1cmwpKSB7XG4gIC8vIHRocm93IHttZXNzYWdlOiBgU3BhY2VzIGluc2lkZSBvZiBVUkwgbm90IHN1cHBvcnRlZDogJHt1cmx9YCwgc3BhY2U6IHRydWV9O1xuICAvLyB9XG4gIGlmICghL14oPzpbYS16XVthLXowLTkrLi1dKjopL2kudGVzdCh1cmwpKSB7XG4gICAgdGhyb3cgRXJyb3IoeyBtZXNzYWdlOiBgUmVsYXRpdmUgVVJMIG5vdCBzdXBwb3J0ZWQ6ICR7dXJsfWAsIHJlbGF0aXZlOiB0cnVlIH0pO1xuICB9XG4gIGlmICgvIC9pLnRlc3QodXJsKSkge1xuICAgIGlmIChleHBvcnRzLmNvbnZlcnRTcGFjZXNJblVSSXMpIHtcbiAgICAgIHJldHVybiB1cmwucmVwbGFjZSgvIC9nLCAnJTIwJyk7XG4gICAgfVxuICAgIHRocm93IEVycm9yKHsgbWVzc2FnZTogYFNwYWNlcyBpbnNpZGUgb2YgVVJMIG5vdCBzdXBwb3J0ZWQ6ICR7dXJsfWAsIHNwYWNlOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB1cmw7XG59O1xuLyoqXG4gKlxuICogSW1wb3J0cyBSREYvWE1MIGludG8gYSBHcmFwaFxuICpcbiAqIEBwYXJhbSB7Tm9kZXxTdHJpbmd9IHhtbCB0aGlzIGlzIHRoZSBYTUwgZG9jdW1lbnQgb3IgWE1MIHN0cmluZyBmcm9tIHdoZXJlIHRoZSBSREYgd2lsbFxuICogYmUgcGFyc2VkLlxuICogQHBhcmFtIHtyZGZqc29uLkdyYXBofG51bGx9IGdyYXBoIFdoZXJlIGFsbCB0cmlwcGxlcyB3aWxsIGJlIGFkZGVkLCBpZiBudWxsIGEgbmV3IGdyYXBoXG4gKiB3aWxsIGJlIGNyZWF0ZWQuXG4gKiBAcmV0dXJucyB7cmRmanNvbi5HcmFwaH0gd2hlcmUgYWxsIGZvdW5kIHRyaXBwbGVzIGhhdmUgYmVlbiBhZGRlZC5cbiAqL1xuY29uc3QgcmRmeG1sMmdyYXBoID0gKHhtbCwgZ3JhcGggPSBudWxsKSA9PiB7XG4gIGxldCBfeG1sID0geG1sO1xuICBpZiAodXRpbC5pc1N0cmluZyhfeG1sKSkge1xuICAgIF94bWwgPSBzdHJpbmcyeG1sKF94bWwpO1xuICB9XG4gIC8qKlxuICAgKiBAdHlwZSB7cmRmanNvbi5HcmFwaH1cbiAgICovXG4gIGNvbnN0IGcgPSBncmFwaCB8fCBuZXcgR3JhcGgoe30pO1xuICBjb25zdCBzdG9yZSA9IG5ldyBSREZGb3JtdWxhKCk7XG4gIHN0b3JlLmFkZCA9IChzLCBwLCBvKSA9PiB7XG4gICAgbGV0IHN1Ymo7XG4gICAgbGV0IHByZWQ7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgLy8gU3ViamVjdFxuICAgIGlmIChzIGluc3RhbmNlb2YgUkRGQmxhbmtOb2RlKSB7XG4gICAgICBzdWJqID0gcy50b1N0cmluZygpO1xuICAgICAgZy5yZWdpc3RlckJOb2RlKHN1YmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzLnVyaSA9IHRocm93SWZSZWxhdGl2ZShzLnVyaSk7XG4gICAgICBzdWJqID0gcy51cmk7XG4gICAgfVxuXG4gICAgLy8gUHJlZGljYXRlXG4gICAgaWYgKHAgaW5zdGFuY2VvZiBSREZCbGFua05vZGUpIHtcbiAgICAgIHByZWQgPSBwLnRvU3RyaW5nKCk7XG4gICAgICBnLnJlZ2lzdGVyQk5vZGUocHJlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHAudXJpID0gdGhyb3dJZlJlbGF0aXZlKHAudXJpKTtcbiAgICAgIHByZWQgPSBwLnVyaTtcbiAgICB9XG5cbiAgICAvLyBPYmplY3RcbiAgICBpZiAobyBpbnN0YW5jZW9mIFJERkxpdGVyYWwpIHtcbiAgICAgIG9iai50eXBlID0gJ2xpdGVyYWwnO1xuICAgICAgb2JqLnZhbHVlID0gby52YWx1ZTtcbiAgICAgIGlmIChvLmxhbmcpIHtcbiAgICAgICAgb2JqLmxhbmcgPSBvLmxhbmc7XG4gICAgICB9XG4gICAgICBpZiAoby5kYXRhdHlwZSkge1xuICAgICAgICBvYmouZGF0YXR5cGUgPSBvLmRhdGF0eXBlLnVyaTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG8gaW5zdGFuY2VvZiBSREZTeW1ib2wpIHtcbiAgICAgIG8udXJpID0gdGhyb3dJZlJlbGF0aXZlKG8udXJpKTtcbiAgICAgIG9iai50eXBlID0gJ3VyaSc7XG4gICAgICBvYmoudmFsdWUgPSBvLnVyaTtcbiAgICB9IGVsc2UgaWYgKG8gaW5zdGFuY2VvZiBSREZCbGFua05vZGUpIHtcbiAgICAgIG9iai52YWx1ZSA9IG8udG9TdHJpbmcoKTtcbiAgICAgIGcucmVnaXN0ZXJCTm9kZShvYmoudmFsdWUpO1xuICAgICAgb2JqLnR5cGUgPSAnYm5vZGUnO1xuICAgIH1cbiAgICBnLmNyZWF0ZShzdWJqLCBwcmVkLCBvYmosIHRydWUpO1xuICB9O1xuICBjb25zdCBwYXJzZXIgPSBuZXcgUmRmcGFyc2VyKHN0b3JlKTtcbiAgcGFyc2VyLnBhcnNlKF94bWwsICcnLCAnJyk7XG4gIHJldHVybiBnO1xufTtcblxuY29uc3QgeG1sRW5jb2RlID0gdXJsID0+IGVuY29kZVVSSShkZWNvZGVVUkkodXJsKSkucmVwbGFjZSgvJi9nLCAnJmFtcDsnKTtcblxuY29uc3QgcmRmanNvbjJyZGZ4bWwgPSAoZ3JhcGgpID0+IHtcbiAgY29uc3QgZyA9IGdyYXBoIGluc3RhbmNlb2YgR3JhcGggPyBncmFwaC5fZ3JhcGggOiBncmFwaCB8fCB7fTtcbiAgY29uc3QgbnNVc2VkID0gW107XG4gIGNvbnN0IG5zQWRkZWQgPSB7fTtcbiAgY29uc3QgbnNpZnkgPSBmdW5jdGlvbiAocHJvcCkge1xuICAgIGNvbnN0IF9vID0gbnMubnNpZnkocHJvcCk7XG4gICAgaWYgKCFuc0FkZGVkW19vLmFiYnJldl0pIHtcbiAgICAgIG5zVXNlZC5wdXNoKF9vLmFiYnJldik7XG4gICAgICBuc0FkZGVkW19vLmFiYnJldl0gPSBfby5ucztcbiAgICB9XG4gICAgcmV0dXJuIF9vLnByZXR0eTtcbiAgfTtcblxuICBjb25zdCBzdHJzID0gW107XG4gIE9iamVjdC5rZXlzKGcpLmZvckVhY2goKHMpID0+IHtcbiAgICBpZiAocy5zdWJzdHIoMCwgMikgPT09ICdfOicpIHtcbiAgICAgIHN0cnMucHVzaChgJHtzcH08cmRmOkRlc2NyaXB0aW9uIHJkZjpub2RlSUQ9XCJfJHtzLnN1YnN0cmluZygyKX1cIj5cXG5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Rycy5wdXNoKGAke3NwfTxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PVwiJHt4bWxFbmNvZGUocyl9XCI+XFxuYCk7XG4gICAgfVxuICAgIGNvbnN0IHByb3BzID0gZ1tzXTtcbiAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgY29uc3QgbnNwID0gbnNpZnkocCk7XG4gICAgICBwcm9wc1twXS5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgIGxldCB2O1xuICAgICAgICBzd2l0Y2ggKG8udHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2xpdGVyYWwnOlxuICAgICAgICAgICAgdiA9IG8udmFsdWUucmVwbGFjZSgnJicsICcmYW1wOycpLnJlcGxhY2UoJzwnLCAnJmx0OycpO1xuICAgICAgICAgICAgaWYgKG8ubGFuZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHN0cnMucHVzaChgJHtzcDJ9PCR7bnNwfSB4bWw6bGFuZz1cIiR7by5sYW5nfVwiPiR7dn08LyR7bnNwfT5cXG5gKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoby5kYXRhdHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHN0cnMucHVzaChgJHtzcDJ9PCR7bnNwfSByZGY6ZGF0YXR5cGU9XCIke28uZGF0YXR5cGV9XCI+JHt2fTwvJHtuc3B9PlxcbmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3Rycy5wdXNoKGAke3NwMn08JHtuc3B9PiR7dn08LyR7bnNwfT5cXG5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3VyaSc6XG4gICAgICAgICAgICBzdHJzLnB1c2goYCR7c3AyfTwke25zcH0gcmRmOnJlc291cmNlPVwiJHt4bWxFbmNvZGUoby52YWx1ZSl9XCIvPlxcbmApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm5vZGUnOlxuICAgICAgICAgICAgaWYgKG8udmFsdWUuc3Vic3RyKDAsIDIpID09PSAnXzonKSB7XG4gICAgICAgICAgICAgIHN0cnMucHVzaChgJHtzcDJ9PCR7bnNwfSByZGY6bm9kZUlEPVwiXyR7by52YWx1ZS5zdWJzdHJpbmcoMil9XCIvPlxcbmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3Rycy5wdXNoKGAke3NwMn08JHtuc3B9IHJkZjpub2RlSUQ9XCIke28udmFsdWV9XCIvPlxcbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgc3Rycy5wdXNoKGAke3NwfTwvcmRmOkRlc2NyaXB0aW9uPlxcbmApO1xuICB9KTtcbiAgY29uc3QgaW5pdGlhbFN0cnMgPSBbJzw/eG1sIHZlcnNpb249XCIxLjBcIj8+XFxuPHJkZjpSREYgeG1sbnM6cmRmPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI1wiJ107XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbnNVc2VkLmxlbmd0aDsgaisrKSB7XG4gICAgaWYgKG5zVXNlZFtqXSAhPT0gJ3JkZicpIHtcbiAgICAgIGluaXRpYWxTdHJzLnB1c2goYFxcblxcdHhtbG5zOiR7bnNVc2VkW2pdfT1cIiR7bnNBZGRlZFtuc1VzZWRbal1dfVwiYCk7XG4gICAgfVxuICB9XG4gIGluaXRpYWxTdHJzLnB1c2goJz5cXG4nKTtcbiAgc3Rycy51bnNoaWZ0KGluaXRpYWxTdHJzLmpvaW4oJycpKTtcbiAgc3Rycy5wdXNoKCc8L3JkZjpSREY+Jyk7XG4gIHJldHVybiBzdHJzLmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBEZXRlY3RzIFJERiBhcyBhIHN0cmluZyBpbiB0aGUgUkRGL1hNTCwgYXMgYW4gaW5zdGFuY2Ugb2YgR3JhcGggb3IgYXMgYSBvYmplY3QgbGl0ZXJhbFxuICogY29ycmVzcG9uZGluZyB0byBhIFJERi9KU09OIHN0cnVjdHVyZS5cbiAqIExpbWl0YXRpb246IFBhcnNlIEpTT04gc3RyaW5ncyBpbnRvIG9iamVjdCBsaXRlcmFscyBpZiB0aGUgSlNPTi5wYXJzZSBpcyBhdmFpbGFibGUgaW4gdGhlXG4gKiBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJkZiBpbiBSREYvWE1MLCBSREYvSlNPTiBvciBhIG9iamVjdCBsaXRlcmFsIGNvcnJlc3BvbmRpbmcgdG8gYWxyZWFkeVxuICogcGFyc2VkIFJERi9KU09OLlxuICogQHJldHVybnMge09iamVjdH0gYSByZXBvcnQgd2l0aCB0aGUgYXR0cmlidXRlczogZ3JhcGgsIGZvcm1hdCBhbmQgcG90ZW50aWFsbHkgYW4gZXJyb3IuXG4gKi9cbmNvbnN0IGRldGVjdCA9IChyZGYpID0+IHtcbiAgY29uc3QgcmVwb3J0ID0ge307XG4gIGlmICh0eXBlb2YgcmRmID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IHRhc3RlID0gcmRmLnN1YnN0cigwLCAyMDApO1xuICAgIGlmICh0YXN0ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJzxyZGY6cmRmJykgIT09IC0xKSB7XG4gICAgICByZXBvcnQuZm9ybWF0ID0gJ3JkZi94bWwnO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVwb3J0LmdyYXBoID0gcmRmeG1sMmdyYXBoKHJkZik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnJlbGF0aXZlIHx8IGUuc3BhY2UgfHwgZS5jaGFyYWN0ZXIpIHtcbiAgICAgICAgICByZXBvcnQuZXJyb3IgPSBlLm1lc3NhZ2U7XG4gICAgICAgICAgcmVwb3J0LmVycm9yQ29kZSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwb3J0LmVycm9yID0gJ0ludmFsaWQgcmRmL3htbCc7XG4gICAgICAgICAgcmVwb3J0LmVycm9yQ29kZSA9IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJkZi5zdWJzdHJpbmcoMCwgMikgPT09ICd7XCInKSB7XG4gICAgICByZXBvcnQuZm9ybWF0ID0gJ3JkZi9qc29uJztcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGpzb25yZGYgPSBKU09OLnBhcnNlKHRoaXMucmRmanNvbik7XG4gICAgICAgIHJlcG9ydC5ncmFwaCA9IG5ldyBHcmFwaChqc29ucmRmKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVwb3J0LmVycm9yID0gJ0ludmFsaWQganNvbi4nO1xuICAgICAgICByZXBvcnQuZXJyb3JDb2RlID0gMztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVwb3J0LmVycm9yID0gJ05vIFJERiBkZXRlY3RlZC4nO1xuICAgICAgcmVwb3J0LmVycm9yQ29kZSA9IDQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKHJkZiBpbnN0YW5jZW9mIEdyYXBoKSB7XG4gICAgcmVwb3J0LmZvcm1hdCA9ICdyZGYvanNvbic7XG4gICAgcmVwb3J0LmdyYXBoID0gcmRmO1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZGYgPT09ICdvYmplY3QnKSB7XG4gICAgcmVwb3J0LmZvcm1hdCA9ICdyZGYvanNvbic7XG4gICAgcmVwb3J0LmdyYXBoID0gbmV3IEdyYXBoKHJkZik7XG4gIH0gZWxzZSB7XG4gICAgcmVwb3J0LmVycm9yID0gJ3Vua25vd24gZm9ybWF0JztcbiAgICByZXBvcnQuZXJyb3JDb2RlID0gNTtcbiAgfVxuICBpZiAoIXJlcG9ydC5lcnJvcikge1xuICAgIGNvbnN0IHIgPSByZXBvcnQuZ3JhcGgudmFsaWRhdGUoKTtcbiAgICBpZiAoIXIudmFsaWQpIHtcbiAgICAgIHJlcG9ydC5lcnJvciA9ICdSREYvSlNPTiBpcyBub3QgdmFsaWQuJztcbiAgICAgIHJlcG9ydC5lcnJvckNvZGUgPSA2O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVwb3J0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICB4bWwyc3RyaW5nLFxuICBzdHJpbmcyeG1sLFxuICByZGZ4bWwyZ3JhcGgsXG4gIHJkZmpzb24ycmRmeG1sLFxuICBkZXRlY3QsXG59O1xuIiwiaW1wb3J0IG5zIGZyb20gJy4vbmFtZXNwYWNlcyc7XG5cbi8qKlxuICogQHBhcmFtIHtyZGZqc29uLkdyYXBofSBncmFwaFxuICogQHBhcmFtIHtTdHJpbmd9IHN1YmplY3QgYSBVUkkgZm9yIHRoZSBzdWJqZWN0IHRvIGZvY3VzIG9uXG4gKi9cbmNvbnN0IHByZXR0eSA9IChncmFwaCwgc3ViamVjdCkgPT4ge1xuICBjb25zdCBwcmV0dHkgPSB7fTtcbiAgY29uc3Qgc3RtdHMgPSBncmFwaC5maW5kKHN1YmplY3QpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0bXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3RtdCA9IHN0bXRzW2ldO1xuICAgIGlmIChzdG10LmdldFR5cGUoKSAhPT0gJ2Jub2RlJykge1xuICAgICAgcHJldHR5W25zLnNob3J0ZW4oc3RtdC5nZXRQcmVkaWNhdGUoKSldID0gc3RtdC5nZXRWYWx1ZSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJldHR5O1xufTtcblxuY29uc3Qgc3RhdGVtZW50VHJlZSA9IChncmFwaCwgc3ViamVjdCwgdmlzaXRlZCkgPT4ge1xuICBjb25zdCBfdmlzaXRlZCA9IHZpc2l0ZWQgfHwge307XG4gIGNvbnN0IHN0bXRzID0gZ3JhcGggPyBncmFwaC5maW5kKHN1YmplY3QpIDogW107XG4gIGNvbnN0IGFyciA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0bXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3RtdCA9IHN0bXRzW2ldO1xuICAgIGlmIChzdG10LmdldFR5cGUoKSA9PT0gJ2xpdGVyYWwnKSB7XG4gICAgICBhcnIucHVzaCh7IHN0bXQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJvdyA9IHsgc3RtdCB9O1xuICAgICAgY29uc3Qgb2JqID0gc3RtdC5nZXRWYWx1ZSgpO1xuICAgICAgaWYgKCFfdmlzaXRlZFtvYmpdKSB7XG4gICAgICAgIF92aXNpdGVkW29ial0gPSB0cnVlO1xuICAgICAgICByb3cuY2hpbGRyZW4gPSBzdGF0ZW1lbnRUcmVlKGdyYXBoLCBvYmosIF92aXNpdGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG5cbmNvbnN0IHN0YXRlbWVudExpc3QgPSAoZ3JhcGgsIHN1YmplY3QpID0+IHtcbiAgY29uc3QgdHJlZSA9IHN0YXRlbWVudFRyZWUoZ3JhcGgsIHN1YmplY3QpO1xuICBjb25zdCBhcnIgPSBbXTtcbiAgY29uc3QgZiA9IChzdG10cywgbGV2ZWwpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0bXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdG10ID0gc3RtdHNbaV07XG4gICAgICBzdG10LmluZGVudCA9IGxldmVsO1xuICAgICAgYXJyLnB1c2goc3RtdCk7XG4gICAgICBpZiAoc3RtdC5jaGlsZHJlbikge1xuICAgICAgICBmKHN0bXQuY2hpbGRyZW4sIGxldmVsICsgMSk7XG4gICAgICAgIGRlbGV0ZSBzdG10LmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZih0cmVlLCAxKTtcbiAgcmV0dXJuIGFycjtcbn07XG5cbmNvbnN0IHByZXR0eVRyZWUgPSAoZ3JhcGgsIHN1YmplY3QpID0+IHtcbiAgY29uc3QgZGVsZWdhdGVzID0gc3RhdGVtZW50TGlzdChncmFwaCwgc3ViamVjdCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsZWdhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZGVsZWdhdGUgPSBkZWxlZ2F0ZXNbaV07XG4gICAgY29uc3Qgc3RtdCA9IGRlbGVnYXRlLnN0bXQ7XG4gICAgaWYgKHN0bXQuaXNTdWJqZWN0QmxhbmsoKSkge1xuICAgICAgZGVsZWdhdGUucyA9IHN0bXQuZ2V0U3ViamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxlZ2F0ZS5zID0gbnMuc2hvcnRlbihzdG10LmdldFN1YmplY3QoKSk7XG4gICAgfVxuICAgIGRlbGVnYXRlLnAgPSBucy5zaG9ydGVuKHN0bXQuZ2V0UHJlZGljYXRlKCkpO1xuICAgIGNvbnN0IHQgPSBzdG10LmdldFR5cGUoKTtcbiAgICBpZiAodCA9PT0gJ3VyaScpIHtcbiAgICAgIGRlbGVnYXRlLm8gPSBucy5zaG9ydGVuKHN0bXQuZ2V0VmFsdWUoKSk7XG4gICAgICBjb25zdCBsYW5nID0gc3RtdC5nZXRMYW5ndWFnZSgpO1xuICAgICAgY29uc3QgZHQgPSBzdG10LmdldERhdGF0eXBlKCk7XG4gICAgICBpZiAobGFuZyAhPSBudWxsKSB7XG4gICAgICAgIGRlbGVnYXRlLm8gKz0gYEBAJHtsYW5nfWA7XG4gICAgICB9IGVsc2UgaWYgKGR0ICE9IG51bGwpIHtcbiAgICAgICAgZGVsZWdhdGUubyArPSBgXl4ke2R0fWA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0ID09PSAnbGl0ZXJhbCcpIHtcbiAgICAgIGRlbGVnYXRlLm8gPSBgXCIke3N0bXQuZ2V0VmFsdWUoKX1cImA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGVnYXRlLm8gPSBgXCIke3N0bXQuZ2V0VmFsdWUoKX1cImA7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWxlZ2F0ZXM7XG59O1xuXG5leHBvcnQge1xuICBwcmV0dHksXG4gIHN0YXRlbWVudExpc3QsXG4gIHN0YXRlbWVudFRyZWUsXG4gIHByZXR0eVRyZWVcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcmV0dHksXG4gIHN0YXRlbWVudExpc3QsXG4gIHN0YXRlbWVudFRyZWUsXG4gIHByZXR0eVRyZWVcbn0iLCJleHBvcnQge2RlZmF1bHQgYXMgbmFtZXNwYWNlc30gZnJvbSAnLi9zcmMvbmFtZXNwYWNlcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgY29udmVydGVyc30gZnJvbSAnLi9zcmMvZm9ybWF0cy9jb252ZXJ0ZXJzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBHcmFwaH0gZnJvbSAnLi9zcmMvR3JhcGgnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFN0YXRlbWVudH0gZnJvbSAnLi9zcmMvU3RhdGVtZW50JztcbmV4cG9ydCB7ZGVmYXVsdCBhcyB1dGlsc30gZnJvbSAnLi9zcmMvdXRpbHMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHByaW50fSBmcm9tICcuL3NyYy9wcmludCc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgTUVUQURBVEEgPSB1aWQoJ21ldGEnKTtcbnZhciBpZCA9IDA7XG5cbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBtZXRhLlJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJFUVVJUkVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIvKipcbiAgICogVHlwZXMgaXMgYSBtb2R1bGUgY29udGFpbmluZyB0aGUgdGhyZWUgZGlmZmVyZW50IHR5cGVzOiBHcmFwaFR5cGUsIEVudHJ5VHlwZSBhbmRcbiAgICogUmVzb3VyY2VUeXBlIHNob3J0ZW5lZCBHVCwgRVQgYW5kIFJULlxuICAgKlxuICAgKiBAZXhwb3J0cyB7c3RvcmUvdHlwZXN9XG4gICAqL1xuY29uc3QgdHlwZXMgPSB7XG4gIC8qKlxuICAgKiBMb2NhbCBlbnRyeXR5cGUgaW1wbGllcyB0aGF0IHRoZSByZXNvdXJjZSBpcyBtYWludGFpbmVkIGluIHRoZSByZXBvc2l0b3J5LlxuICAgKiBJdCBjYW4gYmUgYW4gdXBsb2FkZWQgZmlsZSwgYSBsaXN0LCBhIGdyb3VwLCBhIHVzZXIgZXRjLiBUaGUgbmF0dXJlIG9mIHRoZSByZXNvdXJjZVxuICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBncmFwaHR5cGUuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzTG9jYWxcbiAgICovXG4gIEVUX0xPQ0FMOiAnTG9jYWwnLFxuXG4gIC8qKlxuICAgKiBMaW5rIEVudHJ5VHlwZSBpbXBsaWVzIHRoYXQgdGhlIHJlc291cmNlIGlzIG5vdCBtYWludGFpbmVkIGluIHRoZSByZXBvc2l0b3J5LCByYXRoZXIgdGhlXG4gICAqIGVudHJ5IG9ubHkgcHJvdmlkZXMgYSBsaW5rIHRvIHRoZSByZXNvdXJjZS5cbiAgICogVGhlIG1ldGFkYXRhIGlzIHN0aWxsIG1haW50YWluZWQgaW4gdGhlIHJlcG9zaXRvcnkgdGhvdWdoLlxuICAgKlxuICAgKiBAY29uc3RcbiAgICogQHNlZSBzdG9yZS9FbnRyeSNpc0xpbmtcbiAgICovXG4gIEVUX0xJTks6ICdMaW5rJyxcblxuICAvKipcbiAgICogU2ltaWxhciB0byBsaW5rLCBvbmx5IHRoZSBtZXRhZGF0YSBpcyBhbHNvIGV4dGVybmFsIHRvIHRoZSByZXBvc2l0b3J5LlxuICAgKiBJbiBtYW55IGNhc2VzIGl0IGlzIHBvc3NpYmxlIHRvIGFjY2VzcyBhIGxvY2FsbHkgY2FjaGVkIHZlcnNpb24gb2YgdGhlIGV4dGVybmFsXG4gICAqIG1ldGFkYXRhIHRob3VnaC5cbiAgICogQHNlZSBzdG9yZS9FbnRyeSNnZXRDYWNoZWRFeHRlcm5hbE1ldGFkYXRhXG4gICAqIEBzZWUgc3RvcmUvRW50cnkjaXNSZWZlcmVuY2VcbiAgICovXG4gIEVUX1JFRjogJ1JlZmVyZW5jZScsXG5cbiAgLyoqXG4gICAqIFNpbWlsYXIgdG8gbGluayBhbmQgcmVmZXJlbmNlLCBvbmx5IHRoZXJlIGlzIGJvdGggbG9jYWwgbWV0YWRhdGEgYW5kIGV4dGVybmFsIG1ldGFkYXRhLlxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzTGlua1JlZmVyZW5jZVxuICAgKi9cbiAgRVRfTElOS1JFRjogJ0xpbmtyZWZlcmVuY2UnLFxuXG4gIC8qKlxuICAgKiBObyBncmFwaCB0eXBlIHNwZWNpZmllZCBtZWFucyB0aGF0IG5vIGtub3dsZWRnZSBvZiB0aGUgcmVzb3VyY2VzIGNoYXJhY3RlciBpcyBrbm93bi5cbiAgICogSGVuY2UsIG5vIHNwZWNpYWwgdHJlYXRtZW50IG9mIHRoZSByZXNvdXJjZSBpcyBleHBlY3RlZC5cbiAgICogVGhpcyBpcyBjb21tb24gd2hlbiBoYW5kbGluZyByZWd1bGFyIGZpbGVzLCB3ZWIgcmVzb3VyY2VzIG9yIGFic3RyYWN0IGVudGl0aWVzLlxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzTm9uZVxuICAgKi9cbiAgR1RfTk9ORTogJ05vbmUnLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVzb3VyY2UgaXMgYSBjb250ZXh0LCBpLmUuIGEgY29udGFpbmVyIGZvciBvdGhlciBlbnRyaWVzLlxuICAgKlxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzQ29udGV4dFxuICAgKiBAc2VlIHN0b3JlL0NvbnRleHRcbiAgICovXG4gIEdUX0NPTlRFWFQ6ICdDb250ZXh0JyxcblxuICAvKipcbiAgICogVGhlIHJlc291cmNlIGlzIG9uZSBvZiB0aGUgc3BlY2lhbCBjb250ZXh0IG9mIHRoaXMgcmVwb3NpdG9yeSwgZS5nLiBfY29udGV4dHMgb3IgX3ByaW5jaXBhbHMuXG4gICAqIEBzZWUgc3RvcmUvRW50cnkjaXNTeXN0ZW1Db250ZXh0XG4gICAqL1xuICBHVF9TWVNURU1DT05URVhUOiAnU3lzdGVtY29udGV4dCcsXG5cbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBpcyBhIHVzZXIuXG4gICAqXG4gICAqIEBzZWUgc3RvcmUvRW50cnkjaXNVc2VyXG4gICAqIEBzZWUgc3RvcmUvVXNlclxuICAgKi9cbiAgR1RfVVNFUjogJ1VzZXInLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVzb3VyY2UgaXMgYSBncm91cC5cbiAgICpcbiAgICogQHNlZSBzdG9yZS9FbnRyeSNpc0dyb3VwXG4gICAqIEBzZWUgc3RvcmUvR3JvdXBcbiAgICovXG4gIEdUX0dST1VQOiAnR3JvdXAnLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVzb3VyY2UgaXMgYSBsaXN0LlxuICAgKlxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzTGlzdFxuICAgKiBAc2VlIHN0b3JlL0xpc3RcbiAgICovXG4gIEdUX0xJU1Q6ICdMaXN0JyxcblxuICAvKipcbiAgICogQHRvZG8gcmVtYWlucyB0byBiZSBzdXBwb3J0ZWQgaW4gdGhpcyBBUElcbiAgICogQHNlZSBzdG9yZS9FbnRyeSNpc1Jlc3VsdExpc3RcbiAgICovXG4gIEdUX1JFU1VMVExJU1Q6ICdSZXN1bHRsaXN0JyxcblxuICAvKipcbiAgICogVGhlIHJlc291cmNlIGlzIGEgUkRGIGdyYXBoLlxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzR3JhcGhcbiAgICogQHNlZSBzdG9yZS9HcmFwaFxuICAgKi9cbiAgR1RfR1JBUEg6ICdHcmFwaCcsXG5cbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBpcyBhIHN0cmluZy5cbiAgICogQHNlZSBzdG9yZS9FbnRyeSNpc1N0cmluZ1xuICAgKiBAc2VlIHN0b3JlL1N0cmluZ1xuICAgKi9cbiAgR1RfU1RSSU5HOiAnU3RyaW5nJyxcblxuICAvKipcbiAgICogVGhlIHJlc291cmNlIGlzIGEgcGlwZWxpbmUsIGUuZy4gYW4gZW50cnkgdGhhdCBjYW4gc29tZWhvdyBiZSBleGVjdXRlZCBvbiB0aGUgc2VydmVyIHNpZGUuXG4gICAqIEBzZWUgc3RvcmUvRW50cnkjaXNQaXBlbGluZVxuICAgKiBAc2VlIHN0b3JlL1BpcGVsaW5lXG4gICAqL1xuICBHVF9QSVBFTElORTogJ1BpcGVsaW5lJyxcblxuICAvKipcbiAgICogVGhlIHJlc291cmNlIGlzIGEgcGlwZWxpbmVyZXN1bHQsIGUuZy4gdGhlIHJlc3VsdCBvZiB0aGUgZXhlY3V0aW9uIG9mIGEgcGlwZWxpbmVcbiAgICogb24gdGhlIHNlcnZlciBzaWRlLlxuICAgKiBAc2VlIHN0b3JlL0VudHJ5I2lzUGlwZWxpbmVSZXN1bHRcbiAgICogQHNlZSBzdG9yZS9QaXBlbGluZVxuICAgKi9cbiAgR1RfUElQRUxJTkVSRVNVTFQ6ICdQaXBlbGluZVJlc3VsdCcsXG5cbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBpcyBhdmFpbGFibGUgYXMgYSBkaWdpdGFsIHJlcHJlc2VudGF0aW9uIG9mIHNvbWUgc29ydC5cbiAgICogT3Bwb3NpdGUgdG8gcmVzb3VyY2VzIHRoYXQgaGF2ZSBubyByZXByZXNlbnRhdGlvbiwgcmVmZXJyZWQgdG8gYXNcbiAgICoge0BsaW5rIHN0b3JlL3R5cGVzLk5BTUVEUkVTT1VSQ0UgbmFtZWR9LlxuICAgKi9cbiAgUlRfSU5GT1JNQVRJT05SRVNPVVJDRTogJ0luZm9ybWF0aW9uJyxcblxuICAvKipcbiAgICogVGhlIHJlc291cmNlIGlzIHJlc29sdmFibGUgdG8gYW5vdGhlciBhZGRyZXNzLlxuICAgKiBAdG9kbyB0aGUgQVBJIGhhcyBsaXR0bGUgc3VwcG9ydCBmb3IgdGhpcyB0eXBlIGN1cnJlbnRseS5cbiAgICovXG4gIFJUX1JFU09MVkFCTEVJTkZPUk1BVElPTlJFU09VUkNFOiAnUmVzb2x2YWJsZScsXG5cbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBpcyBub3QgYXZhaWxhYmxlIGRpZ2l0YWxseSwgaS5lLiBpdCBoYXMgbm93IGRpZ2l0YWwgcmVwcmVzZW50YXRpb24gdGhhdFxuICAgKiBjYW4gYmUgdHJhbnNmZXJyZWQgb3ZlciBhIG5ldHdvcmsuXG4gICAqL1xuICBSVF9OQU1FRFJFU09VUkNFOiAnTmFtZWQnLFxuXG4gIC8qKlxuICAgKiBJdCBpcyB1bmtub3duIGlmIHRoZSByZXNvdXJjZSBoYXMgYSByZXByZXNlbnRhdGlvbiBvciBub3QsIHR5cGljYWxseSB0aGlzIGlzIHRoZSBjYXNlIHdoZW5cbiAgICogbGFyZ2UgYW1vdW50cyBvZiByZXNvdXJjZXMgYXJlIGhhcnZlc3RlZCBmcm9tIGFub3RoZXIgc3lzdGVtIGFuZCBpdCBpcyBub3QgZmVhc2libGUgdG8gdHJ5XG4gICAqIHRvIGxvYWQgdGhlbSB0byBjaGVjayB3ZWF0aGVyIHRoZXkgaGF2ZSBhIGRpZ2l0YWwgcmVwcmVzZW50YXRpb24gb3Igbm90LiBBdCBsZWFzdCB0aGUgY2hlY2tcbiAgICogY2Fubm90IGJlIGRvbmUgaW5pdGlhbGx5IGFuZCB0aGVyZWZvcmUgdGhlIHR5cGUgaXMgc2V0IHRvIHVua25vd24uXG4gICAqL1xuICBSVF9VTktOT1dOOiAnVW5rbm93bicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlcztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0cmVhbVwiKTsiLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjEuMycsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBpdGVyYXRlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGZuLCB0aGF0LCBBU19FTlRSSUVTLCBJU19JVEVSQVRPUikge1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoZm4sIHRoYXQsIEFTX0VOVFJJRVMgPyAyIDogMSk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIHN0ZXA7XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBBU19FTlRSSUVTXG4gICAgICAgICAgPyBib3VuZEZ1bmN0aW9uKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKVxuICAgICAgICAgIDogYm91bmRGdW5jdGlvbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuXG5pdGVyYXRlLnN0b3AgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgeyBuYW1lc3BhY2VzIH0gZnJvbSAncmRmanNvbic7XG5pbXBvcnQgdHlwZXMgZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGludiA9IChvYmopID0+IHtcbiAgY29uc3QgaW9iaiA9IHt9O1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlvYmpbb2JqW2tleV1dID0ga2V5O1xuICB9KTtcbiAgcmV0dXJuIGlvYmo7XG59O1xuXG4vLyBOYW1lc3BhY2VzXG5jb25zdCBucyA9ICdodHRwOi8vZW50cnlzdG9yZS5vcmcvdGVybXMvJztcbmNvbnN0IHJkZm5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnO1xuY29uc3QgeHNkbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjJztcbm5hbWVzcGFjZXMuYWRkKCdwcm92JywgJ2h0dHA6Ly93d3cudzMub3JnL25zL3Byb3YjJyk7XG5uYW1lc3BhY2VzLmFkZCgnc3RvcmUnLCBucyk7XG5uYW1lc3BhY2VzLmFkZCgnc3RvcmVwcicsICdodHRwOi8vZW50cnlzdG9yZS5vcmcvdGVybXMvcGlwZWxpbmVyZXN1bHQjJyk7XG5cbmNvbnN0IHRlcm1zID0ge1xuICBob21lQ29udGV4dDogYCR7bnN9aG9tZUNvbnRleHRgLFxuICByZXNvdXJjZTogYCR7bnN9cmVzb3VyY2VgLFxuICBtZXRhZGF0YTogYCR7bnN9bWV0YWRhdGFgLFxuICBleHRlcm5hbE1ldGFkYXRhOiBgJHtuc31leHRlcm5hbE1ldGFkYXRhYCxcbiAgcmVhc29uaW5nRmFjdHM6IGAke25zfXJlYXNvbmluZ0ZhY3RzYCxcbiAgc3RhdHVzOiB7XG4gICAgcHJvcGVydHk6IGAke25zfXN0YXR1c2AsXG4gICAgSW5Qcm9ncmVzczogYCR7bnN9SW5Qcm9ncmVzc2AsXG4gICAgUGVuZGluZzogYCR7bnN9UGVuZGluZ2AsXG4gICAgU3VjY2VlZGVkOiBgJHtuc31TdWNjZXNzYCxcbiAgICBGYWlsZWQ6IGAke25zfUZhaWxlZGAsXG4gIH0sXG4gIHJkZjoge1xuICAgIHR5cGU6IGAke3JkZm5zfXR5cGVgLFxuICB9LFxuICBwaXBlbGluZToge1xuICAgIHBpcGVsaW5lOiBgJHtuc31waXBlbGluZWAsXG4gICAgcGlwZWxpbmVEYXRhOiBgJHtuc31waXBlbGluZURhdGFgLFxuICAgIHRyYW5zZm9ybTogYCR7bnN9dHJhbnNmb3JtYCxcbiAgICB0cmFuc2Zvcm1Qcmlvcml0eTogYCR7bnN9dHJhbnNmb3JtUHJpb3JpdHlgLFxuICAgIHRyYW5zZm9ybVR5cGU6IGAke25zfXRyYW5zZm9ybVR5cGVgLFxuICAgIHRyYW5zZm9ybUFyZ3VtZW50OiBgJHtuc310cmFuc2Zvcm1Bcmd1bWVudGAsXG4gICAgdHJhbnNmb3JtQXJndW1lbnRLZXk6IGAke25zfXRyYW5zZm9ybUFyZ3VtZW50S2V5YCxcbiAgICB0cmFuc2Zvcm1Bcmd1bWVudFZhbHVlOiBgJHtuc310cmFuc2Zvcm1Bcmd1bWVudFZhbHVlYCxcbiAgICB0cmFuc2Zvcm1EZXN0aW5hdGlvbjogYCR7bnN9dHJhbnNmb3JtRGVzdGluYXRpb25gLFxuICAgIHRyYW5zZm9ybURldGVjdERlc3RpbmF0aW9uOiBgJHtuc310cmFuc2Zvcm1EZXRlY3REZXN0aW5hdGlvbmAsXG4gIH0sXG4gIGFjbDoge1xuICAgIHJlYWQ6IGAke25zfXJlYWRgLFxuICAgIHdyaXRlOiBgJHtuc313cml0ZWAsXG4gIH0sXG4gIHhzZDoge1xuICAgIGludGVnZXI6IGAke3hzZG5zfWludGVnZXJgLFxuICAgIGZsb2F0OiBgJHt4c2Ruc31mbG9hdGAsXG4gICAgYm9vbGVhbjogYCR7eHNkbnN9Ym9vbGVhbmAsXG4gIH0sXG59O1xuXG4vLyBFbnRyeVR5cGVcbmNvbnN0IGV0ID0ge307XG5ldFtgJHtuc31Mb2NhbGBdID0gdHlwZXMuRVRfTE9DQUw7XG5ldFtgJHtuc31MaW5rYF0gPSB0eXBlcy5FVF9MSU5LO1xuZXRbYCR7bnN9TGlua1JlZmVyZW5jZWBdID0gdHlwZXMuRVRfTElOS1JFRjtcbmV0W2Ake25zfVJlZmVyZW5jZWBdID0gdHlwZXMuRVRfUkVGO1xuZXQuZGVmYXVsdCA9IHR5cGVzLkVUX0xPQ0FMOyAgIC8vIFRoZSBkZWZhdWx0IG9wdGlvblxudGVybXMuZW50cnlUeXBlID0gZXQ7XG50ZXJtcy5pbnZFbnRyeVR5cGUgPSBpbnYoZXQpO1xuXG4vLyBHcmFwaFR5cGVcbmNvbnN0IGd0ID0ge307XG5ndFtgJHtuc31Ob25lYF0gPSB0eXBlcy5HVF9OT05FO1xuZ3RbYCR7bnN9Q29udGV4dGBdID0gdHlwZXMuR1RfQ09OVEVYVDtcbmd0W2Ake25zfVN5c3RlbUNvbnRleHRgXSA9IHR5cGVzLkdUX1NZU1RFTUNPTlRFWFQ7XG5ndFtgJHtuc31Vc2VyYF0gPSB0eXBlcy5HVF9VU0VSO1xuZ3RbYCR7bnN9R3JvdXBgXSA9IHR5cGVzLkdUX0dST1VQO1xuZ3RbYCR7bnN9TGlzdGBdID0gdHlwZXMuR1RfTElTVDtcbmd0W2Ake25zfVJlc3VsdExpc3RgXSA9IHR5cGVzLkdUX1JFU1VMVExJU1Q7XG5ndFtgJHtuc31HcmFwaGBdID0gdHlwZXMuR1RfR1JBUEg7XG5ndFtgJHtuc31QaXBlbGluZWBdID0gdHlwZXMuR1RfUElQRUxJTkU7XG5ndFtgJHtuc31QaXBlbGluZVJlc3VsdGBdID0gdHlwZXMuR1RfUElQRUxJTkVSRVNVTFQ7XG5ndFtgJHtuc31TdHJpbmdgXSA9IHR5cGVzLkdUX1NUUklORztcbmd0LmRlZmF1bHQgPSB0eXBlcy5HVF9OT05FOyAvLyBUaGUgZGVmYXVsdCBvcHRpb25cbnRlcm1zLmdyYXBoVHlwZSA9IGd0O1xudGVybXMuaW52R3JhcGhUeXBlID0gaW52KGd0KTtcblxuLy8gUmVzb3VyY2VUeXBlXG5jb25zdCBydCA9IHt9O1xucnRbYCR7bnN9SW5mb3JtYXRpb25SZXNvdXJjZWBdID0gdHlwZXMuUlRfSU5GT1JNQVRJT05SRVNPVVJDRTtcbnJ0W2Ake25zfVJlc29sdmFibGVJbmZvcm1hdGlvblJlc291cmNlYF0gPSB0eXBlcy5SVF9SRVNPTFZBQkxFSU5GT1JNQVRJT05SRVNPVVJDRTtcbnJ0W2Ake25zfU5hbWVkUmVzb3VyY2VgXSA9IHR5cGVzLlJUX05BTUVEUkVTT1VSQ0U7XG5ydFtgJHtuc31Vbmtub3duYF0gPSB0eXBlcy5SVF9VTktOT1dOO1xucnQuZGVmYXVsdCA9IHR5cGVzLlJUX0lORk9STUFUSU9OUkVTT1VSQ0U7IC8vIFRoZSBkZWZhdWx0IG9wdGlvblxudGVybXMucmVzb3VyY2VUeXBlID0gcnQ7XG50ZXJtcy5pbnZSZXNvdXJjZVR5cGUgPSBpbnYocnQpO1xuXG5leHBvcnQgZGVmYXVsdCB0ZXJtcztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInVybFwiKTsiLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIEZvcmNlZCByZXBsYWNlbWVudCBvYmplY3QgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IElTX1BVUkUgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGtleSA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBrZXksIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSBnbG9iYWxba2V5XTtcbn0pO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyByZWR1Y2UsIHJlZHVjZVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfUklHSFQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhcmd1bWVudHNMZW5ndGgsIG1lbW8pIHtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiAgbGVmdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuICByaWdodDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgY29kZVBvaW50QXQsIGF0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgICBpZiAoc2hhbSkgaGlkZShSZWdFeHAucHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4cEV4ZWMuY2FsbChSLCBTKTtcbn07XG5cbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgbmF0aXZlRXhwbTEgPSBNYXRoLmV4cG0xO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmV4cG0xXG5tb2R1bGUuZXhwb3J0cyA9ICghbmF0aXZlRXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCBuYXRpdmVFeHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgbmF0aXZlRXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgbmF0aXZlRXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBleHAoeCkgLSAxO1xufSA6IG5hdGl2ZUV4cG0xO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gTmF0aXZlUHJvdG90eXBlW0tFWV07XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkge1xuICAgICAgICBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gOiBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogZnVuY3Rpb24gc2V0KGEsIGIpIHtcbiAgICAgICAgbmF0aXZlTWV0aG9kLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHlwZW9mIE5hdGl2ZUNvbnN0cnVjdG9yICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQ29uc3RydWN0b3IgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5SRVFVSVJFRCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHJ1ZSkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXdcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9IGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHsgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGl0ZXJhYmxlKTsgfSk7XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcblxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgdGhhdCwgSVNfTUFQKTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTtcbiAgICAgIE5hdGl2ZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cblxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuXG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7XG4gIH1cblxuICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IENvbnN0cnVjdG9yICE9IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuTkFUSVZFX0FSUkFZX0JVRkZFUjtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXgnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gMSAvIDA7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24gKG51bWJlciwgbWFudGlzc2FMZW5ndGgsIGJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkoYnl0ZXMpO1xuICB2YXIgZXhwb25lbnRMZW5ndGggPSBieXRlcyAqIDggLSBtYW50aXNzYUxlbmd0aCAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZXhwb25lbnRMZW5ndGgpIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtYW50aXNzYUxlbmd0aCA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwIHx8IG51bWJlciA9PT0gMCAmJiAxIC8gbnVtYmVyIDwgMCA/IDEgOiAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgZXhwb25lbnQsIG1hbnRpc3NhLCBjO1xuICBudW1iZXIgPSBhYnMobnVtYmVyKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAobnVtYmVyICE9IG51bWJlciB8fCBudW1iZXIgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBpZiAobnVtYmVyICogKGMgPSBwb3coMiwgLWV4cG9uZW50KSkgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1hbnRpc3NhTGVuZ3RoID49IDg7IGJ1ZmZlcltpbmRleCsrXSA9IG1hbnRpc3NhICYgMjU1LCBtYW50aXNzYSAvPSAyNTYsIG1hbnRpc3NhTGVuZ3RoIC09IDgpO1xuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICBmb3IgKDsgZXhwb25lbnRMZW5ndGggPiAwOyBidWZmZXJbaW5kZXgrK10gPSBleHBvbmVudCAmIDI1NSwgZXhwb25lbnQgLz0gMjU2LCBleHBvbmVudExlbmd0aCAtPSA4KTtcbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrSUVFRTc1NCA9IGZ1bmN0aW9uIChidWZmZXIsIG1hbnRpc3NhTGVuZ3RoKSB7XG4gIHZhciBieXRlcyA9IGJ1ZmZlci5sZW5ndGg7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGV4cG9uZW50TGVuZ3RoIC0gNztcbiAgdmFyIGluZGV4ID0gYnl0ZXMgLSAxO1xuICB2YXIgc2lnbiA9IGJ1ZmZlcltpbmRleC0tXTtcbiAgdmFyIGV4cG9uZW50ID0gc2lnbiAmIDEyNztcbiAgdmFyIG1hbnRpc3NhO1xuICBzaWduID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4XSwgaW5kZXgtLSwgbkJpdHMgLT0gOCk7XG4gIG1hbnRpc3NhID0gZXhwb25lbnQgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZXhwb25lbnQgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbWFudGlzc2FMZW5ndGg7XG4gIGZvciAoOyBuQml0cyA+IDA7IG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXhdLCBpbmRleC0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGV4cG9uZW50ID09PSAwKSB7XG4gICAgZXhwb25lbnQgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZXhwb25lbnQgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbWFudGlzc2EgPyBOYU4gOiBzaWduID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbWFudGlzc2EgPSBtYW50aXNzYSArIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCAtIGVCaWFzO1xuICB9IHJldHVybiAoc2lnbiA/IC0xIDogMSkgKiBtYW50aXNzYSAqIHBvdygyLCBleHBvbmVudCAtIG1hbnRpc3NhTGVuZ3RoKTtcbn07XG5cbnZhciB1bnBhY2tJbnQzMiA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlclszXSA8PCAyNCB8IGJ1ZmZlclsyXSA8PCAxNiB8IGJ1ZmZlclsxXSA8PCA4IHwgYnVmZmVyWzBdO1xufTtcblxudmFyIHBhY2tJbnQ4ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQxNiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkYsIG51bWJlciA+PiAxNiAmIDB4RkYsIG51bWJlciA+PiAyNCAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tGbG9hdDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCAyMywgNCk7XG59O1xuXG52YXIgcGFja0Zsb2F0NjQgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDUyLCA4KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGtleSkge1xuICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvcltQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07IH0gfSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gYnl0ZXMuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59O1xuXG52YXIgc2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSBieXRlc1tzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBjb3VudCAtIGkgLSAxXTtcbn07XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ5dGVzOiBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gZ2V0SW50ZXJuYWxTdGF0ZShidWZmZXIpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlT2Zmc2V0Jyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDIzKTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgNTIpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQ2NCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiBOYXRpdmVBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvdHlwZSA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gTmF0aXZlQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIE5hdGl2ZUFycmF5QnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHRlc3RWaWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyIG5hdGl2ZVNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBuYXRpdmVTZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBuYXRpdmVTZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsImltcG9ydCB7IEdyYXBoIH0gZnJvbSAncmRmanNvbic7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSAnLi9SZXNvdXJjZSc7XG5cbi8qKlxuICogR3JhcGggaXMgYSByZXNvdXJjZSBmb3IgaGFuZGxpbmcgUkRGIGdyYXBocyByZWx5aW5nIG9uIHRoZSB7QGxpbmsgcmRmanNvbi9HcmFwaH0gQVBJLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL0dyYXBoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoUmVzb3VyY2UgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50cnlVUkkgLSBVUkkgdG8gYW4gZW50cnkgd2hlcmUgdGhpcyByZXNvdXJjZSBpcyBjb250YWluZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVVSSSAtIFVSSSB0byB0aGUgcmVzb3VyY2UuXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnlTdG9yZX0gZW50cnlTdG9yZSAtIHRoZSBBUEkncyByZXBvc2l0b3J5IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge3JkZmpzb24vR3JhcGggfCBPYmplY3R9IGRhdGEgLSBpcyBhbiBSREYgZ3JhcGggb2Ygc29tZSBzb3J0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnRyeVVSSSwgcmVzb3VyY2VVUkksIGVudHJ5U3RvcmUsIGRhdGEpIHtcbiAgICBzdXBlcihlbnRyeVVSSSwgcmVzb3VyY2VVUkksIGVudHJ5U3RvcmUpOyAvLyBDYWxsIHRoZSBzdXBlciBjb25zdHJ1Y3Rvci5cbiAgICB0aGlzLl9ncmFwaCA9IGRhdGEgJiYgZGF0YS5fZ3JhcGggPyBkYXRhIDogbmV3IEdyYXBoKGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmRmIEdyYXBoLiBUaGUgcmV0dXJuZWQgZ3JhcGggaXMgbm90IGEgY29weSwgc3Vic2VxdWVudCBnZXRHcmFwaCBjYWxscyB3aWxsIHJldHVyblxuICAgKiB0aGUgc2FtZSBpbnN0YW5jZSBhcyBsb25nIGFzIHRoZSBlbnRyeSBoYXMgbm90IGJlZW4gcmVmcmVzaGVkIG9yIGEgbmV3IGluc3RhbmNlIHNldCB2aWFcbiAgICoge0BsaW5rIHN0b3JlL0dyYXBoI3NldEdyYXBoIHNldEdyYXBofS5cbiAgICpcbiAgICogQHJldHVybnMge3JkZmpzb24vR3JhcGh9IHdpbGwgbmV2ZXIgYmUgbnVsbCBvciB1bmRlZmluZWQsIGFsdGhvdWdoIHRoZSBncmFwaCBtYXkgYmUgZW1wdHkuXG4gICAqL1xuICBnZXRHcmFwaCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3JhcGg7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSByZGYgR3JhcGguIFRvIHVwZGF0ZSB0aGUgZ3JhcGggaW4gdGhlIHJlcG9zaXRvcnkgY2FsbCB0aGVcbiAgICoge0BsaW5rIHN0b3JlL0VudHJ5U3RvcmUjY29tbWl0IGNvbW1pdH0uXG4gICAqXG4gICAqIEBwYXJhbSB7cmRmanNvbi9HcmFwaH0gZ3JhcGggLSB0aGUgbmV3IGdyYXBoLCBpZiBudWxsIG9yIHVuZGVmaW5lZCBhIG5ldyBlbXB0eSBncmFwaCB3aWxsXG4gICAqIGJlIHNldC5cbiAgICogQHJldHVybnMge3N0b3JlL0dyYXBofSAtIHRvIGFsbG93IGNoYWluaW5nIHdpdGggY29tbWl0LlxuICAgKi9cbiAgc2V0R3JhcGgoZ3JhcGgpIHtcbiAgICB0aGlzLl9ncmFwaCA9IGdyYXBoIHx8IG5ldyBHcmFwaCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2hlcyB0aGUgY3VycmVudCBncmFwaCBiYWNrIHRvIHJlcG9zaXRvcnkuXG4gICAqXG4gICAqIEB0b2RvIGZpeCBpZk1vZGlmaWVkU2luY2UuXG4gICAqIEBwYXJhbSB7cmRmanNvbi9HcmFwaH0gZ3JhcGhcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBjb21taXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5U3RvcmUuaGFuZGxlQXN5bmModGhpcy5fZW50cnlTdG9yZS5nZXRSRVNUKCkucHV0KHRoaXMuX3Jlc291cmNlVVJJLFxuICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5fZ3JhcGguZXhwb3J0UkRGSlNPTigpKSksICdjb21taXRHcmFwaCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ3JhcGggYXMgcmRmL2pzb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoLmV4cG9ydFJERkpTT04oKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZShkYXRhKSB7XG4gICAgdGhpcy5fZ3JhcGggPSBuZXcgR3JhcGgoZGF0YSk7XG4gIH1cbn1cbiIsImltcG9ydCBBdXRoIGZyb20gJy4vQXV0aCc7XG5pbXBvcnQgQ2FjaGUgZnJvbSAnLi9DYWNoZSc7XG5pbXBvcnQgZmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuaW1wb3J0IFByb3RvdHlwZUVudHJ5IGZyb20gJy4vUHJvdG90eXBlRW50cnknO1xuaW1wb3J0IFJlc291cmNlIGZyb20gJy4vUmVzb3VyY2UnO1xuaW1wb3J0IFJlc3QgZnJvbSAnLi9SZXN0JztcbmltcG9ydCBTb2xyUXVlcnkgZnJvbSAnLi9Tb2xyUXVlcnknO1xuaW1wb3J0IHR5cGVzIGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IFVzZXIgZnJvbSAnLi9Vc2VyJztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBoZSA9IHJlcXVpcmUoJ2hlJyk7IC8vIFRPRE8gQHNjYXphbjogUmVtb3ZlIHdoZW4gZWNob0ZpbGUgaXMgY2hhbmdlZCBieSBASGFubmVzXG5cbi8qKlxuICogRW50cnlTdG9yZSBpcyB0aGUgbWFpbiBjbGFzcyB0aGF0IGlzIHVzZWQgdG8gY29ubmVjdCB0byBhIHJ1bm5pbmcgc2VydmVyLXNpZGUgRW50cnlTdG9yZVxuICogcmVwb3NpdG9yeS5cbiAqIEBleHBvcnRzIHN0b3JlL0VudHJ5U3RvcmVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnlTdG9yZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZz19IGJhc2VVUkkgLSBVUkwgdG8gdGhlIEVudHJ5U3RvcmUgcmVwb3NpdG9yeSB3ZSBzaG91bGQgY29tbXVuaWNhdGUgd2l0aCxcbiAgICogbWF5IGJlIGxlZnQgb3V0IGFuZFxuICAgKiBndWVzc2VkIGlmIHJ1biBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQgKGFwcGVuZHMgXCIvc3RvcmUvXCIgdG8gdGhlIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gY3JlZGVudGlhbHMgLSBzYW1lIGFzIHByb3ZpZGVkIGluIHRoZSB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZSNhdXRoIGF1dGh9XG4gICAqIG1ldGhvZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGJhc2VVUkksIGNyZWRlbnRpYWxzKSB7XG4gICAgaWYgKGlzQnJvd3NlcigpICYmIGJhc2VVUkkgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fYmFzZVVSSSA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L3N0b3JlL2A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2Jhc2VVUkkgPSBiYXNlVVJJO1xuICAgICAgaWYgKHRoaXMuX2Jhc2VVUklbdGhpcy5fYmFzZVVSSS5sZW5ndGggLSAxXSAhPT0gJy8nKSB7XG4gICAgICAgIHRoaXMuX2Jhc2VVUkkgPSBgJHt0aGlzLl9iYXNlVVJJfS9gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2NhY2hlID0gbmV3IENhY2hlKCk7XG4gICAgdGhpcy5fYXV0aCA9IG5ldyBBdXRoKHRoaXMpO1xuICAgIGlmIChjcmVkZW50aWFscykge1xuICAgICAgdGhpcy5fYXV0aC5sb2dpbiguLi5jcmVkZW50aWFscyk7XG4gICAgfVxuICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgdGhpcy5fcmVzdCA9IG5ldyBSZXN0KCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgY2FsbGVkIGZvciBldmVyeSBhc3luY2hyb25vdXMgY2FsbCBiZWluZyBtYWRlLlxuICAgKiBUaGUgaGFuZGxlciBpcyBpbnZva2VkIHdpdGggdGhlIHByb21pc2UgZnJvbSB0aGUgYXN5bmNocm9ub3VzIGNhbGxcbiAgICogYW5kIGEgY2FsbFR5cGUgcGFyYW1ldGVyIGluZGljYXRpbmcgd2hpY2ggYXN5bmNocm9ub3VzIGNhbGwgdGhhdCBoYXMgYmVlbiBtYWRlLlxuICAgKlxuICAgKiBUaGUgY2FsbFR5cGUgcGFyYW1ldGVyIGNhbiB0YWtlIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxuICAgKiAtIGdldEVudHJ5ICAgICAgICAtIGFuIGVudHJ5IGlzIHJldHJpZXZlZCAoRW50cnlTdG9yZS5nZXRFbnRyeSlcbiAgICogLSBjcmVhdGVFbnRyeSAgICAgLSBhbiBlbnRyeSBpcyBjcmVhdGVkICAgKEVudHJ5U3RvcmUuY3JlYXRlRW50cnkpXG4gICAqIC0gY3JlYXRlR3JvdXBBbmRDb250ZXh0IC0gYSBncm91cCBhbmQgY29udGV4dCBwYWlyIGlzIGNyZWF0ZWRcbiAgICogKEVudHJ5U3RvcmUuY3JlYXRlR3JvdXBBbmRDb250ZXh0KVxuICAgKiAtIGxvYWRWaWFQcm94eSAgICAtIGRhdGEgaXMgcmVxdWVzdGVkIHZpYSByZXBvc2l0b3J5IHByb3h5IChFbnRyeVN0b3JlLmxvYWRWaWFQcm94eSlcbiAgICogLSBjb21taXRNZXRhZGF0YSAgLSBjaGFuZ2VzIHRvIG1ldGFkYXRhIGlzIHB1c2hlZCAoRW50cnkuY29tbWl0TWV0YWRhdGEpXG4gICAqIC0gY29tbWl0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSAtIGNoYW5nZXMgdG8gY2FjaGVkIGV4dGVybmFsIG1ldGFkYXRhIGlzIHB1c2hlZFxuICAgKiAoRW50cnkuY29tbWl0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSlcbiAgICogLSBnZXRSZXNvdXJjZSAgICAgLSB0aGUgZW50cnkncyByZXNvdXJjZSBoYXMgYmVlbiByZXF1ZXN0ZWQgKEVudHJ5LmdldFJlc291cmNlKVxuICAgKiAtIGdldExpbmtlZEVudHJ5ICAtIGEgbGlua2VkIGVudHJ5IGlzIHJlcXVlc3RlZCAoRW50cnkuZ2V0TGlua2VkRW50cnkpXG4gICAqIC0gZGVsRW50cnkgICAgICAgIC0gYW4gZW50cnkgaXMgZGVsZXRlZCAoRW50cnkuZGVsKVxuICAgKiAtIHJlZnJlc2ggICAgICAgICAtIGFuIGVudHJ5IGlzIHJlZnJlc2hlZCAoRW50cnkucmVmcmVzaClcbiAgICogLSBzZXRDb250ZXh0TmFtZSAgLSB0aGUgbmFtZSBvZiBhIGNvbnRleHQgaXMgY2hhbmdlZCAoQ29udGV4dC5zZXROYW1lKVxuICAgKiAtIGdldFVzZXJJbmZvICAgICAtIHRoZSB1c2VyIGluZm9ybWF0aW9uIGlzIHJlcXVlc3RlZCAoYXV0aC5nZXRVc2VySW5mbylcbiAgICogLSBnZXRVc2VyRW50cnkgICAgLSB0aGUgdXNlciBlbnRyeSBpcyByZXF1ZXN0ZWQgKGF1dGguZ2V0VXNlckVudHJ5KVxuICAgKiAtIGxvZ2luICAgICAgICAgICAtIGxvZ2dpbmcgaW4gKGF1dGgubG9naW4pXG4gICAqIC0gbG9nb3V0ICAgICAgICAgIC0gbG9nZ2luZyBvdXQgKGF1dGgubG9nb3V0KVxuICAgKiAtIGNvbW1pdEVudHJ5SW5mbyAtIHB1c2hpbmcgY2hhbmdlcyBpbiBlbnRyeSBpbmZvcm1hdGlvbiAoRW50cnlJbmZvLmNvbW1pdClcbiAgICogLSBnZXRGaWxlICAgICAgICAgLSB0aGUgY29udGVudHMgb2YgYSBmaWxlIHJlc291cmNlIGlzIHJlcXVlc3RlZCAoRmlsZS5nZXQqKVxuICAgKiAtIHB1dEZpbGUgICAgICAgICAtIHRoZSBjb250ZW50cyBvZiBhIGZpbGUgaXMgcHVzaGVkIChGaWxlLnB1dCopXG4gICAqIC0gY29tbWl0R3JhcGggICAgIC0gYSBncmFwaCByZXNvdXJjZSBpcyBwdXNoZWQgKEdyYXBoLmNvbW1pdClcbiAgICogLSBjb21taXRTdHJpbmcgICAgLSBhIHN0cmluZyByZXNvdXJjZSBpcyBwdXNoZWQgKFN0cmluZy5jb21taXQpXG4gICAqIC0gc2V0R3JvdXBOYW1lICAgIC0gYSBuZXcgbmFtZSBvZiBhIGdyb3VwIGlzIHB1c2hlZCAoR3JvdXAuc2V0TmFtZSlcbiAgICogLSBzZXRVc2VyTmFtZSAgICAgLSBhIG5ldyBuYW1lIG9mIGEgdXNlciBpcyBwdXNoZWQgKFVzZXIuc2V0TmFtZSlcbiAgICogLSBzZXRVc2VyRGlzYWJsZWQgLSBhIG5ldyBkaXNhYmxlZCBzdGF0ZSBvZiBhIHVzZXIgaXMgcHVzaGVkIChVc2VyLnNldERpc2FibGVkKVxuICAgKiAtIHNldFVzZXJMYW5ndWFnZSAtIGEgbmV3IHByZWZlcnJlZCBsYW5ndWFnZSBvZiB0aGUgdXNlciBpcyBwdXNoZWQgKFVzZXIuc2V0TGFuZ3VhZ2UpXG4gICAqIC0gc2V0VXNlclBhc3N3b3JkIC0gYSBuZXcgcGFzc3dvcmQgZm9yIHRoZSB1c2VyIGlzIHB1c2hlZCAoVXNlci5zZXRQYXNzd29yZClcbiAgICogLSBzZXRVc2VySG9tZUNvbnRleHQgLSBhIG5ldyBob21lIGNvbnRleHQgZm9yIHRoZSB1c2VyIGlzIHB1c2hlZCAoVXNlci5zZXRIb21lQ29udGV4dClcbiAgICogLSBzZXRVc2VyQ3VzdG9tUHJvcGVydGllcyAtIG5ldyBjdXN0b20gcHJvcGVydGllcyBmb3IgdGhlIHVzZXIgKFVzZXIuc2V0Q3VzdG9tUHJvcGVydGllcylcbiAgICogLSBsb2FkTGlzdEVudHJpZXMgLSBtZW1iZXJzIG9mIGEgbGlzdCBhcmUgcmVxdWVzdGVkIChMaXN0LmdldEVudHJpZXMpXG4gICAqIC0gc2V0TGlzdCAgICAgICAgIC0gdGhlIGxpc3QgbWVtYmVycyBhcmUgY2hhbmdlZCB2aWEgYSBsaXN0XG4gICAqIC0gYWRkVG9MaXN0ICAgICAgIC0gU2VlIExpc3QuYWRkRW50cnlcbiAgICogLSByZW1vdmVGcm9tTGlzdCAgLSBTZWUgTGlzdC5yZW1vdmVFbnRyeVxuICAgKiAucmVtb3ZlRW50cnkpXG4gICAqIC0gc2VhcmNoICAgICAgICAgIC0gYSBzZWFyY2ggaXMgYmVpbmcgcGVyZm9ybWVkIChTZWFyY2hMaXN0LmdldEVudHJpZXMpXG4gICAqIC0gZXhlY3V0ZSAgICAgICAgIC0gYSBwaXBlbGluZSBpcyBleGVjdXRlZCAoUGlwZWxpbmUuZXhlY3V0ZSlcbiAgICpcbiAgICogQHBhcmFtIHtQcm9taXNlLjxzdHJpbmc+fSBsaXN0ZW5lclxuICAgKi9cbiAgYWRkQXN5bmNMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLmFzeW5jTGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLmFzeW5jTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzeW5jTGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHByZXZpb3VzbHkgYWRkZWQgbGlzdGVuZXIgZm9yIGFzeW5jaHJvbm91cyBjYWxscy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpc3RlbmVyXG4gICAqL1xuICByZW1vdmVBc3luY0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMuYXN5bmNMaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuYXN5bmNMaXN0ZW5lcnMuc3BsaWNlKHRoaXMuYXN5bmNMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHRcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGhhbmRsZUFzeW5jKHByb21pc2UsIGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy5hc3luY0xpc3RlbmVycykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFzeW5jTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuYXN5bmNMaXN0ZW5lcnNbaV0ocHJvbWlzZSwgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0b3JlL0F1dGh9IHdoZXJlIGZ1bmN0aW9uYWxpdHkgcmVsYXRlZCB0byBhdXRob3JpemF0aW9uIGFyZSBsb2NhdGVkLFxuICAgKiBpbmNsdWRpbmcgYSBsaXN0ZW5lciBpbmZyYXN0cnVjdHVyZS5cbiAgICovXG4gIGdldEF1dGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dGg7XG4gIH1cblxuICAvKipcbiAgICogWWllbGRzIGluZm9ybWF0aW9uIGFib3V0IHdobyBjdXJyZW50bHkgaXMgYXV0aGVudGljYXRlZCBhZ2FpbnN0IHRoZSBFbnRyeVN0b3JlIHJlcG9zaXRvcnkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdG9yZS9FbnRyeUluZm8+fSAtIHVwb24gc3VjY2VzcyBhbiBvYmplY3QgY29udGFpbmluZyBhdHRyaWJ1dGVzIFwidXNlclwiIGJlaW5nXG4gICAqIHRoZSB1c2VybmFtZSwgXCJpZFwiIG9mIHRoZSB1c2VyIGVudHJ5LCBhbmQgXCJob21lY29udGV4dFwiIGJlaW5nIHRoZSBlbnRyeS1pZCBvZiB0aGVcbiAgICogaG9tZSBjb250ZXh0IGlzIHByb3ZpZGVkLlxuICAgKiBAc2VlIHtAbGluayBzdG9yZS9FbnRyeVN0b3JlI2F1dGggYXV0aH1cbiAgICogQHNlZSB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZSNsb2dvdXQgbG9nb3V0fVxuICAgKiBAZGVwcmVjYXRlZCB1c2UgY29ycmVzcG9uZGluZyBtZXRob2Qgb24gYXV0aCBvYmplY3QgaW5zdGVhZC5cbiAgICovXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLl9hdXRoLmdldFVzZXJJbmZvKCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0b3JlL0VudHJ5Pn0gb24gc3VjY2VzcyB0aGUgZW50cnkgZm9yIHRoZSBjdXJyZW50bHkgc2lnbmVkIGluIHVzZXIgaXMgcHJvdmlkZWQuXG4gICAqIEBkZXByZWNhdGVkIHVzZSBjb3JyZXNwb25kaW5nIG1ldGhvZCBvbiBhdXRoIG9iamVjdCBpbnN0ZWFkLlxuICAgKi9cbiAgZ2V0VXNlckVudHJ5KCkge1xuICAgIHJldHVybiB0aGlzLl9hdXRoLmdldFVzZXJFbnRyeSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZSB1c2luZyBjcmVkZW50aWFscyBjb250YWluaW5nIGEgdXNlciwgYSBwYXNzd29yZCBhbmQgYW4gb3B0aW9uYWwgbWF4QWdlIGdpdmVuXG4gICAqIGluIHNlY29uZHMuXG4gICAqXG4gICAqIEBwYXJhbSB7e3VzZXIsIHBhc3N3b3JkLCBtYXhBZ2V9fSBjcmVkZW50aWFscyBhcyBhIHBhcmFtZXRlciBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGNvcnJlc3BvbmRpbmcgbWV0aG9kIG9uIGF1dGggb2JqZWN0IGluc3RlYWQuXG4gICAqL1xuICBhdXRoKGNyZWRlbnRpYWxzKSB7XG4gICAgaWYgKGNyZWRlbnRpYWxzID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hdXRoLmxvZ291dCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXV0aC5sb2dpbihjcmVkZW50aWFscy51c2VyLCBjcmVkZW50aWFscy5wYXNzd29yZCwgY3JlZGVudGlhbHMubWF4QWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dvdXQgdGhlIGN1cnJlbnRseSBhdXRob3JpemVkIHVzZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKiBAZGVwcmVjYXRlZCB1c2UgY29ycmVzcG9uZGluZyBtZXRob2Qgb24gYXV0aCBvYmplY3QgaW5zdGVhZC5cbiAgICovXG4gIGxvZ291dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0aC5sb2dvdXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGFuIGVudHJ5IGdpdmVuIGFuIGVudHJ5VVJJLiBJZiB0aGUgZW50cnkgaXMgYWxyZWFkeSBsb2FkZWQgYW5kIGF2YWlsYWJsZSBpbiB0aGVcbiAgICogY2FjaGUgaXQgd2lsbCBiZSByZXR1cm5lZCBkaXJlY3RseSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgbG9hZGVkIGZyb20gdGhlIHJlcG9zaXRvcnkuXG4gICAqIElmIHRoZSBlbnRyeSBpcyBhbHJlYWR5IGxvYWRlZCBidXQgbWFya2VkIGFzIGluIG5lZWQgb2YgYSByZWZyZXNoIGl0IHdpbGwgYmUgcmVmcmVzaGVkXG4gICAqIGZpcnN0LlxuICAgKlxuICAgKiBUaGUgb3B0aW9uYWwgbG9hZCBwYXJhbWV0ZXJzIGFyZSBwcm92aWRlZCBpbiBhIHNpbmdsZSBwYXJhbWV0ZXIgb2JqZWN0IHdpdGggc2l4IHBvc3NpYmxlXG4gICAqIGF0dHJpYnV0ZXMuIEJlbG93IHdlIG91dGxpbmUgdGhlc2UgYXR0cmlidXRlcywgdGhlIGZpcnN0IHR3byAoZm9yY2VMb2FkIGFuZCBkaXJlY3QpIGFwcGxpZXNcbiAgICogdG8gYWxsIGtpbmQgb2YgZW50cmllcyB3aGlsZSB0aGUgZm9sbG93aW5nIHRocmVlIChsaW1pdCwgb2Zmc2V0IGFuZCBzb3J0KSBvbmx5IGFwcGxpZXMgaWZcbiAgICogdGhlIGVudHJ5IGlzIGEgbGlzdDpcbiAgICpcbiAgICogZm9yY2VMb2FkIC0gaWdub3JlcyBpZiB0aGUgZW50cnkgaXMgYWxyZWFkeSBpbiBjYWNoZSBhbmQgZmV0Y2hlcyBmcm9tIHRoZSByZXBvc2l0b3J5XG4gICAqIGxvYWRSZXNvdXJjZSAtIG1ha2VzIHN1cmUgdGhhdCBlbnRyeS5nZXRSZXNvdXJjZSh0cnVlKSB3aWxsIG5vdCByZXR1cm4gbnVsbFxuICAgKiAgICAgKGRvZXMgbm90IHdvcmsgaW4gY29tYmluYXRpb24gd2l0aCBkaXJlY3QpLlxuICAgKiBkaXJlY3QgLSByZXR1cm5zIHRoZSBlbnRyeSBmcm9tIHRoZSBjYWNoZSBkaXJlY3RseSByYXRoZXIgdGhhbiByZXR1cm5pbmcgYSBwcm9taXNlLFxuICAgKiAgICBpZiB0aGUgZW50cnkgaXMgbm90IGluIHRoZSBjYWNoZSBhbiB1bmRlZmluZWQgdmFsdWUgd2lsbCBiZSByZXR1cm5lZC5cbiAgICogbGltaXQgLSBvbmx5IGEgbGltaXRlZCBudW1iZXIgb2YgY2hpbGRyZW4gYXJlIGxvYWRlZCwgLTEgbWVhbnMgbm8gbGltaXQsIDAsIHVuZGVmaW5lZFxuICAgKiAgICBvciBpZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBwcm92aWRlZCBtZWFucyB0aGF0IHRoZSBkZWZhdWx0IGxpbWl0IG9mIDIwIGlzIHVzZWQuXG4gICAqIG9mZnNldCAtIG9ubHkgY2hpbGRyZW4gZnJvbSBvZmZlc3QgYW5kIGZvcndhcmQgaXMgcmV0dXJuZWQsIG11c3QgYmUgcG9zaXRpdmUuXG4gICAqIHNvcnQgLSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gc29ydCB0aGUgY2hpbGRyZW46XG4gICAqICAgICAqIGlmIHNvcnQgaXMgbm90IHByb3ZpZGVkIGF0IGFsbCBvciBhbiBlbXB0eSBvYmplY3QgaXMgcHJvdmlkZWQgdGhlIG1lbWJlcnMgb2YgdGhlXG4gICAqICAgICAgIGxpc3Qgd2lsbCBub3QgYmUgc29ydGVkLCBpbnN0ZWFkIHRoZSBsaXN0J3MgbmF0dXJhbCBvcmRlciB3aWxsIGJlIHVzZWRcbiAgICogICAgICogaWYgc29ydCBpcyBnaXZlbiBhcyBudWxsIHRoZSBkZWZhdWx0cyB3aWxsIGJlIHVzZWQgKHtzb3J0Qnk6IFwidGl0bGVcIiwgcHJpbzogXCJMaXN0XCJ9KS5cbiAgICogICAgICogaWYgc29ydCBpcyBnaXZlbiBhcyBhIG5vbiBlbXRweSBvYmplY3QgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIGFyZSBjb25zaWRlcmVkOlxuICAgKiAgICAgICAqKiBzb3J0QnkgLSB0aGUgYXR0cmlidXRlIGluc3RydWN0cyB3aGljaCBtZXRhZGF0YSBmaWVsZCB0byBzb3J0IHRoZSBjaGlsZHJlbiBieSxcbiAgICogICAgICAgICAgaS5lLiwgdGl0bGUsIGNyZWF0ZWQsIG1vZGlmaWVkLCBvciBzaXplLlxuICAgKiAgICAgICAqKiBsYW5nIC0gaWYgc29ydCBpcyB0aXRsZSBhbmQgdGhlIHRpdGxlIGlzIHByb3ZpZGVkIGluIHNldmVyYWwgbGFuZ3VhZ2VzIGFcbiAgICogICAgICAgICAgcHJpb3JpdGl6ZWQgbGFuZ3VhZ2UgY2FuIGJlIGdpdmVuLlxuICAgKiAgICAgICAqKiBwcmlvIC0gYWxsb3dzIHNwZWNpZmljIGdyYXBodHlwZXMgdG8gYmUgcHJpb3JpdGl6ZWRcbiAgICogICAgICAgICAgKGUuZy4gc2hvdyB1cCBpbiB0aGUgdG9wIG9mIHRoZSBsaXN0KS5cbiAgICogICAgICAgKiogZGVzY2VuZGluZyAtIGlmIHRydWUgdGhlIGNoaWxkcmVuIGFyZSBzaG93biBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKlxuICAgKlxuICAgKiAqKk5vdGUqKiAtIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBlbnRyeSBpcyBhIGxpc3QgaXQgaXMgcG9zc2libGUgdG8gY2hhbmdlIHRoZSBsaW1pdCxcbiAgICogb2Zmc2V0IGFuZCBzb3J0IGxhdGVyIGJ5IGNhbGxpbmcgdGhlIGNvcnJlc3BvbmRpbmcgbWV0aG9kcyBvbiB0aGUge0BsaW5rIHN0b3JlL0xpc3R9XG4gICAqIHJlc291cmNlLCBlLmcuIHtAbGluayBzdG9yZS9MaXN0I3NldFNvcnR9LiBIb3dldmVyLCBzZXR0aW5nIHRoZSB2YWx1ZXMgYWxyZWFkeSBpbiB0aGlzXG4gICAqIG1ldGhvZCBjYWxsIGhhcyBhcyBhIGNvbnNlcXVlbmNlIHRoYXQgb25lIGxlc3MgcmVxdWVzdCB0byB0aGUgcmVwb3NpdG9yeSBpcyBtYWRlIGFzIHlvdVxuICAgKiB3aWxsIGdldCBtZW1iZXJzIChpbiB0aGUgcmlnaHQgYW1vdW50IGFuZCBvcmRlcikgaW4gdGhlIHNhbWUgcmVxdWVzdCBhcyB5b3UgZ2V0IG1ldGFkYXRhXG4gICAqIGFuZCBvdGhlciBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogQSByZXF1ZXN0IG9mIGEgbGlzdCBlbnRyeSBjYW4gbG9vayBsaWtlOlxuICAgKlxuICAgKiAgICAgdmFyIGV1cmkgPSBlbnRyeXN0b3JlLmdldEVudHJ5VVJJKFwiMVwiLCBcIjFcIik7XG4gICAqICAgICBlbnRyeXN0b3JlLmdldEVudHJ5KGV1cmksIHtcbiAgICogICAgICAgICAgZm9yY2VMb2FkOiB0cnVlLFxuICAgKiAgICAgICAgICBsaW1pdDogMTAsXG4gICAqICAgICAgICAgIG9mZnNldDogMjAsXG4gICAqICAgICAgICAgIHNvcnQ6IHtcbiAgICogICAgICAgICAgICAgc29ydEJ5OiBcIm1vZGlmaWVkXCIsXG4gICAqICAgICAgICAgICAgIHByaW86IHR5cGVzLkdUX0xJU1RcbiAgICogICAgICAgICAgfVxuICAgKiAgICAgIH0pO1xuICAgKlxuICAgKiBUaGUgb3B0aW9uYWwgcGFyYW1zIGhlcmUgc2F5cyB0aGF0IHdlIGZvcmNlIGEgbG9hZCBmcm9tIHRoZSByZXBvc2l0b3J5LCB0aGF0IHdlIHdhbnQgdGhlXG4gICAqIHJlc3VsdHMgdG8gYmUgcGFnaW5hdGVkIHdpdGggYSBsaW1pdCBvZiAxMCBlbnRyaWVzIHBlciBwYWdlIGFuZCB0aGF0IHdlIHdhbnQgcGFnZSAzLlxuICAgKiBXZSBhbHNvIGluZGljYXRlIHRoYXQgd2Ugd2FudCB0aGUgbGlzdCB0byBiZSBzb3J0ZWQgYnkgbGF0ZXN0IG1vZGlmaWNhdGlvbiBkYXRlIGFuZCB0aGF0XG4gICAqIGlmIHRoZXJlIGFyZSBtZW1iZXIgZW50cmllcyB0aGF0IGFyZSBsaXN0cyB0aGV5IHNob3VsZCBiZSBzb3J0ZWQgdG8gdGhlIHRvcC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5VVJJIC0gdGhlIGVudHJ5VVJJIGZvciB0aGUgZW50cnkgdG8gcmV0cmlldmUuXG4gICAqIEBwYXJhbSB7e2ZvcmNlTG9hZCwgZGlyZWN0LCBsb2FkUmVzb3VyY2UsIGxpbWl0LCBvZmZzZXQsIHNvcnQsIGFzeW5jQ29udGV4dH19IG9wdGlvbmFsTG9hZFBhcmFtcyAtIHBhcmFtZXRlcnMgZm9yIGhvdyB0byBsb2FkIGFuIGVudHJ5LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxzdG9yZS9FbnRyeT4gfCBzdG9yZS9FbnRyeSB8IHVuZGVmaW5lZH0gLSBieSBkZWZhdWx0IGEgcHJvbWlzZSBpcyByZXR1cm5lZCxcbiAgICogaWYgdGhlIGRpcmVjdCBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkIHRoZSBlbnRyeSBpcyByZXR1cm5lZCBkaXJlY3RseSBvciB1bmRlZmluZWQgaWYgdGhlXG4gICAqIGVudHJ5IGlzIG5vdCBpbiBjYWNoZS5cbiAgICogQHNlZSB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZSNnZXRFbnRyeVVSSSBnZXRFbnRyeVVSSX0gZm9yIGhlbHAgdG8gY29uc3RydWN0IGVudHJ5IFVSSXMuXG4gICAqIEBzZWUge0BsaW5rIHN0b3JlL0NvbnRleHQjZ2V0RW50cnlCeUlkfSBmb3IgbG9hZGluZyBlbnRyaWVzIHJlbGF0aXZlIHRvIGEgY29udGV4dC5cbiAgICovXG4gIGdldEVudHJ5KGVudHJ5VVJJLCBvcHRpb25hbExvYWRQYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IGZvcmNlTG9hZCA9IG9wdGlvbmFsTG9hZFBhcmFtcyA/IG9wdGlvbmFsTG9hZFBhcmFtcy5mb3JjZUxvYWQgPT09IHRydWUgOiBmYWxzZTtcbiAgICBjb25zdCBlID0gdGhpcy5fY2FjaGUuZ2V0KGVudHJ5VVJJKTtcbiAgICBsZXQgYXN5bmNDb250ZXh0ID0gJ2dldEVudHJ5JztcbiAgICBpZiAob3B0aW9uYWxMb2FkUGFyYW1zICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25hbExvYWRQYXJhbXMuYXN5bmNDb250ZXh0KSB7XG4gICAgICAgIGFzeW5jQ29udGV4dCA9IG9wdGlvbmFsTG9hZFBhcmFtcy5hc3luY0NvbnRleHQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9uYWxMb2FkUGFyYW1zLmRpcmVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hlY2tSZXNvdXJjZUxvYWRlZCA9IChlbnRyeSkgPT4ge1xuICAgICAgaWYgKG9wdGlvbmFsTG9hZFBhcmFtcyAhPSBudWxsICYmIG9wdGlvbmFsTG9hZFBhcmFtcy5sb2FkUmVzb3VyY2VcbiAgICAgICAgJiYgZW50cnkuZ2V0UmVzb3VyY2UoKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5nZXRSZXNvdXJjZSgpLnRoZW4oKCkgPT4gZW50cnkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH07XG4gICAgaWYgKGUgJiYgIWZvcmNlTG9hZCkge1xuICAgICAgaWYgKChlLmlzTGlzdCgpIHx8IGUuaXNHcm91cCgpKSAmJiBvcHRpb25hbExvYWRQYXJhbXMgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBsaXN0ID0gZS5nZXRSZXNvdXJjZSh0cnVlKTsgLy8gRGlyZWN0IGFjY2VzcyB3b3JrcyBmb3IgbGlzdHMgYW5kIGdyb3Vwcy5cbiAgICAgICAgbGlzdC5zZXRMaW1pdChvcHRpb25hbExvYWRQYXJhbXMubGltaXQpO1xuICAgICAgICBsaXN0LnNldFNvcnQob3B0aW9uYWxMb2FkUGFyYW1zLnNvcnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBXaWxsIG9ubHkgcmVmcmVzaCBpZiBuZWVkZWQsIGEgcHJvbWlzZSBpcyByZXR1cm5lZCBpbiBhbnkgY2FzZVxuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQXN5bmMoZS5yZWZyZXNoKCkudGhlbihjaGVja1Jlc291cmNlTG9hZGVkKSwgYXN5bmNDb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgZW50cnlMb2FkVVJJID0gZmFjdG9yeS5nZXRFbnRyeUxvYWRVUkkoZW50cnlVUkksIG9wdGlvbmFsTG9hZFBhcmFtcyk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlQXN5bmModGhpcy5fcmVzdC5nZXQoZW50cnlMb2FkVVJJKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAvLyBUaGUgZW50cnksIHdpbGwgYWx3YXlzIGJlIHRoZXJlLlxuICAgICAgY29uc3QgZW50cnkgPSBmYWN0b3J5LnVwZGF0ZU9yQ3JlYXRlKGVudHJ5VVJJLCBkYXRhLCBzZWxmKTtcbiAgICAgIHJldHVybiBjaGVja1Jlc291cmNlTG9hZGVkKGVudHJ5KTtcbiAgICB9LCAoZXJyKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCBmZXRjaGluZyBlbnRyeS4gJHtlcnJ9YCk7XG4gICAgfSksIGFzeW5jQ29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGVudHJpZXMgZnJvbSBhIGxpc3QuIE9uZSB3YXkgdG8gc2VlIGl0IGlzIHRoYXQgdGhpcyBpcyBhIGNvbnZlbmllbmNlIG1ldGhvZFxuICAgKiB0aGF0IHJldHJpZXZlcyBhIGxpc3QgZW50cnksIGl0cyBtZW1iZXIgZW50cmllcyBhbmQgcmV0dXJucyB0aG9zZSBpbiBhbiBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5VVJJIC0gVVJJIG9mIHRoZSBsaXN0IGVudHJ5IHRvIGxvYWQgZW50cmllcyBmcm9tLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc29ydCAtIHNhbWUgc29ydCBvYmplY3QgYXMgcHJvdmlkZWQgaW4gdGhlIG9wdGlvbmFsTG9hZFBhcmFtcyB0b1xuICAgKiB7QHNlZSBzdG9yZS9FbnRyeVN0b3JlI2dldEVudHJ5IGdldEVudHJ5fSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBsaW1pdCAtIHNhbWUgbGltaXQgYXMgcHJvdmlkZWQgaW4gdGhlIG9wdGlvbmFsTG9hZFBhcmFtcyB0b1xuICAgKiB7QHNlZSBzdG9yZS9FbnRyeVN0b3JlI2dldEVudHJ5IGdldEVudHJ5fSBtZXRob2QuXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gcGFnZSAtIHVubGVzcyBsaW1pdCBpcyBzZXQgdG8gLTEgKG5vIHBhZ2luYXRpb24pIHdlIG5lZWQgdG8gc3BlY2lmeSB3aGljaFxuICAgKiBwYWdlIHRvIGxvYWQsIGZpcnN0IHBhZ2UgaXMgMC5cbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0b3JlL0VudHJ5W10+fSB1cG9uIHN1Y2Nlc3MgdGhlIHByb21pc2UgcmV0dXJucyBhbiBhcnJheSBvZiBlbnRyaWVzLlxuICAgKi9cbiAgZ2V0TGlzdEVudHJpZXMoZW50cnlVUkksIHNvcnQsIGxpbWl0LCBwYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IG9wID0ge307XG4gICAgICBpZiAoc29ydCAhPSBudWxsKSB7XG4gICAgICAgIG9wLnNvcnQgPSBzb3J0O1xuICAgICAgfVxuICAgICAgaWYgKGxpbWl0ICUgMSA9PT0gMCkge1xuICAgICAgICBvcC5saW1pdCA9IGxpbWl0O1xuICAgICAgfVxuICAgICAgaWYgKHBhZ2UgJSAxID09PSAwKSB7XG4gICAgICAgIGlmIChsaW1pdCAlIDEgPT09IDApIHtcbiAgICAgICAgICBvcC5vZmZzZXQgPSBsaW1pdCAqIHBhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3Aub2Zmc2V0ID0gZmFjdG9yeS5nZXREZWZhdWx0TGltaXQoKSAqIHBhZ2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZ2V0RW50cnlTdG9yZSgpLmdldEVudHJ5KGVudHJ5VVJJLCBvcClcbiAgICAgICAgLnRoZW4oKGVudHJ5KSA9PiB7XG4gICAgICAgICAgY29uc3QgbGlzdCA9IGVudHJ5LmdldFJlc291cmNlKHRydWUpO1xuICAgICAgICAgIGxpc3QuZ2V0RW50cmllcyhwYWdlKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgQ29udGV4dCBpbnN0YW5jZSB2aWEgaXRzIGlkLiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgcmV0dXJucyBkaXJlY3RseSB3aXRob3V0XG4gICAqIGNoZWNraW5nIHdpdGggdGhlIEVudHJ5U3RvcmUgcmVwb3NpdG9yeSB0aGF0IHRoZSBjb250ZXh0IGV4aXN0cy4gSGVuY2Ugc3VjY2Vzc2l2ZVxuICAgKiBvcGVyYXRpb25zIHZpYSB0aGlzIGNvbnRleHQgaW5zdGFuY2UgbWF5IGZhaWwgaWYgdGhlIGNvbnRleHQgZG9lcyBub3QgZXhpc3QgaW4gdGhlXG4gICAqIEVudHJ5U3RvcmVcbiAgICogcmVwb3NpdG9yeS5cbiAgICpcbiAgICogTm90ZSB0aGF0IGluIEVudHJ5U3RvcmUgZXZlcnl0aGluZyBpcyBjb25uZWN0ZWQgdG8gZW50cmllcy4gSGVuY2UgYSBjb250ZXh0IGlzIG5vdGhpbmcgZWxzZVxuICAgKiB0aGFuIGEgc3BlY2lhbCBraW5kIG9mIHJlc291cmNlIG1haW50YWluZWQgYnkgYW4gZW50cnkuIFRoaXMgZW50cnkgcHJvdmlkZXMgbWV0YWRhdGEgYWJvdXRcbiAgICogdGhlIGNvbnRleHQgYXMgd2VsbCBhcyB0aGUgZGVmYXVsdCBvd25lcnNoaXAgYW5kIGFjY2VzcyBjb250cm9sIHRoYXQgYXBwbGllcyB0byBhbGwgZW50cmllc1xuICAgKiBpbnNpZGUgb2YgdGhpcyBjb250ZXh0LlxuICAgKlxuICAgKiBUbyBnZXQgYSBob2xkIG9mIHRoZSBjb250ZXh0cyBvd24gZW50cnkgdXNlIHRoZSB7QGxpbmsgc3RvcmUvUmVzb3VyY2UjZ2V0RW50cnl9XG4gICAqIG1ldGhvZCBvbiB0aGUgY29udGV4dCAoaW5oZXJpdGVkIGZyb20gdGhlIGdlbmVyaWMge0BsaW5rIHN0b3JlL1Jlc291cmNlfSBjbGFzcy5cbiAgICpcbiAgICogQWR2YW5jZWQ6IEVudHJ5cyBjb3JyZXNwb25kaW5nIHRvIGNvbnRleHRzIGFyZSBzdG9yZWQgaW4gdGhlIHNwZWNpYWwgX2NvbnRleHRzXG4gICAqIGNvbnRleHQgd2hpY2gsIHNpbmNlIGl0IGlzIGEgY29udGV4dCwgY29udGFpbnMgaXRzIG93biBlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHRJZCAtIGlkZW50aWZpZXIgZm9yIHRoZSBjb250ZXh0IChub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgYXMgdGhlXG4gICAqIGFsaWFzL25hbWUgZm9yIHRoZSBjb250ZXh0KVxuICAgKiBAcmV0dXJuIHtzdG9yZS9Db250ZXh0fVxuICAgKi9cbiAgZ2V0Q29udGV4dEJ5SWQoY29udGV4dElkKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZ2V0Q29udGV4dCh0aGlzLCBgJHt0aGlzLl9iYXNlVVJJfV9jb250ZXh0cy9lbnRyeS8ke2NvbnRleHRJZH1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBDb250ZXh0IGluc3RhbmNlIHZpYSBpdHMgZW50cnkncyBVUkkuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZXh0RW50cnlVUkkgLSBVUkkgdG8gdGhlIGNvbnRleHQncyBlbnRyeSwgZS5nLiBiYXNlL19jb250ZXh0cy9lbnRyeS8xLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvQ29udGV4dH1cbiAgICogQHNlZSB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZSNnZXRDb250ZXh0QnlJZCBnZXRDb250ZXh0QnlJZH1cbiAgICovXG4gIGdldENvbnRleHQoY29udGV4dEVudHJ5VVJJKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZ2V0Q29udGV4dCh0aGlzLCBjb250ZXh0RW50cnlVUkkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIHBhZ2luYXRlZCBsaXN0IG9mIGFsbCBjb250ZXh0cyBpbiB0aGUgRW50cnlTdG9yZSByZXBvc2l0b3J5LlxuICAgKiBAcmV0dXJuIHtzdG9yZS9MaXN0fSAtIHRoZSBsaXN0IGNvbnRhaW5zIGVudHJpZXMgd2hpY2ggaGF2ZSBjb250ZXh0cyBhcyByZXNvdXJjZXMuXG4gICAqL1xuICBnZXRDb250ZXh0TGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5uZXdTb2xyUXVlcnkoKS5ncmFwaFR5cGUodHlwZXMuR1RfQ09OVEVYVCkubGlzdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIHBhZ2luYXRlZCBsaXN0IG9mIGFsbCB1c2VycyBhbmQgZ3JvdXBzIGluIHRoZSBFbnRyeVN0b3JlIHJlcG9zaXRvcnlcbiAgICogQHJldHVybiB7c3RvcmUvTGlzdH0gdGhlIGxpc3QgY29udGFpbnMgZW50cmllcyB0aGF0IGhhdmUgcHJpbmNpcGFscyBhcyByZXNvdXJjZXMuXG4gICAqIEB0b2RvIE1heSBpbmNsdWRlIGZvbGRlcnMgYW5kIG90aGVyIGVudHJpZXMgYXMgd2VsbC4uLlxuICAgKi9cbiAgZ2V0UHJpbmNpcGFsTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5uZXdTb2xyUXVlcnkoKS5ncmFwaFR5cGUoW3R5cGVzLkdUX1VTRVIsIHR5cGVzLkdUX0dST1VQXSkubGlzdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgZW50cnkgYWNjb3JkaW5nIHRvIGluZm9ybWF0aW9uIGluIHRoZSBwcm92aWRlZCB7QGxpbmsgc3RvcmUvUHJvdG90eXBlRW50cnl9LlxuICAgKiBUaGUgaW5mb3JtYXRpb24gc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGVudHJ5LCB3aGljaCBjb250ZXh0IGl0IHNob3VsZCByZXNpZGUgaW4sXG4gICAqIGluaXRpYWwgbWV0YWRhdGEgZXRjLiBUaGlzIG1ldGhvZCBpcyBzZWxkb20gY2FsbGVkIGV4cGxpY2l0bHksIGluc3RlYWQgaXQgaXMgY2FsbGVkXG4gICAqIGluZGlyZWN0bHkgdmlhIHRoZSB7QGxpbmsgc3RvcmUvUHJvdG90eXBlRW50cnkjY29tbWl0fSBtZXRob2QuIEUuZy46XG4gICAqXG4gICAqICAgICBjb250ZXh0Lm5ld0VudHJ5KCkuY29tbWl0KCkudGhlbihmdW5jdGlvbihuZXdseUNyZWF0ZWRFbnRyeSkgey4uLn1cbiAgICpcbiAgICogQHBhcmFtIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX0gcHJvdG90eXBlRW50cnkgLSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZW50cnkgdG8gY3JlYXRlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAc2VlIHN0b3JlL1Byb3RvdHlwZUVudHJ5I2NvbW1pdFxuICAgKiBAc2VlIHN0b3JlL0VudHJ5U3RvcmUjbmV3Q29udGV4dFxuICAgKiBAc2VlIHN0b3JlL0VudHJ5U3RvcmUjbmV3VXNlclxuICAgKiBAc2VlIHN0b3JlL0VudHJ5U3RvcmUjbmV3R3JvdXBcbiAgICogQHNlZSBzdG9yZS9Db250ZXh0I25ld0VudHJ5XG4gICAqIEBzZWUgc3RvcmUvQ29udGV4dCNuZXdMaW5rXG4gICAqIEBzZWUgc3RvcmUvQ29udGV4dCNuZXdMaW5rUmVmXG4gICAqIEBzZWUgc3RvcmUvQ29udGV4dCNuZXdSZWZcbiAgICogQHNlZSBzdG9yZS9Db250ZXh0I25ld0xpc3RcbiAgICogQHNlZSBzdG9yZS9Db250ZXh0I25ld0dyYXBoXG4gICAqIEBzZWUgc3RvcmUvQ29udGV4dCNuZXdTdHJpbmdcbiAgICovXG4gIGNyZWF0ZUVudHJ5KHByb3RvdHlwZUVudHJ5KSB7XG4gICAgY29uc3QgcG9zdFVSSSA9IGZhY3RvcnkuZ2V0RW50cnlDcmVhdGVVUkkocHJvdG90eXBlRW50cnksIHByb3RvdHlwZUVudHJ5LmdldFBhcmVudExpc3QoKSk7XG4gICAgY29uc3QgcG9zdFBhcmFtcyA9IGZhY3RvcnkuZ2V0RW50cnlDcmVhdGVQb3N0RGF0YShwcm90b3R5cGVFbnRyeSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlQXN5bmModGhpcy5fcmVzdC5jcmVhdGUocG9zdFVSSSwgcG9zdFBhcmFtcykudGhlbigoZXVyaSkgPT4ge1xuICAgICAgLy8gdmFyIGV1cmkgPSBmYWN0b3J5LmdldFVSSUZyb21DcmVhdGVkKGRhdGEsIHByb3RvdHlwZUVudHJ5LmdldENvbnRleHQoKSk7XG4gICAgICBjb25zdCBwbGlzdCA9IHByb3RvdHlwZUVudHJ5LmdldFBhcmVudExpc3QoKTtcbiAgICAgIGlmIChwbGlzdCAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHBsaXN0LmdldFJlc291cmNlKHRydWUpO1xuICAgICAgICBpZiAocmVzICE9IG51bGwgJiYgcmVzLm5lZWRSZWZyZXNoKSB7XG4gICAgICAgICAgcGxpc3QuZ2V0UmVzb3VyY2UodHJ1ZSkubmVlZFJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RW50cnkoZXVyaSk7XG4gICAgfSksICdjcmVhdGVFbnRyeScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgUHJvdG90eXBlRW50cnkgZm9yIGNyZWF0aW5nIGEgbmV3IGNvbnRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gY29udGV4dE5hbWUgLSBvcHRpb25hbCBuYW1lIGZvciB0aGUgY29udGV4dCwgY2FuIGJlIGNoYW5nZWQgbGF0ZXIsXG4gICAqIG11c3QgYmUgdW5pcXVlIGluIHRoZSBfcHJpbmNpcGFscyBjb250ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaWQgLSBvcHRpb25hbCByZXF1ZXN0ZWQgaWRlbnRpZmllciAoZW50cnlJZCkgZm9yIHRoZSBjb250ZXh0LFxuICAgKiBjYW5ub3QgYmUgY2hhbmdlZCBsYXRlciwgbXVzdCBiZSB1bmlxdWUgaW4gdGhlIF9wcmluY2lwYWxzIGNvbnRleHRcbiAgICogQHJldHVybnMge3N0b3JlL1Byb3RvdHlwZUVudHJ5fVxuICAgKi9cbiAgbmV3Q29udGV4dChjb250ZXh0TmFtZSwgaWQpIHtcbiAgICBjb25zdCBfY29udGV4dHMgPSBmYWN0b3J5LmdldENvbnRleHQodGhpcywgYCR7dGhpcy5fYmFzZVVSSX1fY29udGV4dHMvZW50cnkvX2NvbnRleHRzYCk7XG4gICAgY29uc3QgcHJvdG90eXBlRW50cnkgPSBuZXcgUHJvdG90eXBlRW50cnkoX2NvbnRleHRzLCBpZCkuc2V0R3JhcGhUeXBlKHR5cGVzLkdUX0NPTlRFWFQpO1xuICAgIGlmIChjb250ZXh0TmFtZSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBlaSA9IHByb3RvdHlwZUVudHJ5LmdldEVudHJ5SW5mbygpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2UoZWkuZ2V0RW50cnlVUkkoKSwgZWkuZ2V0UmVzb3VyY2VVUkkoKSwgdGhpcyk7XG4gICAgICByZXNvdXJjZS5fdXBkYXRlKHsgbmFtZTogY29udGV4dE5hbWUgfSk7XG4gICAgICBwcm90b3R5cGVFbnRyeS5fcmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3RvdHlwZUVudHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBjcmVhdGVHcm91cEFuZENvbnRleHQobmFtZSkge1xuICAgIGxldCB1cmkgPSBgJHt0aGlzLl9iYXNlVVJJfV9wcmluY2lwYWxzL2dyb3Vwc2A7XG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgdXJpICs9IGA/bmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudChuYW1lKX1gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVBc3luYyh0aGlzLl9yZXN0LmNyZWF0ZSh1cmkpLnRoZW4obG9jYXRpb24gPT4gdGhpcy5nZXRFbnRyeShsb2NhdGlvbikpLCAnY3JlYXRlR3JvdXBBbmRDb250ZXh0Jyk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBQcm90b3R5cGVFbnRyeSBmb3IgY3JlYXRpbmcgYSBuZXcgdXNlci5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSB1c2VybmFtZSAtIHRoZSBuYW1lIHRoZSB1c2VyIHdpbGwgdXNlIHRvIGF1dGhlbnRpY2F0ZSBoaW1zZWxmXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGFzc3dvcmQgLSB0aGUgcGFzc3dvcmQgdGhlIHVzZXIgd2lsbCB1c2UgdG8gYXV0aGVudGljYXRlIGhpbXNlbGZcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBob21lQ29udGV4dCAtIGEgc3BlY2lmaWMgY29udGV4dCB0aGUgdXNlciB3aWxsIGNvbnNpZGVyIGhpcyBvd24gaG9tZVxuICAgKiBAcGFyYW0ge3N0cmluZz19IGlkIC0gcmVxdWVzdGVkIGlkZW50aWZpZXIgZm9yIHRoZSB1c2VyXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX1cbiAgICovXG4gIG5ld1VzZXIodXNlcm5hbWUsIHBhc3N3b3JkLCBob21lQ29udGV4dCwgaWQpIHtcbiAgICBjb25zdCBfcHJpbmNpcGFscyA9IGZhY3RvcnkuZ2V0Q29udGV4dCh0aGlzLCBgJHt0aGlzLl9iYXNlVVJJfV9jb250ZXh0cy9lbnRyeS9fcHJpbmNpcGFsc2ApO1xuICAgIGNvbnN0IHByb3RvdHlwZUVudHJ5ID0gbmV3IFByb3RvdHlwZUVudHJ5KF9wcmluY2lwYWxzLCBpZCkuc2V0R3JhcGhUeXBlKHR5cGVzLkdUX1VTRVIpO1xuICAgIGNvbnN0IGVudHJ5SW5mbyA9IHByb3RvdHlwZUVudHJ5LmdldEVudHJ5SW5mbygpO1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBpZiAodXNlcm5hbWUgIT0gbnVsbCkge1xuICAgICAgZGF0YS5uYW1lID0gdXNlcm5hbWU7XG4gICAgfVxuICAgIGlmIChwYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICBkYXRhLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgfVxuICAgIGlmIChob21lQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICBkYXRhLmhvbWVjb250ZXh0ID0gaG9tZUNvbnRleHQ7XG4gICAgfVxuICAgIHByb3RvdHlwZUVudHJ5Ll9yZXNvdXJjZSA9IG5ldyBVc2VyKGVudHJ5SW5mby5nZXRFbnRyeVVSSSgpLCBlbnRyeUluZm8uZ2V0UmVzb3VyY2VVUkkoKSwgdGhpcywgZGF0YSk7XG4gICAgcmV0dXJuIHByb3RvdHlwZUVudHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gZ3JvdXBOYW1lIC0gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIGdyb3VwLCBjYW4gYmUgY2hhbmdlZCBsYXRlcixcbiAgICogbXVzdCBiZSB1bmlxdWUgaW4gdGhlIF9wcmluY2lwYWxzIGNvbnRleHRcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBpZCAtIG9wdGlvbmFsIHJlcXVlc3RlZCBpZGVudGlmaWVyIChlbnRyeUlkKSBmb3IgdGhlIGdyb3VwLFxuICAgKiBjYW5ub3QgYmUgY2hhbmdlZCBsYXRlciwgbXVzdCBiZSB1bmlxdWUgaW4gdGhlIF9wcmluY2lwYWxzIGNvbnRleHRcbiAgICogQHJldHVybnMge3N0b3JlL1Byb3RvdHlwZUVudHJ5fVxuICAgKi9cbiAgbmV3R3JvdXAoZ3JvdXBOYW1lLCBpZCkge1xuICAgIGNvbnN0IF9wcmluY2lwYWxzID0gZmFjdG9yeS5nZXRDb250ZXh0KHRoaXMsIGAke3RoaXMuX2Jhc2VVUkl9X2NvbnRleHRzL2VudHJ5L19wcmluY2lwYWxzYCk7XG4gICAgY29uc3QgcHJvdG90eXBlRW50cnkgPSBuZXcgUHJvdG90eXBlRW50cnkoX3ByaW5jaXBhbHMsIGlkKS5zZXRHcmFwaFR5cGUodHlwZXMuR1RfR1JPVVApO1xuICAgIGlmIChncm91cE5hbWUgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZWkgPSBwcm90b3R5cGVFbnRyeS5nZXRFbnRyeUluZm8oKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKGVpLmdldEVudHJ5VVJJKCksIGVpLmdldFJlc291cmNlVVJJKCksIHRoaXMpO1xuICAgICAgcmVzb3VyY2UuX3VwZGF0ZSh7IG5hbWU6IGdyb3VwTmFtZSB9KTtcbiAgICAgIHByb3RvdHlwZUVudHJ5Ll9yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdG90eXBlRW50cnk7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSBhbiBlbnRyeSBmcm9tIG9uZSBsaXN0IHRvIGFub3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnl9IGVudHJ5IC0gZW50cnkgdG8gbW92ZVxuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5fSBmcm9tTGlzdCAtIHNvdXJjZSBsaXN0IHdoZXJlIHRoZSBlbnRyeSBpcyBjdXJyZW50bHkgcmVzaWRpbmcuXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnl9IHRvTGlzdCAtIGRlc3RpbmF0aW9uIGxpc3Qgd2hlcmUgdGhlIGVudHJ5IGlzIHN1cHBvc2VkIHRvIGVuZCB1cC5cbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBtb3ZlRW50cnkoZW50cnksIGZyb21MaXN0LCB0b0xpc3QpIHtcbiAgICBjb25zdCB1cmkgPSBmYWN0b3J5LmdldE1vdmVVUkkoZW50cnksIGZyb21MaXN0LCB0b0xpc3QsIHRoaXMuX2Jhc2VVUkkpO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZUFzeW5jKHRoaXMuZ2V0UkVTVCgpLnBvc3QodXJpLCAnJyksICdtb3ZlRW50cnknKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBkYXRhIHZpYSB0aGUgRW50cnlTdG9yZSByZXBvc2l0b3J5J3Mgb3duIHByb3h5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJpIGluZGljYXRlcyB0aGUgcmVzb3VyY2UgdG8gbG9hZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdEhpbnQgaW5kaWNhdGVzIHRoYXQgeW91IHdhbnQgZGF0YSBiYWNrIGluIHRoZSBmb3JtYXQgc3BlY2lmaWVkXG4gICAqIChlLmcuIGJ5IHNwZWNpZml5aW5nIGEgc3VpdGFibGUgYWNjZXB0IGhlYWRlcikuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgbG9hZFZpYVByb3h5KHVyaSwgZm9ybWF0SGludCkge1xuICAgIGNvbnN0IHVybCA9IGZhY3RvcnkuZ2V0UHJveHlVUkkodGhpcy5fYmFzZVVSSSwgdXJpKTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVBc3luYyh0aGlzLmdldFJFU1QoKS5nZXQodXJsLCBmb3JtYXRIaW50LCB0cnVlKSwgJ2xvYWRWaWFQcm94eScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2hlcyBhIGZpbGUgdG8gdGhlIHNlcnZlciBhbmQgZ2V0cyB0aGUgcmVzdWx0IGJhY2sgaW1tZWRpYXRlbHkuXG4gICAqIFNpbmNlIGJyb3dzZXIgZW52aXJvbm1lbnRzIGNhbm5vdCBhY2Nlc3MgdGhlIGxvY2FsIGZpbGVzeXN0ZW0sIHRoZSBvbmx5IHdheSB0byBnZXQgdGhlXG4gICAqIGNvbnRlbnRzIG9mIGEgZmlsZSBpcyB0byBcInVwbG9hZFwiIGl0IGFuZCBnZXQgdGhlIGNvbnRlbnRzIGJhY2sgZnJvbSB0aGUgc2VydmVyLlxuICAgKiBFbnRyeVN0b3JlIHByb3ZpZGVzIHRoZSBcImVjaG9cIiByZXNvdXJjZSB0byBwcm92aWRlIHRoaXMgd29ya2Fyb3VuZC5cbiAgICpcbiAgICogSW4gYSBicm93c2VyIGVudmlyb25tZW50IGEgZmlsZSBpcyByZXByZXNlbnRlZCB2aWEgYW4gaW5wdXQgZWxlbWVudCB3aGljaCByZWZlcmVuY2VzXG4gICAqIHRoZSBmaWxlIHRvIGJlIHVwbG9hZGVkIHZpYSBpdHMgdmFsdWUgYXR0cmlidXRlLiBFLmcuOlxuICAgKlxuICAgKiAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBuYW1lPVwidXBsb2FkRmlsZVwiLz5cbiAgICpcbiAgICogRHVyaW5nIHRoZSB1cGxvYWRpbmcgcHJvY2VzcyB0aGUgaW5wdXQgdGFnIHdpbGwgYmUgbW92ZWQgdGVtcG9yYXJpbHkgaW4gdGhlIERPTSB0cmVlLFxuICAgKiBpdCB3aWxsIGJlIHJlc3RvcmVkIHRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvbiBhZnRlcndhcmRzIChib3RoIHVwb24gc3VjY2VzcyBhbmQgZmFpbHVyZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7bm9kZX0gZGF0YSAtIGlucHV0IGVsZW1lbnQgY29ycmVzcG9uZGluZyB0byB0aGUgZmlsZSB0byB1cGxvYWQgKGVjaG8pLlxuICAgKiBAcmV0dXJucyB7eGhyUHJvbWlzZX1cbiAgICovXG4gIGVjaG9GaWxlKGRhdGEpIHtcbiAgICAvLyBub2luc3BlY3Rpb24gQW1kTW9kdWxlc0RlcGVuZGVuY2llc1xuICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBOb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBuZWVkcyB0byBiZSBhbiBpbnB1dCBlbGVtZW50LicpO1xuICAgIH1cbiAgICBpZiAoZGF0YS5uYW1lID09IG51bGwgfHwgZGF0YS5uYW1lID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsdXJlLCBjYW5ub3QgdXBsb2FkIHJlc291cmNlIGZyb20gaW5wdXQgZWxlbWVudCB1bmxlc3MgYSBuYW1lJyArXG4gICAgICAgICcgYXR0cmlidXRlIGlzIHByb3ZpZGVkLicpO1xuICAgIH1cblxuICAgIC8vIFRPRE8gRW50cnlTdG9yZSBzaG91bGQgcmV0dXJuIHRoZSBhY3R1YWwgcmVzcG9uc2Ugd2l0aG91dCBIVE1MIHdyYXBwaW5nXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlQXN5bmModGhpcy5nZXRSRVNUKCkucHV0RmlsZShgJHt0aGlzLmdldEJhc2VVUkkoKX1lY2hvYCwgZGF0YSwgJ3RleHQnKVxuICAgICAgLnRoZW4oKHJhd0RhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByYXdEYXRhLnRleHQ7XG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHJlc3BvbnNlLmluZGV4T2YoJ1xcbicpOyAvLyB0aGlzIGNoZWNrcyBpZlxuICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHBhcnNlSW50KHJlc3BvbnNlLnN1YnN0cigwLCBpZHgpLnNwbGl0KCc6JylbMV0sIDEwKTtcbiAgICAgICAgICBpZiAoc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgSFRUUCBzdGF0dXMgY29kZTogJHtzdGF0dXN9YCk7XG4gICAgICAgICAgICBlcnIuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHRleHRBcmVhVmFsdWUgPSByZXNwb25zZS5zdWJzdHIoaWR4ICsgMSkucmVwbGFjZSgnPC90ZXh0YXJlYT4nLCAnJyk7IC8vIFRPRE8gcmVtb3ZlIHdoZW4gRW50cnlTdG9yZSBpcyBmaXhlZFxuXG4gICAgICAgICAgcmV0dXJuIGhlLmRlY29kZSh0ZXh0QXJlYVZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZTsgLy8gZW1wdHlcbiAgICAgIH0pLCAnZWNob0ZpbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtaW5nIHNlYXJjaGVzIGFnYWluc3QgYW4gRW50cnlTdG9yZSByZXBvc2l0b3J5IGlzIGFjaGlldmVkIGJ5IGNyZWF0aW5nIGFcbiAgICoge0BsaW5rIHN0b3JlL1NlYXJjaExpc3R9IHdoaWNoIGlzIHNpbWlsYXIgdG8gYSByZWd1bGFyIHtAbGluayBzdG9yZS9MaXN0fS5cbiAgICogRnJvbSB0aGlzIGxpc3QgaXQgaXMgcG9zc2libGUgdG8gZ2V0IHBhZ2luYXRlZCByZXN1bHRzIGluIGZvcm0gb2YgbWF0Y2hpbmcgZW50cmllcy5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICAgICB2YXIgcGVyc29uVHlwZSA9IFwiaHR0cDovL3htbG5zLmNvbS9mb2FmLzAuMS9QZXJzb25cIjtcbiAgICogICAgIHZhciBzZWFyY2hMaXN0ID0gZW50cnlzdG9yZS5uZXdTb2xyUXVlcnkoKS5yZGZUeXBlKHBlcnNvblR5cGUpLmxpc3QoKTtcbiAgICogICAgIHNlYXJjaExpc3Quc2V0TGltaXQoMjApLmdldEVudHJpZXMoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHsuLi59KTtcbiAgICpcbiAgICogQHJldHVybnMge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIG5ld1NvbHJRdWVyeSgpIHtcbiAgICByZXR1cm4gbmV3IFNvbHJRdWVyeSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rICNuZXdTb2xyUXVlcnl9IGluc3RlYWQuXG4gICAqL1xuICBjcmVhdGVTZWFyY2hMaXN0KHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuY3JlYXRlU2VhcmNoTGlzdCh0aGlzLCBxdWVyeSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBtZXRhZGF0YSBVUkkgZnJvbSB0aGUgaWQgZm9yIHRoZSBjb250ZXh0IGFuZCB0aGUgc3BlY2lmaWMgZW50cnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0SWQgLSBhbiBpZGVudGlmaWVyIGZvciB0aGUgY29udGV4dCB0aGUgZW50cnkgYmVsb25ncyB0b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50cnlJZCAtIGFuIGlkZW50aWZpZXIgZm9yIHRoZSBlbnRyeVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIGFuIGVudHJ5IFVSSVxuICAgKi9cbiAgZ2V0TWV0YWRhdGFVUkkoY29udGV4dElkLCBlbnRyeUlkKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZ2V0TWV0YWRhdGFVUkkodGhpcywgY29udGV4dElkLCBlbnRyeUlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGFuIGVudHJ5IFVSSSBmcm9tIHRoZSBpZCBmb3IgdGhlIGNvbnRleHQgYW5kIHRoZSBzcGVjaWZpYyBlbnRyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHRJZCAtIGFuIGlkZW50aWZpZXIgZm9yIHRoZSBjb250ZXh0IHRoZSBlbnRyeSBiZWxvbmdzIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRyeUlkIC0gYW4gaWRlbnRpZmllciBmb3IgdGhlIGVudHJ5XG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gYW4gZW50cnkgVVJJXG4gICAqL1xuICBnZXRFbnRyeVVSSShjb250ZXh0SWQsIGVudHJ5SWQpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5nZXRFbnRyeVVSSSh0aGlzLCBjb250ZXh0SWQsIGVudHJ5SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYW4gZW50cnkgVVJJIGZyb20gYSBub3JtYWwgcmVwb3NpdG9yeSBVUkksIGUuZy4gYW55IFVSSSBmcm9tIHdoaWNoIGlzIHBvc3NpYmxlXG4gICAqIHRvIGRlZHVjZSBhIGNvbnRleHRJZCBhbmQgYW4gZW50cnlJZC4gRXF1aXZhbGVudCB0byBjYWxsaW5nOlxuICAgKiBlcy5nZXRFbnRyeVVSSShlcy5nZXRDb250ZXh0SWQodXJpKSwgZXMuZ2V0RW50cnlJZCh1cmkpKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJpIC0gYSBVUkkgZm9yIHRoZSBlbnRyeSwgY2FuIGJlIGEgZW50cnlVUkkgKG9idmlvdXNseSksIHJlc291cmNlVVJJXG4gICAqIChpZiBsb2NhbCksIG1ldGFkYXRhVVJJLCBvciByZWxhdGlvbnNVUkkuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gYW4gZW50cnkgVVJJXG4gICAqL1xuICBnZXRFbnRyeVVSSUZyb21VUkkodXJpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZ2V0RW50cnlVUklGcm9tVVJJKHRoaXMsIHVyaSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBlbnRyeSByZXNvdXJjZSBVUkkgKGxvY2FsIFVSSSwgbm90IGEgbGluayBvYnZpb3VzbHkpIGZyb20gdGhlIGlkIGZvciB0aGVcbiAgICogY29udGV4dCBhbmQgdGhlIHNwZWNpZmljIGVudHJ5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dElkIC0gYW4gaWRlbnRpZmllciBmb3IgdGhlIGNvbnRleHQgdGhlIHJlc291cmNlIGJlbG9uZ3MgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5SWQgLSBhbiBpZGVudGlmaWVyIGZvciB0aGUgZW50cnkgdGhlIHJlc291cmNlIGJlbG9uZ3MgdG9cbiAgICogQHJldHVybnMge1N0cmluZ30gYSByZXNvdXJjZSBVUklcbiAgICovXG4gIGdldFJlc291cmNlVVJJKGNvbnRleHRJZCwgZW50cnlJZCkge1xuICAgIHJldHVybiBmYWN0b3J5LmdldFJlc291cmNlVVJJKHRoaXMsIGNvbnRleHRJZCwgZW50cnlJZCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgVVJJIG9mIHRoZSBFbnRyeVN0b3JlIHJlcG9zaXRvcnkgd2UgaGF2ZSBjb25uZWN0ZWQgdG8uXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBnZXRCYXNlVVJJKCkge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVVJJO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBlbnRyeSBpZCBvZiB0aGlzIGVudHJ5LCByZXNvdXJjZSBvciBtZXRhZGF0YSB1cmkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmlcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldEVudHJ5SWQodXJpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZ2V0RW50cnlJZCh1cmksIHRoaXMuZ2V0QmFzZVVSSSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGV4dCBpZCBvZiB0aGlzIGVudHJ5LCByZXNvdXJjZSBvciBtZXRhZGF0YSB1cmkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmlcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldENvbnRleHRJZCh1cmkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5nZXRDb250ZXh0SWQodXJpLCB0aGlzLmdldEJhc2VVUkkoKSk7XG4gIH1cblxuICAvKipcbiAgICogIFRvIGdldCBzdGF0dXMgcmVzb3VyY2VcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBnZXRTdGF0dXMoKSB7XG4gICAgY29uc3QgdXJpID0gYCR7dGhpcy5fYmFzZVVSSX1tYW5hZ2VtZW50L3N0YXR1cz9leHRlbmRlZGA7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlQXN5bmModGhpcy5nZXRSRVNUKCkuZ2V0KHVyaSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjYWNoZSB3aGVyZSBhbGwgZW50cmllcyBhcmUgY2FjaGVkIGFmdGVyIGxvYWRpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdG9yZS9DYWNoZX1cbiAgICovXG4gIGdldENhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbG9hZGluZyBtZWNoYW5pc20gYXJlIHBlcmZvcm1lZCB2aWEgUkVTVCBjYWxscywgdGhpcyBSRVNUIG1vZHVsZSBjYW4gYmVcbiAgICogdXNlZCBmb3IgZG9pbmcgbWFudWFsIGxvb2t1cHMgb3V0c2lkZSBvZiB0aGUgc2NvcGUgb2YgdGhpcyBBUEkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdG9yZS9SZXN0fVxuICAgKi9cbiAgZ2V0UkVTVCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzdDtcbiAgfVxuXG4gIC8vPSA9PT09PT09PT09PT09Tm9uLXB1YmxpYyBtZXRob2RzPT09PT09PT09PT09PT1cblxuICAvKipcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGdldENhY2hlZENvbnRleHRzSWR4KCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB2ZXJzaW9uIG9mIEVudHJ5U3RvcmUgcmVwb3NpdG9yeSwgdGhlIGphdmFzY3JpcHQgQVBJLFxuICAgKiBzdGF0dXMgb2Ygc2VydmljZXMgZXRjLlxuICAgKiBAdG9kbyBOZWVkcyBzdXBwb3J0IGZyb20gRW50cnlTdG9yZSBSRVNUIEFQSVxuICAgKiBAdG9kbyBEb2N1bWVudCBwcm9taXNlXG4gICAqL1xuICBzdGF0aWMgaW5mbygpIHtcbiAgICBjb25zdCBwYWNrYWdlSlNPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuICAgIHJldHVybiB7IHZlcnNpb246IHBhY2thZ2VKU09OLnZlcnNpb24gfTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7IiwiXG5jb25zdCB1dGlscyA9IHt9O1xuXG51dGlscy5nZXRSZWxhdGVkVG9FbnRyeVVSSXMgPSAoZnJvbUVudHJ5KSA9PiB7XG4gIGNvbnN0IGVzID0gZnJvbUVudHJ5LmdldEVudHJ5U3RvcmUoKTtcbiAgY29uc3QgYmFzZSA9IGZyb21FbnRyeS5nZXRFbnRyeVN0b3JlKCkuZ2V0QmFzZVVSSSgpO1xuICBjb25zdCByZWxhdGVkRW50cnlVUklzID0gW107XG4gIGZyb21FbnRyeS5nZXRNZXRhZGF0YSgpLmZpbmQoKS5mb3JFYWNoKChzdG10KSA9PiB7XG4gICAgaWYgKHN0bXQuZ2V0VHlwZSgpID09PSAndXJpJykge1xuICAgICAgY29uc3Qgb2JqID0gc3RtdC5nZXRWYWx1ZSgpO1xuICAgICAgaWYgKG9iai5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHVyaSA9IGVzLmdldEVudHJ5VVJJKGVzLmdldENvbnRleHRJZChvYmopLCBlcy5nZXRFbnRyeUlkKG9iaikpO1xuICAgICAgICByZWxhdGVkRW50cnlVUklzLnB1c2godXJpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVsYXRlZEVudHJ5VVJJcztcbn07XG5cbnV0aWxzLmdldFJlbGF0ZWRUb0VudHJpZXMgPSAoZnJvbUVudHJ5KSA9PiB7XG4gIGNvbnN0IGVzID0gZnJvbUVudHJ5LmdldEVudHJ5U3RvcmUoKTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHV0aWxzLmdldFJlbGF0ZWRUb0VudHJ5VVJJcyhmcm9tRW50cnkpLm1hcCh1cmkgPT4gZXMuZ2V0RW50cnkodXJpKSkpO1xufTtcblxudXRpbHMucmVtb3ZlID0gKGVudHJ5KSA9PiB7XG4gIGNvbnN0IGVzID0gZW50cnkuZ2V0RW50cnlTdG9yZSgpO1xuICBjb25zdCBjYWNoZSA9IGVzLmdldENhY2hlKCk7XG4gIGNvbnN0IHJlZlN0bXRzID0gZW50cnkuZ2V0UmVmZXJyZXJzR3JhcGgoKS5maW5kKCk7XG4gIGNvbnN0IGVudHJ5UHJvbWlzZXMgPSByZWZTdG10cy5tYXAoKHN0bXQpID0+IHtcbiAgICBjb25zdCBzdWJqID0gc3RtdC5nZXRTdWJqZWN0KCk7XG4gICAgY29uc3QgZXVyaSA9IGVzLmdldEVudHJ5VVJJKGVzLmdldENvbnRleHRJZChzdWJqKSwgZXMuZ2V0RW50cnlJZChzdWJqKSk7XG4gICAgcmV0dXJuIGVzLmdldEVudHJ5KGV1cmkpO1xuICB9KTtcbiAgcmV0dXJuIGVudHJ5LmRlbCgpLnRoZW4oKCkgPT4gUHJvbWlzZS5hbGwoZW50cnlQcm9taXNlcykudGhlbigoYXJyKSA9PiB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSByZWZTdG10cy5tYXAoKHN0bXQsIGlkeCkgPT4ge1xuICAgICAgY29uc3QgbWQgPSBhcnJbaWR4XS5nZXRNZXRhZGF0YSgpO1xuICAgICAgbWQucmVtb3ZlKHN0bXQpO1xuICAgICAgcmV0dXJuIGFycltpZHhdLmNvbW1pdE1ldGFkYXRhKCk7XG4gICAgfSk7XG4gICAgY29uc3QgdXJpcyA9IHV0aWxzLmdldFJlbGF0ZWRUb0VudHJ5VVJJcyhlbnRyeSk7XG4gICAgdXJpcy5mb3JFYWNoKCh1cmkpID0+IHtcbiAgICAgIGNvbnN0IGUgPSBjYWNoZS5nZXQodXJpKTtcbiAgICAgIGlmIChlICE9IG51bGwpIHtcbiAgICAgICAgZS5zZXRSZWZyZXNoTmVlZGVkKCk7XG4gICAgICAgIHByb21pc2VzLnB1c2goZS5yZWZyZXNoKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH0pKTtcbn07XG5cbnV0aWxzLmFkZFJlbGF0aW9uID0gKGZyb21FbnRyeSwgcHJvcGVydHksIHRvRW50cnkpID0+IHtcbiAgZnJvbUVudHJ5LmdldE1ldGFkYXRhKCkuYWRkKGZyb21FbnRyeS5nZXRSZXNvdXJjZVVSSSgpLCBwcm9wZXJ0eSwgdG9FbnRyeS5nZXRSZXNvdXJjZVVSSSgpKTtcbiAgcmV0dXJuIGZyb21FbnRyeS5jb21taXRNZXRhZGF0YSgpLnRoZW4oKCkgPT4ge1xuICAgIHRvRW50cnkuc2V0UmVmcmVzaE5lZWRlZCgpO1xuICAgIHJldHVybiB0b0VudHJ5LnJlZnJlc2goKTtcbiAgfSk7XG59O1xuXG51dGlscy5yZW1vdmVSZWxhdGlvbiA9IChmcm9tRW50cnksIHByb3BlcnR5LCB0b0VudHJ5KSA9PiB7XG4gIGZyb21FbnRyeS5nZXRNZXRhZGF0YSgpLnJlbW92ZShmcm9tRW50cnkuZ2V0UmVzb3VyY2VVUkkoKSwgcHJvcGVydHksIHsgdHlwZTogJ3VyaScsIHZhbHVlOiB0b0VudHJ5LmdldFJlc291cmNlVVJJKCkgfSk7XG4gIHJldHVybiBmcm9tRW50cnkuY29tbWl0TWV0YWRhdGEoKS50aGVuKCgpID0+IHtcbiAgICB0b0VudHJ5LnNldFJlZnJlc2hOZWVkZWQoKTtcbiAgICByZXR1cm4gdG9FbnRyeS5yZWZyZXNoKCk7XG4gIH0pO1xufTtcblxuLy8gUmVsaWVzIG9uIHRoZXJlIG5vdCBiZWluZyBhIHdpbmRvdy5kb2N1bWVudCBpbiBOb2RlXG4vLyBCYXNlZCBvZmYgb2Y6IGh0dHBzOi8vZ2l0aHViLmNvbS9mbGV4ZGluZXNoL2Jyb3dzZXItb3Itbm9kZS9ibG9iL21hc3Rlci9zcmMvaW5kZXguanNcbmNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xudXRpbHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuY29uc3QgaXNOb2RlID0gKCkgPT4gdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJztcbnV0aWxzLmlzTm9kZSA9IGlzTm9kZTtcbmNvbnN0IGlzSUUgPSAoKSA9PiB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL01TSUUvKSAhPT0gbnVsbDtcbnV0aWxzLmlzSUUgPSBpc0lFO1xuXG5leHBvcnQge1xuICB1dGlscyxcbiAgaXNCcm93c2VyLFxuICBpc05vZGUsXG4gIGlzSUUsXG59O1xuZXhwb3J0IGRlZmF1bHQgdXRpbHM7XG4iLCJpbXBvcnQgUmVzb3VyY2UgZnJvbSAnLi9SZXNvdXJjZSc7XG5pbXBvcnQgZmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuXG4vKipcbiAqIExpc3QgaXMgYSBjb250YWluZXIgZm9yIG90aGVyIGVudHJpZXMgaW4gdGhlIHNhbWUgY29udGV4dC5cbiAqIEEgc2luZ2xlIGVudHJ5IG1heSBhcHBlYXIgaW4gbXVsdGlwbGUgbGlzdHMgKG11bHRpcGxlIHBhcmVudCBsaXN0cykgdW5sZXNzIGlmIGl0IGlzXG4gKiBhIGxpc3QgaXRzZWxmLiBUbyBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzIGxpc3QgZW50cmllcyBhcmUgb25seSBhbGxvd2VkIHRvIGFwcGVhclxuICogaW4gb25lIHBhcmVudCBsaXN0LlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL0xpc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdCBleHRlbmRzIFJlc291cmNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRyeVVSSSAtIFVSSSB0byBhbiBlbnRyeSB3aGVyZSB0aGlzIHJlc291cmNlIGlzIGNvbnRhaW5lZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlVVJJIC0gVVJJIHRvIHRoZSByZXNvdXJjZS5cbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeVN0b3JlfSBlbnRyeVN0b3JlIC0gdGhlIEFQSSdzIHJlcG9zaXRvcnkgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnRyeVVSSSwgcmVzb3VyY2VVUkksIGVudHJ5U3RvcmUpIHtcbiAgICBzdXBlcihlbnRyeVVSSSwgcmVzb3VyY2VVUkksIGVudHJ5U3RvcmUpO1xuICAgIHRoaXMuX2NhY2hlID0gZW50cnlTdG9yZS5nZXRDYWNoZSgpO1xuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIGVudHJ5IFVSSXNcbiAgICAgKiBAdHlwZSB7QXJyYXkuPHN0cmluZz59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zb3J0ZWRDaGlsZHJlbiA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbWF4IGFtb3VudCBvZiBlbnRyaWVzIHRvIGluY2x1ZGUgaW4gZWFjaCBwYWdlIGR1cmluZyBwYWdpbmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGxpbWl0XG4gICAqIEByZXR1cm5zIHtzdG9yZS9MaXN0fSBhbGxvd3MgY2hhaW5pbmcgb2Ygc2V0LW9wZXJhdGlvbnMuXG4gICAqL1xuICBzZXRMaW1pdChsaW1pdCkge1xuICAgIHRoaXMuX2xpbWl0ID0gbGltaXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtYXggYW1vdW50IG9mIGVudHJpZXMgdG8gaW5jbHVkZSBpbiBlYWNoIHBhZ2UgZHVyaW5nIHBhZ2luYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtpbnRlZ2VyfVxuICAgKi9cbiAgZ2V0TGltaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpbWl0IHx8IGZhY3RvcnkuZ2V0RGVmYXVsdExpbWl0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc29ydCBvcmRlciB3aGVuIGxvYWRpbmcgZW50cmllcyBjb250YWluZWQgaW4gdGhpcyBsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc29ydFBhcmFtcyAtIHNhbWUgb2JqZWN0IHN0cnVjdHVyZSBhcyB0aGUgc29ydCBwYXJhbWV0ZXIgaW5cbiAgICogb3B0aW9uYWxMb2FkUGFyYW1ldGVycyBpbiB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZSNnZXRFbnRyeX0gbWV0aG9kLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvTGlzdH0gYWxsb3dzIGNoYWluaW5nIG9mIHNldC1vcGVyYXRpb25zLlxuICAgKi9cbiAgc2V0U29ydChzb3J0UGFyYW1zKSB7XG4gICAgdGhpcy5fY2xlYXJTb3J0ZWRFbnRyaWVzKCk7XG4gICAgdGhpcy5fc29ydFBhcmFtcyA9IHNvcnRQYXJhbXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGFuIGFycmF5IG9mIGVudHJpZXMgY29udGFpbmVkIGluIHRoaXMgbGlzdCBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBhbmRcbiAgICogcGFnaW5hdGlvbiBzZXR0aW5ncy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgLSB0aGUgcGFnZSB0byByZXF1ZXN0IGFuIGFycmF5IG9mIGVudHJpZXMgZm9yLFxuICAgKiBmaXJzdCBwYWdlIGlzIG51bWJlcmVkIDAuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdG9yZS9FbnRyeVtdPn0gdGhlIHByb21pc2Ugd2lsbCByZXR1cm4gYW4gZW50cnktYXJyYXkuXG4gICAqL1xuICBnZXRFbnRyaWVzKHBhZ2UgPSAwKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuX2dldEVudHJpZXMocGFnZSk7XG4gICAgaWYgKHJlc3VsdHMgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlTG9hZEVudHJpZXMocGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBjYWxsYmFjayBvbiBlYWNoIGxpc3QgbWVtYmVycyBpbiB0aGUgb3JkZXIgcHJvdmlkZWQgYnkgdGhlIGxpc3QuXG4gICAqIElmIHRoZSBwcm92aWRlZCBmdW5jdGlvbiByZXR1cm4gZmFsc2UgZm9yIG9uZSBlbnRyeSB0aGUgaXRlcmF0aW9uIGlzIHN0b3BwZWQgYW5kXG4gICAqIHRoZSBmdW5jdGlvbiBpcyBub3QgY2FsbGVkIGZvciBjb25zZWN1dGl2ZSBlbnRyaWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGNhbGxlZCB3aXRoIHR3byBwYXJhbWV0ZXJzLCB0aGUgZmlyc3QgYSBib29sZWFuIHNheWluZyBpZiBhbGwgZW50cmllc1xuICAgKiB3aGVyZSBwYXNzZWQsIHRoZSBzZWNvbmQgYW4gaW5kZXggdGVsbGluZyBob3cgbWFueSBlbnRyaWVzIGl0ZXJhdGVkIG92ZXIuXG4gICAqL1xuICBmb3JFYWNoKGZ1bmMpIHtcbiAgICBsZXQgcGFnZSA9IDA7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgbGV0IGc7XG4gICAgbGV0IGg7XG4gICAgY29uc3QgbGltaXQgPSB0aGlzLmdldExpbWl0KCk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBjb25zdCBmID0gKGVudHJpZXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXNMZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGcgPSAocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGgoKTtcbiAgICAgIH07XG4gICAgICBoID0gKCkgPT4ge1xuICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGZ1bmMoZW50cmllcy5wb3AoKSwgaWR4KTtcbiAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnRoZW4oZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGcocmVzKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaCgpLnRoZW4oKGNvbnQpID0+IHtcbiAgICAgICAgaWYgKGNvbnQgIT09IGZhbHNlICYmIGVudHJpZXNMZW5ndGggPT09IGxpbWl0KSB7XG4gICAgICAgICAgcGFnZSArPSAxO1xuICAgICAgICAgIHJldHVybiBzZWxmLmdldEVudHJpZXMocGFnZSkudGhlbihmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGlkeCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cmllcygwKS50aGVuKGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gZW50cnkgdG8gdGhpcyBsaXN0LCBvbiBzdWNjZXNzIHRoZSBMaXN0IGVudHJ5IHdpbGwgYmUgcmV0dXJuZWQgKHVwZGF0ZWQgd2l0aFxuICAgKiBsYXRlc3QgbW9kaWZpY2F0aW9uIGRhdGUpLiBUaGUgYWRkZWQgZW50cnkgd2lsbCBiZSBtYXJrZWQgYXMgaW4gbmVlZCBvZiBhXG4gICAqIHJlZnJlc2ggZHVlIHRvIHN0YWxlIGludi1yZWwgY2FjaGUuIEhvd2V2ZXIsc2luY2UgTGlzdCBlbnRyeSBpcyBsb2FkZWQgaXQgbWF5IGJlIHJlZnJlc2hlZFxuICAgKiBhbHJlYWR5IHdoZW4gbWV0aG9kIGlzIHJlc29sdmVkLCBpdCBkZXBlbmRzIGlmIGl0IGlzIGluIHRoZSBmaXJzdCBwYWdlIG9mIHRoZSBsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5fSBlbnRyeSAtIGVudHJ5IHRvIGFkZCB0byB0aGUgbGlzdC5cbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0b3JlL0VudHJ5Pn1cbiAgICovXG4gIGFzeW5jIGFkZEVudHJ5KGVudHJ5KSB7XG4gICAgY29uc3QgZW50cmllcyA9IGF3YWl0IHRoaXMuZ2V0QWxsRW50cnlJZHMoKTtcbiAgICBlbnRyaWVzLnB1c2goZW50cnkuZ2V0SWQoKSk7XG4gICAgYXdhaXQgdGhpcy5zZXRBbGxFbnRyeUlkcyhlbnRyaWVzLCAnYWRkVG9MaXN0Jyk7XG4gICAgZW50cnkuc2V0UmVmcmVzaE5lZWRlZCgpO1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBlbnRyeSBmcm9tIHRoaXMgbGlzdCwgb24gc3VjY2VzcyB0aGUgTGlzdCBlbnRyeSB3aWxsIGJlIHJldHVybmVkICh1cGRhdGVkIHdpdGhcbiAgICogbGF0ZXN0IG1vZGlmaWNhdGlvbiBkYXRlKS4gVGhlIHJlbW92ZWQgZW50cnkgd2lsbCBub3QgYmUgdXBkYXRlZCBidXQgbWFya2VkIGFzIGluIG5lZWRcbiAgICogb2YgYSByZWZyZXNoIGR1ZSB0byBzdGFsZSBpbnYtcmVsIGNhY2hlLiBIb3dldmVyLHNpbmNlIExpc3QgZW50cnkgaXMgbG9hZGVkIGl0IG1heSBiZVxuICAgKiByZWZyZXNoZWQgYWxyZWFkeSB3aGVuIG1ldGhvZCBpcyByZXNvbHZlZCwgaXQgZGVwZW5kcyBpZiBpdCBpcyBpbiB0aGUgZmlyc3QgcGFnZSBvZiB0aGUgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeX0gZW50cnkgLSBlbnRyeSB0byBiZSByZW1vdmVkIGZyb20gdGhlIGxpc3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlRW50cnkoZW50cnkpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgdGhpcy5nZXRBbGxFbnRyeUlkcygpO1xuICAgIGVudHJpZXMuc3BsaWNlKGVudHJpZXMuaW5kZXhPZihlbnRyeS5nZXRJZCgpKSwgMSk7XG4gICAgYXdhaXQgdGhpcy5zZXRBbGxFbnRyeUlkcyhlbnRyaWVzLCAncmVtb3ZlRnJvbUxpc3QnKTtcbiAgICBlbnRyeS5zZXRSZWZyZXNoTmVlZGVkKCk7XG4gIH1cblxuICAvKipcbiAgICogV2lsbCB1bnNldCB0aGluZ3Mgc2luY2UgdGhlIGNhY2hlIGlzIHN0YWxlLi4uXG4gICAqL1xuICBuZWVkUmVmcmVzaCgpIHtcbiAgICBkZWxldGUgdGhpcy5fdW5zb3J0ZWRDaGlsZHJlbjtcbiAgICB0aGlzLl9zb3J0ZWRDaGlsZHJlbiA9IFtdO1xuICAgIGRlbGV0ZSB0aGlzLl9zaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2YgZW50cnkgaWRzIGNvbnRhaW5lZCBpbiB0aGlzIGxpc3QuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxBcnJheS48c3RyaW5nPj59IHRoZSBwcm9taXNlIHdpbGwgZGVsaXZlciBhbiBhcnJheSBvZiBjaGlsZHJlbiBlbnRyaWVzIGluIHRoaXNcbiAgICogbGlzdCBhcyBpZHNcbiAgICogKHN0cmluZ3MsIG5vdCBmdWxsIFVSSXMpLlxuICAgKi9cbiAgZ2V0QWxsRW50cnlJZHMoKSB7XG4gICAgaWYgKHRoaXMuX3Vuc29ydGVkQ2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl91bnNvcnRlZENoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cmllcygpLnRoZW4oKCkgPT4gdGhpcy5fdW5zb3J0ZWRDaGlsZHJlbik7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgbGlzdCBvZiBlbnRyeSBpZHMgdG8gYmUgY29udGFpbmVkIGluIHRoaXMgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gZW50cmllcyAtIGFycmF5IG9mIGVudHJ5IGlkcyAoYXMgc3RyaW5ncywgbm90IGZ1bGwgVVJJcykuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsVHlwZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnk+fVxuICAgKi9cbiAgc2V0QWxsRW50cnlJZHMoZW50cmllcywgY2FsbFR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlTdG9yZS5oYW5kbGVBc3luYyhcbiAgICAgIHRoaXMuX2VudHJ5U3RvcmUuZ2V0UkVTVCgpLnB1dCh0aGlzLl9yZXNvdXJjZVVSSSwgSlNPTi5zdHJpbmdpZnkoZW50cmllcykpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLm5lZWRSZWZyZXNoKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2VudHJ5U3RvcmUuZ2V0RW50cnkodGhpcy5nZXRFbnRyeVVSSSgpKS50aGVuKChvZW50cnkpID0+IHtcbiAgICAgICAgICAgIG9lbnRyeS5zZXRSZWZyZXNoTmVlZGVkKCk7XG4gICAgICAgICAgICByZXR1cm4gb2VudHJ5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgY2FsbFR5cGUgfHwgJ3NldExpc3QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2l6ZSBvZiBsaXN0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgYW1vdW50IG9mIGVudHJpZXMgaW4gdGhlIGxpc3QsIC0xIGlmIHVua25vd24uXG4gICAqL1xuICBnZXRTaXplKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5fc2l6ZSA9PT0gJ251bWJlcicgPyB0aGlzLl9zaXplIDogLTE7XG4gIH1cblxuICAvLz0gPT09PT09PT1IZWxwZXIgbWV0aG9kcz09PT09PT09PT09PT09PVxuXG4gIF9jbGVhclNvcnRlZEVudHJpZXMoKSB7XG4gICAgdGhpcy5fc29ydGVkQ2hpbGRyZW4gPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcGFnZVxuICAgKiBAcGFyYW0gY2FyZUFib3V0RnJlc2hcbiAgICogQHJldHVybiB7bnVsbHxBcnJheX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRFbnRyaWVzKHBhZ2UgPSAwLCBjYXJlQWJvdXRGcmVzaCA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuX3NpemUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5nZXRMaW1pdCgpO1xuICAgIGNvbnN0IG9mZnNldCA9IHBhZ2UgKiBsaW1pdDtcblxuICAgIGxldCBuZWVkUmVmcmVzaCA9IGZhbHNlO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBsZXQgZW50cnlVUkk7XG4gICAgZm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IG9mZnNldCArIGxpbWl0ICYmIGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIGVudHJ5VVJJID0gdGhpcy5fc29ydGVkQ2hpbGRyZW5baV07XG4gICAgICBpZiAoZW50cnlVUkkpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMuX2VudHJ5U3RvcmUuZ2V0Q2FjaGUoKS5nZXQoZW50cnlVUkkpO1xuICAgICAgICBpZiAoY2FyZUFib3V0RnJlc2ggPT09IGZhbHNlIHx8IChlICE9IG51bGwgJiYgIWUubmVlZFJlZnJlc2goKSkpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmVlZFJlZnJlc2ggPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZWVkUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmVlZFJlZnJlc2gpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcGFnZVxuICAgKiBAcmV0dXJuIHsqfFByb21pc2U8QXJyYXkgfCBuZXZlcj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZm9yY2VMb2FkRW50cmllcyhwYWdlID0gMCkge1xuICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5nZXRMaW1pdCgpO1xuICAgIGNvbnN0IG9mZnNldCA9IHBhZ2UgKiBsaW1pdDtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlTdG9yZS5nZXRFbnRyeSh0aGlzLl9lbnRyeVVSSSwge1xuICAgICAgZm9yY2VMb2FkOiB0cnVlLFxuICAgICAgb2Zmc2V0LFxuICAgICAgbGltaXQsXG4gICAgICBzb3J0OiB0aGlzLl9zb3J0LFxuICAgICAgYXN5bmNDb250ZXh0OiAnbG9hZExpc3RFbnRyaWVzJyxcbiAgICB9KS50aGVuKCgpID0+IHRoaXMuX2dldEVudHJpZXMocGFnZSwgZmFsc2UpKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERhdGEgY29udGFpbnMgYWxsVW5zb3J0ZWQgYXJyYXksIHNpemUsIGFuZCBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHBhcmFtIGNoaWxkcmVuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlKGRhdGEsIGNoaWxkcmVuKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZGF0YS5vZmZzZXQgfHwgMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9zb3J0ZWRDaGlsZHJlbltvZmZzZXQgKyBpXSA9IGNoaWxkcmVuW2ldLmdldFVSSSgpO1xuICAgIH1cbiAgICB0aGlzLl9zaXplID0gZGF0YS5zaXplIHx8IGNoaWxkcmVuLmxlbmd0aDtcbiAgICB0aGlzLl91bnNvcnRlZENoaWxkcmVuID0gZGF0YS5hbGxVbnNvcnRlZCB8fCBjaGlsZHJlbi5tYXAoZW50cnkgPT4gZW50cnkuZ2V0SWQoKSk7XG4gIH1cbn07XG4iLCJmdW5jdGlvbiBET01QYXJzZXIob3B0aW9ucyl7XHJcblx0dGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fHtsb2NhdG9yOnt9fTtcclxuXHRcclxufVxyXG5ET01QYXJzZXIucHJvdG90eXBlLnBhcnNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uKHNvdXJjZSxtaW1lVHlwZSl7XHJcblx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcblx0dmFyIHNheCA9ICBuZXcgWE1MUmVhZGVyKCk7XHJcblx0dmFyIGRvbUJ1aWxkZXIgPSBvcHRpb25zLmRvbUJ1aWxkZXIgfHwgbmV3IERPTUhhbmRsZXIoKTsvL2NvbnRlbnRIYW5kbGVyIGFuZCBMZXhpY2FsSGFuZGxlclxyXG5cdHZhciBlcnJvckhhbmRsZXIgPSBvcHRpb25zLmVycm9ySGFuZGxlcjtcclxuXHR2YXIgbG9jYXRvciA9IG9wdGlvbnMubG9jYXRvcjtcclxuXHR2YXIgZGVmYXVsdE5TTWFwID0gb3B0aW9ucy54bWxuc3x8e307XHJcblx0dmFyIGVudGl0eU1hcCA9IHsnbHQnOic8JywnZ3QnOic+JywnYW1wJzonJicsJ3F1b3QnOidcIicsJ2Fwb3MnOlwiJ1wifVxyXG5cdGlmKGxvY2F0b3Ipe1xyXG5cdFx0ZG9tQnVpbGRlci5zZXREb2N1bWVudExvY2F0b3IobG9jYXRvcilcclxuXHR9XHJcblx0XHJcblx0c2F4LmVycm9ySGFuZGxlciA9IGJ1aWxkRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlcixkb21CdWlsZGVyLGxvY2F0b3IpO1xyXG5cdHNheC5kb21CdWlsZGVyID0gb3B0aW9ucy5kb21CdWlsZGVyIHx8IGRvbUJ1aWxkZXI7XHJcblx0aWYoL1xcL3g/aHRtbD8kLy50ZXN0KG1pbWVUeXBlKSl7XHJcblx0XHRlbnRpdHlNYXAubmJzcCA9ICdcXHhhMCc7XHJcblx0XHRlbnRpdHlNYXAuY29weSA9ICdcXHhhOSc7XHJcblx0XHRkZWZhdWx0TlNNYXBbJyddPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XHJcblx0fVxyXG5cdGRlZmF1bHROU01hcC54bWwgPSBkZWZhdWx0TlNNYXAueG1sIHx8ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnO1xyXG5cdGlmKHNvdXJjZSl7XHJcblx0XHRzYXgucGFyc2Uoc291cmNlLGRlZmF1bHROU01hcCxlbnRpdHlNYXApO1xyXG5cdH1lbHNle1xyXG5cdFx0c2F4LmVycm9ySGFuZGxlci5lcnJvcihcImludmFsaWQgZG9jIHNvdXJjZVwiKTtcclxuXHR9XHJcblx0cmV0dXJuIGRvbUJ1aWxkZXIuZG9jO1xyXG59XHJcbmZ1bmN0aW9uIGJ1aWxkRXJyb3JIYW5kbGVyKGVycm9ySW1wbCxkb21CdWlsZGVyLGxvY2F0b3Ipe1xyXG5cdGlmKCFlcnJvckltcGwpe1xyXG5cdFx0aWYoZG9tQnVpbGRlciBpbnN0YW5jZW9mIERPTUhhbmRsZXIpe1xyXG5cdFx0XHRyZXR1cm4gZG9tQnVpbGRlcjtcclxuXHRcdH1cclxuXHRcdGVycm9ySW1wbCA9IGRvbUJ1aWxkZXIgO1xyXG5cdH1cclxuXHR2YXIgZXJyb3JIYW5kbGVyID0ge31cclxuXHR2YXIgaXNDYWxsYmFjayA9IGVycm9ySW1wbCBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xyXG5cdGxvY2F0b3IgPSBsb2NhdG9yfHx7fVxyXG5cdGZ1bmN0aW9uIGJ1aWxkKGtleSl7XHJcblx0XHR2YXIgZm4gPSBlcnJvckltcGxba2V5XTtcclxuXHRcdGlmKCFmbiAmJiBpc0NhbGxiYWNrKXtcclxuXHRcdFx0Zm4gPSBlcnJvckltcGwubGVuZ3RoID09IDI/ZnVuY3Rpb24obXNnKXtlcnJvckltcGwoa2V5LG1zZyl9OmVycm9ySW1wbDtcclxuXHRcdH1cclxuXHRcdGVycm9ySGFuZGxlcltrZXldID0gZm4gJiYgZnVuY3Rpb24obXNnKXtcclxuXHRcdFx0Zm4oJ1t4bWxkb20gJytrZXkrJ11cXHQnK21zZytfbG9jYXRvcihsb2NhdG9yKSk7XHJcblx0XHR9fHxmdW5jdGlvbigpe307XHJcblx0fVxyXG5cdGJ1aWxkKCd3YXJuaW5nJyk7XHJcblx0YnVpbGQoJ2Vycm9yJyk7XHJcblx0YnVpbGQoJ2ZhdGFsRXJyb3InKTtcclxuXHRyZXR1cm4gZXJyb3JIYW5kbGVyO1xyXG59XHJcblxyXG4vL2NvbnNvbGUubG9nKCcjXFxuXFxuXFxuXFxuXFxuXFxuXFxuIyMjIycpXHJcbi8qKlxyXG4gKiArQ29udGVudEhhbmRsZXIrRXJyb3JIYW5kbGVyXHJcbiAqICtMZXhpY2FsSGFuZGxlcitFbnRpdHlSZXNvbHZlcjJcclxuICogLURlY2xIYW5kbGVyLURUREhhbmRsZXIgXHJcbiAqIFxyXG4gKiBEZWZhdWx0SGFuZGxlcjpFbnRpdHlSZXNvbHZlciwgRFRESGFuZGxlciwgQ29udGVudEhhbmRsZXIsIEVycm9ySGFuZGxlclxyXG4gKiBEZWZhdWx0SGFuZGxlcjI6RGVmYXVsdEhhbmRsZXIsTGV4aWNhbEhhbmRsZXIsIERlY2xIYW5kbGVyLCBFbnRpdHlSZXNvbHZlcjJcclxuICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvaGVscGVycy9EZWZhdWx0SGFuZGxlci5odG1sXHJcbiAqL1xyXG5mdW5jdGlvbiBET01IYW5kbGVyKCkge1xyXG4gICAgdGhpcy5jZGF0YSA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIHBvc2l0aW9uKGxvY2F0b3Isbm9kZSl7XHJcblx0bm9kZS5saW5lTnVtYmVyID0gbG9jYXRvci5saW5lTnVtYmVyO1xyXG5cdG5vZGUuY29sdW1uTnVtYmVyID0gbG9jYXRvci5jb2x1bW5OdW1iZXI7XHJcbn1cclxuLyoqXHJcbiAqIEBzZWUgb3JnLnhtbC5zYXguQ29udGVudEhhbmRsZXIjc3RhcnREb2N1bWVudFxyXG4gKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9Db250ZW50SGFuZGxlci5odG1sXHJcbiAqLyBcclxuRE9NSGFuZGxlci5wcm90b3R5cGUgPSB7XHJcblx0c3RhcnREb2N1bWVudCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgXHR0aGlzLmRvYyA9IG5ldyBET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgXHRpZiAodGhpcy5sb2NhdG9yKSB7XHJcbiAgICAgICAgXHR0aGlzLmRvYy5kb2N1bWVudFVSSSA9IHRoaXMubG9jYXRvci5zeXN0ZW1JZDtcclxuICAgIFx0fVxyXG5cdH0sXHJcblx0c3RhcnRFbGVtZW50OmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lLCBxTmFtZSwgYXR0cnMpIHtcclxuXHRcdHZhciBkb2MgPSB0aGlzLmRvYztcclxuXHQgICAgdmFyIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHFOYW1lfHxsb2NhbE5hbWUpO1xyXG5cdCAgICB2YXIgbGVuID0gYXR0cnMubGVuZ3RoO1xyXG5cdCAgICBhcHBlbmRFbGVtZW50KHRoaXMsIGVsKTtcclxuXHQgICAgdGhpcy5jdXJyZW50RWxlbWVudCA9IGVsO1xyXG5cdCAgICBcclxuXHRcdHRoaXMubG9jYXRvciAmJiBwb3NpdGlvbih0aGlzLmxvY2F0b3IsZWwpXHJcblx0ICAgIGZvciAodmFyIGkgPSAwIDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgICB2YXIgbmFtZXNwYWNlVVJJID0gYXR0cnMuZ2V0VVJJKGkpO1xyXG5cdCAgICAgICAgdmFyIHZhbHVlID0gYXR0cnMuZ2V0VmFsdWUoaSk7XHJcblx0ICAgICAgICB2YXIgcU5hbWUgPSBhdHRycy5nZXRRTmFtZShpKTtcclxuXHRcdFx0dmFyIGF0dHIgPSBkb2MuY3JlYXRlQXR0cmlidXRlTlMobmFtZXNwYWNlVVJJLCBxTmFtZSk7XHJcblx0XHRcdHRoaXMubG9jYXRvciAmJnBvc2l0aW9uKGF0dHJzLmdldExvY2F0b3IoaSksYXR0cik7XHJcblx0XHRcdGF0dHIudmFsdWUgPSBhdHRyLm5vZGVWYWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHRlbC5zZXRBdHRyaWJ1dGVOb2RlKGF0dHIpXHJcblx0ICAgIH1cclxuXHR9LFxyXG5cdGVuZEVsZW1lbnQ6ZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUsIHFOYW1lKSB7XHJcblx0XHR2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudEVsZW1lbnRcclxuXHRcdHZhciB0YWdOYW1lID0gY3VycmVudC50YWdOYW1lO1xyXG5cdFx0dGhpcy5jdXJyZW50RWxlbWVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcclxuXHR9LFxyXG5cdHN0YXJ0UHJlZml4TWFwcGluZzpmdW5jdGlvbihwcmVmaXgsIHVyaSkge1xyXG5cdH0sXHJcblx0ZW5kUHJlZml4TWFwcGluZzpmdW5jdGlvbihwcmVmaXgpIHtcclxuXHR9LFxyXG5cdHByb2Nlc3NpbmdJbnN0cnVjdGlvbjpmdW5jdGlvbih0YXJnZXQsIGRhdGEpIHtcclxuXHQgICAgdmFyIGlucyA9IHRoaXMuZG9jLmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbih0YXJnZXQsIGRhdGEpO1xyXG5cdCAgICB0aGlzLmxvY2F0b3IgJiYgcG9zaXRpb24odGhpcy5sb2NhdG9yLGlucylcclxuXHQgICAgYXBwZW5kRWxlbWVudCh0aGlzLCBpbnMpO1xyXG5cdH0sXHJcblx0aWdub3JhYmxlV2hpdGVzcGFjZTpmdW5jdGlvbihjaCwgc3RhcnQsIGxlbmd0aCkge1xyXG5cdH0sXHJcblx0Y2hhcmFjdGVyczpmdW5jdGlvbihjaGFycywgc3RhcnQsIGxlbmd0aCkge1xyXG5cdFx0Y2hhcnMgPSBfdG9TdHJpbmcuYXBwbHkodGhpcyxhcmd1bWVudHMpXHJcblx0XHQvL2NvbnNvbGUubG9nKGNoYXJzKVxyXG5cdFx0aWYoY2hhcnMpe1xyXG5cdFx0XHRpZiAodGhpcy5jZGF0YSkge1xyXG5cdFx0XHRcdHZhciBjaGFyTm9kZSA9IHRoaXMuZG9jLmNyZWF0ZUNEQVRBU2VjdGlvbihjaGFycyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGNoYXJOb2RlID0gdGhpcy5kb2MuY3JlYXRlVGV4dE5vZGUoY2hhcnMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHRoaXMuY3VycmVudEVsZW1lbnQpe1xyXG5cdFx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hhck5vZGUpO1xyXG5cdFx0XHR9ZWxzZSBpZigvXlxccyokLy50ZXN0KGNoYXJzKSl7XHJcblx0XHRcdFx0dGhpcy5kb2MuYXBwZW5kQ2hpbGQoY2hhck5vZGUpO1xyXG5cdFx0XHRcdC8vcHJvY2VzcyB4bWxcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmxvY2F0b3IgJiYgcG9zaXRpb24odGhpcy5sb2NhdG9yLGNoYXJOb2RlKVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0c2tpcHBlZEVudGl0eTpmdW5jdGlvbihuYW1lKSB7XHJcblx0fSxcclxuXHRlbmREb2N1bWVudDpmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZG9jLm5vcm1hbGl6ZSgpO1xyXG5cdH0sXHJcblx0c2V0RG9jdW1lbnRMb2NhdG9yOmZ1bmN0aW9uIChsb2NhdG9yKSB7XHJcblx0ICAgIGlmKHRoaXMubG9jYXRvciA9IGxvY2F0b3Ipey8vICYmICEoJ2xpbmVOdW1iZXInIGluIGxvY2F0b3IpKXtcclxuXHQgICAgXHRsb2NhdG9yLmxpbmVOdW1iZXIgPSAwO1xyXG5cdCAgICB9XHJcblx0fSxcclxuXHQvL0xleGljYWxIYW5kbGVyXHJcblx0Y29tbWVudDpmdW5jdGlvbihjaGFycywgc3RhcnQsIGxlbmd0aCkge1xyXG5cdFx0Y2hhcnMgPSBfdG9TdHJpbmcuYXBwbHkodGhpcyxhcmd1bWVudHMpXHJcblx0ICAgIHZhciBjb21tID0gdGhpcy5kb2MuY3JlYXRlQ29tbWVudChjaGFycyk7XHJcblx0ICAgIHRoaXMubG9jYXRvciAmJiBwb3NpdGlvbih0aGlzLmxvY2F0b3IsY29tbSlcclxuXHQgICAgYXBwZW5kRWxlbWVudCh0aGlzLCBjb21tKTtcclxuXHR9LFxyXG5cdFxyXG5cdHN0YXJ0Q0RBVEE6ZnVuY3Rpb24oKSB7XHJcblx0ICAgIC8vdXNlZCBpbiBjaGFyYWN0ZXJzKCkgbWV0aG9kc1xyXG5cdCAgICB0aGlzLmNkYXRhID0gdHJ1ZTtcclxuXHR9LFxyXG5cdGVuZENEQVRBOmZ1bmN0aW9uKCkge1xyXG5cdCAgICB0aGlzLmNkYXRhID0gZmFsc2U7XHJcblx0fSxcclxuXHRcclxuXHRzdGFydERURDpmdW5jdGlvbihuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHtcclxuXHRcdHZhciBpbXBsID0gdGhpcy5kb2MuaW1wbGVtZW50YXRpb247XHJcblx0ICAgIGlmIChpbXBsICYmIGltcGwuY3JlYXRlRG9jdW1lbnRUeXBlKSB7XHJcblx0ICAgICAgICB2YXIgZHQgPSBpbXBsLmNyZWF0ZURvY3VtZW50VHlwZShuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpO1xyXG5cdCAgICAgICAgdGhpcy5sb2NhdG9yICYmIHBvc2l0aW9uKHRoaXMubG9jYXRvcixkdClcclxuXHQgICAgICAgIGFwcGVuZEVsZW1lbnQodGhpcywgZHQpO1xyXG5cdCAgICB9XHJcblx0fSxcclxuXHQvKipcclxuXHQgKiBAc2VlIG9yZy54bWwuc2F4LkVycm9ySGFuZGxlclxyXG5cdCAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L0Vycm9ySGFuZGxlci5odG1sXHJcblx0ICovXHJcblx0d2FybmluZzpmdW5jdGlvbihlcnJvcikge1xyXG5cdFx0Y29uc29sZS53YXJuKCdbeG1sZG9tIHdhcm5pbmddXFx0JytlcnJvcixfbG9jYXRvcih0aGlzLmxvY2F0b3IpKTtcclxuXHR9LFxyXG5cdGVycm9yOmZ1bmN0aW9uKGVycm9yKSB7XHJcblx0XHRjb25zb2xlLmVycm9yKCdbeG1sZG9tIGVycm9yXVxcdCcrZXJyb3IsX2xvY2F0b3IodGhpcy5sb2NhdG9yKSk7XHJcblx0fSxcclxuXHRmYXRhbEVycm9yOmZ1bmN0aW9uKGVycm9yKSB7XHJcblx0XHRjb25zb2xlLmVycm9yKCdbeG1sZG9tIGZhdGFsRXJyb3JdXFx0JytlcnJvcixfbG9jYXRvcih0aGlzLmxvY2F0b3IpKTtcclxuXHQgICAgdGhyb3cgZXJyb3I7XHJcblx0fVxyXG59XHJcbmZ1bmN0aW9uIF9sb2NhdG9yKGwpe1xyXG5cdGlmKGwpe1xyXG5cdFx0cmV0dXJuICdcXG5AJysobC5zeXN0ZW1JZCB8fCcnKSsnI1tsaW5lOicrbC5saW5lTnVtYmVyKycsY29sOicrbC5jb2x1bW5OdW1iZXIrJ10nXHJcblx0fVxyXG59XHJcbmZ1bmN0aW9uIF90b1N0cmluZyhjaGFycyxzdGFydCxsZW5ndGgpe1xyXG5cdGlmKHR5cGVvZiBjaGFycyA9PSAnc3RyaW5nJyl7XHJcblx0XHRyZXR1cm4gY2hhcnMuc3Vic3RyKHN0YXJ0LGxlbmd0aClcclxuXHR9ZWxzZXsvL2phdmEgc2F4IGNvbm5lY3Qgd2lkdGggeG1sZG9tIG9uIHJoaW5vKHdoYXQgYWJvdXQ6IFwiPyAmJiAhKGNoYXJzIGluc3RhbmNlb2YgU3RyaW5nKVwiKVxyXG5cdFx0aWYoY2hhcnMubGVuZ3RoID49IHN0YXJ0K2xlbmd0aCB8fCBzdGFydCl7XHJcblx0XHRcdHJldHVybiBuZXcgamF2YS5sYW5nLlN0cmluZyhjaGFycyxzdGFydCxsZW5ndGgpKycnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGNoYXJzO1xyXG5cdH1cclxufVxyXG5cclxuLypcclxuICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvZXh0L0xleGljYWxIYW5kbGVyLmh0bWxcclxuICogdXNlZCBtZXRob2Qgb2Ygb3JnLnhtbC5zYXguZXh0LkxleGljYWxIYW5kbGVyOlxyXG4gKiAgI2NvbW1lbnQoY2hhcnMsIHN0YXJ0LCBsZW5ndGgpXHJcbiAqICAjc3RhcnRDREFUQSgpXHJcbiAqICAjZW5kQ0RBVEEoKVxyXG4gKiAgI3N0YXJ0RFREKG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZClcclxuICpcclxuICpcclxuICogSUdOT1JFRCBtZXRob2Qgb2Ygb3JnLnhtbC5zYXguZXh0LkxleGljYWxIYW5kbGVyOlxyXG4gKiAgI2VuZERURCgpXHJcbiAqICAjc3RhcnRFbnRpdHkobmFtZSlcclxuICogICNlbmRFbnRpdHkobmFtZSlcclxuICpcclxuICpcclxuICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvZXh0L0RlY2xIYW5kbGVyLmh0bWxcclxuICogSUdOT1JFRCBtZXRob2Qgb2Ygb3JnLnhtbC5zYXguZXh0LkRlY2xIYW5kbGVyXHJcbiAqIFx0I2F0dHJpYnV0ZURlY2woZU5hbWUsIGFOYW1lLCB0eXBlLCBtb2RlLCB2YWx1ZSlcclxuICogICNlbGVtZW50RGVjbChuYW1lLCBtb2RlbClcclxuICogICNleHRlcm5hbEVudGl0eURlY2wobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKVxyXG4gKiAgI2ludGVybmFsRW50aXR5RGVjbChuYW1lLCB2YWx1ZSlcclxuICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvZXh0L0VudGl0eVJlc29sdmVyMi5odG1sXHJcbiAqIElHTk9SRUQgbWV0aG9kIG9mIG9yZy54bWwuc2F4LkVudGl0eVJlc29sdmVyMlxyXG4gKiAgI3Jlc29sdmVFbnRpdHkoU3RyaW5nIG5hbWUsU3RyaW5nIHB1YmxpY0lkLFN0cmluZyBiYXNlVVJJLFN0cmluZyBzeXN0ZW1JZClcclxuICogICNyZXNvbHZlRW50aXR5KHB1YmxpY0lkLCBzeXN0ZW1JZClcclxuICogICNnZXRFeHRlcm5hbFN1YnNldChuYW1lLCBiYXNlVVJJKVxyXG4gKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9EVERIYW5kbGVyLmh0bWxcclxuICogSUdOT1JFRCBtZXRob2Qgb2Ygb3JnLnhtbC5zYXguRFRESGFuZGxlclxyXG4gKiAgI25vdGF0aW9uRGVjbChuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHt9O1xyXG4gKiAgI3VucGFyc2VkRW50aXR5RGVjbChuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQsIG5vdGF0aW9uTmFtZSkge307XHJcbiAqL1xyXG5cImVuZERURCxzdGFydEVudGl0eSxlbmRFbnRpdHksYXR0cmlidXRlRGVjbCxlbGVtZW50RGVjbCxleHRlcm5hbEVudGl0eURlY2wsaW50ZXJuYWxFbnRpdHlEZWNsLHJlc29sdmVFbnRpdHksZ2V0RXh0ZXJuYWxTdWJzZXQsbm90YXRpb25EZWNsLHVucGFyc2VkRW50aXR5RGVjbFwiLnJlcGxhY2UoL1xcdysvZyxmdW5jdGlvbihrZXkpe1xyXG5cdERPTUhhbmRsZXIucHJvdG90eXBlW2tleV0gPSBmdW5jdGlvbigpe3JldHVybiBudWxsfVxyXG59KVxyXG5cclxuLyogUHJpdmF0ZSBzdGF0aWMgaGVscGVycyB0cmVhdGVkIGJlbG93IGFzIHByaXZhdGUgaW5zdGFuY2UgbWV0aG9kcywgc28gZG9uJ3QgbmVlZCB0byBhZGQgdGhlc2UgdG8gdGhlIHB1YmxpYyBBUEk7IHdlIG1pZ2h0IHVzZSBhIFJlbGF0b3IgdG8gYWxzbyBnZXQgcmlkIG9mIG5vbi1zdGFuZGFyZCBwdWJsaWMgcHJvcGVydGllcyAqL1xyXG5mdW5jdGlvbiBhcHBlbmRFbGVtZW50IChoYW5kZXIsbm9kZSkge1xyXG4gICAgaWYgKCFoYW5kZXIuY3VycmVudEVsZW1lbnQpIHtcclxuICAgICAgICBoYW5kZXIuZG9jLmFwcGVuZENoaWxkKG5vZGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBoYW5kZXIuY3VycmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSk7XHJcbiAgICB9XHJcbn0vL2FwcGVuZENoaWxkIGFuZCBzZXRBdHRyaWJ1dGVOUyBhcmUgcHJlZm9ybWFuY2Uga2V5XHJcblxyXG4vL2lmKHR5cGVvZiByZXF1aXJlID09ICdmdW5jdGlvbicpe1xyXG5cdHZhciBYTUxSZWFkZXIgPSByZXF1aXJlKCcuL3NheCcpLlhNTFJlYWRlcjtcclxuXHR2YXIgRE9NSW1wbGVtZW50YXRpb24gPSBleHBvcnRzLkRPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9kb20nKS5ET01JbXBsZW1lbnRhdGlvbjtcclxuXHRleHBvcnRzLlhNTFNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL2RvbScpLlhNTFNlcmlhbGl6ZXIgO1xyXG5cdGV4cG9ydHMuRE9NUGFyc2VyID0gRE9NUGFyc2VyO1xyXG4vL31cclxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgaGlkZShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhpZGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgaGlkZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgdmFyIHJlZ2V4cCA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBwYWRTdGFydCwgcGFkRW5kIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcbiAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICAgIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbm1vZHVsZS5leHBvcnRzID0gJycucmVwZWF0IHx8IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG51bWJlciBvZiByZXBldGl0aW9ucycpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzdWx0ICs9IHN0cjtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbm9uID0gJ1xcdTIwMEJcXHUwMDg1XFx1MTgwRSc7XG5cbi8vIGNoZWNrIHRoYXQgYSBtZXRob2Qgd29ya3Mgd2l0aCB0aGUgY29ycmVjdCBsaXN0XG4vLyBvZiB3aGl0ZXNwYWNlcyBhbmQgaGFzIGEgY29ycmVjdCBuYW1lXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXSgpIHx8IG5vbltNRVRIT0RfTkFNRV0oKSAhPSBub24gfHwgd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdLm5hbWUgIT09IE1FVEhPRF9OQU1FO1xuICB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsIi8vIGBNYXRoLnNpZ25gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmICFmYWlscyhwb3N0KSkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbmV3ICovXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbnZhciBBcnJheUJ1ZmZlciA9IGdsb2JhbC5BcnJheUJ1ZmZlcjtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheSgxKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5ldyBJbnQ4QXJyYXkoLTEpO1xufSkgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgbmV3IEludDhBcnJheSgpO1xuICBuZXcgSW50OEFycmF5KG51bGwpO1xuICBuZXcgSW50OEFycmF5KDEuNSk7XG4gIG5ldyBJbnQ4QXJyYXkoaXRlcmFibGUpO1xufSwgdHJ1ZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBTYWZhcmkgMTEgYnVnXG4gIHJldHVybiBuZXcgSW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcigyKSwgMSwgdW5kZWZpbmVkKS5sZW5ndGggIT09IDE7XG59KTtcbiIsImltcG9ydCBHcmFwaFJlc291cmNlIGZyb20gJy4vR3JhcGgnO1xuaW1wb3J0IFBpcGVsaW5lIGZyb20gJy4vUGlwZWxpbmUnO1xuaW1wb3J0IFByb3RvdHlwZUVudHJ5IGZyb20gJy4vUHJvdG90eXBlRW50cnknO1xuaW1wb3J0IFJlc291cmNlIGZyb20gJy4vUmVzb3VyY2UnO1xuaW1wb3J0IFN0cmluZ1Jlc291cmNlIGZyb20gJy4vU3RyaW5nJztcbmltcG9ydCB0eXBlcyBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBNZXRob2RzIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBFbnRyeVN0b3JlIHJlcG9zaXRvcnkgc2NvcGVkIHRvIGEgc3BlY2lmaWMgY29udGV4dC5cbiAqXG4gKiBAZXhwb3J0cyBzdG9yZS9Db250ZXh0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRleHQgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGVudHJpZXMgaW4gdGhlIGNvbnRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzb3J0IC0gc2FtZSBzb3J0IG9iamVjdCBhcyBwcm92aWRlZCBpbiB0aGUgb3B0aW9uYWxMb2FkUGFyYW1zIHRvXG4gICAqIHtAc2VlIHN0b3JlL0VudHJ5U3RvcmUjZ2V0RW50cnkgZ2V0RW50cnl9IG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGxpbWl0IC0gc2FtZSBsaW1pdCBhcyBwcm92aWRlZCBpbiB0aGUgb3B0aW9uYWxMb2FkUGFyYW1zIHRvXG4gICAqIHtAc2VlIHN0b3JlL0VudHJ5U3RvcmUjZ2V0RW50cnkgZ2V0RW50cnl9IG1ldGhvZC5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBwYWdlIC0gdW5sZXNzIGxpbWl0IGlzIHNldCB0byAtMSAobm8gcGFnaW5hdGlvbikgd2UgbmVlZCB0byBzcGVjaWZ5XG4gICAqIHdoaWNoIHBhZ2UgdG8gbG9hZCwgZmlyc3QgcGFnZSBpcyAwLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnlbXT59IHVwb24gc3VjY2VzcyB0aGUgcHJvbWlzZSByZXR1cm5zIGFuIGFycmF5IG9mIGVudHJpZXMuXG4gICAqIEBzZWUgc3RvcmUvRW50cnlTdG9yZSNnZXRMaXN0RW50cmllc1xuICAgKi9cbiAgbGlzdEVudHJpZXMoc29ydCwgbGltaXQsIHBhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeVN0b3JlKCkuZ2V0TGlzdEVudHJpZXMoYCR7dGhpcy5fcmVzb3VyY2VVUkl9L2VudHJ5L19hbGxgLCBzb3J0LCBsaW1pdCwgcGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVuaWVuY2UgbWV0aG9kLCB0byByZXRyaWV2ZSBhbiBlbnRyeSBmcm9tIHRoaXMgY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5SWRcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbmFsTG9hZFBhcmFtcyBzYW1lIHBhcmFtZXRlciBhcyBpbiB7QHNlZSBzdG9yZS9FbnRyeVN0b3JlI2dldEVudHJ5fVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnk+fVxuICAgKiBAc2VlIHN0b3JlL0VudHJ5U3RvcmUjZ2V0RW50cnlcbiAgICovXG4gIGdldEVudHJ5QnlJZChlbnRyeUlkLCBvcHRpb25hbExvYWRQYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5U3RvcmUoKS5nZXRFbnRyeSh0aGlzLmdldEVudHJ5VVJJYnlJZChlbnRyeUlkKSwgb3B0aW9uYWxMb2FkUGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBhbmRzIHRoZSBnaXZlbiBlbnRyeSBpZCBpbnRvIGEgZnVsbCBVUkkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRyeUlkXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBVUkkgZm9yIGFuIGVudHJ5IGluIHRoaXMgY29udGV4dCB3aXRoIHRoZSBnaXZlbiBpZC5cbiAgICovXG4gIGdldEVudHJ5VVJJYnlJZChlbnRyeUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlTdG9yZSgpLmdldEVudHJ5VVJJKHRoaXMuZ2V0SWQoKSwgZW50cnlJZCk7XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgUHJvdG90eXBlRW50cnkgdGhhdCBoYXMgdGhlIGN1cnJlbnQgY29udGV4dCBhcyBjb250YWluZXIuXG4gICAqIENhbGwge0BsaW5rIHN0b3JlL1Byb3RvdHlwZUVudHJ5I2NvbW1pdCBjb21taXR9IG9uIHRoZSBQcm90b3R5cGVFbnRyeSB0byBhY3R1YWxseSBjcmVhdGUgaXRcbiAgICogKHJldHVybnMgYSBwcm9taXNlKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBpZCAtIGlkIGZvciB0aGUgZW50cnksIGZhaWxzIGFmdGVyIGNvbW1pdCBpZiBhbiBlbnRyeSBleGlzdHMgYWxyZWFkeSB3aXRoXG4gICAqIHRoaXMgaWQuXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX1cbiAgICovXG4gIG5ld0VudHJ5KGlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm90b3R5cGVFbnRyeSh0aGlzLCBpZCk7XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgUHJvdG90eXBlRW50cnkgdGhhdCBjb3JyZXNwb25kcyB0byBhIGxvY2FsIG5hbWVkIHJlc291cmNlIHRoYXRcbiAgICogaGFzIHRoZSBjdXJyZW50IGNvbnRleHQgYXMgY29udGFpbmVyLlxuICAgKiBDYWxsIHtAbGluayBzdG9yZS9Qcm90b3R5cGVFbnRyeSNjb21taXQgY29tbWl0fSBvbiB0aGUgUHJvdG90eXBlRW50cnkgdG8gYWN0dWFsbHkgY3JlYXRlIGl0XG4gICAqIChyZXR1cm5zIGEgcHJvbWlzZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaWQgLSBpZCBmb3IgdGhlIGVudHJ5LCBmYWlscyBhZnRlciBjb21taXQgaWYgYW4gZW50cnkgZXhpc3RzIGFscmVhZHlcbiAgICogd2l0aCB0aGlzIGlkLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9XG4gICAqL1xuICBuZXdOYW1lZEVudHJ5KGlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm90b3R5cGVFbnRyeSh0aGlzLCBpZCkuc2V0UmVzb3VyY2VUeXBlKHR5cGVzLlJUX05BTUVEUkVTT1VSQ0UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIFByb3RvdHlwZUVudHJ5IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBsaW5rIHRoYXQgaGFzIHRoZVxuICAgKiBjdXJyZW50IGNvbnRleHQgYXMgY29udGFpbmVyLlxuICAgKiBDYWxsIHtAbGluayBzdG9yZS9Qcm90b3R5cGVFbnRyeSNjb21taXQgY29tbWl0fSBvbiB0aGUgUHJvdG90eXBlRW50cnkgdG8gYWN0dWFsbHkgY3JlYXRlXG4gICAqIGl0IChyZXR1cm5zIGEgcHJvbWlzZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gdGhlIFVSSSBmb3IgdGhlIHJlc291cmNlIHdlIGFyZSBtYWtpbmcgYSBsaW5rIHRvLCBtYW5kYXRvcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaWQgLSBpZCBmb3IgdGhlIGVudHJ5LCBmYWlscyBhZnRlciBjb21taXQgaWYgYW4gZW50cnkgZXhpc3RzIGFscmVhZHlcbiAgICogd2l0aCB0aGlzIGlkLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9XG4gICAqL1xuICBuZXdMaW5rKGxpbmssIGlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm90b3R5cGVFbnRyeSh0aGlzLCBpZCkuc2V0UmVzb3VyY2VVUkkobGluaykuc2V0RW50cnlUeXBlKHR5cGVzLkVUX0xJTkspO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIFByb3RvdHlwZUVudHJ5IHRoYXQgaXMgYSBsaW5rcmVmIHRoYXQgaGFzIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICogYXMgY29udGFpbmVyLiBDYWxsIHtAbGluayBzdG9yZS9Qcm90b3R5cGVFbnRyeSNjb21taXQgY29tbWl0fSBvbiB0aGUgUHJvdG90eXBlRW50cnkgdG9cbiAgICogYWN0dWFsbHkgY3JlYXRlIGl0IChyZXR1cm5zIGEgcHJvbWlzZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gaXMgdGhlIFVSSSBmb3IgdGhlIHJlc291cmNlIHdlIGFyZSBtYWtpbmcgYSBsaW5rIHRvLCBtYW5kYXRvcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRhZGF0YUxpbmsgLSBpcyB0aGUgVVJJIGZvciB0aGUgbWV0YWRhdGEgYXJlIHJlZmVycmluZyB0bywgbWFuZGF0b3J5LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGlkIC0gaWQgZm9yIHRoZSBlbnRyeSwgZmFpbHMgYWZ0ZXIgY29tbWl0IGlmIGFuIGVudHJ5IGV4aXN0cyBhbHJlYWR5XG4gICAqIHdpdGggdGhpcyBpZC5cbiAgICogQHJldHVybnMge3N0b3JlL1Byb3RvdHlwZUVudHJ5fVxuICAgKi9cbiAgbmV3TGlua1JlZihsaW5rLCBtZXRhZGF0YUxpbmssIGlkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm90b3R5cGVFbnRyeSh0aGlzLCBpZClcbiAgICAgIC5zZXRSZXNvdXJjZVVSSShsaW5rKVxuICAgICAgLnNldEV4dGVybmFsTWV0YWRhdGFVUkkobWV0YWRhdGFMaW5rKVxuICAgICAgLnNldEVudHJ5VHlwZSh0eXBlcy5FVF9MSU5LUkVGKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBQcm90b3R5cGVFbnRyeSB0aGF0IGlzIGEgcmVmZXJlbmNlIGFuZCBoYXMgdGhlIGN1cnJlbnRcbiAgICogY29udGV4dCBhcyBjb250YWluZXIuIENhbGwge0BsaW5rIHN0b3JlL1Byb3RvdHlwZUVudHJ5I2NvbW1pdCBjb21taXR9IG9uIHRoZVxuICAgKiBQcm90b3R5cGVFbnRyeSB0byBhY3R1YWxseSBjcmVhdGUgaXQgKHJldHVybnMgYSBwcm9taXNlKS5cbiAgICogVGhlIG9ubHkgZGlmZmVyZW5jZSB0byB0aGUgbmV3TGlua1JlZiBtZXRob2QgaXMgdGhhdCB0aGUgRW50cnlUeXBlIGlzIFJlZmVyZW5jZSBpbnN0ZWFkXG4gICAqIG9mIExpbmtSZWZlcmVuY2Ugd2hpY2ggaW1wbGllcyB0aGF0IHRoZXJlIGlzIG5vIGxvY2FsIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluayAtIHRoZSBVUkkgZm9yIHRoZSByZXNvdXJjZSB3ZSBhcmUgbWFraW5nIGEgbGluayB0bywgbWFuZGF0b3J5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0YWRhdGFMaW5rIC0gdGhlIFVSSSBmb3IgdGhlIG1ldGFkYXRhIGFyZSByZWZlcnJpbmcgdG8sIG1hbmRhdG9yeS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBpZCBmb3IgdGhlIGVudHJ5LCBmYWlscyBhZnRlciBjb21taXQgaWYgYW4gZW50cnkgZXhpc3RzIGFscmVhZHkgd2l0aFxuICAgKiB0aGlzIGlkLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9XG4gICAqL1xuICBuZXdSZWYobGluaywgbWV0YWRhdGFMaW5rLCBpZCkge1xuICAgIHJldHVybiBuZXcgUHJvdG90eXBlRW50cnkodGhpcywgaWQpXG4gICAgICAuc2V0UmVzb3VyY2VVUkkobGluaylcbiAgICAgIC5zZXRFeHRlcm5hbE1ldGFkYXRhVVJJKG1ldGFkYXRhTGluaylcbiAgICAgIC5zZXRFbnRyeVR5cGUodHlwZXMuRVRfUkVGKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBQcm90b3R5cGVFbnRyeSB3aG9zZSByZXNvdXJjZSBpcyBhIHtAbGluayBzdG9yZS9MaXN0IExpc3QpXG4gICAqIGFuZCBoYXMgdGhlIGN1cnJlbnQgY29udGV4dCBhcyBjb250YWluZXIuXG4gICAqIENhbGwge0BsaW5rIHN0b3JlL1Byb3RvdHlwZUVudHJ5I2NvbW1pdCBjb21taXR9IG9uIHRoZSBQcm90b3R5cGVFbnRyeSB0byBhY3R1YWxseSBjcmVhdGVcbiAgICogaXQgKHJldHVybnMgYSBwcm9taXNlKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIGFuIG9wdGlvbmFsIGlkIGZvciB0aGUgZW50cnksIGZhaWxzIG9uIGNvbW1pdCBpZiBhbiBlbnRyeSBleGlzdHMgYWxyZWFkeVxuICAgKiB3aXRoIHRoaXMgaWQuXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX1cbiAgICovXG4gIG5ld0xpc3QoaWQpIHtcbiAgICByZXR1cm4gbmV3IFByb3RvdHlwZUVudHJ5KHRoaXMsIGlkKS5zZXRHcmFwaFR5cGUodHlwZXMuR1RfTElTVCk7XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgUHJvdG90eXBlRW50cnkgd2hvc2UgcmVzb3VyY2UgaXMgYSB7QGxpbmsgc3RvcmUvR3JhcGggR3JhcGh9XG4gICAqIGFuZCBoYXMgdGhlIGN1cnJlbnQgY29udGV4dCBhcyBjb250YWluZXIuXG4gICAqIENhbGwge0BsaW5rIHN0b3JlL1Byb3RvdHlwZUVudHJ5I2NvbW1pdCBjb21taXR9IG9uIHRoZSBQcm90b3R5cGVFbnRyeSB0byBhY3R1YWxseSBjcmVhdGUgaXRcbiAgICogKHJldHVybnMgYSBwcm9taXNlKS5cbiAgICpcbiAgICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBncmFwaCAtIGdyYXBoIHRvIHN0b3JlIGFzIGEgcmVzb3VyY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaWQgLSBpZCBmb3IgdGhlIGVudHJ5LCBmYWlscyB1cG9uIGNvbW1pdCBpZiBhbiBlbnRyeSBleGlzdHMgYWxyZWFkeVxuICAgKiB3aXRoIHRoaXMgaWQuXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX1cbiAgICovXG4gIG5ld0dyYXBoKGdyYXBoLCBpZCkge1xuICAgIGNvbnN0IHByb3RvdHlwZUVudHJ5ID0gbmV3IFByb3RvdHlwZUVudHJ5KHRoaXMsIGlkKS5zZXRHcmFwaFR5cGUodHlwZXMuR1RfR1JBUEgpO1xuICAgIGNvbnN0IGVudHJ5SW5mbyA9IHByb3RvdHlwZUVudHJ5LmdldEVudHJ5SW5mbygpO1xuICAgIHByb3RvdHlwZUVudHJ5Ll9yZXNvdXJjZSA9IG5ldyBHcmFwaFJlc291cmNlKGVudHJ5SW5mby5nZXRFbnRyeVVSSSgpLCBlbnRyeUluZm8uZ2V0UmVzb3VyY2VVUkkoKSxcbiAgICAgIHRoaXMuZ2V0RW50cnlTdG9yZSgpLCBncmFwaCB8fCB7fSk7XG5cbiAgICByZXR1cm4gcHJvdG90eXBlRW50cnk7XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgUHJvdG90eXBlRW50cnkgd2hvc2UgcmVzb3VyY2UgaXMgYSB7QGxpbmsgc3RvcmUvU3RyaW5nIFN0cmluZ31cbiAgICogdGhhdCBoYXMgdGhlIGN1cnJlbnQgY29udGV4dCBhcyBjb250YWluZXIuXG4gICAqIENhbGwge0BsaW5rIHN0b3JlL1Byb3RvdHlwZUVudHJ5I2NvbW1pdCBjb21taXR9IG9uIHRoZSBQcm90b3R5cGVFbnRyeSB0byBhY3R1YWxseSBjcmVhdGVcbiAgICogaXQgKHJldHVybnMgYSBwcm9taXNlKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzdHIgYW4gb3B0aW9uYWwgc3RyaW5nIGZvciB0aGUgU3RyaW5nIFJlc291cmNlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgYW4gb3B0aW9uYWwgaWQgZm9yIHRoZSBlbnRyeSwgZmFpbHMgdXBvbiBjb21taXQgaWYgYW4gZW50cnkgZXhpc3RzXG4gICAqIGFscmVhZHkgd2l0aCB0aGlzIGlkLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9XG4gICAqL1xuICBuZXdTdHJpbmcoc3RyLCBpZCkge1xuICAgIGNvbnN0IHByb3RvdHlwZUVudHJ5ID0gbmV3IFByb3RvdHlwZUVudHJ5KHRoaXMsIGlkKS5zZXRHcmFwaFR5cGUodHlwZXMuR1RfU1RSSU5HKTtcbiAgICBjb25zdCBlbnRyeUluZm8gPSBwcm90b3R5cGVFbnRyeS5nZXRFbnRyeUluZm8oKTtcbiAgICBwcm90b3R5cGVFbnRyeS5fcmVzb3VyY2UgPSBuZXcgU3RyaW5nUmVzb3VyY2UoZW50cnlJbmZvLmdldEVudHJ5VVJJKCksXG4gICAgICBlbnRyeUluZm8uZ2V0UmVzb3VyY2VVUkkoKSwgdGhpcy5nZXRFbnRyeVN0b3JlKCksIHN0cik7XG5cbiAgICByZXR1cm4gcHJvdG90eXBlRW50cnk7XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgUHJvdG90eXBlRW50cnkgd2hvc2UgcmVzb3VyY2UgaXMgYVxuICAgKiB7QGxpbmsgc3RvcmUvUGlwZWxpbmUgcGlwZWxpbmV9IHRoYXQgaGFzIHRoZSBjdXJyZW50IGNvbnRleHQgYXMgY29udGFpbmVyLlxuICAgKiBDYWxsIHtAbGluayBzdG9yZS9Qcm90b3R5cGVFbnRyeSNjb21taXQgY29tbWl0fSBvbiB0aGUgUHJvdG90eXBlRW50cnkgdG8gYWN0dWFsbHkgY3JlYXRlIGl0XG4gICAqIChyZXR1cm5zIGEgcHJvbWlzZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBhbiBvcHRpb25hbCBpZCBmb3IgdGhlIGVudHJ5LCBmYWlscyB1cG9uIGNvbW1pdCBpZiBhbiBlbnRyeSBleGlzdHNcbiAgICogYWxyZWFkeSB3aXRoIHRoaXMgaWQuXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX1cbiAgICovXG4gIG5ld1BpcGVsaW5lKGlkKSB7XG4gICAgY29uc3QgcHJvdG90eXBlRW50cnkgPSBuZXcgUHJvdG90eXBlRW50cnkodGhpcywgaWQpLnNldEdyYXBoVHlwZSh0eXBlcy5HVF9QSVBFTElORSk7XG4gICAgY29uc3QgZW50cnlJbmZvID0gcHJvdG90eXBlRW50cnkuZ2V0RW50cnlJbmZvKCk7XG4gICAgcHJvdG90eXBlRW50cnkuX3Jlc291cmNlID0gbmV3IFBpcGVsaW5lKGVudHJ5SW5mby5nZXRFbnRyeVVSSSgpLCBlbnRyeUluZm8uZ2V0UmVzb3VyY2VVUkkoKSwgdGhpcy5nZXRFbnRyeVN0b3JlKCksIHt9KTtcblxuICAgIHJldHVybiBwcm90b3R5cGVFbnRyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBmb3IgdGhpcyBjb250ZXh0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2Ugb2YgY29udGV4dCBuYW1lLCBzdWNjZWVkcyBpZiBuYW1lIGlzIG5vdCBpbiB1c2UgYWxyZWFkeSBieSBhbm90aGVyIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0TmFtZShuYW1lKSB7XG4gICAgY29uc3Qgb2xkTmFtZSA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlTdG9yZSgpLmhhbmRsZUFzeW5jKHRoaXMuZ2V0RW50cnlTdG9yZSgpLmdldFJFU1QoKVxuICAgICAgLnB1dChgJHt0aGlzLmdldEVudHJ5VVJJKCl9L25hbWVgLCBKU09OLnN0cmluZ2lmeSh7IG5hbWUgfSkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmdldEVudHJ5KHRydWUpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5nZXRFbnRyeUluZm8oKS5fbmFtZSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LCAoZSkgPT4ge1xuICAgICAgICB0aGlzLl9uYW1lID0gb2xkTmFtZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pLCAnc2V0Q29udGV4dE5hbWUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgdXNlciBvciBncm91cCB0aGF0IGhhcyB0aGlzIGNvbnRleHQgYXMgaG9tZWNvbnRleHQgaWYgYW55LlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnk+fSBpZiBzdWNjZWVkcyBpZiBjb250ZXh0IGEgaG9tZWNvbnRleHQgb2Ygc29tZSB1c2VyIG9yIGdyb3VwLlxuICAgKiBAYXN5bmNcbiAgICovXG4gIGFzeW5jIGdldEhvbWVDb250ZXh0T2YoKSB7XG4gICAgY29uc3QgY29udGV4dEVudHJ5ID0gYXdhaXQgdGhpcy5nZXRFbnRyeSgpO1xuICAgIGNvbnN0IGVzID0gY29udGV4dEVudHJ5LmdldEVudHJ5U3RvcmUoKTtcbiAgICBjb25zdCBncm91cFJlc291cmNlQXJyID0gY29udGV4dEVudHJ5LmdldFJlZmVycmVycygnc3RvcmU6aG9tZUNvbnRleHQnKTtcbiAgICBpZiAoZ3JvdXBSZXNvdXJjZUFyci5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZXMuZ2V0RW50cnkoZXMuZ2V0RW50cnlVUklGcm9tVVJJKGdyb3VwUmVzb3VyY2VBcnJbMF0pKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyB1c2VyIG9yIGdyb3VwIHRoYXQgaGFzIHRoaXMgY29udGV4dCBhcyBob21lIGNvbnRleHQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZShkYXRhKSB7XG4gICAgdGhpcy5fbmFtZSA9IGRhdGEuYWxpYXMgfHwgZGF0YS5uYW1lOyAvLyBUT0RPLCBjaGFuZ2UgdG8gb25seSBuYW1lIGFmdGVyIGNsZWFuLXVwXG4gIH1cbn07XG4iLCJpbXBvcnQgR3JhcGhSZXNvdXJjZSBmcm9tICcuL0dyYXBoJztcbmltcG9ydCB0ZXJtcyBmcm9tICcuL3Rlcm1zJztcblxuLyoqXG4gKiBQaXBlbGluZSBpcyBhIEdyYXBoIHRoYXQgY29udGFpbnMgYW4gb3JkZXJlZCBsaXN0IG9mIHRyYW5zZm9ybXMsIGVhY2ggdHJhbnNmb3JtIGlzIG9mIGFcbiAqIHNwZWNpZmljIHR5cGUgYW5kIHRha2VzIGEgc2V0IG9mIGFyZ3VtZW50cy5cbiAqXG4gKiBAZXhwb3J0cyBzdG9yZS9QaXBlbGluZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaXBlbGluZSBleHRlbmRzIEdyYXBoUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIGRlc3RpbmF0aW9uIHdoZXJlIHRoZSByZXN1bHQgKGluIHRoZSBmb3JtIG9mIGEgc2luZ2xlIFJERiBncmFwaCkgc2hvdWxkXG4gICAqIGVuZCB1cCAod2l0aGluIHRoZSBzcGVjaWZpZWQgZW50cnkncyBncmFwaCByZXNvdXJjZSkuXG4gICAqIElmIGVtcHR5IHN0cmluZywgYSBuZXcgZW50cnkgd2lsbCBiZSBjcmVhdGVkIHRvIHN0b3JlIHRoZSByZXN1bHRzLlxuICAgKiBJZiB1bmRlZmluZWQsIHRoZSByZXN1bHQgd2lsbCBub3QgZ28gdG8gYSBzaW5nbGUgZGVzdGluYXRpb24sIHNlZSBnZXREZXRlY3REZXN0aW5hdGlvblxuICAgKiBpbnN0ZWFkLiBTb21lIHRyYW5zZm9ybSB0eXBlcyBkb2VzIG5vdCByZXNwZWN0IHRoZSBkZXN0aW5hdGlvbiwgZS5nLiBjdXJyZW50bHkgUk9XU1RPUkVcbiAgICogd2hpY2ggYWx3YXlzIGNyZWF0ZXMgYSBuZXcgZW50cnkgY29udGFpbmluZyB0aGUgcmVzdWx0cy5cbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ3x1bmRlZmluZWR9IGFuIGVudHJ5IFVSSSB3aGVyZSB0aGUgcmVzdWx0IHNob3VsZCBnbywgZW1wdHkgc3RyaW5nIGZvciBuZXdcbiAgICogZW50cmllcyBmb3IgZXZlcnkgZXhlY3V0aW9uIG9yIHVuZGVmaW5lZCBpZiBubyBkZXN0aW5hdGlvbiBoYXMgYmVlbiBzcGVjaWZpZWQuXG4gICAqL1xuICBnZXREZXN0aW5hdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3JhcGguZmluZEZpcnN0VmFsdWUobnVsbCwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtRGVzdGluYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgc3RvcmUvUGlwZWxpbmUjZ2V0RGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IGVudHJ5T3JFbnRyeVVSSSBlbnRyeSBVUkksIGVtcHR5IHN0cmluZyBmb3IgbmV3IGVudHJpZXMgZXZlcnkgdGltZSxcbiAgICogdXNlIHVuZGVmaW5lZCB0byByZW1vdmUgZGVzdGluYXRpb24gc2V0dGluZyBhbHRvZ2V0aGVyLlxuICAgKi9cbiAgc2V0RGVzdGluYXRpb24oZW50cnlPckVudHJ5VVJJKSB7XG4gICAgdGhpcy5fZ3JhcGguZmluZEFuZFJlbW92ZShudWxsLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1EZXN0aW5hdGlvbik7XG4gICAgY29uc3QgdXJpID0gdHlwZW9mIGVudHJ5T3JFbnRyeVVSSSA9PT0gJ29iamVjdCcgJiYgZW50cnlPckVudHJ5VVJJLmdldFVSSSA/XG4gICAgICBlbnRyeU9yRW50cnlVUkkuZ2V0VVJJKCkgOiBlbnRyeU9yRW50cnlVUkk7XG4gICAgdGhpcy5fZ3JhcGguYWRkKHRoaXMuX3Jlc291cmNlVVJJLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1EZXN0aW5hdGlvbiwgdXJpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3QgZGVzdGluYXRpb24gbWVhbnMgdGhhdCB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IHRyYW5zZm9ybSAoYSBncmFwaCkgc2hvdWxkIGJlIGF0dGVtcHRlZFxuICAgKiB0byBiZSBzcGxpdCBpbnRvIG11bHRpcGxlIGVudHJpZXMgYWNjb3JkaW5nIHRvIG1hcmtpbmdzIGluIHRoZSBncmFwaC5cbiAgICpcbiAgICogSS5lLiBpdCBkZXRlY3RzIGFuZCBhZGRzIGEgc2V0IG9mIGVudHJpZXMgZnJvbSB0aGUgZ3JhcGggdmlhIHRoZSBhbm9ueW1vdXMgY2xvc3VyZVxuICAgKiBhbGdvcml0aG0gc3RhcnRpbmcgZnJvbSBibGFuayBub2RlcyByZXNvdXJjZXNcbiAgICogd2l0aCBlaXRoZXIgb25lIG9mIHRoZSB0d28gZm9sbG93aW5nIHByb3BlcnRpZXMgdGhhdCBib3RoIGluZGljYXRlIHdoaWNoIGVudHJ5SWQgdG8gdXNlOjx1bD5cbiAgICogPGxpPmh0dHA6Ly9lbnRyeXN0b3JlLm9yZy90ZXJtcy9tZXJnZVJlc291cmNlSWQgb3IgdGhlPC9saT5cbiAgICogPGxpPmh0dHA6Ly9lbnRyeXN0b3JlLm9yZy90ZXJtcy9yZWZlcmVuY2VSZXNvdXJjZUlkPC9saT5cbiAgICogPC91bD5cbiAgICogVGhlIG1lcmdlUmVzb3VyY2VJZCBpbmRpY2F0ZXMgdGhhdCB0aGUgY29ycmVzcG9uZGluZyBlbnRyeSBzaG91bGQgYmUgbWVyZ2VkIG9yIGNyZWF0ZWQgaWYgaXRcbiAgICogZG9lcyBub3QgZXhpc3QuXG4gICAqIFRoZSByZWZlcmVuY2VSZXNvdXJjZUlkIG9ubHkgaW5kaWNhdGVzIHRoYXQgYW5vdGhlciBlbnRyeSAodmlhIGl0cyByZXNvdXJjZSBpZCkgc2hvdWxkIGJlXG4gICAqIHJlZmVyZW5jZWQgZnJvbVxuICAgKiB0aGUgZ3JhcGggKHdoaWNoIG1pZ2h0IGJlIGluc2lkZSBhbiBlbnRyeSBpbmRpY2F0ZWQgYnkgbWVyZ2VSZXNvdXJjZUlkKS5cbiAgICpcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGVzdGluYXRpb24gc2hvdWxkIGJlIGRldGVjdGVkLlxuICAgKi9cbiAgZ2V0RGV0ZWN0RGVzdGluYXRpb24oKSB7XG4gICAgY29uc3QgdmFsID0gdGhpcy5fZ3JhcGguZmluZEZpcnN0VmFsdWUobnVsbCwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtRGV0ZWN0RGVzdGluYXRpb24pO1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHZhbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3RydWUnKSA9PT0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBzZWUgc3RvcmUvUGlwZWxpbmUjZ2V0RGV0ZWN0RGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtib29sZWFufSBkZXRlY3QgaWYgdHJ1ZSBkZXRlY3Rpb24gb2YgZW50cnkgcmVmZXJlbmNlcyBpbiB0aGUgZ3JhcGggaXMgYXR0ZW1wdGVkLlxuICAgKi9cbiAgc2V0RGV0ZWN0RGVzdGluYXRpb24oZGV0ZWN0KSB7XG4gICAgdGhpcy5fZ3JhcGguZmluZEFuZFJlbW92ZShudWxsLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1EZXRlY3REZXN0aW5hdGlvbik7XG4gICAgaWYgKGRldGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5fZ3JhcGguYWRkKHRoaXMuX3Jlc291cmNlVVJJLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1EZXRlY3REZXN0aW5hdGlvbiwge1xuICAgICAgICB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAndHJ1ZScsIGRhdGF0eXBlOiB0ZXJtcy54c2QuYm9vbGVhbixcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nW119IG9mIHRyYW5zZm9ybSBpZHMsIHR5cGljYWxseSBibGFuayBub2RlIGlkcywgaGVuY2UsIHRoZXkgYXJlIG5vdFxuICAgKiBwcmVzZXJ2ZWQgYmV0d2VlbiBzYXZlcyAvIGxvYWRzIHNvIHRha2UgY2FyZS5cbiAgICovXG4gIGdldFRyYW5zZm9ybXMoKSB7XG4gICAgY29uc3Qgc3RtdHMgPSB0aGlzLl9ncmFwaC5maW5kKG51bGwsIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybSk7XG4gICAgY29uc3QgYXJyID0gc3RtdHMubWFwKHN0bXQgPT4gc3RtdC5nZXRWYWx1ZSgpKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBhcnIuc29ydCgodHIxLCB0cjIpID0+IHtcbiAgICAgIGNvbnN0IHByMSA9IHNlbGYuZ2V0UHJpb3JpdHkodHIxKTtcbiAgICAgIGNvbnN0IHByMiA9IHNlbGYuZ2V0UHJpb3JpdHkodHIyKTtcbiAgICAgIHJldHVybiBwcjEgLSBwcjI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhIHRyYW5zZm9ybSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCByZXR1cm5zIGl0cyBpZC5cbiAgICpcbiAgICogQHBhcmFtIHRyYW5zZm9ybVR5cGUgdGhlIHRyYW5zZm9ybSB0eXBlIHRvIGxvb2sgZm9yXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSB0cmFuc2Zvcm0gaWQsIHVuZGVmaW5lZCBpZiBubyB0cmFuc2Zvcm0gd2FzIGZvdW5kIGZvciB0aGUgZ2l2ZW4gdHlwZVxuICAgKi9cbiAgZ2V0VHJhbnNmb3JtRm9yVHlwZSh0cmFuc2Zvcm1UeXBlKSB7XG4gICAgbGV0IHRyYW5zZm9ybUlkO1xuICAgIGNvbnN0IHRySWRzID0gdGhpcy5nZXRUcmFuc2Zvcm1zKCk7XG4gICAgdHJJZHMuZm9yRWFjaCgodHJJZCkgPT4ge1xuICAgICAgLy8gZ2V0IHRyYW5zZm9ybSB0eXBlIGFuZCBjaGVjayBmb3IgZmV0Y2ggYW5kIGdldCB1cmxcbiAgICAgIGlmICh0aGlzLmdldFRyYW5zZm9ybVR5cGUodHJJZCkgPT09IHRyYW5zZm9ybVR5cGUpIHtcbiAgICAgICAgdHJhbnNmb3JtSWQgPSB0cklkO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRyYW5zZm9ybUlkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgdHJhbnNmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBvbmUgb2YgdGhlIFtnZXRUcmFuc2Zvcm1zXXtAbGluayBzdG9yZS9QaXBlbGluZSNnZXRUcmFuc2Zvcm1zfS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgYSBoYXNoIG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgdGhpcyB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBuZXdseSB0cmFuc2Zvcm1zIGlkIChmb3IgdGhpcyBzZXNzaW9uLCBtYXkgY2hhbmdlIGFmdGVyIHNhdmUgLyBsb2FkXG4gICAqIHNvIHRha2UgY2FyZSkuXG4gICAqL1xuICBhZGRUcmFuc2Zvcm0odHlwZSwgYXJncykge1xuICAgIGNvbnN0IHRyYW5zZm9ybXMgPSB0aGlzLmdldFRyYW5zZm9ybXMoKTtcbiAgICBjb25zdCBwcmlvcml0eSA9IHRyYW5zZm9ybXMubGVuZ3RoID4gMCA/XG4gICAgICB0aGlzLmdldFByaW9yaXR5KHRyYW5zZm9ybXNbdHJhbnNmb3Jtcy5sZW5ndGggLSAxXSkgOiAwO1xuICAgIGNvbnN0IHN0bXQgPSB0aGlzLl9ncmFwaC5hZGQodGhpcy5fcmVzb3VyY2VVUkksIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybSk7XG4gICAgY29uc3QgaWQgPSBzdG10LmdldFZhbHVlKCk7XG4gICAgdGhpcy5zZXRUcmFuc2Zvcm1UeXBlKGlkLCB0eXBlKTtcbiAgICB0aGlzLnNldFByaW9yaXR5KGlkLCBwcmlvcml0eSArIDEpO1xuICAgIHRoaXMuc2V0VHJhbnNmb3JtQXJndW1lbnRzKGlkLCBhcmdzKTtcblxuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgdHJhbnNmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNmb3JtSWQgdGhlIGJsYW5rIG5vZGUgb2YgYSBzcGVjaWZpYyB0cmFuc2Zvcm0gYXMgcmV0cmlldmVkIGJ5XG4gICAqIFtnZXRUcmFuc2Zvcm1zXXtAbGluayBzdG9yZS9QaXBlbGluZSNnZXRUcmFuc2Zvcm1zfS5cbiAgICogQHNlZSBzdG9yZS9QaXBlbGluZSNnZXRUcmFuc2Zvcm1zXG4gICAqL1xuICByZW1vdmVUcmFuc2Zvcm0odHJhbnNmb3JtSWQpIHtcbiAgICB0aGlzLnNldFRyYW5zZm9ybUFyZ3VtZW50cyh0cmFuc2Zvcm1JZCwge30pO1xuICAgIHRoaXMuX2dyYXBoLmZpbmRBbmRSZW1vdmUodHJhbnNmb3JtSWQpO1xuICAgIHRoaXMuX2dyYXBoLmZpbmRBbmRSZW1vdmUobnVsbCwgbnVsbCwgeyB0eXBlOiAnYm5vZGUnLCB2YWx1ZTogdHJhbnNmb3JtSWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgb3JkZXIgb2YgdGhlIHRyYW5zZm9ybXMgYnkgY2hhbmdpbmcgdGhlaXIgcHJpb3JpdHkgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3Jtc1xuICAgKiBbZ2V0VHJhbnNmb3Jtc117QGxpbmsgc3RvcmUvUGlwZWxpbmUjZ2V0VHJhbnNmb3Jtc30uXG4gICAqIEBzZWUgc3RvcmUvUGlwZWxpbmUjZ2V0VHJhbnNmb3Jtc1xuICAgKi9cbiAgc2V0T3JkZXJPZlRyYW5zZm9ybXModHJhbnNmb3Jtcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fZ3JhcGguZmluZEFuZFJlbW92ZSh0cmFuc2Zvcm1zW2ldLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1Qcmlvcml0eSk7XG4gICAgICB0aGlzLl9ncmFwaC5hZGQodHJhbnNmb3Jtc1tpXSwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtUHJpb3JpdHksIHtcbiAgICAgICAgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogYCR7aX1gLCBkYXRhdHlwZTogdGVybXMueHNkLmludGVnZXIsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zZm9ybUlkIHRoZSBibGFuayBub2RlIG9mIGEgc3BlY2lmaWMgdHJhbnNmb3JtIGFzIHJldHJpZXZlZCBieVxuICAgKiBbZ2V0VHJhbnNmb3Jtc117QGxpbmsgc3RvcmUvUGlwZWxpbmUjZ2V0VHJhbnNmb3Jtc30uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBwcmlvcml0eSBhcyBhIGZsb2F0LlxuICAgKi9cbiAgZ2V0UHJpb3JpdHkodHJhbnNmb3JtSWQpIHtcbiAgICBsZXQgcHJpbyA9IHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRyYW5zZm9ybUlkLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1Qcmlvcml0eSk7XG4gICAgaWYgKHR5cGVvZiBwcmlvID09PSAnc3RyaW5nJykge1xuICAgICAgcHJpbyA9IHBhcnNlRmxvYXQocHJpbyk7XG4gICAgICBpZiAoIWlzTmFOKHByaW8pKSB7XG4gICAgICAgIHJldHVybiBwcmlvO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2Ugc2V0T3JkZXJPZlRyYW5zZm9ybXMgaW5zdGVhZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zZm9ybUlkIHRoZSBibGFuayBub2RlIG9mIGEgc3BlY2lmaWMgdHJhbnNmb3JtIGFzIHJldHJpZXZlZCBieVxuICAgKiBbZ2V0VHJhbnNmb3Jtc117QGxpbmsgc3RvcmUvUGlwZWxpbmUjZ2V0VHJhbnNmb3Jtc30uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvIHRoZSBwcmlvcml0eSBhcyBhIGZsb2F0LlxuICAgKiBAc2VlIHN0b3JlL1BpcGVsaW5lI3NldE9yZGVyT2ZUcmFuc2Zvcm1zXG4gICAqL1xuICBzZXRQcmlvcml0eSh0cmFuc2Zvcm1JZCwgcHJpbykge1xuICAgIHRoaXMuX2dyYXBoLmZpbmRBbmRSZW1vdmUodHJhbnNmb3JtSWQsIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybVByaW9yaXR5KTtcbiAgICB0aGlzLl9ncmFwaC5hZGQodHJhbnNmb3JtSWQsIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybVByaW9yaXR5LCB7XG4gICAgICB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiBgJHtwcmlvfWAsIGRhdGF0eXBlOiB0ZXJtcy54c2QuaW50ZWdlcixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNmb3JtSWQgdGhlIGJsYW5rIG5vZGUgb2YgYSBzcGVjaWZpYyB0cmFuc2Zvcm0gYXMgcmV0cmlldmVkIGJ5XG4gICAqIFtnZXRUcmFuc2Zvcm1zXXtAbGluayBzdG9yZS9QaXBlbGluZSNnZXRUcmFuc2Zvcm1zfS5cbiAgICogQHJldHVybnMge1N0cmluZ30gb25lIG9mIHRoZSB2YWx1ZXMgc3BlY2lmaWVkIGluIHtAbGluayBzdG9yZS9QaXBlbGluZSN0cmFuc2Zvcm1UeXBlc30uXG4gICAqL1xuICBnZXRUcmFuc2Zvcm1UeXBlKHRyYW5zZm9ybUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRyYW5zZm9ybUlkLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1UeXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNmb3JtSWQgdGhlIGJsYW5rIG5vZGUgb2YgYSBzcGVjaWZpYyB0cmFuc2Zvcm0gYXMgcmV0cmlldmVkIGJ5XG4gICAqIFtnZXRUcmFuc2Zvcm1zXXtAbGluayBzdG9yZS9QaXBlbGluZSNnZXRUcmFuc2Zvcm1zfS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zZm9ybVR5cGUgb25lIG9mIHRoZSBvcHRpb25zIGluIHtAbGluayBzdG9yZS9QaXBlbGluZSN0cmFuc2Zvcm1UeXBlc30uXG4gICAqL1xuICBzZXRUcmFuc2Zvcm1UeXBlKHRyYW5zZm9ybUlkLCB0cmFuc2Zvcm1UeXBlKSB7XG4gICAgdGhpcy5fZ3JhcGguZmluZEFuZFJlbW92ZSh0cmFuc2Zvcm1JZCwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtVHlwZSk7XG4gICAgdGhpcy5fZ3JhcGguYWRkTCh0cmFuc2Zvcm1JZCwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtVHlwZSwgdHJhbnNmb3JtVHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zZm9ybUlkIHRoZSBibGFuayBub2RlIG9mIGEgc3BlY2lmaWMgdHJhbnNmb3JtIGFzIHJldHJpZXZlZFxuICAgKiBieSBbZ2V0VHJhbnNmb3Jtc117QGxpbmsgc3RvcmUvUGlwZWxpbmUjZ2V0VHJhbnNmb3Jtc30uICBJZiBubyBpZCBpcyBwcm92aWRlZFxuICAgKiBhcmd1bWVudHMgZnJvbSBhbGwgdHJhbnNmb3JtcyB3aWxsIGJlIHJldHVybmVkIGluIGEgc2luZ2xlIG1lcmdlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtPYmplY3R8dW5kZWZpbmVkfSB0aGUgYXJndW1lbnRzIGZvciBhIHRyYW5zZm9ybSAob3IgYWxsIHRyYW5zZm9ybXMpIGFzIGFuIG9iamVjdFxuICAgKiBoYXNoIHdpdGggcHJvcGVydHkgdmFsdWUgcGFpcnMuXG4gICAqL1xuICBnZXRUcmFuc2Zvcm1Bcmd1bWVudHModHJhbnNmb3JtSWQpIHtcbiAgICBsZXQgYXJncztcbiAgICBjb25zdCBzdG10cyA9IHRoaXMuX2dyYXBoLmZpbmQodHJhbnNmb3JtSWQsIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybUFyZ3VtZW50KTtcbiAgICBzdG10cy5mb3JFYWNoKChzdG10KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZShzdG10LmdldFZhbHVlKCksXG4gICAgICAgIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybUFyZ3VtZW50S2V5KTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZ3JhcGguZmluZEZpcnN0VmFsdWUoc3RtdC5nZXRWYWx1ZSgpLFxuICAgICAgICB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1Bcmd1bWVudFZhbHVlKTtcbiAgICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgICAgYXJnc1trZXldID0gdmFsdWU7XG4gICAgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gYXJncztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNmb3JtSWQgdGhlIGJsYW5rIG5vZGUgb2YgYSBzcGVjaWZpYyB0cmFuc2Zvcm0gYXMgcmV0cmlldmVkXG4gICAqIGJ5IFtnZXRUcmFuc2Zvcm1zXXtAbGluayBzdG9yZS9QaXBlbGluZSNnZXRUcmFuc2Zvcm1zfS5cbiAgICogQHJldHVybnMge0FycmF5fSBvZiBhcmd1bWVudHMnIGtleXNcbiAgICovXG4gIGdldFRyYW5zZm9ybUFyZ3VtZW50c0tleXModHJhbnNmb3JtSWQgPSBudWxsKSB7XG4gICAgY29uc3QgYXJncyA9IFtdO1xuICAgIGlmICh0cmFuc2Zvcm1JZCkge1xuICAgICAgY29uc3Qgc3RtdHMgPSB0aGlzLl9ncmFwaC5maW5kKHRyYW5zZm9ybUlkLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1Bcmd1bWVudCk7XG4gICAgICBzdG10cy5mb3JFYWNoKChzdG10KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLl9ncmFwaC5maW5kKHN0bXQuZ2V0VmFsdWUoKSwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtQXJndW1lbnRLZXkpO1xuICAgICAgICBhcmdzLnB1c2goa2V5cy5tYXAoa2V5ID0+IGtleS5nZXRWYWx1ZSgpKSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgYXJndW1lbnRzIHdpdGggdGhvc2UgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc2Zvcm1JZCB0aGUgYmxhbmsgbm9kZSBvZiBhIHNwZWNpZmljIHRyYW5zZm9ybSBhcyByZXRyaWV2ZWQgYnlcbiAgICogW2dldFRyYW5zZm9ybXNde0BsaW5rIHN0b3JlL1BpcGVsaW5lI2dldFRyYW5zZm9ybXN9LlxuICAgKiBAcGFyYW0ge09iamVjdH0gYXJncyB0aGUgYXJndW1lbnRzIGZvciB0aGUgdHJhbnNmb3JtIGFzIGFuIG9iamVjdCBoYXNoIHdpdGggcHJvcGVydHkgdmFsdWUgcGFpcnMuXG4gICAqL1xuICBzZXRUcmFuc2Zvcm1Bcmd1bWVudHModHJhbnNmb3JtSWQsIGFyZ3MpIHtcbiAgICBjb25zdCBzdG10cyA9IHRoaXMuX2dyYXBoLmZpbmQodHJhbnNmb3JtSWQsIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybUFyZ3VtZW50KTtcbiAgICBzdG10cy5mb3JFYWNoKChzdG10KSA9PiB7XG4gICAgICB0aGlzLl9ncmFwaC5maW5kQW5kUmVtb3ZlKHN0bXQuZ2V0VmFsdWUoKSwgdGVybXMucGlwZWxpbmUudHJhbnNmb3JtQXJndW1lbnRLZXkpO1xuICAgICAgdGhpcy5fZ3JhcGguZmluZEFuZFJlbW92ZShzdG10LmdldFZhbHVlKCksIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybUFyZ3VtZW50VmFsdWUpO1xuICAgICAgdGhpcy5fZ3JhcGgucmVtb3ZlKHN0bXQpO1xuICAgIH0sIHRoaXMpO1xuICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgbmV3QXJnID0gdGhpcy5fZ3JhcGguYWRkKHRyYW5zZm9ybUlkLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1Bcmd1bWVudCk7XG4gICAgICB0aGlzLl9ncmFwaC5hZGRMKG5ld0FyZy5nZXRWYWx1ZSgpLCB0ZXJtcy5waXBlbGluZS50cmFuc2Zvcm1Bcmd1bWVudEtleSwga2V5KTtcbiAgICAgIHRoaXMuX2dyYXBoLmFkZEwobmV3QXJnLmdldFZhbHVlKCksIHRlcm1zLnBpcGVsaW5lLnRyYW5zZm9ybUFyZ3VtZW50VmFsdWUsIGFyZ3Nba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgdHJhbnNmb3JtIGFyZ3VtZW50IHZhbHVlIGZvciBhIHNwZWNpZmljIHRyYW5zZm9ybSB0eXBlIGFuZCBwcm9wZXJ0eSAoa2V5KS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zZm9ybVR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEByZXR1cm5zIHsqfHVuZGVmaW5lZH1cbiAgICovXG4gIGdldFRyYW5zZm9ybVByb3BlcnR5KHRyYW5zZm9ybVR5cGUsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgdGlkID0gdGhpcy5nZXRUcmFuc2Zvcm1Gb3JUeXBlKHRyYW5zZm9ybVR5cGUpO1xuICAgIGlmICh0aWQpIHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMuZ2V0VHJhbnNmb3JtQXJndW1lbnRzKHRpZCk7XG4gICAgICBpZiAob2JqICYmIHByb3BlcnR5IGluIG9iaikge1xuICAgICAgICByZXR1cm4gb2JqW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG9yIHVwZGF0ZXMgYW4gaW5kaXZpZHVhbCBwcm9wZXJ0eSAoa2V5LXZhbHVlIHBhaXIgaW4gYXJndW1lbnRzKSBvZiBhIHRyYW5zZm9ybS5cbiAgICogVGhlIHRyYW5zZm9ybSBpcyBpZGVudGlmaWVkIGVpdGhlciBleHBsaWNpdGx5IGJ5IGFuIGlkIG9yIHZpYSBhIHRyYW5zZm9ybVR5cGUgKGFzc3VtZWRcbiAgICogdW5pcXVlKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zZm9ybUlkT3JUeXBlIGNvcnJlc3BvbmRzIHRvIHRoZSB0cmFuc2Zvcm0gdG8gY2hhbmdlIHRoZSBwcm9wZXJ0eSBmb3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldFRyYW5zZm9ybVByb3BlcnR5KHRyYW5zZm9ybUlkT3JUeXBlLCBrZXksIHZhbHVlKSB7XG4gICAgbGV0IG9iaiA9IHRoaXMuZ2V0VHJhbnNmb3JtQXJndW1lbnRzKHRyYW5zZm9ybUlkT3JUeXBlKTtcbiAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICB0aGlzLnNldFRyYW5zZm9ybUFyZ3VtZW50cyh0cmFuc2Zvcm1JZE9yVHlwZSwgb2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGlkID0gdGhpcy5nZXRUcmFuc2Zvcm1Gb3JUeXBlKHRyYW5zZm9ybUlkT3JUeXBlKTtcbiAgICAgIG9iaiA9IHRoaXMuZ2V0VHJhbnNmb3JtQXJndW1lbnRzKHRpZCk7XG4gICAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc2Zvcm1Bcmd1bWVudHModGlkLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgcGlwZWxpbmUgd2l0aCB0aGUgZ2l2ZW4gc291cmNlIGVudHJ5IGFzIGlucHV0LCBpZiBub3QgcHJvdmlkZWQgdGhlIHBpcGVsaW5lXG4gICAqIHdpbGwgYmUgdXNlZCBhcyBzb3VyY2VlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeX0gc291cmNlRW50cnkgYW4gb3B0aW9uYWwgZW50cnkgY29udGFpbmluZyBzb21lIGRhdGEgdGhhdCBpcyB0byBiZVxuICAgKiB0cmFuc2Zvcm1lZCwgZS5nLiBjYW4gYmUgYSBDU1YgZmlsZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdXNlZCBpbiB0aGUgZXhlY3V0aW9uIG9mIHRoZSBwaXBlbGluZSwgZS5nLlxuICAgKiBhY3Rpb24gKHdpdGggdmFsdWUgY3JlYXRlLCByZXBsYWNlIG9yIGFwcGVuZCkgYW5kIGRhdGFzZXRVUkwgcG9pbnRpbmcgdG8gdGhlIGV4aXN0aW5nXG4gICAqIGRhdGFzZXQgaW4gcm93c3RvcmUuXG4gICAqIEByZXR1cm5zIHtlbnRyeVVSSUFycmF5UHJvbWlzZX0gYW4gYXJyYXkgb2YgZW50cnkgVVJJcyB0aGF0IHdoZXJlIGNyZWF0ZWQvbW9kaWZpZWQgYnlcbiAgICogdGhpcyBleGVjdXRpb24uXG4gICAqL1xuICBleGVjdXRlKHNvdXJjZUVudHJ5LCBwYXJhbXMpIHtcbiAgICBsZXQgZXhlY3V0ZVVSSTtcbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIGNvbnN0IF9wYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgX3BhcmFtcy5waXBlbGluZSA9IHRoaXMuZ2V0RW50cnlVUkkoKTtcbiAgICBpZiAoc291cmNlRW50cnkgPT0gbnVsbCkge1xuICAgICAgZXhlY3V0ZVVSSSA9IGAke2VzLmdldEJhc2VVUkkoKSArIGVzLmdldENvbnRleHRJZCh0aGlzLmdldEVudHJ5VVJJKCkpfS9leGVjdXRlYDtcbiAgICB9IGVsc2Uge1xuICAgICAgX3BhcmFtcy5zb3VyY2UgPSBzb3VyY2VFbnRyeS5nZXRVUkkoKTtcbiAgICAgIGV4ZWN1dGVVUkkgPSBgJHtzb3VyY2VFbnRyeS5nZXRDb250ZXh0KCkuZ2V0UmVzb3VyY2VVUkkoKX0vZXhlY3V0ZWA7XG4gICAgfVxuICAgIHJldHVybiBlcy5oYW5kbGVBc3luYyhlcy5nZXRSRVNUKCkucG9zdChleGVjdXRlVVJJLCBKU09OLnN0cmluZ2lmeShfcGFyYW1zKSksICdleGVjdXRlJylcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmJvZHkucmVzdWx0LCBlcnIgPT4ge1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEF2YWlsYWJsZSB0cmFuc2Zvcm1zICh0eXBlcykuXG4gKlxuICogQHR5cGUge3tUQUJVTEFSOiBzdHJpbmcsIFJPV1NUT1JFOiBzdHJpbmd9fVxuICovXG5QaXBlbGluZS5wcm90b3R5cGUudHJhbnNmb3JtVHlwZXMgPSB7XG4gIFRBQlVMQVI6ICd0YWJ1bGFyJyxcbiAgUk9XU1RPUkU6ICdyb3dzdG9yZScsXG4gIEVNUFRZOiAnZW1wdHknLFxuICBGRVRDSDogJ2ZldGNoJyxcbiAgVkFMSURBVEU6ICd2YWxpZGF0ZScsXG4gIE1FUkdFOiAnbWVyZ2UnLFxufTtcblxuIiwiaW1wb3J0IEVudHJ5IGZyb20gJy4vRW50cnknO1xuaW1wb3J0IEVudHJ5SW5mbyBmcm9tICcuL0VudHJ5SW5mbyc7XG5pbXBvcnQgdGVybXMgZnJvbSAnLi90ZXJtcyc7XG5cbi8qKlxuICogQSBQcm90b3R5cGVFbnRyeSBpcyB1c2VkIHRvIGNyZWF0ZSBuZXcgZW50cmllcyBieSBjb2xsZWN0aW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbml0aWFsXG4gKiBzdGF0ZSBvZiB0aGUgZW50cnkgdG8gc2VuZCBhbG9uZyB0byB0aGUgcmVwb3NpdG9yeSB1cG9uIGNyZWF0aW9uLlxuICpcbiAqIEFsbCBhY2Nlc3MgYW5kIHV0aWxpdHkgbWV0aG9kcyBmcm9tIEVudHJ5IGlzIGp1c3QgaW5oZXJpdGVkLiBTb21lIG1ldGhvZHMgaGF2ZSBiZWVuIG1vdmVkIG92ZXJcbiAqIGZyb20gRW50cnlJbmZvcm1hdGlvbiB0byBhbGxvdyBlYXNpZXIgbWV0aG9kIGNoYWluaW5nLiBGaW5hbGx5IHNvbWUgaW5mb3JtYXRpb24gY2Fubm90IGJlXG4gKiBjaGFuZ2VkIGluIGFuIGVudHJ5LCBlLmcuIHRoZSBlbnRyeSwgZ3JhcGggYW5kIHJlc291cmNlIHR5cGVzLCBidXQgYXJlIGNydWNpYWwgYmVmb3JlIGNyZWF0aW9uLlxuICogSGVuY2UsIHNvbWUgbWV0aG9kcyBoYXZlIGJlZW4gaW50cm9kdWNlZCB0byBjb3ZlciBmb3IgdGhpcyBuZWVkLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL1Byb3RvdHlwZUVudHJ5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3RvdHlwZUVudHJ5IGV4dGVuZHMgRW50cnkge1xuICAvKipcbiAgICogQHBhcmFtIHtzdG9yZS9Db250ZXh0fSBjb250ZXh0IHdoZXJlIHRoaXMgcHJvdG90eXBlRW50cnkgYmVsb25ncy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gZW50cnkgaWRlbnRpZmllciwgaWYgbm90IHVuaXF1ZSBpbiB0aGUgY29udGV4dCB0aGUgc3Vic2VxdWVudCBjb21taXRcbiAgICogd2lsbCBmYWlsLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29udGV4dCwgaWQpIHtcbiAgICBjb25zdCBfaWQgPSBpZCB8fCAnX25ld0lkJztcbiAgICBjb25zdCBjcnUgPSBjb250ZXh0LmdldFJlc291cmNlVVJJKCk7XG4gICAgY29uc3QgZW50cnlJbmZvID0gbmV3IEVudHJ5SW5mbyhgJHtjcnV9L2VudHJ5LyR7X2lkfWAsIG51bGwsIGNvbnRleHQuZ2V0RW50cnlTdG9yZSgpKTtcbiAgICBpZiAoY29udGV4dC5nZXRJZCgpID09PSAnX2NvbnRleHRzJykge1xuICAgICAgZW50cnlJbmZvLl9yZXNvdXJjZVVSSSA9IGNvbnRleHQuZ2V0RW50cnlTdG9yZSgpLmdldEJhc2VVUkkoKSArIF9pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50cnlJbmZvLl9yZXNvdXJjZVVSSSA9IGAke2NydX0vcmVzb3VyY2UvJHtfaWR9YDtcbiAgICB9XG4gICAgY29uc3Qgb2xkU2V0UmVzb3VyY2VVUkkgPSBlbnRyeUluZm8uc2V0UmVzb3VyY2VVUkk7XG4gICAgZW50cnlJbmZvLnNldFJlc291cmNlVVJJID0gZnVuY3Rpb24gKHVyaSkge1xuICAgICAgdGhpcy5fcmVzb3VyY2VVUkkgPSB1cmk7XG4gICAgICBvbGRTZXRSZXNvdXJjZVVSSS5jYWxsKHRoaXMsIHVyaSk7XG4gICAgfTtcbiAgICBlbnRyeUluZm8uZ2V0UmVzb3VyY2VVUkkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzb3VyY2VVUkk7XG4gICAgfTtcblxuICAgIHN1cGVyKGNvbnRleHQsIGVudHJ5SW5mbyk7IC8vIENhbGwgdGhlIHN1cGVyIGNvbnN0cnVjdG9yLlxuICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICB0aGlzLnNwZWNpZmljSWQgPSBfaWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERpcmVjdCBhY2Nlc3MgbWV0aG9kIGZvciB0aGUgcmVzb3VyY2UgaW5zdGFuY2UgZm9yIHByb3JvdHlwZUVudHJpZXMuXG4gICAqIEByZXR1cm5zIHtzdG9yZS9SZXNvdXJjZX1cbiAgICovXG4gIGdldFJlc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvc2VzIHRoZSB7QGxpbmsgc3RvcmUvRW50cnlJbmZvI3NldEFDTCBzZXRBQ0x9IG1ldGhvZCBmcm9tIHtAbGluayBzdG9yZS9FbnRyeUluZm99XG4gICAqIG9uIFByb3RvdHlwZUVudHJ5XG4gICAqIGFuZCBtYWtlcyBpdCBjaGFpbmFibGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX0gLSB0byBhbGxvdyB0aGUgbWV0aG9kIGNhbGwgdG8gYmUgY2hhaW5lZC5cbiAgICovXG4gIHNldEFDTCgpIHtcbiAgICBFbnRyeUluZm8ucHJvdG90eXBlLnNldEFDTC5hcHBseSh0aGlzLl9lbnRyeUluZm8sIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3NlcyB0aGUge0BsaW5rIHN0b3JlL0VudHJ5SW5mbyNzZXRSZXNvdXJjZVVSSSBzZXRSZXNvdXJjZVVSSX0gbWV0aG9kIGZyb21cbiAgICoge0BsaW5rIHN0b3JlL0VudHJ5SW5mb30gb24gdGhpcyBjbGFzc1xuICAgKiBhbmQgbWFrZXMgaXQgY2hhaW5hYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9IC0gdG8gYWxsb3cgdGhlIG1ldGhvZCBjYWxsIHRvIGJlIGNoYWluZWQuXG4gICAqL1xuICBzZXRSZXNvdXJjZVVSSSgpIHtcbiAgICB0aGlzLl9lbnRyeUluZm8uc2V0UmVzb3VyY2VVUkkoLi4uYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvc2VzIHRoZSB7QGxpbmsgc3RvcmUvRW50cnlJbmZvI3NldEV4dGVybmFsTWV0YWRhdGFVUkkgc2V0RXh0ZXJuYWxNZXRhZGF0YVVSSX0gbWV0aG9kXG4gICAqIGZyb20ge0BsaW5rIHN0b3JlL0VudHJ5SW5mb30gb24gdGhpcyBjbGFzc1xuICAgKiBhbmQgbWFrZXMgaXQgY2hhaW5hYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9IC0gdG8gYWxsb3cgdGhlIG1ldGhvZCBjYWxsIHRvIGJlIGNoYWluZWQuXG4gICAqL1xuICBzZXRFeHRlcm5hbE1ldGFkYXRhVVJJKCkge1xuICAgIEVudHJ5SW5mby5wcm90b3R5cGUuc2V0RXh0ZXJuYWxNZXRhZGF0YVVSSS5hcHBseSh0aGlzLl9lbnRyeUluZm8sIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTWFrZXMgaXQgcG9zc2libGUgdG8gY2hhbmdlIHRoZSBFbnRyeVR5cGUgKHdoaWNoIGlzIG5vdCBhbGxvd2VkIG9uIGV4aXN0aW5nIGVudHJpZXMpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9IC0gdG8gYWxsb3cgdGhlIG1ldGhvZCBjYWxsIHRvIGJlIGNoYWluZWQuXG4gICAqL1xuICBzZXRFbnRyeVR5cGUoZXQpIHtcbiAgICBjb25zdCB1cmkgPSB0ZXJtcy5pbnZFbnRyeVR5cGVbZXRdO1xuICAgIGlmICh1cmkpIHtcbiAgICAgIHRoaXMuX2VudHJ5SW5mby5nZXRHcmFwaCgpLmNyZWF0ZSh0aGlzLl9lbnRyeUluZm8uZ2V0RW50cnlVUkkoKSwgdGVybXMucmRmLnR5cGUsIHtcbiAgICAgICAgdHlwZTogJ3VyaScsXG4gICAgICAgIHZhbHVlOiB1cmksXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTWFrZXMgaXQgcG9zc2libGUgdG8gY2hhbmdlIHRoZSBHcmFwaFR5cGUgKHdoaWNoIGlzIG5vdCBhbGxvd2VkIG9uIGV4aXN0aW5nIGVudHJpZXMpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUHJvdG90eXBlRW50cnl9IC0gdG8gYWxsb3cgdGhlIG1ldGhvZCBjYWxsIHRvIGJlIGNoYWluZWQuXG4gICAqL1xuICBzZXRHcmFwaFR5cGUoZ3QpIHtcbiAgICB0aGlzLl9ndCA9IGd0O1xuICAgIGNvbnN0IHVyaSA9IHRlcm1zLmludkdyYXBoVHlwZVtndF07XG4gICAgaWYgKHVyaSkge1xuICAgICAgdGhpcy5fZW50cnlJbmZvLmdldEdyYXBoKCkuY3JlYXRlKHRoaXMuX2VudHJ5SW5mby5nZXRSZXNvdXJjZVVSSSgpLCB0ZXJtcy5yZGYudHlwZSwge1xuICAgICAgICB0eXBlOiAndXJpJyxcbiAgICAgICAgdmFsdWU6IHVyaSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlcyBpdCBwb3NzaWJsZSB0byBjaGFuZ2UgdGhlIFJlc291cmNlVHlwZSAod2hpY2ggaXMgbm90IGFsbG93ZWQgb24gZXhpc3RpbmcgZW50cmllcykuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdG9yZS9Qcm90b3R5cGVFbnRyeX0gLSB0byBhbGxvdyB0aGUgbWV0aG9kIGNhbGwgdG8gYmUgY2hhaW5lZC5cbiAgICovXG4gIHNldFJlc291cmNlVHlwZShydCkge1xuICAgIGNvbnN0IHVyaSA9IHRlcm1zLmludlJlc291cmNlVHlwZVtydF07XG4gICAgaWYgKHVyaSkge1xuICAgICAgdGhpcy5fZW50cnlJbmZvLmdldEdyYXBoKCkuY3JlYXRlKHRoaXMuX2VudHJ5SW5mby5nZXRSZXNvdXJjZVVSSSgpLCB0ZXJtcy5yZGYudHlwZSwge1xuICAgICAgICB0eXBlOiAndXJpJyxcbiAgICAgICAgdmFsdWU6IHVyaSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGNyZWF0aW5nIG5ldyBlbnRyaWVzIGEgc2luZ2xlIHBhcmVudCBsaXN0IGNhbiBiZSBzcGVjaWZpZWQsIGhlbmNlIHdlIG5lZWQgYSB3YXkgdG8gc2V0XG4gICAqIGl0IGluIFByb3RvdHlwZUVudHJ5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5fSBwYXJlbnRMaXN0RW50cnlcbiAgICogQHJldHVybnMge3N0b3JlL1Byb3RvdHlwZUVudHJ5fSAtIHRvIGFsbG93IHRoZSBtZXRob2QgY2FsbCB0byBiZSBjaGFpbmVkLlxuICAgKi9cbiAgc2V0UGFyZW50TGlzdChwYXJlbnRMaXN0RW50cnkpIHtcbiAgICB0aGlzLnBhcmVudExpc3RFbnRyeSA9IHBhcmVudExpc3RFbnRyeTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBhcmVudCBsaXN0IChhcyBhbiBlbnRyeSkgZm9yIHRoaXMgUHJvdG90eXBlRW50cnkuXG4gICAqIEByZXR1cm5zIHtzdG9yZS9FbnRyeX1cbiAgICovXG4gIGdldFBhcmVudExpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50TGlzdEVudHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3VnZ2VzdGVkIGVudHJ5IGlkIGZvciB0aGlzIFByb3RvdHlwZUVudHJ5XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRTcGVjaWZpY0lkKCkge1xuICAgIHJldHVybiB0aGlzLnNwZWNpZmljSWQ7XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dlZCBhcyBhIHdheSB0byBzYXZlIG1ldGFkYXRhIGZvciBhblxuICAgKiBlbnRyeSB0aGF0IGlzIGFzc3VtZWQgdG8gZXhpc3Qgd2l0aCBhIGdpdmVuIGVudHJ5IGlkLlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNvbW1pdE1ldGFkYXRhKCkge1xuICAgIGlmICghdGhpcy5zcGVjaWZpY0lkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbnRyeUlkIG11c3QgaGF2ZSBiZWVuIHNwZWNpZmllZCBmb3IgYWxsb3dpbmcgbWV0YWRhdGEgdG8gYmUgc2F2ZWQuJyk7XG4gICAgfVxuICAgIGNvbnN0IGVzID0gdGhpcy5nZXRFbnRyeVN0b3JlKCk7XG5cbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMoZXMuZ2V0UkVTVCgpLnB1dCh0aGlzLmdldEVudHJ5SW5mbygpLmdldE1ldGFkYXRhVVJJKCksXG4gICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLmdldE1ldGFkYXRhKCkuZXhwb3J0UkRGSlNPTigpKSksICdjb21taXRNZXRhZGF0YScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93ZWQgYXMgYSB3YXkgdG8gc2F2ZSBjYWNoZWQgZXh0ZXJuYWwgbWV0YWRhdGEgZm9yIGFuIGVudHJ5IHRoYXQgaXMgYXNzdW1lZCB0b1xuICAgKiBleGlzdCB3aXRoIGEgZ2l2ZW4gZW50cnkgaWQuXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY29tbWl0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSgpIHtcbiAgICBpZiAoIXRoaXMuc3BlY2lmaWNJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZW50cnlJZCBtdXN0IGhhdmUgYmVlbiBzcGVjaWZpZWQgZm9yIGFsbG93aW5nIGNhY2hlZCBleHRlcm5hbCBtZXRhZGF0YSB0byBiZSBzYXZlZC4nKTtcbiAgICB9XG4gICAgY29uc3QgZXMgPSB0aGlzLmdldEVudHJ5U3RvcmUoKTtcbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMoZXMuZ2V0UkVTVCgpLnB1dCh0aGlzLmdldEVudHJ5SW5mbygpLmdldENhY2hlZEV4dGVybmFsTWV0YWRhdGFVUkkoKSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuX2NhY2hlZEV4dGVybmFsTWV0YWRhdGEuZXhwb3J0UkRGSlNPTigpKSksICdjb21taXRDYWNoZWRFeHRlcm5hbE1ldGFkYXRhJyk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBzdG9yZS9Qcm90b3R5cGVFbnRyeSNjb21taXQgY29tbWl0fSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnk+fVxuICAgKi9cbiAgY3JlYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEVudHJ5U3RvcmUoKS5jcmVhdGVFbnRyeSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZW50cnkgYWNjb3JkaW5nIHRvIHRoZSBpbmZvcm1hdGlvbiBzcGVjaWZpZWQgaW4gdGhlIHByb3RvdHlwZSBlbnRyeS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0b3JlL0VudHJ5Pn1cbiAgICogQHNlZSBzdG9yZS9FbnRyeVN0b3JlI2NyZWF0ZUVudHJ5XG4gICAqL1xuICBjb21taXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0RW50cnlTdG9yZSgpLmNyZWF0ZUVudHJ5KHRoaXMpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgR3JhcGggfSBmcm9tICdyZGZqc29uJztcbmltcG9ydCB0eXBlcyBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBFbnRyeVN0b3JlIGZyb20gJy4vRW50cnlTdG9yZSc7XG5pbXBvcnQgZmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuXG4vKipcbiAqIEVudHJpZXMgYXJlIGF0IHRoZSBjZW50ZXIgb2YgdGhpcyBBUEkuIEVudHJpZXMgaG9sZHMgdG9nZXRoZXIgbWV0YWRhdGEsIGV4dGVybmFsIG1ldGFkYXRhLFxuICogcmVzb3VyY2VzLCBhY2Nlc3MgY29udHJvbCwgYW5kIHByb3ZlbmFuY2UuIEhlbmNlLCBlbnRyaWVzIGFwcGVhciBpbiB0aGUgbWFqb3JpdHkgb2YgbWV0aG9kcyxcbiAqIGVpdGhlciBkaXJlY3RseSBvciBpbiBjYWxsYmFja3MgdmlhIHByb21pc2VzLiBFYWNoIGVudHJ5IGhhcyBhIHNpbXBsZSBpZGVudGlmaWVyIHdpdGhpbiBhXG4gKiBjb250ZXh0IGFuZCBhIGdsb2JhbGx5IHVuaXF1ZSBVUkkgdGhhdCBjYW4gYmUgdXNlZCB0byBsb2FkLCBzdG9yZSBhbmQgaW5kZXggdGhlIGVudHJ5LlxuICpcbiAqIE1hbnkgb2YgdGhlIG1ldGhvZHMgaW4gdGhpcyBjbGFzcyBhcmUgY29udmVuaWVuY2UgbWV0aG9kcyB0aGF0IGFsbG93cyB0aGUgZGV2ZWxvcGVyIHRvIGludGVyYWN0XG4gKiB3aXRoIHRoZSBpbmZvcm1hdGlvbiByZXRyaWV2ZWQgZnJvbSB0aGUgcmVwb3NpdG9yeSB3aXRob3V0IGRpZ2dpbmcgdGhyb3VnaCB0aGUgUkRGIGdyYXBocy5cbiAqIEZvciBpbnN0YW5jZSwgYWxsIG1ldGhvZHMgc3RhcnRpbmcgd2l0aCBfY2FuXyBvciBfaXNfIGFyZSBjb252ZW5pZW5jZSBtZXRob2RzIGZvciB3b3JraW5nXG4gKiB3aXRoIGFjY2VzcyBjb250cm9sIG9yIHRoZSB0eXBlIGluZm9ybWF0aW9uIGF2YWlsYWJsZSBpbiB0aGUgYXNzb2NpYXRlZFxuICogVGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIG1ham9yaXR5IG9mIHRoZSBnZXQgbWV0aG9kcyxcbiAqIG9ubHkgdGhvc2UgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgc2V0IG1ldGhvZHMgYXJlIHJlYWxseSB1bmlxdWUgZm9yIHRoaXMgY2xhc3MuXG4gKlxuICogQGxpbmsgc3RvcmUvRW50cnlJbmZvXG4gKiBAZXhwb3J0cyBzdG9yZS9FbnRyeVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRyeSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0b3JlL0NvbnRleHR9IGNvbnRleHQgY29udGFpbmVyIGZvciB0aGlzIGVudHJ5XG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnlJbmZvfSBlbnRyeUluZm8gZGVmaW5lcyB0aGUgYmFzaWNzIG9mIHRoaXMgZW50cnlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGVudHJ5SW5mbykge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2VudHJ5SW5mbyA9IGVudHJ5SW5mbztcbiAgICB0aGlzLl9lbnRyeUluZm8uX2VudHJ5ID0gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvRW50cnlTdG9yZX1cbiAgICovXG4gIGdldEVudHJ5U3RvcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0RW50cnlTdG9yZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdG9yZS9FbnRyeUluZm99XG4gICAqL1xuICBnZXRFbnRyeUluZm8oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5SW5mbztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBtZXRob2QsIHNhbWUgYXMgY2FsbGluZyBlbnRyeS5nZXRFbnRyeUluZm8oKS5nZXRFbnRyeVVSSSgpXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGVudHJ5IHVyaS5cbiAgICogQHNlZSBzdG9yZS9FbnRyeUluZm8jZ2V0RW50cnlVUklcbiAgICovXG4gIGdldFVSSSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlJbmZvLmdldEVudHJ5VVJJKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVuaWVuY2UgbWV0aG9kLCBzYW1lIGFzIGNhbGxpbmcgZW50cnkuZ2V0RW50cnlJbmZvKCkuZ2V0SWQoKVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgaWQgb2YgdGhlIGVudHJ5XG4gICAqIEBzZWUgc3RvcmUvRW50cnlJbmZvI2dldElkXG4gICAqL1xuICBnZXRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlJbmZvLmdldElkKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVuaWVuY2UgbWV0aG9kLCBzYW1lIGFzIGNhbGxpbmcgZW50cnkuZ2V0RW50cnlJbmZvKCkuZ2V0UmVzb3VyY2VVUkkoKVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBhIFVSSSB0byB0aGUgcmVzb3VyY2Ugb2YgdGhpcyBlbnRyeS5cbiAgICovXG4gIGdldFJlc291cmNlVVJJKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRyeUluZm8uZ2V0UmVzb3VyY2VVUkkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvQ29udGV4dH1cbiAgICovXG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYW4gUkRGIGdyYXBoIGFzIGFuIHtAbGluayByZGZqc29uL0dyYXBofSBpbnN0YW5jZS5cbiAgICogQHJldHVybiB7cmRmanNvbi9HcmFwaH0gYSBSREYgZ3JhcGggd2l0aCBtZXRhZGF0YSwgdHlwaWNhbGx5IGNvbnRhaW5pbmcgc3RhdGVtZW50cyBhYm91dFxuICAgKiB0aGUgcmVzb3VyY2VVUkkuIFRoZSByZXR1cm5lZCBncmFwaCBtYXkgYmUgZW1wdHkgYnV0IG5ldmVyIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgKi9cbiAgZ2V0TWV0YWRhdGEoKSB7XG4gICAgaWYgKHRoaXMuX21ldGFkYXRhID09IG51bGwpIHtcbiAgICAgIHRoaXMuX21ldGFkYXRhID0gbmV3IEdyYXBoKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgbmV3IG1ldGFkYXRhIGdyYXBoIGZvciB0aGlzIGVudHJ5IHdpdGhvdXQgcHVzaGluZyBpdCB0byB0aGUgcmVwb3NpdG9yeS5cbiAgICogSW4gbWFueSBjYXNlcyB0aGlzIG1ldGhvZCBpcyBub3QgbmVlZGVkIHNpbmNlIHlvdSBjYW4gZ2V0IHRoZSBtZXRhZGF0YSBncmFwaCxcbiAgICogbW9kaWZ5IGl0IGFuZCB0aGVuIGNvbW1pdCB0aGUgY2hhbmdlcyBkaXJlY3RseS5cbiAgICpcbiAgICogSG93ZXZlciwgaW4gc29tZSBjYXNlcyB5b3UgbmVlZCB0byBzZXQgYSBuZXcgbWV0YWRhdGEgZ3JhcGgsIGUuZy5cbiAgICogeW91IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBtZXRhZGF0YSB3aXRoIGEgbmV3IGdyYXBoIHJldHJpZXZlZCBmcm9tIGFub3RoZXIgc291cmNlIG9yIHRoZVxuICAgKiBlbnRyeSBoYXZlIGJlZW4gcmVmcmVzaGVkIHdpdGggbmV3IGluZm9ybWF0aW9uIGFuZCB5b3Ugd2FudCB0byBjb21taXQgdGhlIG1lcmdlZCByZXN1bHRzLlxuICAgKiBJbiB0aGVzZSBjYXNlcyB5b3UgbmVlZCB0byBkaXNjYXJkIHRoZSBjdXJyZW50IG1ldGFkYXRhIGdyYXBoIHdpdGggaGVscCBvZiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBncmFwaCBpcyBhbiBSREYgZ3JhcGggd2l0aCBtZXRhZGF0YSwgaWYgaXQgaXMgbm90IHByb3ZpZGVkIHRoZSBjdXJyZW50XG4gICAqIG1ldGFkYXRhIGdyYXBoIGlzIHNhdmVkICh0aGVyZSBpcyBjdXJyZW50bHkgbm8gY2hlY2sgd2hldGhlciBpdCBoYXMgYmVlbiBtb2RpZmllZCBvciBub3QpLlxuICAgKiBAcmV0dXJuIHN0b3JlL0VudHJ5IC0gdG8gYWxsb3cgY2hhaW5pbmcgd2l0aCBvdGhlciBtZXRob2RzLCBlLmcuIHdpdGggY29tbWl0TWV0YWRhdGEuXG4gICAqL1xuICBzZXRNZXRhZGF0YShncmFwaCkge1xuICAgIHRoaXMuX21ldGFkYXRhID0gZ3JhcGg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBwdXNoIHRoZSBtZXRhZGF0YSBmb3IgdGhpcyBlbnRyeSB0byB0aGUgcmVwb3NpdG9yeS5cbiAgICogSWYgbWV0YWRhdGEgaGFzIGJlZW4gc2V0IGZvciBhbiBlbnRyeSB3aXRoIEVudHJ5VHlwZSAncmVmZXJlbmNlJ1xuICAgKiB0aGUgZW50cnkgdHlwZSB3aWxsIGNoYW5nZSB0byAnbGlua3JlZmVyZW5jZScgdXBvbiBhIHN1Y2Nlc3NmdWwgY29tbWl0LlxuICAgKiBAcGFyYW1zIHtib29sZWFufSBbaWdub3JlSWZVbm1vZGlmaWVkU2luY2VDaGVjaz1mYWxzZV0gaWYgZXhwbGljaXRseSBzZXQgdG8gdHJ1ZSBubyBjaGVjayBpcyBkb25lXG4gICAqIGlmIGluZm9ybWF0aW9uIGlzIHN0YWxlLCBhbHNvIGl0IHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgcmVmcmVzaCB3aXRoIHRoZSBsYXRlc3QgZGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxzdG9yZS9FbnRyeT59IGEgcHJvbWlzZSB0aGF0IG9uIHN1Y2Nlc3Mgd2lsbCBjb250YWluIHRoZSBjdXJyZW50IHVwZGF0ZWQgZW50cnkuXG4gICAqL1xuICBjb21taXRNZXRhZGF0YShpZ25vcmVJZlVubW9kaWZpZWRTaW5jZUNoZWNrID0gZmFsc2UpIHtcbiAgICBsZXQgcDtcbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIGlmICh0aGlzLmlzUmVmZXJlbmNlKCkpIHtcbiAgICAgIHAgPSBQcm9taXNlLnJlamVjdChgRW50cnkgXCIke3RoaXMuZ2V0VVJJKCl9XCIgaXMgYSByZWZlcmVuY2UgYW5kIGhhdmUgbm8gbG9jYWwgbWV0YWRhdGEgdGhhdCBjYW4gYmUgc2F2ZWQuYCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5jYW5Xcml0ZU1ldGFkYXRhKCkpIHtcbiAgICAgIHAgPSBQcm9taXNlLnJlamVjdChgWW91IGRvIG5vdCBoYXZlIHN1ZmZpY2llbnQgYWNjZXNzIHJpZ2h0cyB0byBzYXZlIG1ldGFkYXRhIG9uIGVudHJ5IFwiJHt0aGlzLmdldFVSSSgpfVwiLmApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5uZWVkUmVmcmVzaCgpKSB7XG4gICAgICBwID0gUHJvbWlzZS5yZWplY3QoYFRoZSBlbnRyeSBcIiR7dGhpcy5nZXRVUkkoKX1cIiBuZWVkIHRvIGJlIHJlZnJlc2hlZCBiZWZvcmUgaXRzIGxvY2FsIG1ldGFkYXRhIGNhbiBiZSBzYXZlZC5cXG5gICtcbiAgICAgICAgJ1RoaXMgbWVzc2FnZSBpbmRpY2F0ZXMgdGhhdCB0aGUgY2xpZW50IGlzIHdyaXR0ZW4gcG9vcmx5LCB0aGlzIGNhc2Ugc2hvdWxkIGhhdmUgYmVlbiB0YWtlbiBpbnRvIGFjY291bnQuJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9tZXRhZGF0YSA9PSBudWxsKSB7XG4gICAgICBwID0gUHJvbWlzZS5yZWplY3QoYFRoZSBlbnRyeSBcIiR7dGhpcy5nZXRVUkkoKX1cIiBzaG91bGQgYWxsb3cgbG9jYWwgbWV0YWRhdGEgdG8gYmUgc2F2ZWQsIGJ1dCB0aGVyZSBpcyBubyBsb2NhbCBtZXRhZGF0YS5cXG5UaGlzIG1lc3NhZ2UgaXMgYSBidWcgaW4gdGhlIHN0b3JlanMgQVBJLmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaWdub3JlSWZVbm1vZGlmaWVkU2luY2VDaGVjaykge1xuICAgICAgICBwID0gZXMuZ2V0UkVTVCgpLnB1dCh0aGlzLmdldEVudHJ5SW5mbygpLmdldE1ldGFkYXRhVVJJKCksXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5fbWV0YWRhdGEuZXhwb3J0UkRGSlNPTigpKSkudGhlbigoKSA9PiB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1vZCA9IHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0TW9kaWZpY2F0aW9uRGF0ZSgpO1xuICAgICAgICBwID0gZXMuZ2V0UkVTVCgpLnB1dCh0aGlzLmdldEVudHJ5SW5mbygpLmdldE1ldGFkYXRhVVJJKCksXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5fbWV0YWRhdGEuZXhwb3J0UkRGSlNPTigpKSwgbW9kKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0UmVmcmVzaE5lZWRlZCh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2goKS50aGVuKCgpID0+IHRoaXMsICgpID0+IHtcbiAgICAgICAgICAgICAgLy8gRmFpbGVkIHJlZnJlc2hpbmcsIGJ1dCBzdWNjZWVkZWQgYXQgc2F2aW5nIG1ldGFkYXRhLFxuICAgICAgICAgICAgICAvLyBhdCBsZWFzdCBzZW5kIG91dCBtZXNzYWdlIHRoYXQgaXQgbmVlZHMgdG8gYmUgcmVmcmVzaGVkLlxuICAgICAgICAgICAgICB0aGlzLmdldEVudHJ5U3RvcmUoKS5nZXRDYWNoZSgpLm1lc3NhZ2UoJ3JlZnJlc2hlZCcsIHRoaXMpO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMocCwgJ2NvbW1pdE1ldGFkYXRhJyk7XG4gIH1cblxuICAvKipcbiAgICogU2FtZSBhcyBlbnRyeS5nZXRNZXRhZGF0YSgpLmFkZChlbnRyeS5nZXRSZXNvdXJjZVVSSSgpLCBwcmVkaWNhdGUsIG8pXG4gICAqIGJ1dCBpbnN0ZWFkIG9mIHJldHVybmluZyB0aGUgY3JlYXRlZCBzdGF0ZW1lbnQgaXQgcmV0dXJucyB0aGUgZW50cnkgaXRzZWxmLFxuICAgKiBhbGxvd2luZyBjaGFpbmVkIG1ldGhvZCBjYWxscy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWRpY2F0ZSB0aGUgcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QgdGhlIG9iamVjdFxuICAgKiBAcmV0dXJucyB7c3RvcmUvRW50cnl9XG4gICAqL1xuICBhZGQocHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICB0aGlzLmdldE1ldGFkYXRhKCkuYWRkKHRoaXMuZ2V0UmVzb3VyY2VVUkkoKSwgcHJlZGljYXRlLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgZW50cnkuZ2V0TWV0YWRhdGEoKS5hZGRMKGVudHJ5LmdldFJlc291cmNlVVJJKCksIHByZWRpY2F0ZSwgbGl0ZXJhbCwgbGFuZylcbiAgICogYnV0IGluc3RlYWQgb2YgcmV0dXJuaW5nIHRoZSBjcmVhdGVkIHN0YXRlbWVudCBpdCByZXR1cm5zIHRoZSBlbnRyeSBpdHNlbGYsXG4gICAqIGFsbG93aW5nIGNoYWluZWQgbWV0aG9kIGNhbGxzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZGljYXRlIHRoZSBwcmVkaWNhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWwgdGhlIGxpdGVyYWwgdmFsdWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIGFuIG9wdGlvbmFsIGxhbmd1YWdlXG4gICAqIEByZXR1cm5zIHtzdG9yZS9FbnRyeX1cbiAgICovXG4gIGFkZEwocHJlZGljYXRlLCBsaXRlcmFsLCBsYW5ndWFnZSkge1xuICAgIHRoaXMuZ2V0TWV0YWRhdGEoKS5hZGRMKHRoaXMuZ2V0UmVzb3VyY2VVUkkoKSwgcHJlZGljYXRlLCBsaXRlcmFsLCBsYW5ndWFnZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2FtZSBhcyBlbnRyeS5nZXRNZXRhZGF0YSgpLmFkZEQoZW50cnkuZ2V0UmVzb3VyY2VVUkkoKSwgcHJlZGljYXRlLCBsaXRlcmFsLCBsYW5nKVxuICAgKiBidXQgaW5zdGVhZCBvZiByZXR1cm5pbmcgdGhlIGNyZWF0ZWQgc3RhdGVtZW50IGl0IHJldHVybnMgdGhlIGVudHJ5IGl0c2VsZixcbiAgICogYWxsb3dpbmcgY2hhaW5lZCBtZXRob2QgY2FsbHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVkaWNhdGUgdGhlIHByZWRpY2F0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGl0ZXJhbCB0aGUgbGl0ZXJhbCB2YWx1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YXR5cGUgdGhlIGRhdGF0eXBlIChzaG91bGQgYmUgYSBzdHJpbmcpXG4gICAqIEByZXR1cm5zIHtzdG9yZS9FbnRyeX1cbiAgICovXG4gIGFkZEQocHJlZGljYXRlLCBsaXRlcmFsLCBkYXRhdHlwZSkge1xuICAgIHRoaXMuZ2V0TWV0YWRhdGEoKS5hZGREKHRoaXMuZ2V0UmVzb3VyY2VVUkkoKSwgcHJlZGljYXRlLCBsaXRlcmFsLCBkYXRhdHlwZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FjaGVkIGV4dGVybmFsIG1ldGFkYXRhIGNhbiBvbmx5IGJlIHByb3ZpZGVkIGZvciBlbnRyaWVzIHdpdGggZW50cnkgdHlwZVxuICAgKiByZWZlcmVuY2Ugb3IgbGluayByZWZlcmVuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge3JkZmpzb24vR3JhcGh9IC0gYSBSREYgZ3JhcGggd2l0aCBjYWNoZWQgZXh0ZXJuYWwgbWV0YWRhdGEsIHR5cGljYWxseSBjb250YWluaW5nXG4gICAqIHN0YXRlbWVudHMgYWJvdXQgdGhlIHJlc291cmNlVVJJLiBUaGUgcmV0dXJuZWQgZ3JhcGggbWF5IGJlIGVtcHR5IGJ1dCBuZXZlciBudWxsXG4gICAqIG9yIHVuZGVmaW5lZC5cbiAgICovXG4gIGdldENhY2hlZEV4dGVybmFsTWV0YWRhdGEoKSB7XG4gICAgaWYgKHRoaXMuX2NhY2hlZEV4dGVybmFsTWV0YWRhdGEgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fY2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSA9IG5ldyBHcmFwaCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jYWNoZWRFeHRlcm5hbE1ldGFkYXRhO1xuICB9XG5cbiAgZ2V0SW5mZXJyZWRNZXRhZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5mZXJyZWRNZXRhZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgbmV3IGNhY2hlZCBleHRlcm5hbCBtZXRhZGF0YSBncmFwaCBmb3IgdGhpcyBlbnRyeSB3aXRob3V0IHB1c2hpbmdcbiAgICogaXQgdG8gdGhlIHJlcG9zaXRvcnkuXG4gICAqXG4gICAqIEBwYXJhbSB7cmRmanNvbi9HcmFwaH0gZ3JhcGggaXMgYW4gUkRGIGdyYXBoIHdpdGggbWV0YWRhdGEuXG4gICAqIEByZXR1cm4gc3RvcmUvRW50cnkgLSB0byBhbGxvdyBjaGFpbmluZyB3aXRoIG90aGVyIG1ldGhvZHMsXG4gICAqIGUuZy4gd2l0aCBjb21taXRDYWNoZWRFeHRlcm5hbE1ldGFkYXRhLlxuICAgKi9cbiAgc2V0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YShncmFwaCkge1xuICAgIGlmIChncmFwaCkge1xuICAgICAgdGhpcy5fY2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSA9IGdyYXBoO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2hlcyB0aGUgY3VycmVudCBjYWNoZWQgZXh0ZXJuYWwgbWV0YWRhdGEgZ3JhcGggZm9yIHRoaXMgZW50cnkgdG8gdGhlIHJlcG9zaXRvcnkuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPHN0b3JlL0VudHJ5Pn0gYSBwcm9taXNlIHRoYXQgb24gc3VjY2VzcyB3aWxsIGNvbnRhaW4gdGhlIGN1cnJlbnQgdXBkYXRlZCBlbnRyeS5cbiAgICovXG4gIGNvbW1pdENhY2hlZEV4dGVybmFsTWV0YWRhdGEoKSB7XG4gICAgY29uc3QgZXMgPSB0aGlzLmdldEVudHJ5U3RvcmUoKTtcbiAgICBjb25zdCBtb2QgPSB0aGlzLmdldEVudHJ5SW5mbygpLmdldE1vZGlmaWNhdGlvbkRhdGUoKTtcbiAgICBjb25zdCBwcm9taXNlID0gZXMuZ2V0UkVTVCgpLnB1dCh0aGlzLmdldEVudHJ5SW5mbygpLmdldENhY2hlZEV4dGVybmFsTWV0YWRhdGFVUkkoKSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuX2NhY2hlZEV4dGVybmFsTWV0YWRhdGEuZXhwb3J0UkRGSlNPTigpKSwgbW9kKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFJlZnJlc2hOZWVkZWQodHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2goKS50aGVuKCgpID0+IHRoaXMsICgpID0+IHtcbiAgICAgICAgICAvLyBGYWlsZWQgcmVmcmVzaGluZywgYnV0IHN1Y2NlZWRlZCBhdCBzYXZpbmcgbWV0YWRhdGEsXG4gICAgICAgICAgLy8gYXQgbGVhc3Qgc2VuZCBvdXQgbWVzc2FnZSB0aGF0IGl0IG5lZWRzIHRvIGJlIHJlZnJlc2hlZC5cbiAgICAgICAgICB0aGlzLmdldEVudHJ5U3RvcmUoKS5nZXRDYWNoZSgpLm1lc3NhZ2UoJ3JlZnJlc2hlZCcsIHRoaXMpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzLmhhbmRsZUFzeW5jKHByb21pc2UsICdjb21taXRDYWNoZWRFeHRlcm5hbE1ldGFkYXRhJyk7XG4gIH1cblxuICAvKipcbiAgICogQHRvZG8gcmVtYWlucyB0byBiZSBzdXBwb3J0ZWQgaW4gcmVwb3NpdG9yeVxuICAgKiBAcmV0dXJucyB7cmRmanNvbi9HcmFwaH1cbiAgICovXG4gIGdldEV4dHJhY3RlZE1ldGFkYXRhKCkge1xuICAgIGlmICh0aGlzLl9leHRyYWN0ZWRNZXRhZGF0YSA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9leHRyYWN0ZWRNZXRhZGF0YSA9IG5ldyBHcmFwaCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZXh0cmFjdGVkTWV0YWRhdGE7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgdGhlIHJlc291cmNlIGZvciB0aGlzIGVudHJ5IGlmIGl0IGV4aXN0cyBpbiBhIHByb21pc2UsXG4gICAqIGUuZy4gaWYgdGhlIGdyYXBoLXR5cGUgaXMgbm90IG5vbmUuXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gcmVxdWVzdCB0aGUgcmVzb3VyY2UgZGlyZWN0bHksIGkuZS4gZ2V0IHRoZSByZXNvdXJjZSByYXRoZXJcbiAgICogdGhhbiBhIHByb21pc2UuIFRoaXMgaXMgYWNoaWV2ZWQgYnkgc3BlY2lmeWluZyB0aGUgXCJkaXJlY3RcIiBwYXJhbWV0ZXIgYXMgdHJ1ZS5cbiAgICogVGhpcyBhbHdheXMgd29yayBmb3IgTGlzdHMsIEdyb3VwcywgYW5kIENvbnRleHQgcmVzb3VyY2VzLlxuICAgKiBGb3IgYWxsIG90aGVyIHJlc291cmNlcyBpdCB3aWxsIHdvcmsgaWYgdGhlIHJlc291cmNlLCBlLmcuIGEgR3JhcGgsXG4gICAqIGEgU3RyaW5nIGV0Yy4gaXMgYWxyZWFkeSBsb2FkZWQuIElmIGl0IGlzIG5vdCBsb2FkZWQgbnVsbCB3aWxsIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvUmVzb3VyY2UgfCBQcm9taXNlLjxzdG9yZS9SZXNvdXJjZT59XG4gICAqL1xuICBnZXRSZXNvdXJjZShkaXJlY3QgPSBmYWxzZSkge1xuICAgIGlmIChkaXJlY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZTtcbiAgICB9XG4gICAgY29uc3QgZXMgPSB0aGlzLmdldEVudHJ5U3RvcmUoKTtcbiAgICBsZXQgcHJvbWlzZTtcbiAgICBpZiAodGhpcy5fcmVzb3VyY2UpIHtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodGhpcy5fcmVzb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmlzU3RyaW5nKCkgPyAndGV4dCcgOiBudWxsO1xuICAgICAgcHJvbWlzZSA9IGVzLmdldFJFU1QoKS5nZXQodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCBmb3JtYXQpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgZmFjdG9yeS51cGRhdGVPckNyZWF0ZVJlc291cmNlKHRoaXMsIHsgcmVzb3VyY2U6IGRhdGEgfSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMocHJvbWlzZSwgJ2dldFJlc291cmNlJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3JkZmpzb24vR3JhcGh9XG4gICAqL1xuICBnZXRSZWZlcnJlcnNHcmFwaCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVsYXRpb247XG4gIH1cblxuICAvKipcbiAgICogYSBsaXN0IG9mIFVSSXMgdGhhdCBoYXMgcmVmZXJyZWQgdG8gdGhpcyBFbnRyeSB1c2luZyB2YXJpb3VzIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIGdldFJlZmVycmVycyhwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbGF0aW9uLmZpbmQobnVsbCwgcHJvcCwgbnVsbCkubWFwKHN0bXQgPT4gc3RtdC5nZXRTdWJqZWN0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIGEgbGlzdCBvZiBlbnRyeSBVUklzIGNvcnJlc3BvbmRpbmcgdG8gbGlzdCBlbnRyaWVzIHdoZXJlIHRoaXMgZW50cnkgaXMgY29udGFpbmVkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBnZXRQYXJlbnRMaXN0cygpIHtcbiAgICBjb25zdCBsaXN0UmVzb3VyY2VVUklBcnIgPSB0aGlzLmdldFJlZmVycmVycygnaHR0cDovL2VudHJ5c3RvcmUub3JnL3Rlcm1zL2hhc0xpc3RNZW1iZXInKTtcbiAgICByZXR1cm4gbGlzdFJlc291cmNlVVJJQXJyLm1hcChyZXNVUkkgPT5cbiAgICAgIGZhY3RvcnkuZ2V0RW50cnlVUklGcm9tVVJJKHRoaXMuZ2V0RW50cnlTdG9yZSgpLCByZXNVUkkpLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhIGxpc3Qgb2YgZW50cnkgVVJJcyBjb3JyZXNwb25kaW5nIHRvIGdyb3VwcyB3aGVyZSB0aGlzIHVzZXIgZW50cnkgaXMgbWVtYmVyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBnZXRQYXJlbnRHcm91cHMoKSB7XG4gICAgY29uc3QgZ3JvdXBSZXNvdXJjZVVSSUFyciA9IHRoaXMuZ2V0UmVmZXJyZXJzKCdodHRwOi8vZW50cnlzdG9yZS5vcmcvdGVybXMvaGFzR3JvdXBNZW1iZXInKTtcbiAgICByZXR1cm4gZ3JvdXBSZXNvdXJjZVVSSUFyci5tYXAocmVzVVJJID0+XG4gICAgICBmYWN0b3J5LmdldEVudHJ5VVJJRnJvbVVSSSh0aGlzLmdldEVudHJ5U3RvcmUoKSwgcmVzVVJJKSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogYSBsaXN0IG9mIGNvbW1lbnRzIChpLmUuIHRoZWlyIFVSSXMpIG9mIHRoaXMgZW50cnkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIGdldENvbW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmdldFJlZmVycmVycygnaHR0cDovL29udG9sb2dpLmVzL2xpa2UjcmVnYXJkaW5nJyk7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIHJlc291cmNlIG9mIHRoaXMgZW50cnkgb2YgdGhlIEdyYXBoVHlwZSBsaXN0P1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeUluZm8oKS5nZXRHcmFwaFR5cGUoKSA9PT0gdHlwZXMuR1RfTElTVDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgcmVzb3VyY2Ugb2YgdGhpcyBlbnRyeSBvZiB0aGUgR3JhcGh0eXBlIHJlc3VsdGxpc3Q/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNSZXN1bHRMaXN0KCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEdyYXBoVHlwZSgpID09PSB0eXBlcy5HVF9SRVNVTFRMSVNUO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSByZXNvdXJjZSBvZiB0aGlzIGVudHJ5IG9mIHRoZSBHcmFwaFR5cGUgY29udGV4dD9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0R3JhcGhUeXBlKCkgPT09IHR5cGVzLkdUX0NPTlRFWFQ7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIHJlc291cmNlIG9mIHRoaXMgZW50cnkgb2YgdGhlIEdyYXBoVHlwZSBzeXN0ZW1jb250ZXh0P1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzU3lzdGVtQ29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeUluZm8oKS5nZXRHcmFwaFR5cGUoKSA9PT0gdHlwZXMuR1RfU1lTVEVNQ09OVEVYVDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgcmVzb3VyY2Ugb2YgdGhpcyBlbnRyeSBvZiB0aGUgR3JhcGhUeXBlIHVzZXI/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNVc2VyKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEdyYXBoVHlwZSgpID09PSB0eXBlcy5HVF9VU0VSO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSByZXNvdXJjZSBvZiB0aGlzIGVudHJ5IG9mIHRoZSBHcmFwaFR5cGUgZ3JvdXA/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNHcm91cCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeUluZm8oKS5nZXRHcmFwaFR5cGUoKSA9PT0gdHlwZXMuR1RfR1JPVVA7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIHJlc291cmNlIG9mIHRoaXMgZW50cnkgb2YgdGhlIEdyYXBoVHlwZSBncmFwaD9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0dyYXBoKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEdyYXBoVHlwZSgpID09PSB0eXBlcy5HVF9HUkFQSDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgcmVzb3VyY2Ugb2YgdGhpcyBlbnRyeSBvZiB0aGUgR3JhcGhUeXBlIHBpcGVsaW5lP1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzUGlwZWxpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0R3JhcGhUeXBlKCkgPT09IHR5cGVzLkdUX1BJUEVMSU5FO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSByZXNvdXJjZSBvZiB0aGlzIGVudHJ5IG9mIHRoZSBHcmFwaFR5cGUgcGlwZWxpbmVyZXN1bHQ/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNQaXBlbGluZVJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeUluZm8oKS5nZXRHcmFwaFR5cGUoKSA9PT0gdHlwZXMuR1RfUElQRUxJTkVSRVNVTFQ7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIHJlc291cmNlIG9mIHRoaXMgZW50cnkgb2YgdGhlIEdyYXBoVHlwZSBzdHJpbmc/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0R3JhcGhUeXBlKCkgPT09IHR5cGVzLkdUX1NUUklORztcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgcmVzb3VyY2Ugb2YgdGhpcyBlbnRyeSBvZiB0aGUgR3JhcGhUeXBlIG5vbmU/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNOb25lKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEdyYXBoVHlwZSgpID09PSB0eXBlcy5HVF9OT05FO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoaXMgZW50cnkgb2YgdGhlIEVudHJ5VHlwZSBsaW5rP1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzTGluaygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeUluZm8oKS5nZXRFbnRyeVR5cGUoKSA9PT0gdHlwZXMuRVRfTElOSztcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGVudHJ5IG9mIHRoZSBFbnRyeVR5cGUgcmVmZXJlbmNlP1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzUmVmZXJlbmNlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEVudHJ5VHlwZSgpID09PSB0eXBlcy5FVF9SRUY7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhpcyBlbnRyeSBvZiB0aGUgRW50cnlUeXBlIGxpbmtyZWZlcmVuY2U/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNMaW5rUmVmZXJlbmNlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEVudHJ5VHlwZSgpID09PSB0eXBlcy5FVF9MSU5LUkVGO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSBlbnRyeSBvZiB0aGUgRW50cnlUeXBlIGxpbmssIGxpbmtyZWZlcmVuY2Ugb3IgcmVmZXJlbmNlP1xuICAgKiBUaGF0IGlzLCB0aGUgcmVzb3VyY2UgY2FuIGJlIGNvbnRyb2xsZWQgdmlhIHtAbGluayBzdG9yZS9FbnRyeUluZm8jc2V0UmVzb3VyY2VVUkl9LlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBlbnRyeXR5cGUgaXMgTk9UIGxvY2FsLlxuICAgKi9cbiAgaXNFeHRlcm5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbnRyeUluZm8oKS5nZXRFbnRyeVR5cGUoKSAhPT0gdHlwZXMuRVRfTE9DQUw7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIEVudHJ5VHlwZSBsb2NhbCwgaS5lLiB0aGUgcmVzb3VyY2VzIFVSSSBpcyBtYWludGFpbmVkXG4gICAqIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHJlcG9zaXRvcnkgZm9yIHRoaXMgZW50cnkuXG4gICAqIE9wcG9zaXRlIHRvIHtAbGluayBzdG9yZS9FbnRyeSNpc0xpbmtMaWtlfS5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0xvY2FsKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldEVudHJ5VHlwZSgpID09PSB0eXBlcy5FVF9MT0NBTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgZW50cnkgYSBsb2NhbCBsaW5rL2xpbmtyZWZlcmVuY2UvcmVmZXJlbmNlIHRvIGFub3RoZXIgZW50cnkgaW4gdGhlIHJlcG9zaXRvcnkuXG4gICAqIFRoYXQgaXMsIHRydWUgaWYgdGhlIGVudHJ5IGlzIGEgbGluaywgbGlua3JlZmVyZW5jZSBvciByZWZlcmVuY2UgQU5EIHRoZSByZXNvdXJjZSBVUklcbiAgICogYmVsb25ncyB0byBhbm90aGVyIGVudHJ5IGluIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNMaW5rVG9FbnRyeSgpIHtcbiAgICBjb25zdCBiYXNlID0gdGhpcy5nZXRFbnRyeVN0b3JlKCkuZ2V0QmFzZVVSSSgpO1xuICAgIHJldHVybiB0aGlzLmlzRXh0ZXJuYWwoKSAmJiB0aGlzLmdldFJlc291cmNlVVJJKCkuc3Vic3RyKDAsIGJhc2UubGVuZ3RoKSA9PT0gYmFzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGUgZW50cnkgaXMgYSBsaW5rIHRvIGFub3RoZXIgZW50cnkgKGFzIGVpdGhlciBhIGxpbmssIGxpbmtyZWZlcmVuY2Ugb3IgcmVmZXJlbmNlKSB0aGVcbiAgICogbGlua2VkIHRvIGVudHJ5IGlzIHJldHVybmVkIGluIGEgcHJvbWlzZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0b3JlL0VudHJ5Pnx1bmRlZmluZWR9IHVuZGVmaW5lZCBvbmx5IGlmIHRoZSBlbnRyeSBkb2VzIG5vdCBsaW5rIHRvIGFub3RoZXIgZW50cnkuXG4gICAqL1xuICBnZXRMaW5rZWRFbnRyeSgpIHtcbiAgICBpZiAodGhpcy5pc0xpbmtUb0VudHJ5KCkpIHtcbiAgICAgIC8vIEluIGNhc2UgdGhlIGxpbmsgaXMgdG8gdGhlIHJlc291cmNlIFVSSSByYXRoZXIgdGhhbiB0aGUgZW50cnkgVVJJLCB3ZSBleHRyYWN0XG4gICAgICAvLyB0aGUgZW50cnkgaWQgYW5kIGNvbnRleHQgaWQgYW5kIHJlYnVpbGQgdGhlIGVudHJ5IFVSSS5cbiAgICAgIGNvbnN0IGVzID0gdGhpcy5nZXRFbnRyeVN0b3JlKCk7XG4gICAgICBjb25zdCByZXNvdXJjZVVSSSA9IHRoaXMuZ2V0UmVzb3VyY2VVUkkoKTtcbiAgICAgIGNvbnN0IGVudHJ5SWQgPSBlcy5nZXRFbnRyeUlkKHJlc291cmNlVVJJKTtcbiAgICAgIGNvbnN0IGNvbnRleHRJZCA9IGVzLmdldENvbnRleHRJZChyZXNvdXJjZVVSSSk7XG4gICAgICBjb25zdCBlbnRyeVVSSSA9IGVzLmdldEVudHJ5VVJJKGNvbnRleHRJZCwgZW50cnlJZCk7XG4gICAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmModGhpcy5nZXRFbnRyeVN0b3JlKCkuZ2V0RW50cnkoZW50cnlVUkkpLCAnZ2V0TGlua2VkRW50cnknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSBlbnRyeSBhbiBpbmZvcm1hdGlvbiByZXNvdXJjZT9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0luZm9ybWF0aW9uUmVzb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0UmVzb3VyY2VUeXBlKCkgPT09IHR5cGVzLlJUX0lORk9STUFUSU9OUkVTT1VSQ0U7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIGVudHJ5IGEgbmFtZWQgcmVzb3VyY2U/XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNOYW1lZFJlc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEVudHJ5SW5mbygpLmdldFJlc291cmNlVHlwZSgpID09PSB0eXBlcy5SVF9OQU1FRFJFU09VUkNFO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSBjdXJyZW50IHVzZXIgYW4gb3duZXIgb2YgdGhpcyBlbnRyeT9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjYW5BZG1pbmlzdGVyRW50cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JpZ2h0cy5hZG1pbmlzdGVyIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSBjdXJyZW50IHVzZXIgYXV0aG9yaXplZCB0byByZWFkIHRoZSByZXNvdXJjZSBvZiB0aGlzIGVudHJ5P1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNhblJlYWRSZXNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmlnaHRzLmFkbWluaXN0ZXIgfHwgdGhpcy5fcmlnaHRzLnJlYWRyZXNvdXJjZVxuICAgICAgfHwgdGhpcy5fcmlnaHRzLndyaXRlcmVzb3VyY2UgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIGN1cnJlbnQgdXNlciBhdXRob3JpemVkIHRvIHdyaXRlIHRoZSByZXNvdXJjZSBvZiB0aGlzIGVudHJ5P1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNhbldyaXRlUmVzb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JpZ2h0cy5hZG1pbmlzdGVyIHx8IHRoaXMuX3JpZ2h0cy53cml0ZXJlc291cmNlIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZSBjdXJyZW50IHVzZXIgYXV0aG9yaXplZCB0byByZWFkIHRoZSBtZXRhZGF0YSBvZiB0aGlzIGVudHJ5P1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNhblJlYWRNZXRhZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmlnaHRzLmFkbWluaXN0ZXIgfHwgdGhpcy5fcmlnaHRzLnJlYWRtZXRhZGF0YVxuICAgICAgfHwgdGhpcy5fcmlnaHRzLndyaXRlbWV0YWRhdGEgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIGN1cnJlbnQgdXNlciBhdXRob3JpemVkIHRvIHdyaXRlIHRoZSBtZXRhZGF0YSBvZiB0aGlzIGVudHJ5P1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNhbldyaXRlTWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JpZ2h0cy5hZG1pbmlzdGVyIHx8IHRoaXMuX3JpZ2h0cy53cml0ZW1ldGFkYXRhIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBlbnRyeSBpcyBhdmFpbGFibGUgcHVibGljYWxseSBvciBub3QuXG4gICAqIFRvIG1ha2Ugc3VyZSB0aGlzIG1ldGhvZCByZXR1cm5zIGEgYm9vbGVhbiBtYWtlIHN1cmUgdGhlIGNvbnRleHRzIGVudHJ5IGlzIGxvYWRlZCwgZS5nLiB2aWE6XG4gICAqIGVudHJ5LmdldENvbnRleHQoKS5nZXRFbnRyeSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAqICAgIGlmIChlbnRyeS5pc1B1YmxpYygpKSB7Li4ufSAvL09yIHdoYXRldmVyIHlvdSBuZWVkIHRvIGRvIHdpdGggdGhlIGlzUHVibGljIG1ldGhvZC5cbiAgICogfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9IHVuZGVmaW5lZCBvbmx5IGlmIHRoZSBlbnRyeSBoYXMgbm8gQUNMIGFuZCB0aGUgY29udGV4dHMgZW50cnlcbiAgICogd2hpY2ggc3BlY2lmaWVzIHRoZSBkZWZhdWx0IGFjY2VzcyBpcyBub3QgY2FjaGVkLCBvdGhlcndpc2UgYSBib29sZWFuIGlzIHJldHVybmVkLlxuICAgKi9cbiAgaXNQdWJsaWMoKSB7XG4gICAgY29uc3QgZ3Vlc3RQcmluY2lwYWwgPSB0aGlzLmdldEVudHJ5U3RvcmUoKS5nZXRSZXNvdXJjZVVSSSgnX3ByaW5jaXBhbHMnLCAnX2d1ZXN0Jyk7XG4gICAgbGV0IGFjbCA9IHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0QUNMKCk7XG4gICAgaWYgKGFjbC5jb250ZXh0T3ZlcnJpZGUpIHtcbiAgICAgIHJldHVybiBbJ3J3cml0ZScsICdycmVhZCcsICdtd3JpdGUnLCAnbXJlYWQnXS5zb21lKGtleSA9PiBhY2xba2V5XS5pbmRleE9mKGd1ZXN0UHJpbmNpcGFsKSAhPT0gLTEpO1xuICAgIH1cbiAgICBjb25zdCBjZSA9IHRoaXMuZ2V0Q29udGV4dCgpLmdldEVudHJ5KHRydWUpO1xuICAgIGlmIChjZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhY2wgPSBjZS5nZXRFbnRyeUluZm8oKS5nZXRBQ0woKTtcbiAgICByZXR1cm4gWydyd3JpdGUnLCAncnJlYWQnXS5zb21lKGtleSA9PiBhY2xba2V5XS5pbmRleE9mKGd1ZXN0UHJpbmNpcGFsKSAhPT0gLTEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBlbnRyeSBpcyBhdmFpbGFibGUgdG8gdGhlIHNwZWNpZmllZCB1c2VyLlxuICAgKiBUbyBtYWtlIHN1cmUgdGhpcyBtZXRob2QgcmV0dXJucyBhIGJvb2xlYW4gYW5kIG5vdCB1bmRlZmluZWQsXG4gICAqIG1ha2Ugc3VyZSB0aGF0IHRoZSBjb250ZXh0cyBlbnRyeSBpcyBsb2FkZWQsIGUuZy4gdmlhOlxuICAgKlxuICAgKiBlbnRyeS5nZXRDb250ZXh0KCkuZ2V0RW50cnkoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAvL0FuZCB0aGVuIGRvIHlvdSBjaGVjaywgZS5nLjpcbiAgICogICAgZW50cnkuZ2V0RW50cnlTdG9yZSgpLmdldFVzZXJFbnRyeSgpLnRoZW4oZnVuY3Rpb24oY3VycmVudFVzZXJFbnRyeSkge1xuICAgKiAgICAgICBpZiAoZW50cnkuaXNQcml2YXRlVG8oY3VycmVudFVzZXJFbnRyeSkgey4uLn1cbiAgICogICAgfSlcbiAgICogfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9IHVuZGVmaW5lZCBpZiB0aGUgY29udGV4dHMgZW50cnkgd2hpY2hcbiAgICogc3BlY2lmaWVzIHRoZSBkZWZhdWx0IGFjY2VzcyBpcyBub3QgY2FjaGVkLCBvdGhlcndpc2UgYSBib29sZWFuIGlzIHJldHVybmVkLlxuICAgKi9cbiAgaXNQcml2YXRlVG8odXNlckVudHJ5KSB7XG4gICAgY29uc3QgdXNlclByaW5jaXBhbCA9IHVzZXJFbnRyeS5nZXRSZXNvdXJjZVVSSSgpO1xuICAgIGNvbnN0IGFjbCA9IHRoaXMuZ2V0RW50cnlJbmZvKCkuZ2V0QUNMKCk7XG4gICAgY29uc3QgY2UgPSB0aGlzLmdldENvbnRleHQoKS5nZXRFbnRyeSh0cnVlKTtcbiAgICBpZiAoY2UgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgY2FjbCA9IGNlLmdldEVudHJ5SW5mbygpLmdldEFDTCgpO1xuICAgIGlmIChjYWNsLmFkbWluLmxlbmd0aCAhPT0gMSB8fCBhY2wuYWRtaW5bMF0gIT09IHVzZXJQcmluY2lwYWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFjbC5jb250ZXh0T3ZlcnJpZGUpIHtcbiAgICAgIHJldHVybiBhY2wuYWRtaW4ubGVuZ3RoID09PSAxICYmIGFjbC5hZG1pblswXSA9PT0gdXNlclByaW5jaXBhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyB0aGlzIGVudHJ5IHdpdGhvdXQgYW55IG9wdGlvbiB0byByZWNvdmVyIGl0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY3Vyc2l2ZSBpZiB0cnVlIGFuZCB0aGUgZW50cnkgaXMgYSBsaXN0IGl0IHdpbGwgZGVsZXRlIHRoZSBlbnRpcmUgdHJlZSBvZlxuICAgKiBsaXN0cyBhbmQgYWxsIGVudHJpZXMgdGhhdCBpcyBvbmx5IGNvbnRhaW5lZCBpbiB0aGUgY3VycmVudCBsaXN0IG9yIGFueSBvZiBpdHMgY2hpbGQgbGlzdHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IHdoaWNoIG9uIHN1Y2Nlc3MgaW5kaWNhdGVzIHRoYXQgdGhlIGRlbGV0aW9uIGhhcyBzdWNjZWVkZWQuXG4gICAqL1xuICBkZWwocmVjdXJzaXZlID0gZmFsc2UpIHtcbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIGNvbnN0IHVuQ2FjaGUgPSAoKSA9PiBlcy5nZXRDYWNoZSgpLnVuQ2FjaGUodGhpcyk7XG5cbiAgICBpZiAocmVjdXJzaXZlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMoZXMuZ2V0UkVTVCgpLmRlbChgJHt0aGlzLmdldFVSSSgpfT9yZWN1cnNpdmU9dHJ1ZWApXG4gICAgICAgIC50aGVuKHVuQ2FjaGUpLCAnZGVsRW50cnknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMoZXMuZ2V0UkVTVCgpLmRlbCh0aGlzLmdldFVSSSgpKS50aGVuKHVuQ2FjaGUpLCAnZGVsRW50cnknKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGF0IGFuIGVudHJ5IG5lZWRzIHRvIGJlIHJlZnJlc2hlZCB0eXBpY2FsbHkgbWVhbnMgdGhhdCBpdCBjb250YWlucyBzdGFsZSBkYXRhXG4gICAqICh3aXRoIHJlc3BlY3QgdG8gd2hhdCBpcyBhdmFpbGFibGUgaW4gdGhlIHN0b3JlKS5cbiAgICogVGhlIGVudHJ5IHNob3VsZCBiZSByZWZyZXNoIGJlZm9yZSBpdCBpcyBmdXJ0aGVyIHVzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNpbGVudGx5IHRoZSBjYWNoZSB3aWxsIHNlbmQgb3V0IGEgc3RhbGUgbWVzc2FnZSAodG8gYWxsIHJlZ2lzdGVyZWRcbiAgICogbGlzdGVuZXJzIG9mIHRoZSBjYWNoZSkgZm9yIHRoaXMgZW50cnkgaWYgdGhlIHZhbHVlIGlzIGZhbHNlIG9yIHVuZGVmaW5lZC5cbiAgICogQHNlZSBzdG9yZS5FbnRyeSNyZWZyZXNoLlxuICAgKi9cbiAgc2V0UmVmcmVzaE5lZWRlZChzaWxlbnRseSA9IHRydWUpIHtcbiAgICB0aGlzLmdldEVudHJ5U3RvcmUoKS5nZXRDYWNoZSgpLnNldFJlZnJlc2hOZWVkZWQodGhpcywgc2lsZW50bHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlbGxzIHdoZXRoZXIgYW4gZW50cnkgbmVlZHMgdG8gYmUgcmVmcmVzaGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBlbnRyeSBuZWVkIHRvIGJlIHJlZnJlc2hlZCBiZWZvcmUgdXNlZC5cbiAgICogQHNlZSBzdG9yZS9FbnRyeSNyZWZyZXNoLlxuICAgKi9cbiAgbmVlZFJlZnJlc2goKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cnlTdG9yZSgpLmdldENhY2hlKCkubmVlZFJlZnJlc2godGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaGVzIGFuIGVudHJ5IGlmIG5lZWRlZCwgdGhhdCBpcywgaWYgaXQgaGFzIGJlZW4gbWFya2VkIGFzIGludmFsaWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNpbGVudGx5IHRoZSBjYWNoZSB3aWxsIHNlbmQgb3V0IGEgcmVmcmVzaCBtZXNzYWdlIGZvciB0aGlzIGVudHJ5XG4gICAqIGlmIGEgcmVmcmVzaCB3YXMgbmVlZGVkIEFORCBpZiB0aGUgdmFsdWUgb2Ygc2lsZW50bHkgaXMgZmFsc2Ugb3IgdW5kZWZpbmVkLiBJZiBmb3JjZSBpcyB0cnVlXG4gICAqIGl0IHdpbGwgc2VuZCBvdXQgYSByZWZyZXNoIG1lc3NhZ2UgYW55aG93LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbZm9yY2U9ZmFsc2VdIElmIHRydWUgdGhlIGVudHJ5IHdpbGwgYmUgcmVmcmVzaGVkIGluZGVwZW5kZW50IGlmIGl0IHdhcyBtYXJrZWQgaW4gbmVlZFxuICAgKiBvZiBhIHJlZnJlc2ggb3Igbm90LlxuICAgKi9cbiAgcmVmcmVzaChzaWxlbnRseSA9IHRydWUsIGZvcmNlID0gZmFsc2UpIHtcbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIGxldCBwO1xuICAgIGlmIChmb3JjZSA9PT0gdHJ1ZSB8fCBlcy5nZXRDYWNoZSgpLm5lZWRSZWZyZXNoKHRoaXMpKSB7XG4gICAgICBjb25zdCBlbnRyeVVSSSA9IHRoaXMuZ2V0VVJJKCk7XG4gICAgICBwID0gZXMuZ2V0UkVTVCgpLmdldChmYWN0b3J5LmdldEVudHJ5TG9hZFVSSShlbnRyeVVSSSkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgZmFjdG9yeS51cGRhdGUodGhpcywgZGF0YSk7XG4gICAgICAgIGVzLmdldENhY2hlKCkuY2FjaGUodGhpcywgc2lsZW50bHkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwID0gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMocCwgJ3JlZnJlc2gnKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV2ZW50c1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsIi8qIGpzaGludCBub2RlOiB0cnVlICovXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgZnVuY3Rpb24gQ29va2llQWNjZXNzSW5mbyhkb21haW4sIHBhdGgsIHNlY3VyZSwgc2NyaXB0KSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQ29va2llQWNjZXNzSW5mbykge1xuICAgICAgICAgICAgdGhpcy5kb21haW4gPSBkb21haW4gfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcGF0aCB8fCBcIi9cIjtcbiAgICAgICAgICAgIHRoaXMuc2VjdXJlID0gISFzZWN1cmU7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdCA9ICEhc2NyaXB0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb29raWVBY2Nlc3NJbmZvKGRvbWFpbiwgcGF0aCwgc2VjdXJlLCBzY3JpcHQpO1xuICAgIH1cbiAgICBDb29raWVBY2Nlc3NJbmZvLkFsbCA9IE9iamVjdC5mcmVlemUoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgZXhwb3J0cy5Db29raWVBY2Nlc3NJbmZvID0gQ29va2llQWNjZXNzSW5mbztcblxuICAgIGZ1bmN0aW9uIENvb2tpZShjb29raWVzdHIsIHJlcXVlc3RfZG9tYWluLCByZXF1ZXN0X3BhdGgpIHtcbiAgICAgICAgaWYgKGNvb2tpZXN0ciBpbnN0YW5jZW9mIENvb2tpZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvb2tpZXN0cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIENvb2tpZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5leHBpcmF0aW9uX2RhdGUgPSBJbmZpbml0eTtcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IFN0cmluZyhyZXF1ZXN0X3BhdGggfHwgXCIvXCIpO1xuICAgICAgICAgICAgdGhpcy5leHBsaWNpdF9wYXRoID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRvbWFpbiA9IHJlcXVlc3RfZG9tYWluIHx8IG51bGw7XG4gICAgICAgICAgICB0aGlzLmV4cGxpY2l0X2RvbWFpbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZWN1cmUgPSBmYWxzZTsgLy9ob3cgdG8gZGVmaW5lIGRlZmF1bHQ/XG4gICAgICAgICAgICB0aGlzLm5vc2NyaXB0ID0gZmFsc2U7IC8vaHR0cG9ubHlcbiAgICAgICAgICAgIGlmIChjb29raWVzdHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlKGNvb2tpZXN0ciwgcmVxdWVzdF9kb21haW4sIHJlcXVlc3RfcGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvb2tpZShjb29raWVzdHIsIHJlcXVlc3RfZG9tYWluLCByZXF1ZXN0X3BhdGgpO1xuICAgIH1cbiAgICBleHBvcnRzLkNvb2tpZSA9IENvb2tpZTtcblxuICAgIENvb2tpZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgdmFyIHN0ciA9IFt0aGlzLm5hbWUgKyBcIj1cIiArIHRoaXMudmFsdWVdO1xuICAgICAgICBpZiAodGhpcy5leHBpcmF0aW9uX2RhdGUgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICBzdHIucHVzaChcImV4cGlyZXM9XCIgKyAobmV3IERhdGUodGhpcy5leHBpcmF0aW9uX2RhdGUpKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kb21haW4pIHtcbiAgICAgICAgICAgIHN0ci5wdXNoKFwiZG9tYWluPVwiICsgdGhpcy5kb21haW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhdGgpIHtcbiAgICAgICAgICAgIHN0ci5wdXNoKFwicGF0aD1cIiArIHRoaXMucGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VjdXJlKSB7XG4gICAgICAgICAgICBzdHIucHVzaChcInNlY3VyZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ub3NjcmlwdCkge1xuICAgICAgICAgICAgc3RyLnB1c2goXCJodHRwb25seVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyLmpvaW4oXCI7IFwiKTtcbiAgICB9O1xuXG4gICAgQ29va2llLnByb3RvdHlwZS50b1ZhbHVlU3RyaW5nID0gZnVuY3Rpb24gdG9WYWx1ZVN0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArIFwiPVwiICsgdGhpcy52YWx1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGNvb2tpZV9zdHJfc3BsaXR0ZXIgPSAvWzpdKD89XFxzKlthLXpBLVowLTlfXFwtXStcXHMqWz1dKS9nO1xuICAgIENvb2tpZS5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZShzdHIsIHJlcXVlc3RfZG9tYWluLCByZXF1ZXN0X3BhdGgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDb29raWUpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdChcIjtcIikuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpO1xuXG4gICAgICAgICAgICB2YXIgcGFpciA9IHBhcnRzWzBdLm1hdGNoKC8oW149XSspPShbXFxzXFxTXSopLyk7XG4gICAgICAgICAgICBpZiAoIXBhaXIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNvb2tpZSBoZWFkZXIgZW5jb3VudGVyZWQuIEhlYWRlcjogJ1wiK3N0citcIidcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIga2V5ID0gcGFpclsxXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHBhaXJbMl07XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleS5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gZXh0cmFjdCB2YWx1ZXMgZnJvbSBjb29raWUgaGVhZGVyLiBDb29raWU6ICdcIitzdHIrXCInXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5uYW1lID0ga2V5O1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBwYWlyID0gcGFydHNbaV0ubWF0Y2goLyhbXj1dKykoPzo9KFtcXHNcXFNdKikpPy8pO1xuICAgICAgICAgICAgICAgIGtleSA9IHBhaXJbMV0udHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYWlyWzJdO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImh0dHBvbmx5XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9zY3JpcHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXhwaXJlc1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGlyYXRpb25fZGF0ZSA9IHZhbHVlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoRGF0ZS5wYXJzZSh2YWx1ZSkpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInBhdGhcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoID0gdmFsdWUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnRyaW0oKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBsaWNpdF9wYXRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRvbWFpblwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbWFpbiA9IHZhbHVlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS50cmltKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwbGljaXRfZG9tYWluID0gISF0aGlzLmRvbWFpbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNlY3VyZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY3VyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmV4cGxpY2l0X3BhdGgpIHtcbiAgICAgICAgICAgICAgIHRoaXMucGF0aCA9IHJlcXVlc3RfcGF0aCB8fCBcIi9cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5leHBsaWNpdF9kb21haW4pIHtcbiAgICAgICAgICAgICAgIHRoaXMuZG9tYWluID0gcmVxdWVzdF9kb21haW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29va2llKCkucGFyc2Uoc3RyLCByZXF1ZXN0X2RvbWFpbiwgcmVxdWVzdF9wYXRoKTtcbiAgICB9O1xuXG4gICAgQ29va2llLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlcyhhY2Nlc3NfaW5mbykge1xuICAgICAgICBpZiAoYWNjZXNzX2luZm8gPT09IENvb2tpZUFjY2Vzc0luZm8uQWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubm9zY3JpcHQgJiYgYWNjZXNzX2luZm8uc2NyaXB0IHx8XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmUgJiYgIWFjY2Vzc19pbmZvLnNlY3VyZSB8fFxuICAgICAgICAgICAgICAgICF0aGlzLmNvbGxpZGVzV2l0aChhY2Nlc3NfaW5mbykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgQ29va2llLnByb3RvdHlwZS5jb2xsaWRlc1dpdGggPSBmdW5jdGlvbiBjb2xsaWRlc1dpdGgoYWNjZXNzX2luZm8pIHtcbiAgICAgICAgaWYgKCh0aGlzLnBhdGggJiYgIWFjY2Vzc19pbmZvLnBhdGgpIHx8ICh0aGlzLmRvbWFpbiAmJiAhYWNjZXNzX2luZm8uZG9tYWluKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhdGggJiYgYWNjZXNzX2luZm8ucGF0aC5pbmRleE9mKHRoaXMucGF0aCkgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leHBsaWNpdF9wYXRoICYmIGFjY2Vzc19pbmZvLnBhdGguaW5kZXhPZiggdGhpcy5wYXRoICkgIT09IDApIHtcbiAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhY2Nlc3NfZG9tYWluID0gYWNjZXNzX2luZm8uZG9tYWluICYmIGFjY2Vzc19pbmZvLmRvbWFpbi5yZXBsYWNlKC9eW1xcLl0vLCcnKTtcbiAgICAgICAgdmFyIGNvb2tpZV9kb21haW4gPSB0aGlzLmRvbWFpbiAmJiB0aGlzLmRvbWFpbi5yZXBsYWNlKC9eW1xcLl0vLCcnKTtcbiAgICAgICAgaWYgKGNvb2tpZV9kb21haW4gPT09IGFjY2Vzc19kb21haW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb29raWVfZG9tYWluKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZXhwbGljaXRfZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB3ZSBhbHJlYWR5IGNoZWNrZWQgaWYgdGhlIGRvbWFpbnMgd2VyZSBleGFjdGx5IHRoZSBzYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd2lsZGNhcmQgPSBhY2Nlc3NfZG9tYWluLmluZGV4T2YoY29va2llX2RvbWFpbik7XG4gICAgICAgICAgICBpZiAod2lsZGNhcmQgPT09IC0xIHx8IHdpbGRjYXJkICE9PSBhY2Nlc3NfZG9tYWluLmxlbmd0aCAtIGNvb2tpZV9kb21haW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvb2tpZUphcigpIHtcbiAgICAgICAgdmFyIGNvb2tpZXMsIGNvb2tpZXNfbGlzdCwgY29sbGlkYWJsZV9jb29raWU7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQ29va2llSmFyKSB7XG4gICAgICAgICAgICBjb29raWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy9uYW1lOiBbQ29va2llXVxuXG4gICAgICAgICAgICB0aGlzLnNldENvb2tpZSA9IGZ1bmN0aW9uIHNldENvb2tpZShjb29raWUsIHJlcXVlc3RfZG9tYWluLCByZXF1ZXN0X3BhdGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlLCBpO1xuICAgICAgICAgICAgICAgIGNvb2tpZSA9IG5ldyBDb29raWUoY29va2llLCByZXF1ZXN0X2RvbWFpbiwgcmVxdWVzdF9wYXRoKTtcbiAgICAgICAgICAgICAgICAvL0RlbGV0ZSB0aGUgY29va2llIGlmIHRoZSBzZXQgaXMgcGFzdCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAgICAgcmVtb3ZlID0gY29va2llLmV4cGlyYXRpb25fZGF0ZSA8PSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIGlmIChjb29raWVzW2Nvb2tpZS5uYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb2tpZXNfbGlzdCA9IGNvb2tpZXNbY29va2llLm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llc19saXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaWRhYmxlX2Nvb2tpZSA9IGNvb2tpZXNfbGlzdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaWRhYmxlX2Nvb2tpZS5jb2xsaWRlc1dpdGgoY29va2llKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llc19saXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb2tpZXNfbGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb29raWVzW2Nvb2tpZS5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXNfbGlzdFtpXSA9IGNvb2tpZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb29raWVzX2xpc3QucHVzaChjb29raWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29va2llc1tjb29raWUubmFtZV0gPSBbY29va2llXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29va2llc1tjb29raWUubmFtZV07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy9yZXR1cm5zIGEgY29va2llXG4gICAgICAgICAgICB0aGlzLmdldENvb2tpZSA9IGZ1bmN0aW9uIGdldENvb2tpZShjb29raWVfbmFtZSwgYWNjZXNzX2luZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29va2llLCBpO1xuICAgICAgICAgICAgICAgIGNvb2tpZXNfbGlzdCA9IGNvb2tpZXNbY29va2llX25hbWVdO1xuICAgICAgICAgICAgICAgIGlmICghY29va2llc19saXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZXNfbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb29raWUgPSBjb29raWVzX2xpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb29raWUuZXhwaXJhdGlvbl9kYXRlIDw9IERhdGUubm93KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb29raWVzX2xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvb2tpZXNbY29va2llLm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29va2llLm1hdGNoZXMoYWNjZXNzX2luZm8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29va2llO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vcmV0dXJucyBhIGxpc3Qgb2YgY29va2llc1xuICAgICAgICAgICAgdGhpcy5nZXRDb29raWVzID0gZnVuY3Rpb24gZ2V0Q29va2llcyhhY2Nlc3NfaW5mbykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gW10sIGNvb2tpZV9uYW1lLCBjb29raWU7XG4gICAgICAgICAgICAgICAgZm9yIChjb29raWVfbmFtZSBpbiBjb29raWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb2tpZSA9IHRoaXMuZ2V0Q29va2llKGNvb2tpZV9uYW1lLCBhY2Nlc3NfaW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb29raWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChjb29raWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hdGNoZXMudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXMuam9pbihcIjpcIik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnRvVmFsdWVTdHJpbmcgPSBmdW5jdGlvbiB0b1ZhbHVlU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLnRvVmFsdWVTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuam9pbignOycpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvb2tpZUphcigpO1xuICAgIH1cbiAgICBleHBvcnRzLkNvb2tpZUphciA9IENvb2tpZUphcjtcblxuICAgIC8vcmV0dXJucyBsaXN0IG9mIGNvb2tpZXMgdGhhdCB3ZXJlIHNldCBjb3JyZWN0bHkuIENvb2tpZXMgdGhhdCBhcmUgZXhwaXJlZCBhbmQgcmVtb3ZlZCBhcmUgbm90IHJldHVybmVkLlxuICAgIENvb2tpZUphci5wcm90b3R5cGUuc2V0Q29va2llcyA9IGZ1bmN0aW9uIHNldENvb2tpZXMoY29va2llcywgcmVxdWVzdF9kb21haW4sIHJlcXVlc3RfcGF0aCkge1xuICAgICAgICBjb29raWVzID0gQXJyYXkuaXNBcnJheShjb29raWVzKSA/XG4gICAgICAgICAgICAgICAgY29va2llcyA6XG4gICAgICAgICAgICAgICAgY29va2llcy5zcGxpdChjb29raWVfc3RyX3NwbGl0dGVyKTtcbiAgICAgICAgdmFyIHN1Y2Nlc3NmdWwgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjb29raWU7XG4gICAgICAgIGNvb2tpZXMgPSBjb29raWVzLm1hcChmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29va2llKGl0ZW0sIHJlcXVlc3RfZG9tYWluLCByZXF1ZXN0X3BhdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvb2tpZSA9IGNvb2tpZXNbaV07XG4gICAgICAgICAgICBpZiAodGhpcy5zZXRDb29raWUoY29va2llLCByZXF1ZXN0X2RvbWFpbiwgcmVxdWVzdF9wYXRoKSkge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWwucHVzaChjb29raWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWNjZXNzZnVsO1xuICAgIH07XG59KCkpO1xuIiwiaW1wb3J0IEVudHJ5U3RvcmUgZnJvbSAnLi9FbnRyeVN0b3JlJztcbmltcG9ydCBMaXN0IGZyb20gJy4vTGlzdCc7XG5pbXBvcnQgZmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuXG4vKipcbiAqIEBleHBvcnRzIHN0b3JlL1NlYXJjaExpc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoTGlzdCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnlTdG9yZX0gZW50cnlTdG9yZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcXVlcnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxUeXBlIHBhcmFtZXRlciBwcm92aWRlZCB0byBhc3luY0xpc3RlbmVycyBvbiBxdWVyeSBleGVjdXRpb24sXG4gICAqIGFzc3VtZWQgdG8gYmUgJ3NlYXJjaCcgaWYgbGVmdCBvdXRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJ5U3RvcmUsIHF1ZXJ5LCBjYWxsVHlwZSkge1xuICAgIHRoaXMuX2VudHJ5U3RvcmUgPSBlbnRyeVN0b3JlO1xuICAgIHRoaXMuX3F1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5fY2FsbFR5cGUgPSBjYWxsVHlwZSB8fCAnc2VhcmNoJztcbiAgICB0aGlzLl9zb3J0ZWRDaGlsZHJlbiA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIHRoZSBxdWVyeSBpbnN0YW5jZSwgZS5nLiBhbiBpbnN0YW5jZSBvZiBzdG9yZS9Tb2xyUXVlcnksIGFzc29jaWF0ZWQgd2l0aCB0aGlzIFNlYXJjaExpc3QuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRRdWVyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcXVlcnk7XG4gIH1cblxuICBzZXRMaW1pdChsaW1pdCkge1xuICAgIHRoaXMuX3F1ZXJ5LmxpbWl0KGxpbWl0KTtcbiAgfVxuXG4gIGdldExpbWl0KCkge1xuICAgIHJldHVybiB0aGlzLl9xdWVyeS5nZXRMaW1pdCgpIHx8IGZhY3RvcnkuZ2V0RGVmYXVsdExpbWl0KCk7XG4gIH1cblxuICAvKipcbiAgICogQXJyYXkgb2YgZmFjZXRzLCBlYWNoIGZhY2V0IGlzIGFuIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAgICpcbiAgICogIG5hbWUgICAgICAgLSB0aGUgc29sciBzZWFyY2ggZmllbGQgdGhpcyBmYWNldCBjb3JyZXNwb25kcyB0b1xuICAgKiAgdmFsdWVDb3VudCAtIHRoZSBudW1iZXIgb2YgdmFsdWVzIHRoaXMgZmFjZXQgbWF0Y2hlc1xuICAgKiAgdmFsdWVzICAgICAtIGFuIGFycmF5IG9mIHZhbHVlcyBtYXRjaGluZyB0aGlzIGZhY2V0LCB3aXRoIG5hbWUgYW5kIGNvdW50IGVhY2guXG4gICAqXG4gICAqIEluIGFkZGl0aW9uLCB3aGVuIGFza2luZyBmb3IgZmFjZXRzIGZvciBhcmJpdHJhcnkgcHJlZGljYXRlcyB0aGVyZSBpcyB0d28gYWRkaXRpb25hbCBmaWVsZHM6XG4gICAqXG4gICAqICBwcmVkaWNhdGUgLSB0aGUgZnVsbCBVUkkgb2YgdGhlIHByZWRpY2F0ZSB0aGlzIGZhY2V0IGNvcnJlc3BvbmRzIHRvXG4gICAqICB0eXBlIC0gdGhlIHR5cGUgb2YgdGhlIGZhY2V0IHZhbHVlcywgY3VycmVudGx5IG9ubHkgbGl0ZXJhbCwgdXJpIGFuZCBpbnRlZ2VyIGFyZSBzdXBwb3J0ZWRcbiAgICpcbiAgICogTm90ZSB0aGF0IHlvdSBjYW4gYXNrIGZvciBmYWNldHMgZm9yIHNvbHIgZmllbGRzIGxpa2UgXCJ0YWdzXCIsIGluIHRoaXMgY2FzZSB0aGUgYWJvdmUgdHdvXG4gICAqIGZpZWxkcyB3aWxsIGJlIG5vdCBiZSBwcmVzZW50IGFzIHRoZSBcInRhZ3NcIiBzb2xyIGZpZWxkIGNvcnJlc3BvbmRzIHRvIGEgbWl4IG9mIGRpZmZlcmVudFxuICAgKiBwcmVkaWNhdGVzIGFuZCBwb3NzaWJseSBkaWZmZXJlbnQgdHlwZXMuXG4gICAqXG4gICAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiBhIGZhY2V0IGZvciBkY2F0OmtleXdvcmQ6XG4gICAqIHtcbiAgICogICBuYW1lOiAgXCJtZXRhZGF0YS5wcmVkaWNhdGUubGl0ZXJhbF9zLmE2NDI0MTMzXCIsXG4gICAqICAgcHJlZGljYXRlOiBcImh0dHA6Ly93d3cudzMub3JnL25zL2RjYXQja2V5d29yZFwiLFxuICAgKiAgIHR5cGU6IFwibGl0ZXJhbFwiLFxuICAgKiAgIHZhbHVlQ291bnQ6IDMsXG4gICAqICAgdmFsdWVzOiBbXG4gICAqICAgICAge25hbWU6IFwiZWxla3RyaWN0ZXRcIiwgY291bnQ6IDF9LFxuICAgKiAgICAgIHtuYW1lOiBcImZpbmFuc1wiLCBjb3VudDogMX0sXG4gICAqICAgICAge25hbWU6IFwic2thdHRcIiwgY291bnQ6IDF9XG4gICAqICAgXVxuICAgKiB9XG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSBuZXZlciBudWxsIG9yIHVuZGVmaW5lZCwgbWF5IGJlIGFuIGFycmF5IG9mIGxlbmd0aCAwIHRob3VnaC5cbiAgICovXG4gIGdldEZhY2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5mYWNldHM7XG4gIH1cblxuICBzZXRGYWNldHMoZmFjZXRGaWVsZHMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmFjZXRGaWVsZHMpIHx8IGZhY2V0RmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5mYWNldHMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mYWNldHMgPSBmYWNldEZpZWxkcztcbiAgICAgIGNvbnN0IGYycCA9IHRoaXMuX3F1ZXJ5LmZhY2V0MnByZWRpY2F0ZTtcbiAgICAgIGZhY2V0RmllbGRzLmZvckVhY2goKGZmKSA9PiB7XG4gICAgICAgIGlmIChmMnAgJiYgZjJwW2ZmLm5hbWVdKSB7XG4gICAgICAgICAgZmYucHJlZGljYXRlID0gZjJwW2ZmLm5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmZi5uYW1lLnN0YXJ0c1dpdGgoJ21ldGFkYXRhLnByZWRpY2F0ZScpKSB7XG4gICAgICAgICAgZmYudHlwZSA9IGZmLm5hbWUuc3BsaXQoJy4nKVsyXTtcbiAgICAgICAgfSBlbHNlIGlmIChmZi5uYW1lLnN0YXJ0c1dpdGgoJ3JlbGF0ZWQubWV0YWRhdGEucHJlZGljYXRlJykpIHtcbiAgICAgICAgICBmZi50eXBlID0gZmYubmFtZS5zcGxpdCgnLicpWzNdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtwYWdlPTBdXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZm9yY2VMb2FkRW50cmllcyhwYWdlID0gMCkge1xuICAgIGNvbnN0IG9mZnNldCA9IHBhZ2UgKiB0aGlzLmdldExpbWl0KCk7XG4gICAgdGhpcy5fcXVlcnkub2Zmc2V0KG9mZnNldCk7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5U3RvcmUuaGFuZGxlQXN5bmModGhpcy5fZW50cnlTdG9yZS5nZXRSRVNUKCkuZ2V0KHRoaXMuX3F1ZXJ5LmdldFF1ZXJ5KHRoaXMuX2VudHJ5U3RvcmUpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgdGhpcy5zZXRGYWNldHMoZGF0YS5mYWNldEZpZWxkcyk7XG4gICAgICAgIHJldHVybiBmYWN0b3J5LmV4dHJhY3RTZWFyY2hSZXN1bHRzKGRhdGEsIHRoaXMsIHRoaXMuX2VudHJ5U3RvcmUpO1xuICAgICAgfSksIHRoaXMuX2NhbGxUeXBlKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBzaXplIG9mIGxpc3QuXG4gKlxuICogQHJldHVybnMge251bWJlcn0gdGhlIGFtb3VudCBvZiBlbnRyaWVzIGluIHRoZSBsaXN0LCAtMSBpZiB1bmtub3duLlxuICovXG4vLyBTZWFyY2hMaXN0LnByb3RvdHlwZS5nZXRTaXplID0gTGlzdC5wcm90b3R5cGUuZ2V0U2l6ZTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYW4gYXJyYXkgb2YgZW50cmllcyBjb250YWluZWQgaW4gdGhpcyBsaXN0IGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGFuZFxuICogcGFnaW5hdGlvbiBzZXR0aW5ncy5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHBhZ2UgLSB0aGUgcGFnZSB0byByZXF1ZXN0IGFuIGFycmF5IG9mIGVudHJpZXMgZm9yLCBmaXJzdCBwYWdlIGlzIG51bWJlcmVkIDAuXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48QXJyYXkuPEVudHJ5Pj59IHRoZSBwcm9taXNlIHdpbGwgcmV0dXJuIGFuIGVudHJ5LWFycmF5LlxuICogQG1ldGhvZFxuICovXG5TZWFyY2hMaXN0LnByb3RvdHlwZS5nZXRFbnRyaWVzID0gTGlzdC5wcm90b3R5cGUuZ2V0RW50cmllcztcblxuLyoqXG4gKiBFeGVjdXRlcyBhIGNhbGxiYWNrIG9uIGVhY2ggbGlzdCBtZW1iZXJzIGluIHRoZSBvcmRlciBwcm92aWRlZCBieSB0aGUgc29sci1zZWFyY2guXG4gKiBJZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gcmV0dXJuIGZhbHNlIGZvciBvbmUgZW50cnkgdGhlIGl0ZXJhdGlvbiBpcyBzdG9wcGVkIGFuZFxuICogdGhlIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQgZm9yIGNvbnNlY3V0aXZlIG1hdGNoZWQgZW50cmllcy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gKi9cblNlYXJjaExpc3QucHJvdG90eXBlLmZvckVhY2ggPSBMaXN0LnByb3RvdHlwZS5mb3JFYWNoO1xuU2VhcmNoTGlzdC5wcm90b3R5cGUuX2dldEVudHJpZXMgPSBMaXN0LnByb3RvdHlwZS5fZ2V0RW50cmllcztcblNlYXJjaExpc3QucHJvdG90eXBlLl91cGRhdGUgPSBMaXN0LnByb3RvdHlwZS5fdXBkYXRlO1xuXG4iLCJpbXBvcnQgUmVzb3VyY2UgZnJvbSAnLi9SZXNvdXJjZSc7XG5cbi8qKlxuICogVXNlciBpbnN0YW5jZXMgYXJlIHJlc291cmNlcyBjb3JyZXNwb25kaW5nIHRvIHVzZXJzIHRoYXQgY2FuIGJlIGF1dGhlbnRpY2F0ZWQgdG8gYWNjZXNzXG4gKiB0aGUgRW50cnlTdG9yZSByZXBvc2l0b3J5LiBUaGUgdXNlciByZXNvdXJjZSBVUkkgY2FuIGJlIHJlZmVycmVkIHRvIGZyb20gYWNjZXNzIGNvbnRyb2wgbGlzdHMuXG4gKlxuICogQGV4cG9ydHMgc3RvcmUvVXNlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudHJ5VVJJIC0gVVJJIHRvIGFuIGVudHJ5IHdoZXJlIHRoaXMgcmVzb3VyY2UgaXMgY29udGFpbmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VVUkkgLSBVUkkgdG8gdGhlIHJlc291cmNlLlxuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5U3RvcmV9IGVudHJ5U3RvcmUgLSB0aGUgQVBJJ3MgcmVwb3NpdG9yeSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciwgZS5nLiBvYmplY3Qgd2l0aCBuYW1lIGFuZCBob21lY29udGV4dC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJ5VVJJLCByZXNvdXJjZVVSSSwgZW50cnlTdG9yZSwgZGF0YSkge1xuICAgIHN1cGVyKGVudHJ5VVJJLCByZXNvdXJjZVVSSSwgZW50cnlTdG9yZSk7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSB1c2VyLCB0aGlzIGlzIGEgYSB1bmlxdWUgbmFtZSAodXNlcm5hbWUpIGluIHRoZSBjdXJyZW50IHJlcG9zaXRvcnknc1xuICAgKiBfcHJpbmNpcGFscyBjb250ZXh0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5uYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIG5ldyBuYW1lICh1c2VybmFtZSksIGl0IHdpbGwgbm90IHN1Y2NlZWQgaWYgaXQgaXMgYWxyZWFkeSBpbiB1c2UsIGZvciBpbnN0YW5jZSBieVxuICAgKiBhbm90aGVyIHVzZXIgb3IgZ3JvdXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0TmFtZShuYW1lKSB7XG4gICAgY29uc3Qgb2xkTmFtZSA9IHRoaXMuX2RhdGEubmFtZTtcbiAgICB0aGlzLl9kYXRhLm5hbWUgPSBuYW1lO1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVN0b3JlLmhhbmRsZUFzeW5jKGVzLmdldFJFU1QoKS5wdXQodGhpcy5fcmVzb3VyY2VVUkksIEpTT04uc3RyaW5naWZ5KHsgbmFtZSB9KSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5nZXRFbnRyeSh0cnVlKTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgZW50cnkuZ2V0RW50cnlJbmZvKCkuX25hbWUgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgdGhpcy5fZGF0YS5uYW1lID0gb2xkTmFtZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pLCAnc2V0VXNlck5hbWUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHByZWZlcnJlZCBsYW5ndWFnZSBvZiB0aGUgdXNlci5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldExhbmd1YWdlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmxhbmd1YWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByZWZlcnJlZCBsYW5ndWFnZSBvZiBhIHVzZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHNldExhbmd1YWdlKGxhbmd1YWdlKSB7XG4gICAgY29uc3Qgb2xkTGFuZyA9IHRoaXMuX2RhdGEubGFuZ3VhZ2U7XG4gICAgdGhpcy5fZGF0YS5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVN0b3JlLmhhbmRsZUFzeW5jKHRoaXMuX2VudHJ5U3RvcmUuZ2V0UkVTVCgpLnB1dCh0aGlzLl9yZXNvdXJjZVVSSSwgSlNPTi5zdHJpbmdpZnkoeyBsYW5ndWFnZSB9KSlcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSwgKGUpID0+IHtcbiAgICAgICAgdGhpcy5fZGF0YS5sYW5ndWFnZSA9IG9sZExhbmc7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KSwgJ3NldFVzZXJMYW5ndWFnZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIG5ldyBwYXNzd29yZCBmb3IgdGhlIHVzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCAtIGEgbmV3IHBhc3N3b3JkLCBzaG91bGQgYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmcuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0UGFzc3dvcmQocGFzc3dvcmQpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlTdG9yZS5oYW5kbGVBc3luYyh0aGlzLl9lbnRyeVN0b3JlLmdldFJFU1QoKS5wdXQodGhpcy5fcmVzb3VyY2VVUkksXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IHBhc3N3b3JkIH0pKSwgJ3NldFVzZXJQYXNzd29yZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIGRpc2FibGVkLiBEaXNhYmxlZCB1c2VycyBjYW5ub3Qgc2lnbiBpbiwgYWx0aG91Z2ggdGhleSBzdGlsbCBleGlzdFxuICAgKiBmb3IgbG9va3VwLCBlLmcuIHdoZW4gcHJlc2VudGluZyBjcmVhdG9ycyBhbmQgY29udHJpYnV0b3JzLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuZGlzYWJsZWQgPT09IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB1c2VyIHRvIGJlIGRpc2FibGVkIG9yIG5vdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBkaXNhYmxlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHNldERpc2FibGVkKGRpc2FibGVkKSB7XG4gICAgaWYgKGRpc2FibGVkID09PSB0aGlzLmlzRGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICB9XG4gICAgY29uc3Qgb2xkRGlzYWJsZWQgPSB0aGlzLl9kYXRhLmRpc2FibGVkID09PSB0cnVlO1xuICAgIHRoaXMuX2RhdGEuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlTdG9yZS5oYW5kbGVBc3luYyh0aGlzLl9lbnRyeVN0b3JlLmdldFJFU1QoKS5wdXQodGhpcy5fcmVzb3VyY2VVUkksXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IGRpc2FibGVkIH0pKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmdldEVudHJ5KHRydWUpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5nZXRFbnRyeUluZm8oKS5fZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0sIChlKSA9PiB7XG4gICAgICAgIHRoaXMuX2RhdGEuZGlzYWJsZWQgPSBvbGREaXNhYmxlZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pLCAnc2V0VXNlckRpc2FibGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBob21lIGNvbnRleHQgZm9yIHRoaXMgdXNlci5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gLSBhIGNvbnRleHQgaWQgKG5vdCB0aGUgZnVsbCByZXNvdXJjZSBVUkkpLlxuICAgKi9cbiAgZ2V0SG9tZUNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuaG9tZWNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgbmV3IGhvbWUgY29udGV4dCBmb3IgdGhpcyB1c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dElkIC0gYSBjb250ZXh0IGlkIChub3QgdGhlIGZ1bGwgcmVzb3VyY2UgVVJJKS5cbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBzZXRIb21lQ29udGV4dChjb250ZXh0SWQpIHtcbiAgICBjb25zdCBvbGRIb21lQ29udGV4dCA9IHRoaXMuX2RhdGEuaG9tZWNvbnRleHQ7XG4gICAgdGhpcy5fZGF0YS5ob21lY29udGV4dCA9IGNvbnRleHRJZDtcbiAgICByZXR1cm4gdGhpcy5fZW50cnlTdG9yZS5oYW5kbGVBc3luYyh0aGlzLl9lbnRyeVN0b3JlLmdldFJFU1QoKS5wdXQodGhpcy5fcmVzb3VyY2VVUkksXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IGhvbWVjb250ZXh0OiBjb250ZXh0SWQgfSkpXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEsIChlKSA9PiB7XG4gICAgICAgIHRoaXMuX2RhdGEuaG9tZWNvbnRleHQgPSBvbGRIb21lQ29udGV4dDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pLCAnc2V0VXNlckhvbWVDb250ZXh0Jyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1c3RvbSBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSAtIGtleSB2YWx1ZSBwYWlycyBvZiBjdXN0b20gcHJvcGVydGllcy5cbiAgICovXG4gIGdldEN1c3RvbVByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuY3VzdG9tUHJvcGVydGllcyB8fCB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSBuZXcgaG9tZSBjb250ZXh0IGZvciB0aGlzIHVzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjdXN0b21Qcm9wZXJ0aWVzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0Q3VzdG9tUHJvcGVydGllcyhjdXN0b21Qcm9wZXJ0aWVzKSB7XG4gICAgY29uc3Qgb2xkQ3VzdG9tUHJvcGVydGllcyA9IHRoaXMuX2RhdGEuY3VzdG9tUHJvcGVydGllcztcbiAgICB0aGlzLl9kYXRhLmN1c3RvbVByb3BlcnRpZXMgPSBjdXN0b21Qcm9wZXJ0aWVzO1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVN0b3JlLmhhbmRsZUFzeW5jKHRoaXMuX2VudHJ5U3RvcmUuZ2V0UkVTVCgpLnB1dCh0aGlzLl9yZXNvdXJjZVVSSSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHsgY3VzdG9tUHJvcGVydGllcyB9KSlcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSwgKGUpID0+IHtcbiAgICAgICAgdGhpcy5fZGF0YS5jdXN0b21Qcm9wZXJ0aWVzID0gb2xkQ3VzdG9tUHJvcGVydGllcztcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pLCAnc2V0VXNlckN1c3RvbVByb3BlcnRpZXMnKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH1cbn1cbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEdyYXBoIH0gZnJvbSAncmRmanNvbic7XG5pbXBvcnQgZmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuaW1wb3J0IHRlcm1zIGZyb20gJy4vdGVybXMnO1xuXG4vKipcbiAqIEVudHJ5SW5mbyBpcyBhIGNsYXNzIHRoYXQgY29udGFpbnMgYWxsIHRoZSBhZG1pbmlzdHJhdGl2ZSBpbmZvcm1hdGlvbiBvZiBhbiBlbnRyeS5cbiAqIEBleHBvcnRzIHN0b3JlL0VudHJ5SW5mb1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRyeUluZm8ge1xuICAvKipcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVudHJ5VVJJIG11c3QgYmUgcHJvdmlkZWQgdW5sZXNzIHRoZSBncmFwaCBjb250YWlucyBhIHN0YXRlbWVudCB3aXRoXG4gICAqIHRoZSBzdG9yZTpyZXNvdXJjZSBwcm9wZXJ0eSB3aGljaCBhbGxvd3MgdXMgdG8gaW5mZXIgdGhlIGVudHJ5VVJJLlxuICAgKiBAcGFyYW0ge3JkZmpzb24vR3JhcGh9IGdyYXBoIGNvcnJlc3BvbmRzIHRvIGEgcmRmanNvbi5HcmFwaCBjbGFzcyB3aXRoIHRoZSBlbnRyeWluZm8gYXNcbiAgICogc3RhdGVtZW50c1xuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5U3RvcmV9IGVudHJ5U3RvcmVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJ5VVJJLCBncmFwaCwgZW50cnlTdG9yZSkge1xuICAgIHRoaXMuX2VudHJ5VVJJID0gZW50cnlVUkkgfHwgZ3JhcGguZmluZChudWxsLCB0ZXJtcy5yZXNvdXJjZSlbMF0uZ2V0U3ViamVjdCgpO1xuICAgIHRoaXMuX2dyYXBoID0gZ3JhcGggfHwgbmV3IEdyYXBoKCk7XG4gICAgdGhpcy5fZW50cnlTdG9yZSA9IGVudHJ5U3RvcmU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0b3JlL0VudHJ5fVxuICAgKi9cbiAgZ2V0RW50cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7cmRmanNvbi9HcmFwaH0gZ3JhcGhcbiAgICovXG4gIHNldEdyYXBoKGdyYXBoKSB7XG4gICAgdGhpcy5fZ3JhcGggPSBncmFwaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtyZGZqc29uL0dyYXBofVxuICAgKi9cbiAgZ2V0R3JhcGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2hlcyB0aGUgZW50cnkgaW5mb3JtYXRpb24gdG8gdGhlIHJlcG9zaXRvcnksIGUuZy4gcG9zdHMgdG9cbiAgICogYmFzZXBhdGgvc3RvcmUve2NvbnRleHRJZH0vZW50cnkve2VudHJ5SWR9XG4gICAqIEBwYXJhbXMge2Jvb2xlYW59IGlnbm9yZUlmVW5tb2RpZmllZFNpbmNlQ2hlY2sgaWYgZXhwbGljaXRseSBzZXQgdG8gdHJ1ZSBubyBjaGVjayBpcyBkb25lXG4gICAqIGlmIGluZm9ybWF0aW9uIGlzIHN0YWxlLCBhbHNvIGl0IHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgcmVmcmVzaCB3aXRoIHRoZSBsYXRlc3QgZGF0ZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnlJbmZvPn1cbiAgICovXG4gIGNvbW1pdChpZ25vcmVJZlVubW9kaWZpZWRTaW5jZUNoZWNrID0gZmFsc2UpIHtcbiAgICBjb25zdCBlcyA9IHRoaXMuX2VudHJ5LmdldEVudHJ5U3RvcmUoKTtcbiAgICBsZXQgbW9kO1xuICAgIGlmIChpZ25vcmVJZlVubW9kaWZpZWRTaW5jZUNoZWNrID09PSB0cnVlKSB7XG4gICAgICBtb2QgPSB0aGlzLmdldE1vZGlmaWNhdGlvbkRhdGUoKTtcbiAgICB9XG4gICAgY29uc3QgcCA9IGVzLmdldFJFU1QoKS5wdXQodGhpcy5nZXRFbnRyeVVSSSgpLFxuICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5fZ3JhcGguZXhwb3J0UkRGSlNPTigpKSwgbW9kKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoaWdub3JlSWZVbm1vZGlmaWVkU2luY2VDaGVjayAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuX2VudHJ5LnNldFJlZnJlc2hOZWVkZWQodHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2VudHJ5LnJlZnJlc2goKS50aGVuKCgpID0+IHRoaXMsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEZhaWxlZCByZWZyZXNoaW5nLCBidXQgc3VjY2VlZGVkIGF0IHNhdmluZyBtZXRhZGF0YSxcbiAgICAgICAgICAgIC8vIGF0IGxlYXN0IHNlbmQgb3V0IG1lc3NhZ2UgdGhhdCBpdCBuZWVkcyB0byBiZSByZWZyZXNoZWQuXG4gICAgICAgICAgICBlcy5nZXRDYWNoZSgpLm1lc3NhZ2UoJ3JlZnJlc2hlZCcsIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBlcy5oYW5kbGVBc3luYyhwLCAnY29tbWl0RW50cnlJbmZvJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldEVudHJ5VVJJKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVVSSTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgaWQgb2YgdGhlIGVudHJ5XG4gICAqL1xuICBnZXRJZCgpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5nZXRFbnRyeUlkKHRoaXMuX2VudHJ5VVJJKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgZW50cnkgaXMgYSB1c2VyLCBncm91cCBvciBjb250ZXh0IHRoZXJlIGNhbiBiZSBhIG5hbWUuXG4gICAqIEluIGdlbmVyYWwgdGhlIG5hbWUgaXMgYWNjZXNzZWQgb24gdGhlIHJlc291cmNlLCBidXQgaW4gY2VydGFpblxuICAgKiBzaXR1YXRpb25zIHdlIGRvIG5vdCBoYXZlIHRoZSByZXNvdXJjZSB5ZXQobm90IGxvYWRlZCkgYnV0IHdlIHN0aWxsXG4gICAqIGhhdmUgdGhlIG5hbWUgKGZyb20gYSBzZWFyY2ggd2hlcmUgdGhlIG5hbWUgaXMgcHJvdmlkZWQgYnV0IG5vdCB0aGUgcmVzb3VyY2UpLFxuICAgKiBpbiB0aGlzIGNhc2Ugd2UgY2FuIGFjY2VzcyB0aGlzIG5hbWUgaGVyZS5cbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ30gYSB1c2VybmFtZSwgZ3JvdXBuYW1lIG9yIGNvbnRleHRuYW1lIG9mIHRoZSBlbnRyeVxuICAgKi9cbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgZW50cnkgaXMgYSB1c2VyIHRoZXJlIGNhbiBiZSBhIGRpc2FibGVkIHN0YXRlLlxuICAgKiBJbiBnZW5lcmFsIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBhY2Nlc3NlZCBvbiB0aGUgcmVzb3VyY2UsIGJ1dCBpbiBjZXJ0YWluXG4gICAqIHNpdHVhdGlvbnMgd2UgZG8gbm90IGhhdmUgdGhlIHJlc291cmNlIHlldChub3QgbG9hZGVkKSBidXQgd2Ugc3RpbGxcbiAgICogaGF2ZSB0aGUgZGlzYWJsZWQgc3RhdGUgKGZyb20gYSBzZWFyY2ggd2hlcmUgdGhlIGRpc2FibGVkIHN0YXRlIGlzIHByb3ZpZGVkXG4gICAqIGJ1dCBub3QgdGhlIHJlc291cmNlKSwgaW4gdGhpcyBjYXNlIHdlIGNhbiBhY2Nlc3MgdGhlIGRpc2FibGVkIHN0YXRlIGhlcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBhIGRpc2FibGVkIHN0YXRlIG9mIGEgdXNlclxuICAgKi9cbiAgaXNEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldE1ldGFkYXRhVVJJKCkge1xuICAgIHJldHVybiBmYWN0b3J5LmdldE1ldGFkYXRhVVJJRnJvbVVSSSh0aGlzLl9lbnRyeVN0b3JlLCB0aGlzLl9lbnRyeVVSSSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldEV4dGVybmFsTWV0YWRhdGFVUkkoKSB7XG4gICAgLy8gVE9ETyB3aWxsIG9ubHkgZXhpc3QgZm9yIExpbmtSZWZlcmVuY2VzIGFuZCBSZWZlcmVuY2VzLlxuICAgIHJldHVybiB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZSh0aGlzLl9lbnRyeVVSSSwgdGVybXMuZXh0ZXJuYWxNZXRhZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICAgKi9cbiAgc2V0RXh0ZXJuYWxNZXRhZGF0YVVSSSh1cmkpIHtcbiAgICB0aGlzLl9ncmFwaC5maW5kQW5kUmVtb3ZlKHRoaXMuX2VudHJ5VVJJLCB0ZXJtcy5leHRlcm5hbE1ldGFkYXRhKTtcbiAgICB0aGlzLl9ncmFwaC5jcmVhdGUodGhpcy5fZW50cnlVUkksIHRlcm1zLmV4dGVybmFsTWV0YWRhdGEsIHsgdHlwZTogJ3VyaScsIHZhbHVlOiB1cmkgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldENhY2hlZEV4dGVybmFsTWV0YWRhdGFVUkkoKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZ2V0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YVVSSSh0aGlzLl9lbnRyeVVSSSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGdldFJlc291cmNlVVJJKCkge1xuICAgIHJldHVybiB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZSh0aGlzLl9lbnRyeVVSSSwgdGVybXMucmVzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAgICovXG4gIHNldFJlc291cmNlVVJJKHVyaSkge1xuICAgIGNvbnN0IG9sZFJlc291cmNlVVJJID0gdGhpcy5nZXRSZXNvdXJjZVVSSSgpO1xuICAgIHRoaXMuX2dyYXBoLmZpbmRBbmRSZW1vdmUodGhpcy5fZW50cnlVUkksIHRlcm1zLnJlc291cmNlKTtcbiAgICB0aGlzLl9ncmFwaC5jcmVhdGUodGhpcy5fZW50cnlVUkksIHRlcm1zLnJlc291cmNlLCB7IHR5cGU6ICd1cmknLCB2YWx1ZTogdXJpIH0pO1xuICAgIGlmIChvbGRSZXNvdXJjZVVSSSkge1xuICAgICAgY29uc3Qgc3RtdHMgPSB0aGlzLl9ncmFwaC5maW5kKG9sZFJlc291cmNlVVJJKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RtdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RtdHNbaV0uc2V0U3ViamVjdCh1cmkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBvbmUgb2YgdGhlIGVudHJ5VHlwZXNcbiAgICogQHNlZSBzdG9yZS90ZXJtcyNlbnRyeVR5cGVcbiAgICovXG4gIGdldEVudHJ5VHlwZSgpIHtcbiAgICBjb25zdCBldCA9IHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRoaXMuX2VudHJ5VVJJLCB0ZXJtcy5yZGYudHlwZSk7XG4gICAgcmV0dXJuIHRlcm1zLmVudHJ5VHlwZVtldCB8fCAnZGVmYXVsdCddO1xuICB9XG5cbiAgc3RhdGljIGdldFJlc291cmNlVHlwZUhlbHBlcihlbnRyeSwgdm9jYWIpIHtcbiAgICBjb25zdCBzdG10cyA9IGVudHJ5Ll9ncmFwaC5maW5kKGVudHJ5LmdldFJlc291cmNlVVJJKCksIHRlcm1zLnJkZi50eXBlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0bXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gdm9jYWJbc3RtdHNbaV0uZ2V0VmFsdWUoKV07XG4gICAgICBpZiAodCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2b2NhYi5kZWZhdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIHRoZSByZXNvdXJjZSB0eXBlIG9mIHRoZSBlbnRyeSwgZS5nLiBcIkluZm9ybWF0aW9uXCIsIFwiUmVzb2x2YWJsZVwiIGV0Yy5cbiAgICogVGhlIGFsbG93ZWQgdmFsdWVzIGFyZSBhdmFpbGFibGUgaW4gc3RvcmUvdHlwZXMgYmVnaW5uaW5nIHdpdGggJ1JUXycuXG4gICAqIEUuZy4gdG8gY2hlY2sgaWYgdGhlIGVudHJ5IGlzIGFuIGluZm9ybWF0aW9uIHJlc291cmNlOlxuICAgKiBpZiAoZWkuZ2V0UmVzb3VyY2VUeXBlKCkgPT09IHR5cGVzLlJUX0lORk9STUFUSU9OUkVTT1VSQ0UpIHsuLi59XG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBnZXRSZXNvdXJjZVR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZ2V0UmVzb3VyY2VUeXBlSGVscGVyKHRoaXMsIHRlcm1zLnJlc291cmNlVHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogdGhlIGdyYXBoIHR5cGUgb2YgdGhlIGVudHJ5LCBlLmcuIFwiVXNlclwiLCBcIkxpc3RcIiwgXCJTdHJpbmdcIiwgZXRjLlxuICAgKiBUaGUgYWxsb3dlZCB2YWx1ZXMgYXJlIGF2YWlsYWJsZSBpbiBzdG9yZS90eXBlcyBiZWdpbm5pbmcgd2l0aCAnR1RfJy5cbiAgICogRS5nLiB0byBjaGVjayBpZiB0aGUgZW50cnkgaXMgYSBsaXN0OlxuICAgKiBpZiAoZWkuZ2V0R3JhcGhUeXBlKCkgPT09IHR5cGVzLkdUX0xJU1QpIHsuLi59XG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBnZXRHcmFwaFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZ2V0UmVzb3VyY2VUeXBlSGVscGVyKHRoaXMsIHRlcm1zLmdyYXBoVHlwZSk7XG4gIH1cblxuICAvLyBUT0RPOiBjaGFuZ2UgdG8gZW50cnlVUkkgaW5zdGVhZCBvZiByZXNvdXJjZVVSSSBmb3IgcHJpbmNpcGFsVVJJcy5cbiAgLyoqXG4gICAqIFRoZSBhY2wgb2JqZWN0IHJldHVybmVkIGxvb2tzIGxpa2U6XG4gICAqIHtcbiAgICogICBhZG1pbjogIFtwcmluY2lwYWxVUkkxLCBwcmluY2lwYWxVUkkyLCAuLi5dLFxuICAgKiAgIHJyZWFkOiAgW3ByaW5jaXBhbFVSSTMsIC4uLl0sXG4gICAqICAgcndyaXRlOiBbcHJpbmNpcGFsVVJJNCwgLi4uXSxcbiAgICogICBtcmVhZDogIFtwcmluY2lwYWxVUkk1LCAuLi5dLFxuICAgKiAgIG13cml0ZTogW3ByaW5jaXBhbFVSSTYsIC4uLl1cbiAgICogfVxuICAgKlxuICAgKiBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhbiBhcnJheSBmb3IgZWFjaCBrZXksIGl0IG1pZ2h0IGJlIGVtcHR5IHRob3VnaC5cbiAgICogVGhlIHByaW5jaXBhbFVSSSogd2lsbCBhbHdheXMgYmUgYW4gVVJJIHRvIHRoZSByZXNvdXJjZSBvZiBhIHVzZXIgb3IgZ3JvdXAgZW50cnkuXG4gICAqXG4gICAqIFBsZWFzZSBub3RlIHRoYXQgYSBub24gZW1wdHkgYWNsIG92ZXJyaWRlcyBhbnkgZGVmYXVsdHMgZnJvbSB0aGUgc3Vycm91bmRpbmcgY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBhc0lkcyAtIGlmIHRydWUgdGhlIHByaW5jaXBhbFVSSXMgYXJlIHNob3J0ZW5lZCB0byBlbnRyeSBpZGVudGlmaWVycy5cbiAgICogQHJldHVybiB7T2JqZWN0fSBhbiBhY2wgb2JqZWN0LlxuICAgKi9cbiAgZ2V0QUNMKGFzSWRzID0gZmFsc2UpIHtcbiAgICBjb25zdCBmID0gKHN0bXQpID0+IHtcbiAgICAgIGlmIChhc0lkcykge1xuICAgICAgICByZXR1cm4gZmFjdG9yeS5nZXRFbnRyeUlkKHN0bXQuZ2V0VmFsdWUoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RtdC5nZXRWYWx1ZSgpO1xuICAgIH07ICAvLyBTdGF0ZW1lbnQgPiBvYmplY3QgdmFsdWUuXG4gICAgY29uc3QgcnUgPSB0aGlzLmdldFJlc291cmNlVVJJKCk7XG4gICAgY29uc3QgbXUgPSB0aGlzLmdldE1ldGFkYXRhVVJJKCk7XG4gICAgY29uc3QgYWNsID0ge1xuICAgICAgYWRtaW46IHRoaXMuX2dyYXBoLmZpbmQodGhpcy5fZW50cnlVUkksIHRlcm1zLmFjbC53cml0ZSkubWFwKGYpLFxuICAgICAgcnJlYWQ6IHRoaXMuX2dyYXBoLmZpbmQocnUsIHRlcm1zLmFjbC5yZWFkKS5tYXAoZiksXG4gICAgICByd3JpdGU6IHRoaXMuX2dyYXBoLmZpbmQocnUsIHRlcm1zLmFjbC53cml0ZSkubWFwKGYpLFxuICAgICAgbXJlYWQ6IHRoaXMuX2dyYXBoLmZpbmQobXUsIHRlcm1zLmFjbC5yZWFkKS5tYXAoZiksXG4gICAgICBtd3JpdGU6IHRoaXMuX2dyYXBoLmZpbmQobXUsIHRlcm1zLmFjbC53cml0ZSkubWFwKGYpLFxuICAgIH07XG4gICAgYWNsLmNvbnRleHRPdmVycmlkZSA9IGFjbC5hZG1pbi5sZW5ndGggIT09IDAgfHwgYWNsLnJyZWFkLmxlbmd0aCAhPT0gMFxuICAgICAgfHwgYWNsLnJ3cml0ZS5sZW5ndGggIT09IDAgfHwgYWNsLm1yZWFkLmxlbmd0aCAhPT0gMCB8fCBhY2wubXdyaXRlLmxlbmd0aCAhPT0gMDtcbiAgICByZXR1cm4gYWNsO1xuICB9XG5cbiAgLyoqXG4gICAqIGlmIHRoZSBlbnRyeSBoYXMgYW4gZXhwbGljaXQgQUNMIG9yIGlmIHRoZSBjb250YWluaW5nIGNvbnRleHRzIEFDTCBpcyB1c2VkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc0FDTCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBQ0woKS5jb250ZXh0T3ZlcnJpZGU7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgYWNsIHdpdGggdGhlIHByb3ZpZGVkIGFjbC5cbiAgICogVGhlIGFjbCBvYmplY3QgaXMgdGhlIHNhbWUgYXMgeW91IGdldCBmcm9tIHRoZSBnZXRBQ0wgY2FsbC5cbiAgICogVGhlIGZpcnN0IGRpZmZlcmVuY2UgaXMgdGhhdCB0aGUgYWNsIG9iamVjdCBmcm9tIHRoaXMgbWV0aG9kIGlzIGFsbG93ZWQgdG8gYmUgZW1wdHlcbiAgICogb3IgbGVhdmUgb3V0IHNvbWUga2V5cyB0aGF0IGFyZSBub3QgdG8gYmUgc2V0LlxuICAgKiBUaGUgc2Vjb25kIGRpZmZlcmVuY2UgaXMgdGhhdCBpdCBhbGxvd3MgZW50cnlJZHMgYXMgdmFsdWVzIGluIHRoZSBhcnJheXMsXG4gICAqIG5vdCBvbmx5IGZ1bGwgcmVzb3VyY2UgVVJJcywgYm90aCBoYXZlIHRvIHJlZmVyIHRvIHByaW5jaXBhbHMgdGhvdWdoLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNsIHNhbWUga2luZCBvZiBvYmplY3QgeW91IGdldCBmcm9tIGdldEFDTC5cbiAgICovXG4gIHNldEFDTChhY2wpIHtcbiAgICBjb25zdCBnID0gdGhpcy5fZ3JhcGg7XG4gICAgY29uc3QgZiA9IChzdWJqLCBwcmVkLCBwcmluY2lwYWxzLCBiYXNlKSA9PiB7XG4gICAgICBnLmZpbmRBbmRSZW1vdmUoc3ViaiwgcHJlZCk7XG4gICAgICAocHJpbmNpcGFscyB8fCBbXSkuZm9yRWFjaCgocHJpbmNpcGFsKSA9PiB7XG4gICAgICAgIGlmIChwcmluY2lwYWwubGVuZ3RoIDwgYmFzZS5sZW5ndGggfHwgcHJpbmNpcGFsLmluZGV4T2YoYmFzZSkgIT09IDApIHtcbiAgICAgICAgICAvLyBwcmluY2lwYWwgaXMgZW50cnkgaWQuXG4gICAgICAgICAgZy5hZGQoc3ViaiwgcHJlZCwgeyB0eXBlOiAndXJpJywgdmFsdWU6IGJhc2UgKyBwcmluY2lwYWwgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJpbmNpcGFsIGlzIGEgZnVsbCBlbnRyeSByZXNvdXJjZSB1cmkuXG4gICAgICAgICAgZy5hZGQoc3ViaiwgcHJlZCwgeyB0eXBlOiAndXJpJywgdmFsdWU6IHByaW5jaXBhbCB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBfYWNsID0gYWNsIHx8IHt9O1xuICAgIGNvbnN0IHJ1ID0gdGhpcy5nZXRSZXNvdXJjZVVSSSgpO1xuICAgIGNvbnN0IG11ID0gdGhpcy5nZXRNZXRhZGF0YVVSSSgpO1xuICAgIGNvbnN0IGJhc2UgPSBmYWN0b3J5LmdldFJlc291cmNlQmFzZSh0aGlzLl9lbnRyeS5nZXRFbnRyeVN0b3JlKCksICdfcHJpbmNpcGFscycpO1xuICAgIGYodGhpcy5fZW50cnlVUkksIHRlcm1zLmFjbC53cml0ZSwgX2FjbC5hZG1pbiwgYmFzZSk7XG4gICAgZihydSwgdGVybXMuYWNsLnJlYWQsIF9hY2wucnJlYWQsIGJhc2UpO1xuICAgIGYocnUsIHRlcm1zLmFjbC53cml0ZSwgX2FjbC5yd3JpdGUsIGJhc2UpO1xuICAgIGYobXUsIHRlcm1zLmFjbC5yZWFkLCBfYWNsLm1yZWFkLCBiYXNlKTtcbiAgICBmKG11LCB0ZXJtcy5hY2wud3JpdGUsIF9hY2wubXdyaXRlLCBiYXNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlcmUgYXJlIGFueSBtZXRhZGF0YSByZXZpc2lvbnMgZm9yIHRoaXMgZW50cnksXG4gICAqIGluIHByYWN0aXNlIHRoaXMgaXMgYWx3YXlzIHRydWUgaWYgcHJvdmVuYW5jZSBpcyBlbmFibGVkIGZvciB0aGlzIGVudHJ5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBtZXRhZGF0YSByZXZpc2lvbi5cbiAgICovXG4gIGhhc01ldGFkYXRhUmV2aXNpb25zKCkge1xuICAgIC8vIGNvbnN0IG1kVVJJID0gdGhpcy5nZXRNZXRhZGF0YVVSSSgpO1xuICAgIHJldHVybiB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZShudWxsLCAnb3dsOnNhbWVBcycpICE9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgYW4gYXJyYXkgb2YgbWV0YWRhdGEgcmV2aXNpb25zIGZyb20gdGhlIGdyYXBoLlxuICAgKiBFYWNoIHJldmlzaW9uIGlzIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zOlxuICAgKiAgICogdGltZSAtIHdoZW4gdGhlIGNoYW5nZSB3YXMgbWFkZSAoRGF0ZSlcbiAgICogICAqIGJ5ICAgLSB0aGUgdXNlciB3aG8gcGVyZm9ybWVkIHRoZSBjaGFuZ2UgKGVudHJ5VVJJKVxuICAgKiAgICogcmV2ICAtIHRoZSByZXZpc2lvbiBudW1iZXIgKHN0cmluZylcbiAgICogICAqIHVyaSAgLSBhbiBVUkkgdG8gdGhpcyByZXZpc2lvbiAoc3RyaW5nKVxuICAgKlxuICAgKiBUaGUgdXJpIG9mIHRoZSByZXZpc2lvbiBjYW4gYmUgdXNlZCBieSB0aGUgbWV0aG9kIGdldE1ldGFkYXRhUmV2aXNpb25HcmFwaFxuICAgKiB0byBnZXQgYSBob2xkIG9mIHRoZSBhY3R1YWwgbmV3IGdyYXBoIHRoYXQgY2F1c2VkIHRoZSByZXZpc2lvbi5cbiAgICpcbiAgICogQHJldHVybiB7e3RpbWU6IERhdGUsIGJ5OiBzdHJpbmcsIHJldjogc3RyaW5nLCB1cmk6IHN0cmluZ31bXX0gYSBzb3J0ZWQgYXJyYXkgb2YgcmV2aXNpb25zLCBsYXRlc3QgcmV2aXNpb24gZmlyc3QuXG4gICAqL1xuICBnZXRNZXRhZGF0YVJldmlzaW9ucygpIHtcbiAgICBjb25zdCByZXZzID0gW107XG4gICAgY29uc3QgbWRVUkkgPSB0aGlzLmdldE1ldGFkYXRhVVJJKCk7XG4gICAgY29uc3Qgc3RtdHMgPSB0aGlzLl9ncmFwaC5maW5kKG51bGwsICdvd2w6c2FtZUFzJywgbWRVUkkpO1xuXG4gICAgaWYgKHN0bXRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgcmV0dXJuIHJldnM7XG4gICAgfVxuICAgIGxldCB1cmkgPSBzdG10c1swXS5nZXRTdWJqZWN0KCk7XG4gICAgY29uc3QgZXMgPSB0aGlzLl9lbnRyeVN0b3JlO1xuICAgIHdoaWxlICh1cmkpIHtcbiAgICAgIHJldnMucHVzaCh7XG4gICAgICAgIHVyaSxcbiAgICAgICAgcmV2OiB1cmkuc3Vic3RyKG1kVVJJLmxlbmd0aCArIDUpLFxuICAgICAgICB0aW1lOiBtb21lbnQodGhpcy5fZ3JhcGguZmluZEZpcnN0VmFsdWUodXJpLCAncHJvdjpnZW5lcmF0ZWRBdFRpbWUnKSkudG9EYXRlKCksXG4gICAgICAgIGJ5OiBlcy5nZXRFbnRyeVVSSUZyb21VUkkodGhpcy5fZ3JhcGguZmluZEZpcnN0VmFsdWUodXJpLCAncHJvdjp3YXNBdHRyaWJ1dGVkVG8nKSksXG4gICAgICB9KTtcbiAgICAgIHVyaSA9IHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHVyaSwgJ3Byb3Y6d2FzUmV2aXNpb25PZicpO1xuICAgIH1cbiAgICByZXZzLnNvcnQoKHIxLCByMikgPT4ge1xuICAgICAgaWYgKHIxLnRpbWUgPiByMi50aW1lKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAocjEudGltZSA8IHIyLnRpbWUpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV2cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIG1ldGFkYXRhIGdyYXBoIG9mIGEgY2VydGFpbiByZXZpc2lvbiBmcm9tIGl0cyBncmFwaC5cbiAgICogQHBhcmFtIHJldmlzaW9uVVJJXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPHJkZmpzb24vR3JhcGg+fVxuICAgKi9cbiAgYXN5bmMgZ2V0TWV0YWRhdGFSZXZpc2lvbkdyYXBoKHJldmlzaW9uVVJJKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2VudHJ5U3RvcmUuZ2V0UkVTVCgpLmdldChyZXZpc2lvblVSSSk7XG4gICAgcmV0dXJuIG5ldyBHcmFwaChkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgbGFiZWwgb2YgdGhlIHJlc291cmNlIG9mIHRoaXMgZW50cnksXG4gICAqIHR5cGljYWxseSBzZXQgd2hlbiB1cGxvYWRpbmcgYSBmaWxlLlxuICAgKi9cbiAgZ2V0TGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRoaXMuZ2V0UmVzb3VyY2VVUkkoKSwgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSNsYWJlbCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSBuZXcgbGFiZWwgb2YgdGhlIHJlc291cmNlIGluIHRoZSBncmFwaCwgY2FsbFxuICAgKiB7QGxpbmsgc3RvcmUvRW50cnlJbmZvI2NvbW1pdCBjb21taXR9IHRvIHB1c2hcbiAgICogdGhlIHVwZGF0ZWQgZ3JhcGggdG8gdGhlIHJlcG9zaXRvcnkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCAtIGEgbmV3IGxhYmVsIGZvciB0aGUgcmVzb3VyY2UuXG4gICAqL1xuICBzZXRMYWJlbChsYWJlbCkge1xuICAgIHRoaXMuX2dyYXBoLmZpbmRBbmRSZW1vdmUodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI2xhYmVsJyk7XG4gICAgaWYgKGxhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnKSB7XG4gICAgICB0aGlzLl9ncmFwaC5hZGQodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI2xhYmVsJywge1xuICAgICAgICB0eXBlOiAnbGl0ZXJhbCcsXG4gICAgICAgIHZhbHVlOiBsYWJlbCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZm9ybWF0IG9mIHRoZSByZXNvdXJjZSBvZiB0aGlzIGVudHJ5LlxuICAgKi9cbiAgZ2V0Rm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZSh0aGlzLmdldFJlc291cmNlVVJJKCksICdodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvZm9ybWF0Jyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIG5ldyBmb3JtYXQgb2YgdGhlIHJlc291cmNlIGluIHRoZSBncmFwaCwgY2FsbCB7QGxpbmsgc3RvcmUvRW50cnlJbmZvI2NvbW1pdCBjb21taXR9XG4gICAqIHRvIHB1c2ggdGhlIHVwZGF0ZWQgZ3JhcGggdG8gdGhlIHJlcG9zaXRvcnkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSBhIGZvcm1hdCBpbiB0aGUgZm9ybSBhcHBsaWNhdGlvbi9qc29uIG9yIHRleHQvcGxhaW4uXG4gICAqL1xuICBzZXRGb3JtYXQoZm9ybWF0KSB7XG4gICAgdGhpcy5fZ3JhcGguZmluZEFuZFJlbW92ZSh0aGlzLmdldFJlc291cmNlVVJJKCksICdodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvZm9ybWF0Jyk7XG4gICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIGZvcm1hdCAhPT0gJycpIHtcbiAgICAgIHRoaXMuX2dyYXBoLmFkZEwodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCAnaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL2Zvcm1hdCcsIGZvcm1hdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBzdGF0dXMgb2YgdGhpcyBlbnRyeSwgYWx3YXlzIGEgVVJJLlxuICAgKi9cbiAgZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZSh0aGlzLmdldEVudHJ5VVJJKCksIHRlcm1zLnN0YXR1cy5wcm9wZXJ0eSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIG5ldyBzdGF0dXMgZm9yIHRoaXMgZW50cnlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1c1xuICAgKi9cbiAgc2V0U3RhdHVzKHN0YXR1cykge1xuICAgIHRoaXMuX2dyYXBoLmZpbmRBbmRSZW1vdmUodGhpcy5nZXRFbnRyeVVSSSgpLCB0ZXJtcy5zdGF0dXMucHJvcGVydHkpO1xuICAgIGlmIChzdGF0dXMgIT0gbnVsbCAmJiBzdGF0dXMgIT09ICcnICYmIHN0YXR1cy5pbmRleE9mKCdodHRwJykgPT09IDApIHtcbiAgICAgIHRoaXMuX2dyYXBoLmFkZCh0aGlzLmdldEVudHJ5VVJJKCksIHRlcm1zLnN0YXR1cy5wcm9wZXJ0eSwgc3RhdHVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0RhdGV9IHRoZSBkYXRlIHdoZW4gdGhlIGVudHJ5IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgZ2V0Q3JlYXRpb25EYXRlKCkge1xuICAgIGNvbnN0IGQgPSB0aGlzLl9ncmFwaC5maW5kRmlyc3RWYWx1ZSh0aGlzLmdldEVudHJ5VVJJKCksICdodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvY3JlYXRlZCcpO1xuICAgIHJldHVybiBtb21lbnQoZCkudG9EYXRlKCk7IC8vIE11c3QgYWx3YXlzIGV4aXN0LlxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZGF0ZSBvZiBsYXN0IG1vZGlmaWNhdGlvbiAoYWNjb3JkaW5nIHRvIHRoZSByZXBvc2l0b3J5LFxuICAgKiBsb2NhbCBjaGFuZ2VzIGFyZSBub3QgcmVmbGVjdGVkKS5cbiAgICovXG4gIGdldE1vZGlmaWNhdGlvbkRhdGUoKSB7XG4gICAgY29uc3QgZCA9IHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRoaXMuZ2V0RW50cnlVUkkoKSwgJ2h0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy9tb2RpZmllZCcpO1xuICAgIGlmIChkICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBtb21lbnQoZCkudG9EYXRlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldENyZWF0aW9uRGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IGEgVVJJIHRvIGNyZWF0b3IsIHRoZSB1c2VyIEVudHJ5IHJlc291cmNlIFVSSSBpcyB1c2VkLCBlLmcuIFwiaHR0cDovL3NvbWVyZXBvL3N0b3JlL19wcmluY2lwYWxzL3Jlc291cmNlLzRcIiwgbmV2ZXIgbnVsbC5cbiAgICovXG4gIGdldENyZWF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRoaXMuZ2V0RW50cnlVUkkoKSwgJ2h0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy9jcmVhdG9yJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcnx1bmRlZmluZWR9XG4gICAqL1xuICBnZXRTaXplKCkge1xuICAgIGNvbnN0IGV4dGVudCA9IHRoaXMuX2dyYXBoLmZpbmRGaXJzdFZhbHVlKHRoaXMuZ2V0UmVzb3VyY2VVUkkoKSwgJ2h0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy9leHRlbnQnKTtcbiAgICBpZiAocGFyc2VJbnQoZXh0ZW50LCAxMCkgPT09IHBhcnNlSW50KGV4dGVudCwgMTApKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoZXh0ZW50LCAxMCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBVUklzIHRvIHRoZSBjb250cmlidXRvcnMgdXNpbmcgdGhlaXIgRW50cnkgcmVzb3VyY2UgVVJJcyxcbiAgICogZS5nLiBbXCJodHRwOi8vc29tZXJlcG8vc3RvcmUvX3ByaW5jaXBhbHMvcmVzb3VyY2UvNFwiXSwgbmV2ZXIgbnVsbCBhbHRob3VnaCB0aGUgYXJyYXkgbWlnaHQgYmUgZW1wdHkuXG4gICAqL1xuICBnZXRDb250cmlidXRvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoLmZpbmQodGhpcy5nZXRFbnRyeVVSSSgpLCAnaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL2NvbnRyaWJ1dG9yJykubWFwKHN0bXQgPT4gc3RtdC5nZXRWYWx1ZSgpKTtcbiAgfVxufTtcbiIsImltcG9ydCBSZXNvdXJjZSBmcm9tICcuL1Jlc291cmNlJztcblxuLyoqXG4gKiBTdHJpbmcgaXMgYSByZXNvdXJjZSBmb3IgaGFuZGxpbmcgc2ltcGxlIHN0cmluZ3Mgb2YgZGF0YS5cbiAqXG4gKiBAZXhwb3J0cyBzdG9yZS9TdHJpbmdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyaW5nUmVzb3VyY2UgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50cnlVUkkgLSBVUkkgdG8gYW4gZW50cnkgd2hlcmUgdGhpcyByZXNvdXJjZSBpcyBjb250YWluZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVVSSSAtIFVSSSB0byB0aGUgcmVzb3VyY2UuXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnlTdG9yZX0gZW50cnlTdG9yZSAtIHRoZSBBUEkncyByZXBvc2l0b3J5IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAtIHRoZSBhY3R1YWwgc3RyaW5nLCBtYXkgdGhlIGVtcHR5IHN0cmluZywgYnV0IG5vdCBudWxsIG9yIHVuZGVmaW5lZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJ5VVJJLCByZXNvdXJjZVVSSSwgZW50cnlTdG9yZSwgZGF0YSkge1xuICAgIHN1cGVyKGVudHJ5VVJJLCByZXNvdXJjZVVSSSwgZW50cnlTdG9yZSk7IC8vIENhbGwgdGhlIHN1cGVyIGNvbnN0cnVjdG9yLlxuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IG1heSBiZSBhbiBlbXB0eSBzdHJpbmcsIG5ldmVyIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgKi9cbiAgZ2V0U3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIG5ldyBzdHJpbmcsIGRvZXMgbm90IHNhdmUgaXQgdG8gdGhlIHJlcG9zaXRvcnksIHVzZSBjb21taXQgZm9yIHRoYXQuIEUuZy5cbiAgICpcbiAgICogICAgIHN0cmluZ3Jlc291cmNlLnNldFN0cmluZyhcIk5ldyB2YWx1ZVwiKS5jb21taXQoKS50aGVuKGZ1bmN0aW9uKCkgey4uLn0pO1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gdGhlIG5ldyBzdHJpbmdcbiAgICogQHJldHVybnMge3N0b3JlL1N0cmluZ1Jlc291cmNlfSBhbGxvd3MgY2hhaW5pbmcgd2l0aCBjb21taXQuXG4gICAqIEBzZWUgc3RvcmUvU3RyaW5nI2NvbW1pdFxuICAgKi9cbiAgc2V0U3RyaW5nKHN0cmluZykge1xuICAgIHRoaXMuX2RhdGEgPSBzdHJpbmcgfHwgJyc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUHVzaGVzIHRoZSBzdHJpbmcgYmFjayB0byB0aGUgcmVwb3NpdG9yeS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqIEBzZWUgc3RvcmUvU3RyaW5nI3NldFN0cmluZ1xuICAgKi9cbiAgY29tbWl0KCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRyeVN0b3JlLmhhbmRsZUFzeW5jKGVzLmdldFJFU1QoKS5wdXQodGhpcy5fcmVzb3VyY2VVUkksIHRoaXMuX2RhdGEpLCAnY29tbWl0U3RyaW5nJyk7XG4gIH1cblxuICBnZXRTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH1cbn1cbiIsIihmdW5jdGlvbigpe1xyXG4gIHZhciBjcnlwdCA9IHJlcXVpcmUoJ2NyeXB0JyksXHJcbiAgICAgIHV0ZjggPSByZXF1aXJlKCdjaGFyZW5jJykudXRmOCxcclxuICAgICAgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKSxcclxuICAgICAgYmluID0gcmVxdWlyZSgnY2hhcmVuYycpLmJpbixcclxuXHJcbiAgLy8gVGhlIGNvcmVcclxuICBtZDUgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3B0aW9ucykge1xyXG4gICAgLy8gQ29udmVydCB0byBieXRlIGFycmF5XHJcbiAgICBpZiAobWVzc2FnZS5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpXHJcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RpbmcgPT09ICdiaW5hcnknKVxyXG4gICAgICAgIG1lc3NhZ2UgPSBiaW4uc3RyaW5nVG9CeXRlcyhtZXNzYWdlKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIG1lc3NhZ2UgPSB1dGY4LnN0cmluZ1RvQnl0ZXMobWVzc2FnZSk7XHJcbiAgICBlbHNlIGlmIChpc0J1ZmZlcihtZXNzYWdlKSlcclxuICAgICAgbWVzc2FnZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG1lc3NhZ2UsIDApO1xyXG4gICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZSkpXHJcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnRvU3RyaW5nKCk7XHJcbiAgICAvLyBlbHNlLCBhc3N1bWUgYnl0ZSBhcnJheSBhbHJlYWR5XHJcblxyXG4gICAgdmFyIG0gPSBjcnlwdC5ieXRlc1RvV29yZHMobWVzc2FnZSksXHJcbiAgICAgICAgbCA9IG1lc3NhZ2UubGVuZ3RoICogOCxcclxuICAgICAgICBhID0gIDE3MzI1ODQxOTMsXHJcbiAgICAgICAgYiA9IC0yNzE3MzM4NzksXHJcbiAgICAgICAgYyA9IC0xNzMyNTg0MTk0LFxyXG4gICAgICAgIGQgPSAgMjcxNzMzODc4O1xyXG5cclxuICAgIC8vIFN3YXAgZW5kaWFuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbVtpXSA9ICgobVtpXSA8PCAgOCkgfCAobVtpXSA+Pj4gMjQpKSAmIDB4MDBGRjAwRkYgfFxyXG4gICAgICAgICAgICAgKChtW2ldIDw8IDI0KSB8IChtW2ldID4+PiAgOCkpICYgMHhGRjAwRkYwMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQYWRkaW5nXHJcbiAgICBtW2wgPj4+IDVdIHw9IDB4ODAgPDwgKGwgJSAzMik7XHJcbiAgICBtWygoKGwgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gbDtcclxuXHJcbiAgICAvLyBNZXRob2Qgc2hvcnRjdXRzXHJcbiAgICB2YXIgRkYgPSBtZDUuX2ZmLFxyXG4gICAgICAgIEdHID0gbWQ1Ll9nZyxcclxuICAgICAgICBISCA9IG1kNS5faGgsXHJcbiAgICAgICAgSUkgPSBtZDUuX2lpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkgKz0gMTYpIHtcclxuXHJcbiAgICAgIHZhciBhYSA9IGEsXHJcbiAgICAgICAgICBiYiA9IGIsXHJcbiAgICAgICAgICBjYyA9IGMsXHJcbiAgICAgICAgICBkZCA9IGQ7XHJcblxyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKyAwXSwgIDcsIC02ODA4NzY5MzYpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKyAyXSwgMTcsICA2MDYxMDU4MTkpO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsgNF0sICA3LCAtMTc2NDE4ODk3KTtcclxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7XHJcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKyA3XSwgMjIsIC00NTcwNTk4Myk7XHJcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDhdLCAgNywgIDE3NzAwMzU0MTYpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsxMF0sIDE3LCAtNDIwNjMpO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTtcclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsxMl0sICA3LCAgMTgwNDYwMzY4Mik7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krMTNdLCAxMiwgLTQwMzQxMTAxKTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krMTVdLCAyMiwgIDEyMzY1MzUzMjkpO1xyXG5cclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgMV0sICA1LCAtMTY1Nzk2NTEwKTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsgNl0sICA5LCAtMTA2OTUwMTYzMik7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krMTFdLCAxNCwgIDY0MzcxNzcxMyk7XHJcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krIDBdLCAyMCwgLTM3Mzg5NzMwMik7XHJcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krIDVdLCAgNSwgLTcwMTU1ODY5MSk7XHJcbiAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBtW2krMTBdLCAgOSwgIDM4MDE2MDgzKTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsxNV0sIDE0LCAtNjYwNDc4MzM1KTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgOV0sICA1LCAgNTY4NDQ2NDM4KTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsxNF0sICA5LCAtMTAxOTgwMzY5MCk7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XHJcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krIDhdLCAyMCwgIDExNjM1MzE1MDEpO1xyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKzEzXSwgIDUsIC0xNDQ0NjgxNDY3KTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsgMl0sICA5LCAtNTE0MDM3ODQpO1xyXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKyA3XSwgMTQsICAxNzM1MzI4NDczKTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsxMl0sIDIwLCAtMTkyNjYwNzczNCk7XHJcblxyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKyA1XSwgIDQsIC0zNzg1NTgpO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKyA4XSwgMTEsIC0yMDIyNTc0NDYzKTtcclxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsxMV0sIDE2LCAgMTgzOTAzMDU2Mik7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krMTRdLCAyMywgLTM1MzA5NTU2KTtcclxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgMV0sICA0LCAtMTUzMDk5MjA2MCk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krIDRdLCAxMSwgIDEyNzI4OTMzNTMpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKyA3XSwgMTYsIC0xNTU0OTc2MzIpO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKzEwXSwgMjMsIC0xMDk0NzMwNjQwKTtcclxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsxM10sICA0LCAgNjgxMjc5MTc0KTtcclxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsgMF0sIDExLCAtMzU4NTM3MjIyKTtcclxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsgM10sIDE2LCAtNzIyNTIxOTc5KTtcclxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsgNl0sIDIzLCAgNzYwMjkxODkpO1xyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKyA5XSwgIDQsIC02NDAzNjQ0ODcpO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKzEyXSwgMTEsIC00MjE4MTU4MzUpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKzE1XSwgMTYsICA1MzA3NDI1MjApO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xyXG5cclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsgMF0sICA2LCAtMTk4NjMwODQ0KTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsgN10sIDEwLCAgMTEyNjg5MTQxNSk7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKyA1XSwgMjEsIC01NzQzNDA1NSk7XHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krMTJdLCAgNiwgIDE3MDA0ODU1NzEpO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcclxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsxMF0sIDE1LCAtMTA1MTUyMyk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xyXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyA4XSwgIDYsICAxODczMzEzMzU5KTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsxNV0sIDEwLCAtMzA2MTE3NDQpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKyA2XSwgMTUsIC0xNTYwMTk4MzgwKTtcclxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7XHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krIDRdLCAgNiwgLTE0NTUyMzA3MCk7XHJcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krMTFdLCAxMCwgLTExMjAyMTAzNzkpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKyAyXSwgMTUsICA3MTg3ODcyNTkpO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xyXG5cclxuICAgICAgYSA9IChhICsgYWEpID4+PiAwO1xyXG4gICAgICBiID0gKGIgKyBiYikgPj4+IDA7XHJcbiAgICAgIGMgPSAoYyArIGNjKSA+Pj4gMDtcclxuICAgICAgZCA9IChkICsgZGQpID4+PiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcnlwdC5lbmRpYW4oW2EsIGIsIGMsIGRdKTtcclxuICB9O1xyXG5cclxuICAvLyBBdXhpbGlhcnkgZnVuY3Rpb25zXHJcbiAgbWQ1Ll9mZiAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGIgJiBjIHwgfmIgJiBkKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcbiAgbWQ1Ll9nZyAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGIgJiBkIHwgYyAmIH5kKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcbiAgbWQ1Ll9oaCAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGIgXiBjIF4gZCkgKyAoeCA+Pj4gMCkgKyB0O1xyXG4gICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcclxuICB9O1xyXG4gIG1kNS5faWkgID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgIHZhciBuID0gYSArIChjIF4gKGIgfCB+ZCkpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuXHJcbiAgLy8gUGFja2FnZSBwcml2YXRlIGJsb2Nrc2l6ZVxyXG4gIG1kNS5fYmxvY2tzaXplID0gMTY7XHJcbiAgbWQ1Ll9kaWdlc3RzaXplID0gMTY7XHJcblxyXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcclxuICAgIGlmIChtZXNzYWdlID09PSB1bmRlZmluZWQgfHwgbWVzc2FnZSA9PT0gbnVsbClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGFyZ3VtZW50ICcgKyBtZXNzYWdlKTtcclxuXHJcbiAgICB2YXIgZGlnZXN0Ynl0ZXMgPSBjcnlwdC53b3Jkc1RvQnl0ZXMobWQ1KG1lc3NhZ2UsIG9wdGlvbnMpKTtcclxuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuYXNCeXRlcyA/IGRpZ2VzdGJ5dGVzIDpcclxuICAgICAgICBvcHRpb25zICYmIG9wdGlvbnMuYXNTdHJpbmcgPyBiaW4uYnl0ZXNUb1N0cmluZyhkaWdlc3RieXRlcykgOlxyXG4gICAgICAgIGNyeXB0LmJ5dGVzVG9IZXgoZGlnZXN0Ynl0ZXMpO1xyXG4gIH07XHJcblxyXG59KSgpO1xyXG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaGFyZWQoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChXZWFrTWFwKSk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhbmF0aXZlQXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gbmF0aXZlQXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cyhuYXRpdmVBc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogbmF0aXZlQXNzaWduO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4gIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCIvLyBgU2FtZVZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykge1xuICBpZiAoIShhcmdzTGVuZ3RoIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGxpc3Quam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2FyZ3NMZW5ndGhdKEMsIGFyZ3MpO1xufTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBmdW5jdGlvbiBib3VuZCgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmdcbiAgICAgICAgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSlcbiAgICAgICAgOiBzdGVwLnZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQ7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxRkZGRkZGRkZGRkZGRikgdGhyb3cgVHlwZUVycm9yKCdFeGNlZWQgdGhlIGFjY2VwdGFibGUgYXJyYXkgbGVuZ3RoJyk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9IHNsb3BweUFycmF5TWV0aG9kKCdmb3JFYWNoJykgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIG5hdGl2ZUxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlTGFzdEluZGV4T2YgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNMT1BQWV9NRVRIT0QgPSBzbG9wcHlBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbm1vZHVsZS5leHBvcnRzID0gKE5FR0FUSVZFX1pFUk8gfHwgU0xPUFBZX01FVEhPRCkgPyBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiBuYXRpdmVMYXN0SW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gbWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPICYmIE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgcmV0dXJuIC0xO1xufSA6IG5hdGl2ZUxhc3RJbmRleE9mO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleFxubW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IFN0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBuYXRpdmVQYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBoZXggPSAvXlsrLV0/MFtYeF0vO1xudmFyIEZPUkNFRCA9IG5hdGl2ZVBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMHgxNicpICE9PSAyMjtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4KSB7XG4gIHZhciBTID0gdHJpbShTdHJpbmcoc3RyaW5nKSk7XG4gIHJldHVybiBuYXRpdmVQYXJzZUludChTLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChTKSA/IDE2IDogMTApKTtcbn0gOiBuYXRpdmVQYXJzZUludDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5hdGl2ZVBhcnNlRmxvYXQgPSBnbG9iYWwucGFyc2VGbG9hdDtcbnZhciBGT1JDRUQgPSAxIC8gbmF0aXZlUGFyc2VGbG9hdCh3aGl0ZXNwYWNlcyArICctMCcpICE9PSAtSW5maW5pdHk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXBhcnNlZmxvYXQtc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyaW5nKSB7XG4gIHZhciB0cmltbWVkU3RyaW5nID0gdHJpbShTdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSBuYXRpdmVQYXJzZUZsb2F0KHRyaW1tZWRTdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHRyaW1tZWRTdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6IG5hdGl2ZVBhcnNlRmxvYXQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGB0aGlzTnVtYmVyVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInICYmIGNsYXNzb2YodmFsdWUpICE9ICdOdW1iZXInKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9XG4gIHJldHVybiArdmFsdWU7XG59O1xuIiwidmFyIGxvZyA9IE1hdGgubG9nO1xuXG4vLyBgTWF0aC5sb2cxcGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBsb2coMSArIHgpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZTtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoTXV0YXRpb25PYnNlcnZlciAmJiAhLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmZhc3RLZXk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaW5kZXg6IGNyZWF0ZShudWxsKSxcbiAgICAgICAgZmlyc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9KTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgdGhhdCwgSVNfTUFQKTtcbiAgICB9KTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICB2YXIgcHJldmlvdXMsIGluZGV4O1xuICAgICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmxhc3QgPSBlbnRyeSA9IHtcbiAgICAgICAgICBpbmRleDogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksXG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZXZpb3VzOiBwcmV2aW91cyA9IHN0YXRlLmxhc3QsXG4gICAgICAgICAgbmV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlbW92ZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlmICghc3RhdGUuZmlyc3QpIHN0YXRlLmZpcnN0ID0gZW50cnk7XG4gICAgICAgIGlmIChwcmV2aW91cykgcHJldmlvdXMubmV4dCA9IGVudHJ5O1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUrKztcbiAgICAgICAgZWxzZSB0aGF0LnNpemUrKztcbiAgICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSBzdGF0ZS5pbmRleFtpbmRleF0gPSBlbnRyeTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAvLyBmYXN0IGNhc2VcbiAgICAgIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgICAgIHZhciBlbnRyeTtcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdO1xuICAgICAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gICAgICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtleSA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubmV4dDtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5pbmRleFtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucHJldmlvdXMgPSBwcmV2O1xuICAgICAgICAgIGlmIChzdGF0ZS5maXJzdCA9PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09IGVudHJ5KSBzdGF0ZS5sYXN0ID0gcHJldjtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtcbiAgICAgICAgICBlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuZmlyc3QpIHtcbiAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCkge1xuICAgIHZhciBJVEVSQVRPUl9OQU1FID0gQ09OU1RSVUNUT1JfTkFNRSArICcgSXRlcmF0b3InO1xuICAgIHZhciBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgdmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoSVRFUkFUT1JfTkFNRSk7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgIGRlZmluZUl0ZXJhdG9yKEMsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2Vha0RhdGEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5nZXRXZWFrRGF0YTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgQXJyYXlJdGVyYXRpb25Nb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xudmFyIGZpbmQgPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kO1xudmFyIGZpbmRJbmRleCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmRJbmRleDtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIHN0b3JlLmZyb3plbiB8fCAoc3RvcmUuZnJvemVuID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xuXG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG59O1xuXG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGZpbmQoc3RvcmUuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblxuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuZW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGlkOiBpZCsrLFxuICAgICAgICBmcm96ZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgdGhhdCwgSVNfTUFQKTtcbiAgICB9KTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgZWxzZSBkYXRhW3N0YXRlLmlkXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCBzdGF0ZS5pZCkgJiYgZGVsZXRlIGRhdGFbc3RhdGUuaWRdO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCBzdGF0ZS5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLmdldChrZXkpO1xuICAgICAgICAgIHJldHVybiBkYXRhID8gZGF0YVtzdGF0ZS5pZF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQztcbiAgfVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgVG9JbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGggb3IgaW5kZXgnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuIiwidmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGksIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBPID0gW107XG4gICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgTy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgIH1cbiAgfVxuICBpZiAobWFwcGluZyAmJiBhcmd1bWVudHNMZW5ndGggPiAyKSB7XG4gICAgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICB9XG4gIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRoaXMpKShsZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2U9MScsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdXJsLnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgcmV0dXJuIChJU19QVVJFICYmICF1cmwudG9KU09OKVxuICAgIHx8ICFzZWFyY2hQYXJhbXMuc29ydFxuICAgIHx8IHVybC5ocmVmICE9PSAnaHR0cDovL2EvYyUyMGQ/ZT0xJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2UnKSAhPT0gJzEnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSc7XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcblxudmFyIHBsdXMgPSAvXFwrL2c7XG52YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7XG5cbnZhciBwZXJjZW50U2VxdWVuY2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxcXGRhLWZdezJ9KXsnICsgYnl0ZXMgKyAnfSknLCAnZ2knKSk7XG59O1xuXG52YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2VxdWVuY2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgfVxufTtcblxudmFyIGRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBpdC5yZXBsYWNlKHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2UgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlW21hdGNoXTtcbn07XG5cbnZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpdCkucmVwbGFjZShmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgcGFyc2VTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocmVzdWx0LCBxdWVyeSkge1xuICBpZiAocXVlcnkpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgIGVudHJ5ID0gYXR0cmlidXRlLnNwbGl0KCc9Jyk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICBrZXk6IGRlc2VyaWFsaXplKGVudHJ5LnNoaWZ0KCkpLFxuICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShlbnRyeS5qb2luKCc9JykpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHVwZGF0ZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgcGFyc2VTZWFyY2hQYXJhbXModGhpcy5lbnRyaWVzLCBxdWVyeSk7XG59O1xuXG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICBpZiAocGFzc2VkIDwgcmVxdWlyZWQpIHRocm93IFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kLCBpdGVyYXRvciwgc3RlcCwgZW50cnlJdGVyYXRvciwgZmlyc3QsIHNlY29uZCwga2V5O1xuXG4gIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgdXBkYXRlVVJMOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sXG4gICAgdXBkYXRlU2VhcmNoUGFyYW1zOiB1cGRhdGVTZWFyY2hQYXJhbXNcbiAgfSk7XG5cbiAgaWYgKGluaXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChpbml0KTtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKGluaXQpO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgZW50cnlJdGVyYXRvciA9IGdldEl0ZXJhdG9yKGFuT2JqZWN0KHN0ZXAudmFsdWUpKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZmlyc3QgPSBlbnRyeUl0ZXJhdG9yLm5leHQoKSkuZG9uZSB8fFxuICAgICAgICAgICAgKHNlY29uZCA9IGVudHJ5SXRlcmF0b3IubmV4dCgpKS5kb25lIHx8XG4gICAgICAgICAgICAhZW50cnlJdGVyYXRvci5uZXh0KCkuZG9uZVxuICAgICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgICAgZW50cmllcy5wdXNoKHsga2V5OiBmaXJzdC52YWx1ZSArICcnLCB2YWx1ZTogc2Vjb25kLnZhbHVlICsgJycgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKGtleSBpbiBpbml0KSBpZiAoaGFzT3duKGluaXQsIGtleSkpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogaW5pdFtrZXldICsgJycgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlU2VhcmNoUGFyYW1zKGVudHJpZXMsIHR5cGVvZiBpbml0ID09PSAnc3RyaW5nJyA/IGluaXQuY2hhckF0KDApID09PSAnPycgPyBpbml0LnNsaWNlKDEpIDogaW5pdCA6IGluaXQgKyAnJyk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlID0gVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5yZWRlZmluZUFsbChVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIHtcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuYXBwZW50YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWFwcGVuZFxuICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDIpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgc3RhdGUuZW50cmllcy5wdXNoKHsga2V5OiBuYW1lICsgJycsIHZhbHVlOiB2YWx1ZSArICcnIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5kZWxldGVgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZGVsZXRlXG4gICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBlbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXN1bHQucHVzaChlbnRyaWVzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmhhc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1oYXNcbiAgaGFzOiBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXgrK10ua2V5ID09PSBrZXkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zZXRcbiAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciB2YWwgPSB2YWx1ZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgaWYgKGVudHJ5LmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChmb3VuZCkgZW50cmllcy5zcGxpY2UoaW5kZXgtLSwgMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBlbnRyaWVzLnB1c2goeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgLy8gQXJyYXkjc29ydCBpcyBub3Qgc3RhYmxlIGluIHNvbWUgZW5naW5lc1xuICAgIHZhciBzbGljZSA9IGVudHJpZXMuc2xpY2UoKTtcbiAgICB2YXIgZW50cnksIGVudHJpZXNJbmRleCwgc2xpY2VJbmRleDtcbiAgICBlbnRyaWVzLmxlbmd0aCA9IDA7XG4gICAgZm9yIChzbGljZUluZGV4ID0gMDsgc2xpY2VJbmRleCA8IHNsaWNlLmxlbmd0aDsgc2xpY2VJbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IHNsaWNlW3NsaWNlSW5kZXhdO1xuICAgICAgZm9yIChlbnRyaWVzSW5kZXggPSAwOyBlbnRyaWVzSW5kZXggPCBzbGljZUluZGV4OyBlbnRyaWVzSW5kZXgrKykge1xuICAgICAgICBpZiAoZW50cmllc1tlbnRyaWVzSW5kZXhdLmtleSA+IGVudHJ5LmtleSkge1xuICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGVudHJpZXNJbmRleCwgMCwgZW50cnkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZW50cmllc0luZGV4ID09PSBzbGljZUluZGV4KSBlbnRyaWVzLnB1c2goZW50cnkpO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzYCBtZXRob2RcbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ3ZhbHVlcycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7XG4gIH1cbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMpO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHNlYXJjaHBhcmFtcy1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBlbnRyeTtcbiAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107XG4gICAgcmVzdWx0LnB1c2goc2VyaWFsaXplKGVudHJ5LmtleSkgKyAnPScgKyBzZXJpYWxpemUoZW50cnkudmFsdWUpKTtcbiAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuc2V0VG9TdHJpbmdUYWcoVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsIFVSTF9TRUFSQ0hfUEFSQU1TKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwgfSwge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsXG4gIGdldFN0YXRlOiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlXG59O1xuIiwiLypcbiAqIERPTSBMZXZlbCAyXG4gKiBPYmplY3QgRE9NRXhjZXB0aW9uXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9lY21hLXNjcmlwdC1sYW5ndWFnZS1iaW5kaW5nLmh0bWxcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMC9SRUMtRE9NLUxldmVsLTItQ29yZS0yMDAwMTExMy9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbiAqL1xuXG5mdW5jdGlvbiBjb3B5KHNyYyxkZXN0KXtcblx0Zm9yKHZhciBwIGluIHNyYyl7XG5cdFx0ZGVzdFtwXSA9IHNyY1twXTtcblx0fVxufVxuLyoqXG5eXFx3K1xcLnByb3RvdHlwZVxcLihbX1xcd10rKVxccyo9XFxzKigoPzouKlxce1xccyo/W1xcclxcbl1bXFxzXFxTXSo/Xn0pfFxcUy4qPyg/PVs7XFxyXFxuXSkpOz9cbl5cXHcrXFwucHJvdG90eXBlXFwuKFtfXFx3XSspXFxzKj1cXHMqKFxcUy4qPyg/PVs7XFxyXFxuXSkpOz9cbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoQ2xhc3MsU3VwZXIpe1xuXHR2YXIgcHQgPSBDbGFzcy5wcm90b3R5cGU7XG5cdGlmKE9iamVjdC5jcmVhdGUpe1xuXHRcdHZhciBwcHQgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSlcblx0XHRwdC5fX3Byb3RvX18gPSBwcHQ7XG5cdH1cblx0aWYoIShwdCBpbnN0YW5jZW9mIFN1cGVyKSl7XG5cdFx0ZnVuY3Rpb24gdCgpe307XG5cdFx0dC5wcm90b3R5cGUgPSBTdXBlci5wcm90b3R5cGU7XG5cdFx0dCA9IG5ldyB0KCk7XG5cdFx0Y29weShwdCx0KTtcblx0XHRDbGFzcy5wcm90b3R5cGUgPSBwdCA9IHQ7XG5cdH1cblx0aWYocHQuY29uc3RydWN0b3IgIT0gQ2xhc3Mpe1xuXHRcdGlmKHR5cGVvZiBDbGFzcyAhPSAnZnVuY3Rpb24nKXtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJ1bmtub3cgQ2xhc3M6XCIrQ2xhc3MpXG5cdFx0fVxuXHRcdHB0LmNvbnN0cnVjdG9yID0gQ2xhc3Ncblx0fVxufVxudmFyIGh0bWxucyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyA7XG4vLyBOb2RlIFR5cGVzXG52YXIgTm9kZVR5cGUgPSB7fVxudmFyIEVMRU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IE5vZGVUeXBlLkVMRU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IDE7XG52YXIgQVRUUklCVVRFX05PREUgICAgICAgICAgICAgID0gTm9kZVR5cGUuQVRUUklCVVRFX05PREUgICAgICAgICAgICAgID0gMjtcbnZhciBURVhUX05PREUgICAgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5URVhUX05PREUgICAgICAgICAgICAgICAgICAgPSAzO1xudmFyIENEQVRBX1NFQ1RJT05fTk9ERSAgICAgICAgICA9IE5vZGVUeXBlLkNEQVRBX1NFQ1RJT05fTk9ERSAgICAgICAgICA9IDQ7XG52YXIgRU5USVRZX1JFRkVSRU5DRV9OT0RFICAgICAgID0gTm9kZVR5cGUuRU5USVRZX1JFRkVSRU5DRV9OT0RFICAgICAgID0gNTtcbnZhciBFTlRJVFlfTk9ERSAgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5FTlRJVFlfTk9ERSAgICAgICAgICAgICAgICAgPSA2O1xudmFyIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSA9IE5vZGVUeXBlLlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSA9IDc7XG52YXIgQ09NTUVOVF9OT0RFICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuQ09NTUVOVF9OT0RFICAgICAgICAgICAgICAgID0gODtcbnZhciBET0NVTUVOVF9OT0RFICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9OT0RFICAgICAgICAgICAgICAgPSA5O1xudmFyIERPQ1VNRU5UX1RZUEVfTk9ERSAgICAgICAgICA9IE5vZGVUeXBlLkRPQ1VNRU5UX1RZUEVfTk9ERSAgICAgICAgICA9IDEwO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgICAgICA9IE5vZGVUeXBlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgICAgICA9IDExO1xudmFyIE5PVEFUSU9OX05PREUgICAgICAgICAgICAgICA9IE5vZGVUeXBlLk5PVEFUSU9OX05PREUgICAgICAgICAgICAgICA9IDEyO1xuXG4vLyBFeGNlcHRpb25Db2RlXG52YXIgRXhjZXB0aW9uQ29kZSA9IHt9XG52YXIgRXhjZXB0aW9uTWVzc2FnZSA9IHt9O1xudmFyIElOREVYX1NJWkVfRVJSICAgICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuSU5ERVhfU0laRV9FUlIgICAgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzFdPVwiSW5kZXggc2l6ZSBlcnJvclwiKSwxKTtcbnZhciBET01TVFJJTkdfU0laRV9FUlIgICAgICAgICAgPSBFeGNlcHRpb25Db2RlLkRPTVNUUklOR19TSVpFX0VSUiAgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsyXT1cIkRPTVN0cmluZyBzaXplIGVycm9yXCIpLDIpO1xudmFyIEhJRVJBUkNIWV9SRVFVRVNUX0VSUiAgICAgICA9IEV4Y2VwdGlvbkNvZGUuSElFUkFSQ0hZX1JFUVVFU1RfRVJSICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzNdPVwiSGllcmFyY2h5IHJlcXVlc3QgZXJyb3JcIiksMyk7XG52YXIgV1JPTkdfRE9DVU1FTlRfRVJSICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5XUk9OR19ET0NVTUVOVF9FUlIgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbNF09XCJXcm9uZyBkb2N1bWVudFwiKSw0KTtcbnZhciBJTlZBTElEX0NIQVJBQ1RFUl9FUlIgICAgICAgPSBFeGNlcHRpb25Db2RlLklOVkFMSURfQ0hBUkFDVEVSX0VSUiAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVs1XT1cIkludmFsaWQgY2hhcmFjdGVyXCIpLDUpO1xudmFyIE5PX0RBVEFfQUxMT1dFRF9FUlIgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9fREFUQV9BTExPV0VEX0VSUiAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzZdPVwiTm8gZGF0YSBhbGxvd2VkXCIpLDYpO1xudmFyIE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiA9IEV4Y2VwdGlvbkNvZGUuTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSID0gKChFeGNlcHRpb25NZXNzYWdlWzddPVwiTm8gbW9kaWZpY2F0aW9uIGFsbG93ZWRcIiksNyk7XG52YXIgTk9UX0ZPVU5EX0VSUiAgICAgICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5OT1RfRk9VTkRfRVJSICAgICAgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbOF09XCJOb3QgZm91bmRcIiksOCk7XG52YXIgTk9UX1NVUFBPUlRFRF9FUlIgICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5OT1RfU1VQUE9SVEVEX0VSUiAgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbOV09XCJOb3Qgc3VwcG9ydGVkXCIpLDkpO1xudmFyIElOVVNFX0FUVFJJQlVURV9FUlIgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuSU5VU0VfQVRUUklCVVRFX0VSUiAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzEwXT1cIkF0dHJpYnV0ZSBpbiB1c2VcIiksMTApO1xuLy9sZXZlbDJcbnZhciBJTlZBTElEX1NUQVRFX0VSUiAgICAgICAgXHQ9IEV4Y2VwdGlvbkNvZGUuSU5WQUxJRF9TVEFURV9FUlIgICAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTFdPVwiSW52YWxpZCBzdGF0ZVwiKSwxMSk7XG52YXIgU1lOVEFYX0VSUiAgICAgICAgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLlNZTlRBWF9FUlIgICAgICAgICAgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzEyXT1cIlN5bnRheCBlcnJvclwiKSwxMik7XG52YXIgSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzEzXT1cIkludmFsaWQgbW9kaWZpY2F0aW9uXCIpLDEzKTtcbnZhciBOQU1FU1BBQ0VfRVJSICAgICAgICAgICAgXHQ9IEV4Y2VwdGlvbkNvZGUuTkFNRVNQQUNFX0VSUiAgICAgICAgICAgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxNF09XCJJbnZhbGlkIG5hbWVzcGFjZVwiKSwxNCk7XG52YXIgSU5WQUxJRF9BQ0NFU1NfRVJSICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfQUNDRVNTX0VSUiAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTVdPVwiSW52YWxpZCBhY2Nlc3NcIiksMTUpO1xuXG5cbmZ1bmN0aW9uIERPTUV4Y2VwdGlvbihjb2RlLCBtZXNzYWdlKSB7XG5cdGlmKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcil7XG5cdFx0dmFyIGVycm9yID0gbWVzc2FnZTtcblx0fWVsc2V7XG5cdFx0ZXJyb3IgPSB0aGlzO1xuXHRcdEVycm9yLmNhbGwodGhpcywgRXhjZXB0aW9uTWVzc2FnZVtjb2RlXSk7XG5cdFx0dGhpcy5tZXNzYWdlID0gRXhjZXB0aW9uTWVzc2FnZVtjb2RlXTtcblx0XHRpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRE9NRXhjZXB0aW9uKTtcblx0fVxuXHRlcnJvci5jb2RlID0gY29kZTtcblx0aWYobWVzc2FnZSkgdGhpcy5tZXNzYWdlID0gdGhpcy5tZXNzYWdlICsgXCI6IFwiICsgbWVzc2FnZTtcblx0cmV0dXJuIGVycm9yO1xufTtcbkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5jb3B5KEV4Y2VwdGlvbkNvZGUsRE9NRXhjZXB0aW9uKVxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvY29yZS5odG1sI0lELTUzNjI5NzE3N1xuICogVGhlIE5vZGVMaXN0IGludGVyZmFjZSBwcm92aWRlcyB0aGUgYWJzdHJhY3Rpb24gb2YgYW4gb3JkZXJlZCBjb2xsZWN0aW9uIG9mIG5vZGVzLCB3aXRob3V0IGRlZmluaW5nIG9yIGNvbnN0cmFpbmluZyBob3cgdGhpcyBjb2xsZWN0aW9uIGlzIGltcGxlbWVudGVkLiBOb2RlTGlzdCBvYmplY3RzIGluIHRoZSBET00gYXJlIGxpdmUuXG4gKiBUaGUgaXRlbXMgaW4gdGhlIE5vZGVMaXN0IGFyZSBhY2Nlc3NpYmxlIHZpYSBhbiBpbnRlZ3JhbCBpbmRleCwgc3RhcnRpbmcgZnJvbSAwLlxuICovXG5mdW5jdGlvbiBOb2RlTGlzdCgpIHtcbn07XG5Ob2RlTGlzdC5wcm90b3R5cGUgPSB7XG5cdC8qKlxuXHQgKiBUaGUgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBsaXN0LiBUaGUgcmFuZ2Ugb2YgdmFsaWQgY2hpbGQgbm9kZSBpbmRpY2VzIGlzIDAgdG8gbGVuZ3RoLTEgaW5jbHVzaXZlLlxuXHQgKiBAc3RhbmRhcmQgbGV2ZWwxXG5cdCAqL1xuXHRsZW5ndGg6MCwgXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbmRleHRoIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24uIElmIGluZGV4IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBsaXN0LCB0aGlzIHJldHVybnMgbnVsbC5cblx0ICogQHN0YW5kYXJkIGxldmVsMVxuXHQgKiBAcGFyYW0gaW5kZXggIHVuc2lnbmVkIGxvbmcgXG5cdCAqICAgSW5kZXggaW50byB0aGUgY29sbGVjdGlvbi5cblx0ICogQHJldHVybiBOb2RlXG5cdCAqIFx0VGhlIG5vZGUgYXQgdGhlIGluZGV4dGggcG9zaXRpb24gaW4gdGhlIE5vZGVMaXN0LCBvciBudWxsIGlmIHRoYXQgaXMgbm90IGEgdmFsaWQgaW5kZXguIFxuXHQgKi9cblx0aXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRyZXR1cm4gdGhpc1tpbmRleF0gfHwgbnVsbDtcblx0fSxcblx0dG9TdHJpbmc6ZnVuY3Rpb24oaXNIVE1MLG5vZGVGaWx0ZXIpe1xuXHRcdGZvcih2YXIgYnVmID0gW10sIGkgPSAwO2k8dGhpcy5sZW5ndGg7aSsrKXtcblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKHRoaXNbaV0sYnVmLGlzSFRNTCxub2RlRmlsdGVyKTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcblx0fVxufTtcbmZ1bmN0aW9uIExpdmVOb2RlTGlzdChub2RlLHJlZnJlc2gpe1xuXHR0aGlzLl9ub2RlID0gbm9kZTtcblx0dGhpcy5fcmVmcmVzaCA9IHJlZnJlc2hcblx0X3VwZGF0ZUxpdmVMaXN0KHRoaXMpO1xufVxuZnVuY3Rpb24gX3VwZGF0ZUxpdmVMaXN0KGxpc3Qpe1xuXHR2YXIgaW5jID0gbGlzdC5fbm9kZS5faW5jIHx8IGxpc3QuX25vZGUub3duZXJEb2N1bWVudC5faW5jO1xuXHRpZihsaXN0Ll9pbmMgIT0gaW5jKXtcblx0XHR2YXIgbHMgPSBsaXN0Ll9yZWZyZXNoKGxpc3QuX25vZGUpO1xuXHRcdC8vY29uc29sZS5sb2cobHMubGVuZ3RoKVxuXHRcdF9fc2V0X18obGlzdCwnbGVuZ3RoJyxscy5sZW5ndGgpO1xuXHRcdGNvcHkobHMsbGlzdCk7XG5cdFx0bGlzdC5faW5jID0gaW5jO1xuXHR9XG59XG5MaXZlTm9kZUxpc3QucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpKXtcblx0X3VwZGF0ZUxpdmVMaXN0KHRoaXMpO1xuXHRyZXR1cm4gdGhpc1tpXTtcbn1cblxuX2V4dGVuZHMoTGl2ZU5vZGVMaXN0LE5vZGVMaXN0KTtcbi8qKlxuICogXG4gKiBPYmplY3RzIGltcGxlbWVudGluZyB0aGUgTmFtZWROb2RlTWFwIGludGVyZmFjZSBhcmUgdXNlZCB0byByZXByZXNlbnQgY29sbGVjdGlvbnMgb2Ygbm9kZXMgdGhhdCBjYW4gYmUgYWNjZXNzZWQgYnkgbmFtZS4gTm90ZSB0aGF0IE5hbWVkTm9kZU1hcCBkb2VzIG5vdCBpbmhlcml0IGZyb20gTm9kZUxpc3Q7IE5hbWVkTm9kZU1hcHMgYXJlIG5vdCBtYWludGFpbmVkIGluIGFueSBwYXJ0aWN1bGFyIG9yZGVyLiBPYmplY3RzIGNvbnRhaW5lZCBpbiBhbiBvYmplY3QgaW1wbGVtZW50aW5nIE5hbWVkTm9kZU1hcCBtYXkgYWxzbyBiZSBhY2Nlc3NlZCBieSBhbiBvcmRpbmFsIGluZGV4LCBidXQgdGhpcyBpcyBzaW1wbHkgdG8gYWxsb3cgY29udmVuaWVudCBlbnVtZXJhdGlvbiBvZiB0aGUgY29udGVudHMgb2YgYSBOYW1lZE5vZGVNYXAsIGFuZCBkb2VzIG5vdCBpbXBseSB0aGF0IHRoZSBET00gc3BlY2lmaWVzIGFuIG9yZGVyIHRvIHRoZXNlIE5vZGVzLlxuICogTmFtZWROb2RlTWFwIG9iamVjdHMgaW4gdGhlIERPTSBhcmUgbGl2ZS5cbiAqIHVzZWQgZm9yIGF0dHJpYnV0ZXMgb3IgRG9jdW1lbnRUeXBlIGVudGl0aWVzIFxuICovXG5mdW5jdGlvbiBOYW1lZE5vZGVNYXAoKSB7XG59O1xuXG5mdW5jdGlvbiBfZmluZE5vZGVJbmRleChsaXN0LG5vZGUpe1xuXHR2YXIgaSA9IGxpc3QubGVuZ3RoO1xuXHR3aGlsZShpLS0pe1xuXHRcdGlmKGxpc3RbaV0gPT09IG5vZGUpe3JldHVybiBpfVxuXHR9XG59XG5cbmZ1bmN0aW9uIF9hZGROYW1lZE5vZGUoZWwsbGlzdCxuZXdBdHRyLG9sZEF0dHIpe1xuXHRpZihvbGRBdHRyKXtcblx0XHRsaXN0W19maW5kTm9kZUluZGV4KGxpc3Qsb2xkQXR0cildID0gbmV3QXR0cjtcblx0fWVsc2V7XG5cdFx0bGlzdFtsaXN0Lmxlbmd0aCsrXSA9IG5ld0F0dHI7XG5cdH1cblx0aWYoZWwpe1xuXHRcdG5ld0F0dHIub3duZXJFbGVtZW50ID0gZWw7XG5cdFx0dmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnQ7XG5cdFx0aWYoZG9jKXtcblx0XHRcdG9sZEF0dHIgJiYgX29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxvbGRBdHRyKTtcblx0XHRcdF9vbkFkZEF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cik7XG5cdFx0fVxuXHR9XG59XG5mdW5jdGlvbiBfcmVtb3ZlTmFtZWROb2RlKGVsLGxpc3QsYXR0cil7XG5cdC8vY29uc29sZS5sb2coJ3JlbW92ZSBhdHRyOicrYXR0cilcblx0dmFyIGkgPSBfZmluZE5vZGVJbmRleChsaXN0LGF0dHIpO1xuXHRpZihpPj0wKXtcblx0XHR2YXIgbGFzdEluZGV4ID0gbGlzdC5sZW5ndGgtMVxuXHRcdHdoaWxlKGk8bGFzdEluZGV4KXtcblx0XHRcdGxpc3RbaV0gPSBsaXN0WysraV1cblx0XHR9XG5cdFx0bGlzdC5sZW5ndGggPSBsYXN0SW5kZXg7XG5cdFx0aWYoZWwpe1xuXHRcdFx0dmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRpZihkb2Mpe1xuXHRcdFx0XHRfb25SZW1vdmVBdHRyaWJ1dGUoZG9jLGVsLGF0dHIpO1xuXHRcdFx0XHRhdHRyLm93bmVyRWxlbWVudCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ZWxzZXtcblx0XHR0aHJvdyBET01FeGNlcHRpb24oTk9UX0ZPVU5EX0VSUixuZXcgRXJyb3IoZWwudGFnTmFtZSsnQCcrYXR0cikpXG5cdH1cbn1cbk5hbWVkTm9kZU1hcC5wcm90b3R5cGUgPSB7XG5cdGxlbmd0aDowLFxuXHRpdGVtOk5vZGVMaXN0LnByb3RvdHlwZS5pdGVtLFxuXHRnZXROYW1lZEl0ZW06IGZ1bmN0aW9uKGtleSkge1xuLy9cdFx0aWYoa2V5LmluZGV4T2YoJzonKT4wIHx8IGtleSA9PSAneG1sbnMnKXtcbi8vXHRcdFx0cmV0dXJuIG51bGw7XG4vL1x0XHR9XG5cdFx0Ly9jb25zb2xlLmxvZygpXG5cdFx0dmFyIGkgPSB0aGlzLmxlbmd0aDtcblx0XHR3aGlsZShpLS0pe1xuXHRcdFx0dmFyIGF0dHIgPSB0aGlzW2ldO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhhdHRyLm5vZGVOYW1lLGtleSlcblx0XHRcdGlmKGF0dHIubm9kZU5hbWUgPT0ga2V5KXtcblx0XHRcdFx0cmV0dXJuIGF0dHI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRzZXROYW1lZEl0ZW06IGZ1bmN0aW9uKGF0dHIpIHtcblx0XHR2YXIgZWwgPSBhdHRyLm93bmVyRWxlbWVudDtcblx0XHRpZihlbCAmJiBlbCE9dGhpcy5fb3duZXJFbGVtZW50KXtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSU5VU0VfQVRUUklCVVRFX0VSUik7XG5cdFx0fVxuXHRcdHZhciBvbGRBdHRyID0gdGhpcy5nZXROYW1lZEl0ZW0oYXR0ci5ub2RlTmFtZSk7XG5cdFx0X2FkZE5hbWVkTm9kZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxhdHRyLG9sZEF0dHIpO1xuXHRcdHJldHVybiBvbGRBdHRyO1xuXHR9LFxuXHQvKiByZXR1cm5zIE5vZGUgKi9cblx0c2V0TmFtZWRJdGVtTlM6IGZ1bmN0aW9uKGF0dHIpIHsvLyByYWlzZXM6IFdST05HX0RPQ1VNRU5UX0VSUixOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIsSU5VU0VfQVRUUklCVVRFX0VSUlxuXHRcdHZhciBlbCA9IGF0dHIub3duZXJFbGVtZW50LCBvbGRBdHRyO1xuXHRcdGlmKGVsICYmIGVsIT10aGlzLl9vd25lckVsZW1lbnQpe1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihJTlVTRV9BVFRSSUJVVEVfRVJSKTtcblx0XHR9XG5cdFx0b2xkQXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtTlMoYXR0ci5uYW1lc3BhY2VVUkksYXR0ci5sb2NhbE5hbWUpO1xuXHRcdF9hZGROYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cixvbGRBdHRyKTtcblx0XHRyZXR1cm4gb2xkQXR0cjtcblx0fSxcblxuXHQvKiByZXR1cm5zIE5vZGUgKi9cblx0cmVtb3ZlTmFtZWRJdGVtOiBmdW5jdGlvbihrZXkpIHtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtKGtleSk7XG5cdFx0X3JlbW92ZU5hbWVkTm9kZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxhdHRyKTtcblx0XHRyZXR1cm4gYXR0cjtcblx0XHRcblx0XHRcblx0fSwvLyByYWlzZXM6IE5PVF9GT1VORF9FUlIsTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSXG5cdFxuXHQvL2ZvciBsZXZlbDJcblx0cmVtb3ZlTmFtZWRJdGVtTlM6ZnVuY3Rpb24obmFtZXNwYWNlVVJJLGxvY2FsTmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbU5TKG5hbWVzcGFjZVVSSSxsb2NhbE5hbWUpO1xuXHRcdF9yZW1vdmVOYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cik7XG5cdFx0cmV0dXJuIGF0dHI7XG5cdH0sXG5cdGdldE5hbWVkSXRlbU5TOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuXHRcdHZhciBpID0gdGhpcy5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKXtcblx0XHRcdHZhciBub2RlID0gdGhpc1tpXTtcblx0XHRcdGlmKG5vZGUubG9jYWxOYW1lID09IGxvY2FsTmFtZSAmJiBub2RlLm5hbWVzcGFjZVVSSSA9PSBuYW1lc3BhY2VVUkkpe1xuXHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn07XG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLURPTS1MZXZlbC0xL2xldmVsLW9uZS1jb3JlLmh0bWwjSUQtMTAyMTYxNDkwXG4gKi9cbmZ1bmN0aW9uIERPTUltcGxlbWVudGF0aW9uKC8qIE9iamVjdCAqLyBmZWF0dXJlcykge1xuXHR0aGlzLl9mZWF0dXJlcyA9IHt9O1xuXHRpZiAoZmVhdHVyZXMpIHtcblx0XHRmb3IgKHZhciBmZWF0dXJlIGluIGZlYXR1cmVzKSB7XG5cdFx0XHQgdGhpcy5fZmVhdHVyZXMgPSBmZWF0dXJlc1tmZWF0dXJlXTtcblx0XHR9XG5cdH1cbn07XG5cbkRPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZSA9IHtcblx0aGFzRmVhdHVyZTogZnVuY3Rpb24oLyogc3RyaW5nICovIGZlYXR1cmUsIC8qIHN0cmluZyAqLyB2ZXJzaW9uKSB7XG5cdFx0dmFyIHZlcnNpb25zID0gdGhpcy5fZmVhdHVyZXNbZmVhdHVyZS50b0xvd2VyQ2FzZSgpXTtcblx0XHRpZiAodmVyc2lvbnMgJiYgKCF2ZXJzaW9uIHx8IHZlcnNpb24gaW4gdmVyc2lvbnMpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlRG9jdW1lbnQ6ZnVuY3Rpb24obmFtZXNwYWNlVVJJLCAgcXVhbGlmaWVkTmFtZSwgZG9jdHlwZSl7Ly8gcmFpc2VzOklOVkFMSURfQ0hBUkFDVEVSX0VSUixOQU1FU1BBQ0VfRVJSLFdST05HX0RPQ1VNRU5UX0VSUlxuXHRcdHZhciBkb2MgPSBuZXcgRG9jdW1lbnQoKTtcblx0XHRkb2MuaW1wbGVtZW50YXRpb24gPSB0aGlzO1xuXHRcdGRvYy5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0ZG9jLmRvY3R5cGUgPSBkb2N0eXBlO1xuXHRcdGlmKGRvY3R5cGUpe1xuXHRcdFx0ZG9jLmFwcGVuZENoaWxkKGRvY3R5cGUpO1xuXHRcdH1cblx0XHRpZihxdWFsaWZpZWROYW1lKXtcblx0XHRcdHZhciByb290ID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkkscXVhbGlmaWVkTmFtZSk7XG5cdFx0XHRkb2MuYXBwZW5kQ2hpbGQocm9vdCk7XG5cdFx0fVxuXHRcdHJldHVybiBkb2M7XG5cdH0sXG5cdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGNyZWF0ZURvY3VtZW50VHlwZTpmdW5jdGlvbihxdWFsaWZpZWROYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpey8vIHJhaXNlczpJTlZBTElEX0NIQVJBQ1RFUl9FUlIsTkFNRVNQQUNFX0VSUlxuXHRcdHZhciBub2RlID0gbmV3IERvY3VtZW50VHlwZSgpO1xuXHRcdG5vZGUubmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5ub2RlTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5wdWJsaWNJZCA9IHB1YmxpY0lkO1xuXHRcdG5vZGUuc3lzdGVtSWQgPSBzeXN0ZW1JZDtcblx0XHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRcdC8vcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZyAgICAgICAgaW50ZXJuYWxTdWJzZXQ7XG5cdFx0XG5cdFx0Ly9UT0RPOi4uXG5cdFx0Ly8gIHJlYWRvbmx5IGF0dHJpYnV0ZSBOYW1lZE5vZGVNYXAgICAgIGVudGl0aWVzO1xuXHRcdC8vICByZWFkb25seSBhdHRyaWJ1dGUgTmFtZWROb2RlTWFwICAgICBub3RhdGlvbnM7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cbn07XG5cblxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvY29yZS5odG1sI0lELTE5NTA2NDEyNDdcbiAqL1xuXG5mdW5jdGlvbiBOb2RlKCkge1xufTtcblxuTm9kZS5wcm90b3R5cGUgPSB7XG5cdGZpcnN0Q2hpbGQgOiBudWxsLFxuXHRsYXN0Q2hpbGQgOiBudWxsLFxuXHRwcmV2aW91c1NpYmxpbmcgOiBudWxsLFxuXHRuZXh0U2libGluZyA6IG51bGwsXG5cdGF0dHJpYnV0ZXMgOiBudWxsLFxuXHRwYXJlbnROb2RlIDogbnVsbCxcblx0Y2hpbGROb2RlcyA6IG51bGwsXG5cdG93bmVyRG9jdW1lbnQgOiBudWxsLFxuXHRub2RlVmFsdWUgOiBudWxsLFxuXHRuYW1lc3BhY2VVUkkgOiBudWxsLFxuXHRwcmVmaXggOiBudWxsLFxuXHRsb2NhbE5hbWUgOiBudWxsLFxuXHQvLyBNb2RpZmllZCBpbiBET00gTGV2ZWwgMjpcblx0aW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKG5ld0NoaWxkLCByZWZDaGlsZCl7Ly9yYWlzZXMgXG5cdFx0cmV0dXJuIF9pbnNlcnRCZWZvcmUodGhpcyxuZXdDaGlsZCxyZWZDaGlsZCk7XG5cdH0sXG5cdHJlcGxhY2VDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCwgb2xkQ2hpbGQpey8vcmFpc2VzIFxuXHRcdHRoaXMuaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLG9sZENoaWxkKTtcblx0XHRpZihvbGRDaGlsZCl7XG5cdFx0XHR0aGlzLnJlbW92ZUNoaWxkKG9sZENoaWxkKTtcblx0XHR9XG5cdH0sXG5cdHJlbW92ZUNoaWxkOmZ1bmN0aW9uKG9sZENoaWxkKXtcblx0XHRyZXR1cm4gX3JlbW92ZUNoaWxkKHRoaXMsb2xkQ2hpbGQpO1xuXHR9LFxuXHRhcHBlbmRDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCl7XG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLG51bGwpO1xuXHR9LFxuXHRoYXNDaGlsZE5vZGVzOmZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIHRoaXMuZmlyc3RDaGlsZCAhPSBudWxsO1xuXHR9LFxuXHRjbG9uZU5vZGU6ZnVuY3Rpb24oZGVlcCl7XG5cdFx0cmV0dXJuIGNsb25lTm9kZSh0aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsdGhpcyxkZWVwKTtcblx0fSxcblx0Ly8gTW9kaWZpZWQgaW4gRE9NIExldmVsIDI6XG5cdG5vcm1hbGl6ZTpmdW5jdGlvbigpe1xuXHRcdHZhciBjaGlsZCA9IHRoaXMuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0aWYobmV4dCAmJiBuZXh0Lm5vZGVUeXBlID09IFRFWFRfTk9ERSAmJiBjaGlsZC5ub2RlVHlwZSA9PSBURVhUX05PREUpe1xuXHRcdFx0XHR0aGlzLnJlbW92ZUNoaWxkKG5leHQpO1xuXHRcdFx0XHRjaGlsZC5hcHBlbmREYXRhKG5leHQuZGF0YSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0Y2hpbGQubm9ybWFsaXplKCk7XG5cdFx0XHRcdGNoaWxkID0gbmV4dDtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG4gIFx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0aXNTdXBwb3J0ZWQ6ZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbil7XG5cdFx0cmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKGZlYXR1cmUsdmVyc2lvbik7XG5cdH0sXG4gICAgLy8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcbiAgICBoYXNBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7XG4gICAgXHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmxlbmd0aD4wO1xuICAgIH0sXG4gICAgbG9va3VwUHJlZml4OmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSl7XG4gICAgXHR2YXIgZWwgPSB0aGlzO1xuICAgIFx0d2hpbGUoZWwpe1xuICAgIFx0XHR2YXIgbWFwID0gZWwuX25zTWFwO1xuICAgIFx0XHQvL2NvbnNvbGUuZGlyKG1hcClcbiAgICBcdFx0aWYobWFwKXtcbiAgICBcdFx0XHRmb3IodmFyIG4gaW4gbWFwKXtcbiAgICBcdFx0XHRcdGlmKG1hcFtuXSA9PSBuYW1lc3BhY2VVUkkpe1xuICAgIFx0XHRcdFx0XHRyZXR1cm4gbjtcbiAgICBcdFx0XHRcdH1cbiAgICBcdFx0XHR9XG4gICAgXHRcdH1cbiAgICBcdFx0ZWwgPSBlbC5ub2RlVHlwZSA9PSBBVFRSSUJVVEVfTk9ERT9lbC5vd25lckRvY3VtZW50IDogZWwucGFyZW50Tm9kZTtcbiAgICBcdH1cbiAgICBcdHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgLy8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMzpcbiAgICBsb29rdXBOYW1lc3BhY2VVUkk6ZnVuY3Rpb24ocHJlZml4KXtcbiAgICBcdHZhciBlbCA9IHRoaXM7XG4gICAgXHR3aGlsZShlbCl7XG4gICAgXHRcdHZhciBtYXAgPSBlbC5fbnNNYXA7XG4gICAgXHRcdC8vY29uc29sZS5kaXIobWFwKVxuICAgIFx0XHRpZihtYXApe1xuICAgIFx0XHRcdGlmKHByZWZpeCBpbiBtYXApe1xuICAgIFx0XHRcdFx0cmV0dXJuIG1hcFtwcmVmaXhdIDtcbiAgICBcdFx0XHR9XG4gICAgXHRcdH1cbiAgICBcdFx0ZWwgPSBlbC5ub2RlVHlwZSA9PSBBVFRSSUJVVEVfTk9ERT9lbC5vd25lckRvY3VtZW50IDogZWwucGFyZW50Tm9kZTtcbiAgICBcdH1cbiAgICBcdHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgLy8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMzpcbiAgICBpc0RlZmF1bHROYW1lc3BhY2U6ZnVuY3Rpb24obmFtZXNwYWNlVVJJKXtcbiAgICBcdHZhciBwcmVmaXggPSB0aGlzLmxvb2t1cFByZWZpeChuYW1lc3BhY2VVUkkpO1xuICAgIFx0cmV0dXJuIHByZWZpeCA9PSBudWxsO1xuICAgIH1cbn07XG5cblxuZnVuY3Rpb24gX3htbEVuY29kZXIoYyl7XG5cdHJldHVybiBjID09ICc8JyAmJiAnJmx0OycgfHxcbiAgICAgICAgIGMgPT0gJz4nICYmICcmZ3Q7JyB8fFxuICAgICAgICAgYyA9PSAnJicgJiYgJyZhbXA7JyB8fFxuICAgICAgICAgYyA9PSAnXCInICYmICcmcXVvdDsnIHx8XG4gICAgICAgICAnJiMnK2MuY2hhckNvZGVBdCgpKyc7J1xufVxuXG5cbmNvcHkoTm9kZVR5cGUsTm9kZSk7XG5jb3B5KE5vZGVUeXBlLE5vZGUucHJvdG90eXBlKTtcblxuLyoqXG4gKiBAcGFyYW0gY2FsbGJhY2sgcmV0dXJuIHRydWUgZm9yIGNvbnRpbnVlLGZhbHNlIGZvciBicmVha1xuICogQHJldHVybiBib29sZWFuIHRydWU6IGJyZWFrIHZpc2l0O1xuICovXG5mdW5jdGlvbiBfdmlzaXROb2RlKG5vZGUsY2FsbGJhY2spe1xuXHRpZihjYWxsYmFjayhub2RlKSl7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYobm9kZSA9IG5vZGUuZmlyc3RDaGlsZCl7XG5cdFx0ZG97XG5cdFx0XHRpZihfdmlzaXROb2RlKG5vZGUsY2FsbGJhY2spKXtyZXR1cm4gdHJ1ZX1cbiAgICAgICAgfXdoaWxlKG5vZGU9bm9kZS5uZXh0U2libGluZylcbiAgICB9XG59XG5cblxuXG5mdW5jdGlvbiBEb2N1bWVudCgpe1xufVxuZnVuY3Rpb24gX29uQWRkQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyKXtcblx0ZG9jICYmIGRvYy5faW5jKys7XG5cdHZhciBucyA9IG5ld0F0dHIubmFtZXNwYWNlVVJJIDtcblx0aWYobnMgPT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJyl7XG5cdFx0Ly91cGRhdGUgbmFtZXNwYWNlXG5cdFx0ZWwuX25zTWFwW25ld0F0dHIucHJlZml4P25ld0F0dHIubG9jYWxOYW1lOicnXSA9IG5ld0F0dHIudmFsdWVcblx0fVxufVxuZnVuY3Rpb24gX29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyLHJlbW92ZSl7XG5cdGRvYyAmJiBkb2MuX2luYysrO1xuXHR2YXIgbnMgPSBuZXdBdHRyLm5hbWVzcGFjZVVSSSA7XG5cdGlmKG5zID09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycpe1xuXHRcdC8vdXBkYXRlIG5hbWVzcGFjZVxuXHRcdGRlbGV0ZSBlbC5fbnNNYXBbbmV3QXR0ci5wcmVmaXg/bmV3QXR0ci5sb2NhbE5hbWU6JyddXG5cdH1cbn1cbmZ1bmN0aW9uIF9vblVwZGF0ZUNoaWxkKGRvYyxlbCxuZXdDaGlsZCl7XG5cdGlmKGRvYyAmJiBkb2MuX2luYyl7XG5cdFx0ZG9jLl9pbmMrKztcblx0XHQvL3VwZGF0ZSBjaGlsZE5vZGVzXG5cdFx0dmFyIGNzID0gZWwuY2hpbGROb2Rlcztcblx0XHRpZihuZXdDaGlsZCl7XG5cdFx0XHRjc1tjcy5sZW5ndGgrK10gPSBuZXdDaGlsZDtcblx0XHR9ZWxzZXtcblx0XHRcdC8vY29uc29sZS5sb2coMSlcblx0XHRcdHZhciBjaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdGNzW2krK10gPSBjaGlsZDtcblx0XHRcdFx0Y2hpbGQgPWNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0fVxuXHRcdFx0Y3MubGVuZ3RoID0gaTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBhdHRyaWJ1dGVzO1xuICogY2hpbGRyZW47XG4gKiBcbiAqIHdyaXRlYWJsZSBwcm9wZXJ0aWVzOlxuICogbm9kZVZhbHVlLEF0dHI6dmFsdWUsQ2hhcmFjdGVyRGF0YTpkYXRhXG4gKiBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gX3JlbW92ZUNoaWxkKHBhcmVudE5vZGUsY2hpbGQpe1xuXHR2YXIgcHJldmlvdXMgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmc7XG5cdHZhciBuZXh0ID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdGlmKHByZXZpb3VzKXtcblx0XHRwcmV2aW91cy5uZXh0U2libGluZyA9IG5leHQ7XG5cdH1lbHNle1xuXHRcdHBhcmVudE5vZGUuZmlyc3RDaGlsZCA9IG5leHRcblx0fVxuXHRpZihuZXh0KXtcblx0XHRuZXh0LnByZXZpb3VzU2libGluZyA9IHByZXZpb3VzO1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmxhc3RDaGlsZCA9IHByZXZpb3VzO1xuXHR9XG5cdF9vblVwZGF0ZUNoaWxkKHBhcmVudE5vZGUub3duZXJEb2N1bWVudCxwYXJlbnROb2RlKTtcblx0cmV0dXJuIGNoaWxkO1xufVxuLyoqXG4gKiBwcmVmb3JtYW5jZSBrZXkocmVmQ2hpbGQgPT0gbnVsbClcbiAqL1xuZnVuY3Rpb24gX2luc2VydEJlZm9yZShwYXJlbnROb2RlLG5ld0NoaWxkLG5leHRDaGlsZCl7XG5cdHZhciBjcCA9IG5ld0NoaWxkLnBhcmVudE5vZGU7XG5cdGlmKGNwKXtcblx0XHRjcC5yZW1vdmVDaGlsZChuZXdDaGlsZCk7Ly9yZW1vdmUgYW5kIHVwZGF0ZVxuXHR9XG5cdGlmKG5ld0NoaWxkLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHR2YXIgbmV3Rmlyc3QgPSBuZXdDaGlsZC5maXJzdENoaWxkO1xuXHRcdGlmIChuZXdGaXJzdCA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbmV3Q2hpbGQ7XG5cdFx0fVxuXHRcdHZhciBuZXdMYXN0ID0gbmV3Q2hpbGQubGFzdENoaWxkO1xuXHR9ZWxzZXtcblx0XHRuZXdGaXJzdCA9IG5ld0xhc3QgPSBuZXdDaGlsZDtcblx0fVxuXHR2YXIgcHJlID0gbmV4dENoaWxkID8gbmV4dENoaWxkLnByZXZpb3VzU2libGluZyA6IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXG5cdG5ld0ZpcnN0LnByZXZpb3VzU2libGluZyA9IHByZTtcblx0bmV3TGFzdC5uZXh0U2libGluZyA9IG5leHRDaGlsZDtcblx0XG5cdFxuXHRpZihwcmUpe1xuXHRcdHByZS5uZXh0U2libGluZyA9IG5ld0ZpcnN0O1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXdGaXJzdDtcblx0fVxuXHRpZihuZXh0Q2hpbGQgPT0gbnVsbCl7XG5cdFx0cGFyZW50Tm9kZS5sYXN0Q2hpbGQgPSBuZXdMYXN0O1xuXHR9ZWxzZXtcblx0XHRuZXh0Q2hpbGQucHJldmlvdXNTaWJsaW5nID0gbmV3TGFzdDtcblx0fVxuXHRkb3tcblx0XHRuZXdGaXJzdC5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcblx0fXdoaWxlKG5ld0ZpcnN0ICE9PSBuZXdMYXN0ICYmIChuZXdGaXJzdD0gbmV3Rmlyc3QubmV4dFNpYmxpbmcpKVxuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnR8fHBhcmVudE5vZGUscGFyZW50Tm9kZSk7XG5cdC8vY29uc29sZS5sb2cocGFyZW50Tm9kZS5sYXN0Q2hpbGQubmV4dFNpYmxpbmcgPT0gbnVsbClcblx0aWYgKG5ld0NoaWxkLm5vZGVUeXBlID09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcblx0XHRuZXdDaGlsZC5maXJzdENoaWxkID0gbmV3Q2hpbGQubGFzdENoaWxkID0gbnVsbDtcblx0fVxuXHRyZXR1cm4gbmV3Q2hpbGQ7XG59XG5mdW5jdGlvbiBfYXBwZW5kU2luZ2xlQ2hpbGQocGFyZW50Tm9kZSxuZXdDaGlsZCl7XG5cdHZhciBjcCA9IG5ld0NoaWxkLnBhcmVudE5vZGU7XG5cdGlmKGNwKXtcblx0XHR2YXIgcHJlID0gcGFyZW50Tm9kZS5sYXN0Q2hpbGQ7XG5cdFx0Y3AucmVtb3ZlQ2hpbGQobmV3Q2hpbGQpOy8vcmVtb3ZlIGFuZCB1cGRhdGVcblx0XHR2YXIgcHJlID0gcGFyZW50Tm9kZS5sYXN0Q2hpbGQ7XG5cdH1cblx0dmFyIHByZSA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHRuZXdDaGlsZC5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcblx0bmV3Q2hpbGQucHJldmlvdXNTaWJsaW5nID0gcHJlO1xuXHRuZXdDaGlsZC5uZXh0U2libGluZyA9IG51bGw7XG5cdGlmKHByZSl7XG5cdFx0cHJlLm5leHRTaWJsaW5nID0gbmV3Q2hpbGQ7XG5cdH1lbHNle1xuXHRcdHBhcmVudE5vZGUuZmlyc3RDaGlsZCA9IG5ld0NoaWxkO1xuXHR9XG5cdHBhcmVudE5vZGUubGFzdENoaWxkID0gbmV3Q2hpbGQ7XG5cdF9vblVwZGF0ZUNoaWxkKHBhcmVudE5vZGUub3duZXJEb2N1bWVudCxwYXJlbnROb2RlLG5ld0NoaWxkKTtcblx0cmV0dXJuIG5ld0NoaWxkO1xuXHQvL2NvbnNvbGUubG9nKFwiX19hYVwiLHBhcmVudE5vZGUubGFzdENoaWxkLm5leHRTaWJsaW5nID09IG51bGwpXG59XG5Eb2N1bWVudC5wcm90b3R5cGUgPSB7XG5cdC8vaW1wbGVtZW50YXRpb24gOiBudWxsLFxuXHRub2RlTmFtZSA6ICAnI2RvY3VtZW50Jyxcblx0bm9kZVR5cGUgOiAgRE9DVU1FTlRfTk9ERSxcblx0ZG9jdHlwZSA6ICBudWxsLFxuXHRkb2N1bWVudEVsZW1lbnQgOiAgbnVsbCxcblx0X2luYyA6IDEsXG5cdFxuXHRpbnNlcnRCZWZvcmUgOiAgZnVuY3Rpb24obmV3Q2hpbGQsIHJlZkNoaWxkKXsvL3JhaXNlcyBcblx0XHRpZihuZXdDaGlsZC5ub2RlVHlwZSA9PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHRcdHZhciBjaGlsZCA9IG5ld0NoaWxkLmZpcnN0Q2hpbGQ7XG5cdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdHZhciBuZXh0ID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdHRoaXMuaW5zZXJ0QmVmb3JlKGNoaWxkLHJlZkNoaWxkKTtcblx0XHRcdFx0Y2hpbGQgPSBuZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ld0NoaWxkO1xuXHRcdH1cblx0XHRpZih0aGlzLmRvY3VtZW50RWxlbWVudCA9PSBudWxsICYmIG5ld0NoaWxkLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSl7XG5cdFx0XHR0aGlzLmRvY3VtZW50RWxlbWVudCA9IG5ld0NoaWxkO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gX2luc2VydEJlZm9yZSh0aGlzLG5ld0NoaWxkLHJlZkNoaWxkKSwobmV3Q2hpbGQub3duZXJEb2N1bWVudCA9IHRoaXMpLG5ld0NoaWxkO1xuXHR9LFxuXHRyZW1vdmVDaGlsZCA6ICBmdW5jdGlvbihvbGRDaGlsZCl7XG5cdFx0aWYodGhpcy5kb2N1bWVudEVsZW1lbnQgPT0gb2xkQ2hpbGQpe1xuXHRcdFx0dGhpcy5kb2N1bWVudEVsZW1lbnQgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gX3JlbW92ZUNoaWxkKHRoaXMsb2xkQ2hpbGQpO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRpbXBvcnROb2RlIDogZnVuY3Rpb24oaW1wb3J0ZWROb2RlLGRlZXApe1xuXHRcdHJldHVybiBpbXBvcnROb2RlKHRoaXMsaW1wb3J0ZWROb2RlLGRlZXApO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRnZXRFbGVtZW50QnlJZCA6XHRmdW5jdGlvbihpZCl7XG5cdFx0dmFyIHJ0diA9IG51bGw7XG5cdFx0X3Zpc2l0Tm9kZSh0aGlzLmRvY3VtZW50RWxlbWVudCxmdW5jdGlvbihub2RlKXtcblx0XHRcdGlmKG5vZGUubm9kZVR5cGUgPT0gRUxFTUVOVF9OT0RFKXtcblx0XHRcdFx0aWYobm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykgPT0gaWQpe1xuXHRcdFx0XHRcdHJ0diA9IG5vZGU7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRcdHJldHVybiBydHY7XG5cdH0sXG5cdFxuXHQvL2RvY3VtZW50IGZhY3RvcnkgbWV0aG9kOlxuXHRjcmVhdGVFbGVtZW50IDpcdGZ1bmN0aW9uKHRhZ05hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVsZW1lbnQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUudGFnTmFtZSA9IHRhZ05hbWU7XG5cdFx0bm9kZS5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcyA9IG5ldyBOYW1lZE5vZGVNYXAoKTtcblx0XHRhdHRycy5fb3duZXJFbGVtZW50ID0gbm9kZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlRG9jdW1lbnRGcmFnbWVudCA6XHRmdW5jdGlvbigpe1xuXHRcdHZhciBub2RlID0gbmV3IERvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVUZXh0Tm9kZSA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBUZXh0KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmFwcGVuZERhdGEoZGF0YSlcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQ29tbWVudCA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBDb21tZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmFwcGVuZERhdGEoZGF0YSlcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQ0RBVEFTZWN0aW9uIDpcdGZ1bmN0aW9uKGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IENEQVRBU2VjdGlvbigpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbiA6XHRmdW5jdGlvbih0YXJnZXQsZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgUHJvY2Vzc2luZ0luc3RydWN0aW9uKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLnRhZ05hbWUgPSBub2RlLnRhcmdldCA9IHRhcmdldDtcblx0XHRub2RlLm5vZGVWYWx1ZT0gbm9kZS5kYXRhID0gZGF0YTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQXR0cmlidXRlIDpcdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEF0dHIoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnRcdD0gdGhpcztcblx0XHRub2RlLm5hbWUgPSBuYW1lO1xuXHRcdG5vZGUubm9kZU5hbWVcdD0gbmFtZTtcblx0XHRub2RlLmxvY2FsTmFtZSA9IG5hbWU7XG5cdFx0bm9kZS5zcGVjaWZpZWQgPSB0cnVlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVFbnRpdHlSZWZlcmVuY2UgOlx0ZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgRW50aXR5UmVmZXJlbmNlKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50XHQ9IHRoaXM7XG5cdFx0bm9kZS5ub2RlTmFtZVx0PSBuYW1lO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVFbGVtZW50TlMgOlx0ZnVuY3Rpb24obmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVsZW1lbnQoKTtcblx0XHR2YXIgcGwgPSBxdWFsaWZpZWROYW1lLnNwbGl0KCc6Jyk7XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcyA9IG5ldyBOYW1lZE5vZGVNYXAoKTtcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUudGFnTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cdFx0aWYocGwubGVuZ3RoID09IDIpe1xuXHRcdFx0bm9kZS5wcmVmaXggPSBwbFswXTtcblx0XHRcdG5vZGUubG9jYWxOYW1lID0gcGxbMV07XG5cdFx0fWVsc2V7XG5cdFx0XHQvL2VsLnByZWZpeCA9IG51bGw7XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0fVxuXHRcdGF0dHJzLl9vd25lckVsZW1lbnQgPSBub2RlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVBdHRyaWJ1dGVOUyA6XHRmdW5jdGlvbihuYW1lc3BhY2VVUkkscXVhbGlmaWVkTmFtZSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQXR0cigpO1xuXHRcdHZhciBwbCA9IHF1YWxpZmllZE5hbWUuc3BsaXQoJzonKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cdFx0bm9kZS5zcGVjaWZpZWQgPSB0cnVlO1xuXHRcdGlmKHBsLmxlbmd0aCA9PSAyKXtcblx0XHRcdG5vZGUucHJlZml4ID0gcGxbMF07XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHBsWzFdO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly9lbC5wcmVmaXggPSBudWxsO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdH1cblx0XHRyZXR1cm4gbm9kZTtcblx0fVxufTtcbl9leHRlbmRzKERvY3VtZW50LE5vZGUpO1xuXG5cbmZ1bmN0aW9uIEVsZW1lbnQoKSB7XG5cdHRoaXMuX25zTWFwID0ge307XG59O1xuRWxlbWVudC5wcm90b3R5cGUgPSB7XG5cdG5vZGVUeXBlIDogRUxFTUVOVF9OT0RFLFxuXHRoYXNBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpIT1udWxsO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKTtcblx0XHRyZXR1cm4gYXR0ciAmJiBhdHRyLnZhbHVlIHx8ICcnO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSk7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZSA6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gXCJcIiArIHZhbHVlO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuXHR9LFxuXHRyZW1vdmVBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKVxuXHRcdGF0dHIgJiYgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHIpO1xuXHR9LFxuXHRcblx0Ly9mb3VyIHJlYWwgb3BlYXJ0aW9uIG1ldGhvZFxuXHRhcHBlbmRDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCl7XG5cdFx0aWYobmV3Q2hpbGQubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpe1xuXHRcdFx0cmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLG51bGwpO1xuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuIF9hcHBlbmRTaW5nbGVDaGlsZCh0aGlzLG5ld0NoaWxkKTtcblx0XHR9XG5cdH0sXG5cdHNldEF0dHJpYnV0ZU5vZGUgOiBmdW5jdGlvbihuZXdBdHRyKXtcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbShuZXdBdHRyKTtcblx0fSxcblx0c2V0QXR0cmlidXRlTm9kZU5TIDogZnVuY3Rpb24obmV3QXR0cil7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zZXROYW1lZEl0ZW1OUyhuZXdBdHRyKTtcblx0fSxcblx0cmVtb3ZlQXR0cmlidXRlTm9kZSA6IGZ1bmN0aW9uKG9sZEF0dHIpe1xuXHRcdC8vY29uc29sZS5sb2codGhpcyA9PSBvbGRBdHRyLm93bmVyRWxlbWVudClcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnJlbW92ZU5hbWVkSXRlbShvbGRBdHRyLm5vZGVOYW1lKTtcblx0fSxcblx0Ly9nZXQgcmVhbCBhdHRyaWJ1dGUgbmFtZSxhbmQgcmVtb3ZlIGl0IGJ5IHJlbW92ZUF0dHJpYnV0ZU5vZGVcblx0cmVtb3ZlQXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0dmFyIG9sZCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKTtcblx0XHRvbGQgJiYgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOb2RlKG9sZCk7XG5cdH0sXG5cdFxuXHRoYXNBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIT1udWxsO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKTtcblx0XHRyZXR1cm4gYXR0ciAmJiBhdHRyLnZhbHVlIHx8ICcnO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSwgdmFsdWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSk7XG5cdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gXCJcIiArIHZhbHVlO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOb2RlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdH0sXG5cdFxuXHRnZXRFbGVtZW50c0J5VGFnTmFtZSA6IGZ1bmN0aW9uKHRhZ05hbWUpe1xuXHRcdHJldHVybiBuZXcgTGl2ZU5vZGVMaXN0KHRoaXMsZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdF92aXNpdE5vZGUoYmFzZSxmdW5jdGlvbihub2RlKXtcblx0XHRcdFx0aWYobm9kZSAhPT0gYmFzZSAmJiBub2RlLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSAmJiAodGFnTmFtZSA9PT0gJyonIHx8IG5vZGUudGFnTmFtZSA9PSB0YWdOYW1lKSl7XG5cdFx0XHRcdFx0bHMucHVzaChub2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbHM7XG5cdFx0fSk7XG5cdH0sXG5cdGdldEVsZW1lbnRzQnlUYWdOYW1lTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIG5ldyBMaXZlTm9kZUxpc3QodGhpcyxmdW5jdGlvbihiYXNlKXtcblx0XHRcdHZhciBscyA9IFtdO1xuXHRcdFx0X3Zpc2l0Tm9kZShiYXNlLGZ1bmN0aW9uKG5vZGUpe1xuXHRcdFx0XHRpZihub2RlICE9PSBiYXNlICYmIG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiAobmFtZXNwYWNlVVJJID09PSAnKicgfHwgbm9kZS5uYW1lc3BhY2VVUkkgPT09IG5hbWVzcGFjZVVSSSkgJiYgKGxvY2FsTmFtZSA9PT0gJyonIHx8IG5vZGUubG9jYWxOYW1lID09IGxvY2FsTmFtZSkpe1xuXHRcdFx0XHRcdGxzLnB1c2gobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxzO1xuXHRcdFx0XG5cdFx0fSk7XG5cdH1cbn07XG5Eb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZTtcbkRvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUztcblxuXG5fZXh0ZW5kcyhFbGVtZW50LE5vZGUpO1xuZnVuY3Rpb24gQXR0cigpIHtcbn07XG5BdHRyLnByb3RvdHlwZS5ub2RlVHlwZSA9IEFUVFJJQlVURV9OT0RFO1xuX2V4dGVuZHMoQXR0cixOb2RlKTtcblxuXG5mdW5jdGlvbiBDaGFyYWN0ZXJEYXRhKCkge1xufTtcbkNoYXJhY3RlckRhdGEucHJvdG90eXBlID0ge1xuXHRkYXRhIDogJycsXG5cdHN1YnN0cmluZ0RhdGEgOiBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5zdWJzdHJpbmcob2Zmc2V0LCBvZmZzZXQrY291bnQpO1xuXHR9LFxuXHRhcHBlbmREYXRhOiBmdW5jdGlvbih0ZXh0KSB7XG5cdFx0dGV4dCA9IHRoaXMuZGF0YSt0ZXh0O1xuXHRcdHRoaXMubm9kZVZhbHVlID0gdGhpcy5kYXRhID0gdGV4dDtcblx0XHR0aGlzLmxlbmd0aCA9IHRleHQubGVuZ3RoO1xuXHR9LFxuXHRpbnNlcnREYXRhOiBmdW5jdGlvbihvZmZzZXQsdGV4dCkge1xuXHRcdHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LDAsdGV4dCk7XG5cdFxuXHR9LFxuXHRhcHBlbmRDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEV4Y2VwdGlvbk1lc3NhZ2VbSElFUkFSQ0hZX1JFUVVFU1RfRVJSXSlcblx0fSxcblx0ZGVsZXRlRGF0YTogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuXHRcdHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LGNvdW50LFwiXCIpO1xuXHR9LFxuXHRyZXBsYWNlRGF0YTogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCwgdGV4dCkge1xuXHRcdHZhciBzdGFydCA9IHRoaXMuZGF0YS5zdWJzdHJpbmcoMCxvZmZzZXQpO1xuXHRcdHZhciBlbmQgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKG9mZnNldCtjb3VudCk7XG5cdFx0dGV4dCA9IHN0YXJ0ICsgdGV4dCArIGVuZDtcblx0XHR0aGlzLm5vZGVWYWx1ZSA9IHRoaXMuZGF0YSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0fVxufVxuX2V4dGVuZHMoQ2hhcmFjdGVyRGF0YSxOb2RlKTtcbmZ1bmN0aW9uIFRleHQoKSB7XG59O1xuVGV4dC5wcm90b3R5cGUgPSB7XG5cdG5vZGVOYW1lIDogXCIjdGV4dFwiLFxuXHRub2RlVHlwZSA6IFRFWFRfTk9ERSxcblx0c3BsaXRUZXh0IDogZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdFx0dmFyIHRleHQgPSB0aGlzLmRhdGE7XG5cdFx0dmFyIG5ld1RleHQgPSB0ZXh0LnN1YnN0cmluZyhvZmZzZXQpO1xuXHRcdHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBvZmZzZXQpO1xuXHRcdHRoaXMuZGF0YSA9IHRoaXMubm9kZVZhbHVlID0gdGV4dDtcblx0XHR0aGlzLmxlbmd0aCA9IHRleHQubGVuZ3RoO1xuXHRcdHZhciBuZXdOb2RlID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5ld1RleHQpO1xuXHRcdGlmKHRoaXMucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHRoaXMubmV4dFNpYmxpbmcpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3Tm9kZTtcblx0fVxufVxuX2V4dGVuZHMoVGV4dCxDaGFyYWN0ZXJEYXRhKTtcbmZ1bmN0aW9uIENvbW1lbnQoKSB7XG59O1xuQ29tbWVudC5wcm90b3R5cGUgPSB7XG5cdG5vZGVOYW1lIDogXCIjY29tbWVudFwiLFxuXHRub2RlVHlwZSA6IENPTU1FTlRfTk9ERVxufVxuX2V4dGVuZHMoQ29tbWVudCxDaGFyYWN0ZXJEYXRhKTtcblxuZnVuY3Rpb24gQ0RBVEFTZWN0aW9uKCkge1xufTtcbkNEQVRBU2VjdGlvbi5wcm90b3R5cGUgPSB7XG5cdG5vZGVOYW1lIDogXCIjY2RhdGEtc2VjdGlvblwiLFxuXHRub2RlVHlwZSA6IENEQVRBX1NFQ1RJT05fTk9ERVxufVxuX2V4dGVuZHMoQ0RBVEFTZWN0aW9uLENoYXJhY3RlckRhdGEpO1xuXG5cbmZ1bmN0aW9uIERvY3VtZW50VHlwZSgpIHtcbn07XG5Eb2N1bWVudFR5cGUucHJvdG90eXBlLm5vZGVUeXBlID0gRE9DVU1FTlRfVFlQRV9OT0RFO1xuX2V4dGVuZHMoRG9jdW1lbnRUeXBlLE5vZGUpO1xuXG5mdW5jdGlvbiBOb3RhdGlvbigpIHtcbn07XG5Ob3RhdGlvbi5wcm90b3R5cGUubm9kZVR5cGUgPSBOT1RBVElPTl9OT0RFO1xuX2V4dGVuZHMoTm90YXRpb24sTm9kZSk7XG5cbmZ1bmN0aW9uIEVudGl0eSgpIHtcbn07XG5FbnRpdHkucHJvdG90eXBlLm5vZGVUeXBlID0gRU5USVRZX05PREU7XG5fZXh0ZW5kcyhFbnRpdHksTm9kZSk7XG5cbmZ1bmN0aW9uIEVudGl0eVJlZmVyZW5jZSgpIHtcbn07XG5FbnRpdHlSZWZlcmVuY2UucHJvdG90eXBlLm5vZGVUeXBlID0gRU5USVRZX1JFRkVSRU5DRV9OT0RFO1xuX2V4dGVuZHMoRW50aXR5UmVmZXJlbmNlLE5vZGUpO1xuXG5mdW5jdGlvbiBEb2N1bWVudEZyYWdtZW50KCkge1xufTtcbkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLm5vZGVOYW1lID1cdFwiI2RvY3VtZW50LWZyYWdtZW50XCI7XG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5ub2RlVHlwZSA9XHRET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xuX2V4dGVuZHMoRG9jdW1lbnRGcmFnbWVudCxOb2RlKTtcblxuXG5mdW5jdGlvbiBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oKSB7XG59XG5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLm5vZGVUeXBlID0gUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFO1xuX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLE5vZGUpO1xuZnVuY3Rpb24gWE1MU2VyaWFsaXplcigpe31cblhNTFNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZVRvU3RyaW5nID0gZnVuY3Rpb24obm9kZSxpc0h0bWwsbm9kZUZpbHRlcil7XG5cdHJldHVybiBub2RlU2VyaWFsaXplVG9TdHJpbmcuY2FsbChub2RlLGlzSHRtbCxub2RlRmlsdGVyKTtcbn1cbk5vZGUucHJvdG90eXBlLnRvU3RyaW5nID0gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nO1xuZnVuY3Rpb24gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nKGlzSHRtbCxub2RlRmlsdGVyKXtcblx0dmFyIGJ1ZiA9IFtdO1xuXHR2YXIgcmVmTm9kZSA9IHRoaXMubm9kZVR5cGUgPT0gOT90aGlzLmRvY3VtZW50RWxlbWVudDp0aGlzO1xuXHR2YXIgcHJlZml4ID0gcmVmTm9kZS5wcmVmaXg7XG5cdHZhciB1cmkgPSByZWZOb2RlLm5hbWVzcGFjZVVSSTtcblx0XG5cdGlmKHVyaSAmJiBwcmVmaXggPT0gbnVsbCl7XG5cdFx0Ly9jb25zb2xlLmxvZyhwcmVmaXgpXG5cdFx0dmFyIHByZWZpeCA9IHJlZk5vZGUubG9va3VwUHJlZml4KHVyaSk7XG5cdFx0aWYocHJlZml4ID09IG51bGwpe1xuXHRcdFx0Ly9pc0hUTUwgPSB0cnVlO1xuXHRcdFx0dmFyIHZpc2libGVOYW1lc3BhY2VzPVtcblx0XHRcdHtuYW1lc3BhY2U6dXJpLHByZWZpeDpudWxsfVxuXHRcdFx0Ly97bmFtZXNwYWNlOnVyaSxwcmVmaXg6Jyd9XG5cdFx0XHRdXG5cdFx0fVxuXHR9XG5cdHNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMsYnVmLGlzSHRtbCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0Ly9jb25zb2xlLmxvZygnIyMjJyx0aGlzLm5vZGVUeXBlLHVyaSxwcmVmaXgsYnVmLmpvaW4oJycpKVxuXHRyZXR1cm4gYnVmLmpvaW4oJycpO1xufVxuZnVuY3Rpb24gbmVlZE5hbWVzcGFjZURlZmluZShub2RlLGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpIHtcblx0dmFyIHByZWZpeCA9IG5vZGUucHJlZml4fHwnJztcblx0dmFyIHVyaSA9IG5vZGUubmFtZXNwYWNlVVJJO1xuXHRpZiAoIXByZWZpeCAmJiAhdXJpKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHByZWZpeCA9PT0gXCJ4bWxcIiAmJiB1cmkgPT09IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIgXG5cdFx0fHwgdXJpID09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycpe1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0dmFyIGkgPSB2aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGggXG5cdC8vY29uc29sZS5sb2coJ0BAQEAnLG5vZGUudGFnTmFtZSxwcmVmaXgsdXJpLHZpc2libGVOYW1lc3BhY2VzKVxuXHR3aGlsZSAoaS0tKSB7XG5cdFx0dmFyIG5zID0gdmlzaWJsZU5hbWVzcGFjZXNbaV07XG5cdFx0Ly8gZ2V0IG5hbWVzcGFjZSBwcmVmaXhcblx0XHQvL2NvbnNvbGUubG9nKG5vZGUubm9kZVR5cGUsbm9kZS50YWdOYW1lLG5zLnByZWZpeCxwcmVmaXgpXG5cdFx0aWYgKG5zLnByZWZpeCA9PSBwcmVmaXgpe1xuXHRcdFx0cmV0dXJuIG5zLm5hbWVzcGFjZSAhPSB1cmk7XG5cdFx0fVxuXHR9XG5cdC8vY29uc29sZS5sb2coaXNIVE1MLHVyaSxwcmVmaXg9PScnKVxuXHQvL2lmKGlzSFRNTCAmJiBwcmVmaXggPT1udWxsICYmIHVyaSA9PSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcpe1xuXHQvL1x0cmV0dXJuIGZhbHNlO1xuXHQvL31cblx0Ly9ub2RlLmZsYWcgPSAnMTExMTEnXG5cdC8vY29uc29sZS5lcnJvcigzLHRydWUsbm9kZS5mbGFnLG5vZGUucHJlZml4LG5vZGUubmFtZXNwYWNlVVJJKVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVRvU3RyaW5nKG5vZGUsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKXtcblx0aWYobm9kZUZpbHRlcil7XG5cdFx0bm9kZSA9IG5vZGVGaWx0ZXIobm9kZSk7XG5cdFx0aWYobm9kZSl7XG5cdFx0XHRpZih0eXBlb2Ygbm9kZSA9PSAnc3RyaW5nJyl7XG5cdFx0XHRcdGJ1Zi5wdXNoKG5vZGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fWVsc2V7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vYnVmLnNvcnQuYXBwbHkoYXR0cnMsIGF0dHJpYnV0ZVNvcnRlcik7XG5cdH1cblx0c3dpdGNoKG5vZGUubm9kZVR5cGUpe1xuXHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRpZiAoIXZpc2libGVOYW1lc3BhY2VzKSB2aXNpYmxlTmFtZXNwYWNlcyA9IFtdO1xuXHRcdHZhciBzdGFydFZpc2libGVOYW1lc3BhY2VzID0gdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoO1xuXHRcdHZhciBhdHRycyA9IG5vZGUuYXR0cmlidXRlcztcblx0XHR2YXIgbGVuID0gYXR0cnMubGVuZ3RoO1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR2YXIgbm9kZU5hbWUgPSBub2RlLnRhZ05hbWU7XG5cdFx0XG5cdFx0aXNIVE1MID0gIChodG1sbnMgPT09IG5vZGUubmFtZXNwYWNlVVJJKSB8fGlzSFRNTCBcblx0XHRidWYucHVzaCgnPCcsbm9kZU5hbWUpO1xuXHRcdFxuXHRcdFxuXHRcdFxuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHQvLyBhZGQgbmFtZXNwYWNlcyBmb3IgYXR0cmlidXRlc1xuXHRcdFx0dmFyIGF0dHIgPSBhdHRycy5pdGVtKGkpO1xuXHRcdFx0aWYgKGF0dHIucHJlZml4ID09ICd4bWxucycpIHtcblx0XHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogYXR0ci5sb2NhbE5hbWUsIG5hbWVzcGFjZTogYXR0ci52YWx1ZSB9KTtcblx0XHRcdH1lbHNlIGlmKGF0dHIubm9kZU5hbWUgPT0gJ3htbG5zJyl7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6ICcnLCBuYW1lc3BhY2U6IGF0dHIudmFsdWUgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHR2YXIgYXR0ciA9IGF0dHJzLml0ZW0oaSk7XG5cdFx0XHRpZiAobmVlZE5hbWVzcGFjZURlZmluZShhdHRyLGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpKSB7XG5cdFx0XHRcdHZhciBwcmVmaXggPSBhdHRyLnByZWZpeHx8Jyc7XG5cdFx0XHRcdHZhciB1cmkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcblx0XHRcdFx0dmFyIG5zID0gcHJlZml4ID8gJyB4bWxuczonICsgcHJlZml4IDogXCIgeG1sbnNcIjtcblx0XHRcdFx0YnVmLnB1c2gobnMsICc9XCInICwgdXJpICwgJ1wiJyk7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6IHByZWZpeCwgbmFtZXNwYWNlOnVyaSB9KTtcblx0XHRcdH1cblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGF0dHIsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0XHR9XG5cdFx0Ly8gYWRkIG5hbWVzcGFjZSBmb3IgY3VycmVudCBub2RlXHRcdFxuXHRcdGlmIChuZWVkTmFtZXNwYWNlRGVmaW5lKG5vZGUsaXNIVE1MLCB2aXNpYmxlTmFtZXNwYWNlcykpIHtcblx0XHRcdHZhciBwcmVmaXggPSBub2RlLnByZWZpeHx8Jyc7XG5cdFx0XHR2YXIgdXJpID0gbm9kZS5uYW1lc3BhY2VVUkk7XG5cdFx0XHR2YXIgbnMgPSBwcmVmaXggPyAnIHhtbG5zOicgKyBwcmVmaXggOiBcIiB4bWxuc1wiO1xuXHRcdFx0YnVmLnB1c2gobnMsICc9XCInICwgdXJpICwgJ1wiJyk7XG5cdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiBwcmVmaXgsIG5hbWVzcGFjZTp1cmkgfSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoaWxkIHx8IGlzSFRNTCAmJiAhL14oPzptZXRhfGxpbmt8aW1nfGJyfGhyfGlucHV0KSQvaS50ZXN0KG5vZGVOYW1lKSl7XG5cdFx0XHRidWYucHVzaCgnPicpO1xuXHRcdFx0Ly9pZiBpcyBjZGF0YSBjaGlsZCBub2RlXG5cdFx0XHRpZihpc0hUTUwgJiYgL15zY3JpcHQkL2kudGVzdChub2RlTmFtZSkpe1xuXHRcdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdFx0aWYoY2hpbGQuZGF0YSl7XG5cdFx0XHRcdFx0XHRidWYucHVzaChjaGlsZC5kYXRhKTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGJ1Zi5wdXNoKCc8Lycsbm9kZU5hbWUsJz4nKTtcblx0XHR9ZWxzZXtcblx0XHRcdGJ1Zi5wdXNoKCcvPicpO1xuXHRcdH1cblx0XHQvLyByZW1vdmUgYWRkZWQgdmlzaWJsZSBuYW1lc3BhY2VzXG5cdFx0Ly92aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGggPSBzdGFydFZpc2libGVOYW1lc3BhY2VzO1xuXHRcdHJldHVybjtcblx0Y2FzZSBET0NVTUVOVF9OT0RFOlxuXHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdGNhc2UgQVRUUklCVVRFX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCcgJyxub2RlLm5hbWUsJz1cIicsbm9kZS52YWx1ZS5yZXBsYWNlKC9bPCZcIl0vZyxfeG1sRW5jb2RlciksJ1wiJyk7XG5cdGNhc2UgVEVYVF9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaChub2RlLmRhdGEucmVwbGFjZSgvWzwmXS9nLF94bWxFbmNvZGVyKSk7XG5cdGNhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggJzwhW0NEQVRBWycsbm9kZS5kYXRhLCddXT4nKTtcblx0Y2FzZSBDT01NRU5UX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCBcIjwhLS1cIixub2RlLmRhdGEsXCItLT5cIik7XG5cdGNhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuXHRcdHZhciBwdWJpZCA9IG5vZGUucHVibGljSWQ7XG5cdFx0dmFyIHN5c2lkID0gbm9kZS5zeXN0ZW1JZDtcblx0XHRidWYucHVzaCgnPCFET0NUWVBFICcsbm9kZS5uYW1lKTtcblx0XHRpZihwdWJpZCl7XG5cdFx0XHRidWYucHVzaCgnIFBVQkxJQyBcIicscHViaWQpO1xuXHRcdFx0aWYgKHN5c2lkICYmIHN5c2lkIT0nLicpIHtcblx0XHRcdFx0YnVmLnB1c2goICdcIiBcIicsc3lzaWQpO1xuXHRcdFx0fVxuXHRcdFx0YnVmLnB1c2goJ1wiPicpO1xuXHRcdH1lbHNlIGlmKHN5c2lkICYmIHN5c2lkIT0nLicpe1xuXHRcdFx0YnVmLnB1c2goJyBTWVNURU0gXCInLHN5c2lkLCdcIj4nKTtcblx0XHR9ZWxzZXtcblx0XHRcdHZhciBzdWIgPSBub2RlLmludGVybmFsU3Vic2V0O1xuXHRcdFx0aWYoc3ViKXtcblx0XHRcdFx0YnVmLnB1c2goXCIgW1wiLHN1YixcIl1cIik7XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaChcIj5cIik7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0Y2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCBcIjw/XCIsbm9kZS50YXJnZXQsXCIgXCIsbm9kZS5kYXRhLFwiPz5cIik7XG5cdGNhc2UgRU5USVRZX1JFRkVSRU5DRV9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggJyYnLG5vZGUubm9kZU5hbWUsJzsnKTtcblx0Ly9jYXNlIEVOVElUWV9OT0RFOlxuXHQvL2Nhc2UgTk9UQVRJT05fTk9ERTpcblx0ZGVmYXVsdDpcblx0XHRidWYucHVzaCgnPz8nLG5vZGUubm9kZU5hbWUpO1xuXHR9XG59XG5mdW5jdGlvbiBpbXBvcnROb2RlKGRvYyxub2RlLGRlZXApe1xuXHR2YXIgbm9kZTI7XG5cdHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuXHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRub2RlMiA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcblx0XHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRcdC8vdmFyIGF0dHJzID0gbm9kZTIuYXR0cmlidXRlcztcblx0XHQvL3ZhciBsZW4gPSBhdHRycy5sZW5ndGg7XG5cdFx0Ly9mb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0Ly9ub2RlMi5zZXRBdHRyaWJ1dGVOb2RlTlMoaW1wb3J0Tm9kZShkb2MsYXR0cnMuaXRlbShpKSxkZWVwKSk7XG5cdFx0Ly99XG5cdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRicmVhaztcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRkZWVwID0gdHJ1ZTtcblx0XHRicmVhaztcblx0Ly9jYXNlIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcblx0Ly9jYXNlIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTpcblx0Ly8vL2Nhc2UgVEVYVF9OT0RFOlxuXHQvL2Nhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuXHQvL2Nhc2UgQ09NTUVOVF9OT0RFOlxuXHQvL1x0ZGVlcCA9IGZhbHNlO1xuXHQvL1x0YnJlYWs7XG5cdC8vY2FzZSBET0NVTUVOVF9OT0RFOlxuXHQvL2Nhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuXHQvL2Nhbm5vdCBiZSBpbXBvcnRlZC5cblx0Ly9jYXNlIEVOVElUWV9OT0RFOlxuXHQvL2Nhc2UgTk9UQVRJT05fTk9ERe+8mlxuXHQvL2NhbiBub3QgaGl0IGluIGxldmVsM1xuXHQvL2RlZmF1bHQ6dGhyb3cgZTtcblx0fVxuXHRpZighbm9kZTIpe1xuXHRcdG5vZGUyID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOy8vZmFsc2Vcblx0fVxuXHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRub2RlMi5wYXJlbnROb2RlID0gbnVsbDtcblx0aWYoZGVlcCl7XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdG5vZGUyLmFwcGVuZENoaWxkKGltcG9ydE5vZGUoZG9jLGNoaWxkLGRlZXApKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub2RlMjtcbn1cbi8vXG4vL3ZhciBfcmVsYXRpb25NYXAgPSB7Zmlyc3RDaGlsZDoxLGxhc3RDaGlsZDoxLHByZXZpb3VzU2libGluZzoxLG5leHRTaWJsaW5nOjEsXG4vL1x0XHRcdFx0XHRhdHRyaWJ1dGVzOjEsY2hpbGROb2RlczoxLHBhcmVudE5vZGU6MSxkb2N1bWVudEVsZW1lbnQ6MSxkb2N0eXBlLH07XG5mdW5jdGlvbiBjbG9uZU5vZGUoZG9jLG5vZGUsZGVlcCl7XG5cdHZhciBub2RlMiA9IG5ldyBub2RlLmNvbnN0cnVjdG9yKCk7XG5cdGZvcih2YXIgbiBpbiBub2RlKXtcblx0XHR2YXIgdiA9IG5vZGVbbl07XG5cdFx0aWYodHlwZW9mIHYgIT0gJ29iamVjdCcgKXtcblx0XHRcdGlmKHYgIT0gbm9kZTJbbl0pe1xuXHRcdFx0XHRub2RlMltuXSA9IHY7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGlmKG5vZGUuY2hpbGROb2Rlcyl7XG5cdFx0bm9kZTIuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHR9XG5cdG5vZGUyLm93bmVyRG9jdW1lbnQgPSBkb2M7XG5cdHN3aXRjaCAobm9kZTIubm9kZVR5cGUpIHtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcztcblx0XHR2YXIgYXR0cnMyXHQ9IG5vZGUyLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0dmFyIGxlbiA9IGF0dHJzLmxlbmd0aFxuXHRcdGF0dHJzMi5fb3duZXJFbGVtZW50ID0gbm9kZTI7XG5cdFx0Zm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdG5vZGUyLnNldEF0dHJpYnV0ZU5vZGUoY2xvbmVOb2RlKGRvYyxhdHRycy5pdGVtKGkpLHRydWUpKTtcblx0XHR9XG5cdFx0YnJlYWs7O1xuXHRjYXNlIEFUVFJJQlVURV9OT0RFOlxuXHRcdGRlZXAgPSB0cnVlO1xuXHR9XG5cdGlmKGRlZXApe1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRub2RlMi5hcHBlbmRDaGlsZChjbG9uZU5vZGUoZG9jLGNoaWxkLGRlZXApKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub2RlMjtcbn1cblxuZnVuY3Rpb24gX19zZXRfXyhvYmplY3Qsa2V5LHZhbHVlKXtcblx0b2JqZWN0W2tleV0gPSB2YWx1ZVxufVxuLy9kbyBkeW5hbWljXG50cnl7XG5cdGlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSl7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KExpdmVOb2RlTGlzdC5wcm90b3R5cGUsJ2xlbmd0aCcse1xuXHRcdFx0Z2V0OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuJCRsZW5ndGg7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCd0ZXh0Q29udGVudCcse1xuXHRcdFx0Z2V0OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJldHVybiBnZXRUZXh0Q29udGVudCh0aGlzKTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6ZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdHN3aXRjaCh0aGlzLm5vZGVUeXBlKXtcblx0XHRcdFx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0XHRcdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRcdFx0XHR3aGlsZSh0aGlzLmZpcnN0Q2hpbGQpe1xuXHRcdFx0XHRcdFx0dGhpcy5yZW1vdmVDaGlsZCh0aGlzLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihkYXRhIHx8IFN0cmluZyhkYXRhKSl7XG5cdFx0XHRcdFx0XHR0aGlzLmFwcGVuZENoaWxkKHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vVE9ETzpcblx0XHRcdFx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSBkYXRhO1xuXHRcdFx0XHRcdHRoaXMubm9kZVZhbHVlID0gZGF0YTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0XG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQobm9kZSl7XG5cdFx0XHRzd2l0Y2gobm9kZS5ub2RlVHlwZSl7XG5cdFx0XHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRcdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRcdFx0dmFyIGJ1ZiA9IFtdO1xuXHRcdFx0XHRub2RlID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdFx0XHR3aGlsZShub2RlKXtcblx0XHRcdFx0XHRpZihub2RlLm5vZGVUeXBlIT09NyAmJiBub2RlLm5vZGVUeXBlICE9PTgpe1xuXHRcdFx0XHRcdFx0YnVmLnB1c2goZ2V0VGV4dENvbnRlbnQobm9kZSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRub2RlID0gbm9kZS5uZXh0U2libGluZztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYnVmLmpvaW4oJycpO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIG5vZGUubm9kZVZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRfX3NldF9fID0gZnVuY3Rpb24ob2JqZWN0LGtleSx2YWx1ZSl7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHZhbHVlKVxuXHRcdFx0b2JqZWN0WyckJCcra2V5XSA9IHZhbHVlXG5cdFx0fVxuXHR9XG59Y2F0Y2goZSl7Ly9pZThcbn1cblxuLy9pZih0eXBlb2YgcmVxdWlyZSA9PSAnZnVuY3Rpb24nKXtcblx0ZXhwb3J0cy5ET01JbXBsZW1lbnRhdGlvbiA9IERPTUltcGxlbWVudGF0aW9uO1xuXHRleHBvcnRzLlhNTFNlcmlhbGl6ZXIgPSBYTUxTZXJpYWxpemVyO1xuLy99XG4iLCJ2YXIgY2hhcmVuYyA9IHtcbiAgLy8gVVRGLTggZW5jb2RpbmdcbiAgdXRmODoge1xuICAgIC8vIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gY2hhcmVuYy5iaW4uc3RyaW5nVG9CeXRlcyh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIHN0cmluZ1xuICAgIGJ5dGVzVG9TdHJpbmc6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShjaGFyZW5jLmJpbi5ieXRlc1RvU3RyaW5nKGJ5dGVzKSkpO1xuICAgIH1cbiAgfSxcblxuICAvLyBCaW5hcnkgZW5jb2RpbmdcbiAgYmluOiB7XG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKVxuICAgICAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRik7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgc3RyaW5nXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIHN0ciA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICBzdHIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSk7XG4gICAgICByZXR1cm4gc3RyLmpvaW4oJycpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjaGFyZW5jO1xuIiwiLyoqXG4gKiBFbnRyeVN0b3JlIGlzIHRoZSBtYWluIGNsYXNzIHRoYXQgaXMgdXNlZCB0byBjb25uZWN0IHRvIGEgcnVubmluZyBzZXJ2ZXItc2lkZVxuICogRW50cnlTdG9yZSByZXBvc2l0b3J5LlxuICogQGV4cG9ydHMgc3RvcmUvQXV0aFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnlTdG9yZX0gZW50cnlzdG9yZSAtIGEgcmVwb3NpdG9yeSBpbnN0YW5jZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJ5c3RvcmUpIHtcbiAgICB0aGlzLl9lbnRyeVN0b3JlID0gZW50cnlzdG9yZTtcbiAgICB0aGlzLl9saXN0ZW5lckNvdW50ZXIgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsIEZ1bmN0aW9uPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdG9waWNcbiAgICogQHBhcmFtIG9ialxuICAgKi9cbiAgbWVzc2FnZUxpc3RlbmVycyh0b3BpYywgb2JqKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuYyA9PiBmdW5jKHRvcGljLCBvYmopKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGF1dGhlbnRpY2F0aW9uIGxpc3RlbmVyLCBpdCB3aWxsIGJlIG5vdGlmaWVkIG9mIGxvZ2luIGFuZCBsb2dvdXQgZXZlbnRzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgKi9cbiAgYWRkQXV0aExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgaWYgKGxpc3RlbmVyLl9fYWxpZCA9PSBudWxsKSB7XG4gICAgICBsaXN0ZW5lci5fX2FsaWQgPSBgaWR4XyR7dGhpcy5fbGlzdGVuZXJDb3VudGVyfWA7XG4gICAgICB0aGlzLl9saXN0ZW5lckNvdW50ZXIgKz0gMTtcbiAgICB9XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNldChsaXN0ZW5lci5fX2FsaWQsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGF1dGhlbnRpY2F0aW9uIGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyXG4gICAqL1xuICByZW1vdmVBdXRoTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBpZiAobGlzdGVuZXIuX19hbGlkICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5kZWxldGUobGlzdGVuZXIuX19hbGlkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogWWllbGRzIGluZm9ybWF0aW9uIGFib3V0IHdobyBjdXJyZW50bHkgaXMgYXV0aGVudGljYXRlZCBhZ2FpbnN0IHRoZSBFbnRyeVN0b3JlIHJlcG9zaXRvcnkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdG9yZS9FbnRyeUluZm8+fSAtIHVwb24gc3VjY2VzcyBhbiBvYmplY3QgY29udGFpbmluZyBhdHRyaWJ1dGVzIFwidXNlclwiIGJlaW5nXG4gICAqIHRoZSB1c2VybmFtZSwgXCJpZFwiIG9mIHRoZSB1c2VyIGVudHJ5LFxuICAgKiBhbmQgXCJob21lY29udGV4dFwiIGJlaW5nIHRoZSBlbnRyeS1pZCBvZiB0aGUgaG9tZSBjb250ZXh0IGlzIHByb3ZpZGVkLlxuICAgKiBAc2VlIHtAbGluayBzdG9yZS9FbnRyeVN0b3JlI2F1dGggYXV0aH1cbiAgICogQHNlZSB7QGxpbmsgc3RvcmUvRW50cnlTdG9yZSNsb2dvdXQgbG9nb3V0fVxuICAgKi9cbiAgYXN5bmMgZ2V0VXNlckluZm8oZm9yY2VMb29rdXAgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLnVzZXJJbmZvICYmICFmb3JjZUxvb2t1cCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnVzZXJJbmZvKTtcbiAgICB9XG5cbiAgICB0aGlzLnVzZXJJbmZvID0gYXdhaXQgdGhpcy5fZW50cnlTdG9yZS5oYW5kbGVBc3luYyhcbiAgICAgIHRoaXMuX2VudHJ5U3RvcmUuZ2V0UkVTVCgpLmdldChgJHt0aGlzLl9lbnRyeVN0b3JlLl9iYXNlVVJJfWF1dGgvdXNlcmAsIG51bGwsIHRydWUpLCAnZ2V0VXNlckluZm8nKTtcblxuICAgIHJldHVybiB0aGlzLnVzZXJJbmZvO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdG9yZS9FbnRyeT59IG9uIHN1Y2Nlc3MgdGhlIGVudHJ5IGZvciB0aGUgY3VycmVudGx5IHNpZ25lZCBpbiB1c2VyIGlzIHByb3ZpZGVkLlxuICAgKi9cbiAgYXN5bmMgZ2V0VXNlckVudHJ5KGZvcmNlTG9va3VwID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy51c2VyRW50cnkgJiYgIWZvcmNlTG9va3VwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudXNlckVudHJ5KTtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VySW5mbyA9IGF3YWl0IHRoaXMuZ2V0VXNlckluZm8oZm9yY2VMb29rdXApO1xuICAgIHRoaXMudXNlckVudHJ5ID0gYXdhaXQgdGhpcy5fZW50cnlTdG9yZS5nZXRFbnRyeSh0aGlzLl9lbnRyeVN0b3JlLmdldEVudHJ5VVJJKCdfcHJpbmNpcGFscycsIHVzZXJJbmZvLmlkKSwge1xuICAgICAgYXN5bmNDb250ZXh0OiAnZ2V0VXNlckVudHJ5JyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLnVzZXJFbnRyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdXRoZW50aWNhdGUgdXNpbmcgY3JlZGVudGlhbHMgY29udGFpbmluZyBhIHVzZXIsIGEgcGFzc3dvcmQgYW5kIGFuIG9wdGlvbmFsIG1heEFnZVxuICAgKiBnaXZlbiBpbiBzZWNvbmRzLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlclxuICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICogQHBhcmFtIG1heEFnZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGFzeW5jIGxvZ2luKHVzZXIsIHBhc3N3b3JkLCBtYXhBZ2UpIHtcbiAgICBpZiAodGhpcy51c2VySW5mbyAmJiB0aGlzLnVzZXJJbmZvLnVzZXIgPT09IHVzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFVzZXJJbmZvKCk7XG4gICAgfVxuICAgIGNvbnN0IGNyZWRlbnRpYWxzID0ge1xuICAgICAgYmFzZTogdGhpcy5fZW50cnlTdG9yZS5nZXRCYXNlVVJJKCksXG4gICAgICB1c2VyLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBtYXhBZ2UsXG4gICAgfTtcblxuICAgIGNvbnN0IGF1dGggPSBhd2FpdCB0aGlzLl9lbnRyeVN0b3JlLmhhbmRsZUFzeW5jKHRoaXMuX2VudHJ5U3RvcmUuZ2V0UkVTVCgpLmF1dGgoY3JlZGVudGlhbHMpLCAnbG9naW4nKTtcbiAgICBpZiAodHlwZW9mIGF1dGggPT09ICdvYmplY3QnICYmIGF1dGgudXNlcikge1xuICAgICAgcmV0dXJuIGF1dGg7XG4gICAgfVxuICAgIHRoaXMudXNlckluZm8gPSBhd2FpdCB0aGlzLl9lbnRyeVN0b3JlLmdldFJFU1QoKS5nZXQoYCR7dGhpcy5fZW50cnlTdG9yZS5fYmFzZVVSSX1hdXRoL3VzZXJgLCBudWxsLCB0cnVlKTtcblxuICAgIGRlbGV0ZSB0aGlzLnVzZXJFbnRyeTtcbiAgICB0aGlzLl9lbnRyeVN0b3JlLmdldENhY2hlKCkuYWxsTmVlZFJlZnJlc2goKTtcblxuICAgIHRoaXMubWVzc2FnZUxpc3RlbmVycygnbG9naW4nLCB0aGlzLnVzZXJJbmZvKTtcblxuICAgIHJldHVybiB0aGlzLnVzZXJJbmZvO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ291dCB0aGUgY3VycmVudGx5IGF1dGhvcml6ZWQgdXNlci5cbiAgICogQHJldHVybnMge1Byb21pc2UuPHt1c2VyLCBpZH0+fSBUaGUgZ3Vlc3QgdXNlciBpbmZvXG4gICAqL1xuICBhc3luYyBsb2dvdXQoKSB7XG4gICAgaWYgKHRoaXMudXNlckluZm8gJiYgdGhpcy51c2VySW5mby51c2VyID09PSAnZ3Vlc3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRVc2VySW5mbygpO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZUFzeW5jIHJldHVybnMgdGhlIG9yaWdpbmFsIHByb21pc2UgcGFzc2VkXG4gICAgYXdhaXQgdGhpcy5fZW50cnlTdG9yZS5oYW5kbGVBc3luYyh0aGlzLl9lbnRyeVN0b3JlLmdldFJFU1QoKS5hdXRoKHtcbiAgICAgIGJhc2U6IHRoaXMuX2VudHJ5U3RvcmUuZ2V0QmFzZVVSSSgpLFxuICAgICAgbG9nb3V0OiB0cnVlLFxuICAgIH0pLCAnbG9nb3V0Jyk7XG5cbiAgICBkZWxldGUgdGhpcy51c2VyRW50cnk7XG4gICAgdGhpcy5fZW50cnlTdG9yZS5nZXRDYWNoZSgpLmFsbE5lZWRSZWZyZXNoKCk7XG5cbiAgICB0aGlzLnVzZXJJbmZvID0geyB1c2VyOiAnZ3Vlc3QnLCBpZDogJ19ndWVzdCcgfTtcbiAgICB0aGlzLm1lc3NhZ2VMaXN0ZW5lcnMoJ2xvZ291dCcsIHRoaXMudXNlckluZm8pO1xuXG4gICAgcmV0dXJuIHRoaXMudXNlckluZm87XG4gIH1cbn1cbiIsIi8qKlxuICogQ2FjaGVzIGxvYWRlZCBlbnRyaWVzIGFuZCBrZWVwcyB0cmFjayBvZiB3aGljaCBlbnRyaWVzIHRoYXQgbmVlZCB0byBiZSB1cGRhdGVkIChyZWZyZXNoZWQpLlxuICogVGhlIGNhY2hlIGFsc28gcHJvdmlkZXMgYSBsaXN0ZW5lciBmdW5jdGlvbmFsaXR5IHRoYXQgYWxsb3dzIHlvdSB0byBiZSBub3RpZmllZCBvZlxuICogd2hlbiBlbnRyaWVzIGFyZSB1cGRhdGVkLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL0NhY2hlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhY2hlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsIEZ1bmN0aW9uPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2xpc3RlbmVyc0lkeCA9IG5ldyBNYXAoKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBzdG9yZS9FbnRyeT59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9jYWNoZUlkeCA9IG5ldyBNYXAoKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBTZXQ8c3RvcmUvRW50cnk+Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2NhY2hlSWR4UmVzb3VyY2UgPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZywgb2JqZWN0Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2NhY2hlQ3RybCA9IG5ldyBNYXAoKTtcblxuICAgIHRoaXMuX2xpc3RlbmVyQ291bnRlciA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG9yIHVwZGF0ZSB0aGUgZW50cnkgdG8gdGhlIGNhY2hlLlxuICAgKiBBbGwgbGlzdGVuZXJzIHdpbGwgYmUgbm90aWZpZWQgdW5sZXNzIHNpbGVudGx5IGlzIHNwZWNpZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeX0gZW50cnlcbiAgICogQHBhcmFtIHtCb29sZWFuPX0gc2lsZW50bHkgLSBsaXN0ZW5lcnMgd2lsbCBiZSBub3RpZmllZCB1bmxlc3MgdHJ1ZSBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICBjYWNoZShlbnRyeSwgc2lsZW50bHkpIHtcbiAgICBjb25zdCBlbnRyeVVSSSA9IGVudHJ5LmdldFVSSSgpO1xuICAgIGNvbnN0IHByZXZpb3VzbHlDYWNoZWQgPSB0aGlzLl9jYWNoZUlkeC5oYXMoZW50cnlVUkkpO1xuXG4gICAgdGhpcy5fY2FjaGVJZHguc2V0KGVudHJ5VVJJLCBlbnRyeSk7XG5cbiAgICBjb25zdCBlbnRyeVJVUkkgPSBlbnRyeS5nZXRSZXNvdXJjZVVSSSgpO1xuICAgIGNvbnN0IGVudHJpZXNTZXQgPSB0aGlzLl9jYWNoZUlkeFJlc291cmNlLmhhcyhlbnRyeVJVUkkpID8gdGhpcy5fY2FjaGVJZHhSZXNvdXJjZS5nZXQoZW50cnlSVVJJKSA6IG5ldyBTZXQoKTtcblxuICAgIGlmICghZW50cmllc1NldC5oYXMoZW50cnkpKSB7XG4gICAgICBlbnRyaWVzU2V0LmFkZChlbnRyeSk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FjaGVJZHhSZXNvdXJjZS5zZXQoZW50cnlSVVJJLCBlbnRyaWVzU2V0KTtcblxuICAgIHRoaXMuX2NhY2hlQ3RybC5zZXQoZW50cnlVUkksIHtcbiAgICAgIGRhdGU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgIH0pO1xuXG4gICAgaWYgKHByZXZpb3VzbHlDYWNoZWQgJiYgc2lsZW50bHkgIT09IHRydWUpIHtcbiAgICAgIHRoaXMubWVzc2FnZUxpc3RlbmVycygncmVmcmVzaGVkJywgZW50cnkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc2luZ2xlIGVudHJ5IGZyb20gdGhlIGNhY2hlLlxuICAgKiBAcGFyYW0ge3N0b3JlL0VudHJ5fSBlbnRyeSB0aGUgZW50cnkgdG8gcmVtb3ZlLlxuICAgKi9cbiAgdW5DYWNoZShlbnRyeSkge1xuICAgIGNvbnN0IGVudHJ5VVJJID0gZW50cnkuZ2V0VVJJKCk7XG4gICAgY29uc3QgZW50cnlSVVJJID0gZW50cnkuZ2V0UmVzb3VyY2VVUkkoKTtcblxuICAgIHRoaXMuX2NhY2hlSWR4LmRlbGV0ZShlbnRyeVVSSSk7XG4gICAgY29uc3QgZW50cmllc1NldCA9IHRoaXMuX2NhY2hlSWR4UmVzb3VyY2UuZ2V0KGVudHJ5UlVSSSk7XG5cbiAgICBpZiAoZW50cmllc1NldC5zaXplID4gMCkge1xuICAgICAgZW50cmllc1NldC5kZWxldGUoZW50cnkpO1xuICAgICAgaWYgKGVudHJpZXNTZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9jYWNoZUlkeFJlc291cmNlLmRlbGV0ZShlbnRyeVJVUkkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrcyBhbiBlbnRyeSBhcyBpbiBuZWVkIG9mIHJlZnJlc2ggZnJvbSB0aGUgc3RvcmUuXG4gICAqIEFsbCBsaXN0ZW5lcnMgYXJlIG5vdGlmaWVkIG9mIHRoZSBlbnRyeSBub3cgYmVpbmcgaW4gbmVlZCBvZiByZWZyZXNoaW5nIHVubGVzc1xuICAgKiBzaWxlbnRseSBpcyBzZXQgdG8gdHJ1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeX0gZW50cnlcbiAgICogQHBhcmFtIHtCb29sZWFuPX0gc2lsZW50bHlcbiAgICovXG4gIHNldFJlZnJlc2hOZWVkZWQoZW50cnksIHNpbGVudGx5KSB7XG4gICAgY29uc3QgZW50cnlVUkkgPSBlbnRyeS5nZXRVUkkoKTtcbiAgICBjb25zdCBjdHJsID0gdGhpcy5fY2FjaGVDdHJsLmdldChlbnRyeVVSSSk7XG4gICAgaWYgKGN0cmwgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBjYWNoZSBjb250cm9sIG9mIGV4aXN0aW5nIGVudHJ5OiAke2VudHJ5VVJJfWApO1xuICAgIH1cbiAgICBjdHJsLnN0YWxlID0gdHJ1ZTtcbiAgICBpZiAoc2lsZW50bHkgIT09IHRydWUpIHtcbiAgICAgIHRoaXMubWVzc2FnZUxpc3RlbmVycygnbmVlZFJlZnJlc2gnLCBlbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgbWV0aG9kIGZvciBjYWNoaW5nIG11bHRpcGxlIGVudHJpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RvcmUvRW50cnlbXX0gZW50cnlBcnJcbiAgICogQHBhcmFtIHtCb29sZWFuPX0gc2lsZW50bHlcbiAgICogQHNlZSBzdG9yZS9DYWNoZSNjYWNoZVxuICAgKi9cbiAgY2FjaGVBbGwoZW50cnlBcnIsIHNpbGVudGx5KSB7XG4gICAgZW50cnlBcnIuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgIHRoaXMuY2FjaGUoZW50cnksIHNpbGVudGx5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgZW50cnkgZnJvbSBpdCdzIFVSSS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVudHJ5VVJJXG4gICAqIEByZXR1cm5zIHtzdG9yZS9FbnRyeXx1bmRlZmluZWR9XG4gICAqL1xuICBnZXQoZW50cnlVUkkpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVJZHguZ2V0KGVudHJ5VVJJKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhbGwgZW50cmllcyB0aGF0IGhhdmUgdGhlIHNwZWNpZmllZCB1cmkgYXMgcmVzb3VyY2UuXG4gICAqIE5vdGUgdGhhdCBzaW5jZSBzZXZlcmFsIGVudHJpZXMgKGUuZy4gbGlua3MpIG1heSBoYXZlIHRoZSBzYW1lIHVyaVxuICAgKiBhcyByZXNvdXJjZSB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIGFycmF5LiBIb3dldmVyLCBpbiBtYW55IHNpdHVhdGlvbnNcbiAgICogdGhlcmUgd2lsbCBiZSB6ZXJvIG9yIG9uZSBlbnRyeSBwZXIgdXJpLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gICAqIEByZXR1cm5zIHtTZXQ8c3RvcmUvRW50cnk+fSBhbHdheXMgcmV0dXJucyBhIHNldCwgbWF5IGJlIGVtcHR5IHRob3VnaC5cbiAgICovXG4gIGdldEJ5UmVzb3VyY2VVUkkodXJpKSB7XG4gICAgcmV0dXJuIG5ldyBTZXQodGhpcy5fY2FjaGVJZHhSZXNvdXJjZS5nZXQodXJpKSk7XG4gIH1cblxuICAvKipcbiAgICogVGVsbHMgd2hldGhlciB0aGUgZW50cnkgaXMgaW4gbmVlZCBvZiBhIHJlZnJlc2ggZnJvbSB0aGUgcmVwb3NpdG9yeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeX0gZW50cnlcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBuZWVkUmVmcmVzaChlbnRyeSkge1xuICAgIGNvbnN0IGVudHJ5VVJJID0gZW50cnkuZ2V0VVJJKCk7XG4gICAgY29uc3QgY3RybCA9IHRoaXMuX2NhY2hlQ3RybC5nZXQoZW50cnlVUkkpO1xuICAgIGlmIChjdHJsID09IG51bGwpIHtcbiAgICAgIHRocm93IEVycm9yKGBObyBjYWNoZSBjb250cm9sIG9mIGV4aXN0aW5nIGVudHJ5OiAke2VudHJ5VVJJfWApO1xuICAgIH1cbiAgICByZXR1cm4gY3RybC5zdGFsZSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgKi9cbiAgYWRkQ2FjaGVVcGRhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIGlmIChsaXN0ZW5lci5fX2NsaWQgIT0gbnVsbCkge1xuICAgICAgbGlzdGVuZXIuX19jbGlkID0gYGlkeF8ke3RoaXMuX2xpc3RlbmVyQ291bnRlcn1gO1xuICAgICAgdGhpcy5fbGlzdGVuZXJDb3VudGVyICs9IDE7XG4gICAgfVxuICAgIHRoaXMuX2xpc3RlbmVyc0lkeC5zZXQobGlzdGVuZXIuX19jbGlkLCBsaXN0ZW5lcik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAgICovXG4gIHJlbW92ZUNhY2hlVXBkYXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBpZiAobGlzdGVuZXIuX19jbGlkICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVyc0lkeC5kZWxldGUobGlzdGVuZXIuX19jbGlkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWdyZWVkIHRvcGljcyBhcmU6XG4gICAqIGFsbEVudHJpZXNOZWVkUmVmcmVzaCAtIGFsbCBlbnRyaWVzIGFyZSBub3cgaW4gbmVlZCBvZiByZWZyZXNoLFxuICAgKiB0eXBpY2FsbHkgaGFwcGVucyBhZnRlciBhIGNoYW5nZSBvZiB1c2VyKHNpZ24gaW4pXG4gICAqIG5lZWRSZWZyZXNoIC0gdGhlIHNwZWNpZmllZCBlbnRyeSBuZWVkIHRvIGJlIHJlZnJlc2hlZC5cbiAgICogcmVmcmVzaGVkIC0gdGhlIHNwZWNpZmllZCBlbnRyeSBoYXZlIGJlZW4gcmVmcmVzaGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdG9waWNcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeT19IGFmZmVjdGVkRW50cnlcbiAgICovXG4gIG1lc3NhZ2VMaXN0ZW5lcnModG9waWMsIGFmZmVjdGVkRW50cnkpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnNJZHguZm9yRWFjaCgoZnVuYykgPT4ge1xuICAgICAgZnVuYyh0b3BpYywgYWZmZWN0ZWRFbnRyeSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTWFya3MgYWxsIGVudHJpZXMgYXMgaW4gbmVlZCBvZiByZWZyZXNoIGFuZCBjb25zZXF1ZW50bHkgbWVzc2FnZXMgYWxsIGxpc3RlbmVyc1xuICAgKiB3aXRoIHRoZSBhbGxFbnRyaWVzTmVlZFJlZnJlc2ggdG9waWMuXG4gICAqL1xuICBhbGxOZWVkUmVmcmVzaCgpIHtcbiAgICB0aGlzLl9jYWNoZUlkeC5mb3JFYWNoKChlbnRyeSwgdXJpKSA9PiB7XG4gICAgICAvLyBEbyBub3QgbWVzc2FnZUxpc3RlbmVycyBmb3IgZXZlcnkgZW50cnkuXG4gICAgICB0aGlzLnNldFJlZnJlc2hOZWVkZWQodGhpcy5fY2FjaGVJZHguZ2V0KHVyaSksIHRydWUpO1xuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMubWVzc2FnZUxpc3RlbmVycygnYWxsRW50cmllc05lZWRSZWZyZXNoJyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBjYWNoZSBmcm9tIGFsbCBjYWNoZWQgZW50cmllcy5cbiAgICogV2FybmluZzogYWxsIHJlZmVyZW5jZXMgdG8gZW50cmllcyBuZWVkcyB0byBiZSBkaXNjYXJkZWQgYXMgdGhleSB3aWxsIG5vdCBiZVxuICAgKiBrZXB0IGluIHN5bmMgd2l0aCBjaGFuZ2VzLlxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fY2FjaGVJZHggPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fY2FjaGVJZHhSZXNvdXJjZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9jYWNoZUN0cmwgPSBuZXcgTWFwKCk7XG4gIH1cbn1cbiIsImltcG9ydCBtZDUgZnJvbSAnYmx1ZWltcC1tZDUnO1xuaW1wb3J0IHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgeG1sZG9tIGZyb20gJ3htbGRvbSc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QganNvbnAgPSByZXF1aXJlKCdzdXBlcmFnZW50LWpzb25wJyk7XG5cbi8qKlxuICogQ2hlY2sgaWYgcmVxdWVzdHMgd2lsbCBiZSB0byB0aGUgc2FtZSBkb21haW4sIGkuZS4gbm8gQ09SUy5cbiAqIE11c3QgYmUgdXNlZCBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIHVybFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IHNhbWVPcmlnaW4gPSAodXJsKSA9PiB7XG4gIGNvbnN0IGExID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBjb25zdCBhMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgYTEuaHJlZiA9IHVybDtcbiAgYTIuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4gIHJldHVybiBhMS5ob3N0bmFtZSA9PT0gYTIuaG9zdG5hbWVcbiAgICAmJiBhMS5wb3J0ID09PSBhMi5wb3J0XG4gICAgJiYgYTEucHJvdG9jb2wgPT09IGEyLnByb3RvY29sXG4gICAgJiYgYTIucHJvdG9jb2wgIT09ICdmaWxlOic7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuY29uc3QgZ2V0UHJldmVudENhY2hlTnVtYmVyID0gKCkgPT4gcGFyc2VJbnQoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkudG9TdHJpbmcoKSwgMTApO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIGZ1bmN0aW9uYWxpdHkgZm9yIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgcmVwb3NpdG9yeSB2aWEgQWpheCBjYWxscy5cbiAqIEF1dGhlbnRpY2F0aW9uIGlzIGRvbmUgdmlhIGNvb2tpZXMgYW5kIGFjY2VwdCBoZWFkZXJzIGFyZSBpbiBnZW5lcmFsIHNldCB0b1xuICogYXBwbGljYXRpb24vanNvbiBiZWhpbmQgdGhlIHNjZW5lcy5cbiAqXG4gKiBAZXhwb3J0cyBzdG9yZS9SZXN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRpbWVvdXQgPSAzMDAwMDsgLy8gMzAgc2Vjb25kc1xuICAgIHRoaXMuaGVhZGVycyA9IHtcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogbnVsbCxcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdCA9IHRoaXM7XG5cbiAgICBpZiAoaXNCcm93c2VyKCkpIHtcbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB1cmlcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICAgKiBAcGFyYW0gZm9ybWF0XG4gICAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR8Kn1cbiAgICAgICAqL1xuICAgICAgcmVzdC5wdXRGaWxlID0gKHVyaSwgZGF0YSwgZm9ybWF0ID0gJ2FwcGxpY2F0aW9uL2pzb24nKSA9PiB7XG4gICAgICAgIGlmICghZGF0YS52YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHViRm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBjb25zdCB7IGZpbGVzIH0gPSBkYXRhO1xuXG4gICAgICAgIEFycmF5LmZyb20oZmlsZXMpLmZvckVhY2goKGZpbGUsIGlkeCkgPT4ge1xuICAgICAgICAgIC8vIGlzIHRoZSBpdGVtIGEgRmlsZT9cbiAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgICAgIHN0dWJGb3JtLmFwcGVuZChpZHgudG9TdHJpbmcoKSwgZmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc3VwZXJhZ2VudC5wb3N0KHVyaSlcbiAgICAgICAgICAucXVlcnkoeyBwcmV2ZW50Q2FjaGU6IGdldFByZXZlbnRDYWNoZU51bWJlcigpIH0pXG4gICAgICAgICAgLmFjY2VwdChmb3JtYXQpXG4gICAgICAgICAgLndpdGhDcmVkZW50aWFscygpXG4gICAgICAgICAgLnNlbmQoc3R1YkZvcm0pO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGNyZWRlbnRpYWxzIHNob3VsZCBjb250YWluIGF0dHJpYnV0ZXMgXCJ1c2VyXCIsIFwicGFzc3dvcmRcIiwgYW5kIFwibWF4QWdlXCIuXG4gICAqIE1heEFnZSBpcyB0aGUgYW1vdW50IG9mIHNlY29uZHMgdGhlIGF1dGhvcml6YXRpb24gc2hvdWxkIGJlIHZhbGlkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHRoZW5hYmxlIG9iamVjdFxuICAgKiBAYXN5bmNcbiAgICovXG4gIGFzeW5jIGF1dGgoY3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCB7IHVzZXIsIHBhc3N3b3JkLCBiYXNlLCBtYXhBZ2UgPSA2MDQ4MDAsIGxvZ291dCA9IGZhbHNlIH0gPSBjcmVkZW50aWFscztcbiAgICBkZWxldGUgdGhpcy5oZWFkZXJzLmNvb2tpZTtcblxuICAgIGlmIChsb2dvdXQpIHtcbiAgICAgIGNvbnN0IGxvZ291dFJlcXVlc3RSZXN1bHQgPSBzdXBlcmFnZW50LmdldChgJHtiYXNlfWF1dGgvbG9nb3V0YClcbiAgICAgICAgLnF1ZXJ5KHsgcHJldmVudENhY2hlOiBnZXRQcmV2ZW50Q2FjaGVOdW1iZXIoKSB9KVxuICAgICAgICAuYWNjZXB0KCdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgLndpdGhDcmVkZW50aWFscygpXG4gICAgICAgIC50aW1lb3V0KHsgcmVzcG9uc2U6IHRoaXMudGltZW91dCB9KTtcblxuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5oZWFkZXJzKS5tYXAoa2V5VmFsID0+IGxvZ291dFJlcXVlc3RSZXN1bHQuc2V0KGtleVZhbFswXSwga2V5VmFsWzFdKSk7XG5cbiAgICAgIHJldHVybiBsb2dvdXRSZXF1ZXN0UmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBhdXRoX3VzZXJuYW1lOiBlbmNvZGVVUklDb21wb25lbnQodXNlciksXG4gICAgICBhdXRoX3Bhc3N3b3JkOiBlbmNvZGVVUklDb21wb25lbnQocGFzc3dvcmQpLFxuICAgICAgYXV0aF9tYXhhZ2U6IG1heEFnZSxcbiAgICB9O1xuXG4gICAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3N0KGAke2Jhc2V9YXV0aC9jb29raWVgLCBkYXRhLCBudWxsLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nRGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjdW0sIHByb3ApID0+IGAke2FjY3VtfSR7cHJvcC5qb2luKCc9Jyl9JmAsICcnKTtcbiAgICBjb25zdCBhdXRoQ29va2llUmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBvc3QoYCR7YmFzZX1hdXRoL2Nvb2tpZWAsIHF1ZXJ5U3RyaW5nRGF0YSwgbnVsbCwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIGNvbnN0IGNvb2tpZXMgPSBhdXRoQ29va2llUmVzcG9uc2UuaGVhZGVyc1snc2V0LWNvb2tpZSddO1xuXG4gICAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llcykge1xuICAgICAgaWYgKGNvb2tpZS5zdGFydHNXaXRoKCdhdXRoX3Rva2VuPScpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5jb29raWUgPSBbY29va2llXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGF1dGhDb29raWVSZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGRhdGEgZnJvbSB0aGUgcHJvdmlkZWQgVVJJLlxuICAgKiBJZiBhIGNyb3NzLWRvbWFpbiBjYWxsIGlzIG1hZGUgYW5kIHdlIGFyZSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQgYSBqc29ucCBjYWxsIGlzIG1hZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgLSBVUkkgdG8gYSByZXNvdXJjZSB0byBmZXRjaC5cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gZm9ybWF0IC0gdGhlIGZvcm1hdCB0byByZXF1ZXN0IGFzIGEgbWltZXR5cGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbm9uSlNPTlAgLSBzdG9wIEpTT05QIGhhbmRsaW5nIChkZWZhdWx0IGZhbHNlKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHRoZW5hYmxlIG9iamVjdFxuICAgKiBAYXN5bmNcbiAgICogQHRocm93c1xuICAgKi9cbiAgYXN5bmMgZ2V0KHVyaSwgZm9ybWF0ID0gbnVsbCwgbm9uSlNPTlAgPSBmYWxzZSkge1xuICAgIGNvbnN0IGxvY0hlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpO1xuICAgIGRlbGV0ZSBsb2NIZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgIGxldCBfdXJpID0gdXJpO1xuICAgIGxldCBoYW5kbGVBcyA9ICdqc29uJztcbiAgICBpZiAoZm9ybWF0ICE9IG51bGwpIHtcbiAgICAgIGxvY0hlYWRlcnMuQWNjZXB0ID0gZm9ybWF0O1xuICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgY2FzZSAnYXBwbGljYXRpb24vanNvbic6IC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW4gdGhlIGhlYWRlcnMuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL3htbCc6XG4gICAgICAgIGNhc2UgJ3RleHQveG1sJzpcbiAgICAgICAgICBoYW5kbGVBcyA9ICd4bWwnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBBbGwgb3RoZXIgc2l0dWF0aW9ucywgaW5jbHVkaW5nIHRleHQvcGxhaW4uXG4gICAgICAgICAgaGFuZGxlQXMgPSAndGV4dCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXNlIGpzb25wIGluc3RlYWQgb2YgQ09SUyBmb3IgR0VUIHJlcXVlc3RzIHdoZW4gZG9pbmcgY3Jvc3MtZG9tYWluIGNhbGxzLCBpdCBpcyBjaGVhcGVyXG4gICAgaWYgKGlzQnJvd3NlcigpICYmICFzYW1lT3JpZ2luKF91cmkpICYmICFub25KU09OUCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbWV0ZXIgPSBuZXcgUmVnRXhwKCdbPyZdZm9ybWF0PScpO1xuICAgICAgICBpZiAoIXF1ZXJ5UGFyYW1ldGVyLnRlc3QoX3VyaSkpIHtcbiAgICAgICAgICBfdXJpICs9IGAke191cmkuaW5jbHVkZXMoJz8nKSA/ICcmJyA6ICc/J31mb3JtYXQ9YXBwbGljYXRpb24vanNvbmA7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcmFnZW50LmdldChfdXJpKVxuICAgICAgICAgIC51c2UoXG4gICAgICAgICAgICBqc29ucCh7XG4gICAgICAgICAgICAgIHRpbWVvdXQ6IDEwMDAwMDAsXG4gICAgICAgICAgICAgIC8vIEBzY2F6YW46IHN1cGVyYWdlbnQtanNvbnAncyByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBpcyB3ZWFrLCBzbyB3ZSBjcmVhdGUgb3VyIG93blxuICAgICAgICAgICAgICBjYWxsYmFja05hbWU6IGBjYiR7bWQ1KF91cmkpLnNsaWNlKDAsIDcpfSR7Z2V0UHJldmVudENhY2hlTnVtYmVyKCl9YCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICkgLy8gTmVlZCB0aGlzIHRpbWVvdXQgdG8gcHJldmVudCBhIHN1cGVyYWdlbnRDYWxsYmFjayoqKiBub3QgZGVmaW5lZCBpc3N1ZSB3aXRoIHN1cGVyYWdlbnQtanNvbnA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sYW1wL3N1cGVyYWdlbnQtanNvbnAvaXNzdWVzLzMxXG4gICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoZGF0YS5ib2R5KTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IEdFVFJlcXVlc3QgPSBzdXBlcmFnZW50LmdldChfdXJpKVxuICAgICAgLmFjY2VwdChoYW5kbGVBcylcbiAgICAgIC50aW1lb3V0KHtcbiAgICAgICAgcmVzcG9uc2U6IHRoaXMudGltZW91dCxcbiAgICAgIH0pXG4gICAgICAucXVlcnkoeyBwcmV2ZW50Q2FjaGU6IGdldFByZXZlbnRDYWNoZU51bWJlcigpIH0pXG4gICAgICAud2l0aENyZWRlbnRpYWxzKCk7XG5cbiAgICBpZiAoaGFuZGxlQXMgPT09ICd4bWwnKSB7XG4gICAgICBHRVRSZXF1ZXN0LnBhcnNlWydhcHBsaWNhdGlvbi94bWwnXSA9IChyZXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IERPTVBhcnNlciA9IGlzQnJvd3NlcigpID8gd2luZG93LkRPTVBhcnNlciA6IHhtbGRvbS5ET01QYXJzZXI7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICBpZiAoaXNCcm93c2VyKCkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXMsICdhcHBsaWNhdGlvbi94bWwnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBAdG9kbyBAdmFsZW50aW5vIGNoZWNrIGlmIGhlcmUgaXQgc2hvdWxkIGJlIGFuIGVsc2UgYW5kIGNhbGxiYWNrIG91dHNpZGUgdGhhdFxuXG4gICAgICAgIC8vIE5vZGUgaGFuZGxlcyB0aGUgcmV0dXJuIGFzIGEgY2FsbGJhY2tcbiAgICAgICAgcmVzLnRleHQgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJlcy50ZXh0LCAnYXBwbGljYXRpb24veG1sJyk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcy50ZXh0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBPYmplY3QuZW50cmllcyhsb2NIZWFkZXJzKS5tYXAoa2V5VmFsID0+IEdFVFJlcXVlc3Quc2V0KGtleVZhbFswXSwga2V5VmFsWzFdKSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEdFVFJlcXVlc3Q7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgaWYgKGhhbmRsZUFzID09PSAndGV4dCcgfHwgZm9ybWF0ID09PSAndGV4dC94bWwnKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJvZHk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgUmVzb3VyY2UgY291bGQgbm90IGJlIGxvYWRlZDogJHtyZXNwb25zZS50ZXh0fWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3RzIGRhdGEgdG8gdGhlIHByb3ZpZGVkIFVSSS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVyaSAtIGFuIFVSSSB0byBwb3N0IHRvLlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGRhdGEgLSB0aGUgZGF0YSB0byBwb3N0LiBJZiBhbiBvYmplY3QgdGhlIGRhdGEgaXMgc2VudCBhcyBmb3JtIGRhdGEuXG4gICAqIEBwYXJhbSB7RGF0ZT19IG1vZERhdGUgYSBkYXRlIHRvIHVzZSBmb3IgdGhlIEhUVFAgaWYtdW5tb2RpZmllZC1zaW5jZSBoZWFkZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IC0gaW5kaWNhdGVzIHRoZSBjb250ZW50LXR5cGUgb2YgdGhlIGRhdGEsIGRlZmF1bHQgaXNcbiAgICogYXBwbGljYXRpb24vanNvbiwgZXhjZXB0IGlmIHRoZSBkYXRhIGlzIGFuIG9iamVjdCBpbiB3aGljaCBjYXNlIHRoZSBkZWZhdWx0IGlzXG4gICAqIG11bHRpcGFydC9mb3JtLWRhdGEuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IEEgdGhlbmFibGUgb2JqZWN0XG4gICAqL1xuICBwb3N0KHVyaSwgZGF0YSwgbW9kRGF0ZSwgZm9ybWF0KSB7XG4gICAgY29uc3QgbG9jSGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaGVhZGVycyk7XG4gICAgaWYgKG1vZERhdGUpIHtcbiAgICAgIGxvY0hlYWRlcnNbJ0lmLVVubW9kaWZpZWQtU2luY2UnXSA9IG1vZERhdGUudG9VVENTdHJpbmcoKTtcbiAgICB9Ly8gbXVsdGlwYXJ0L2Zvcm0tZGF0YVxuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIGxvY0hlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gZm9ybWF0O1xuICAgIH1cblxuICAgIGNvbnN0IFBPU1RSZXF1ZXN0ID0gc3VwZXJhZ2VudC5wb3N0KHVyaSlcbiAgICAgIC5xdWVyeSh7ICdyZXF1ZXN0LnByZXZlbnRDYWNoZSc6IGdldFByZXZlbnRDYWNoZU51bWJlcigpIH0pO1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIFBPU1RSZXF1ZXN0LnNlbmQoZGF0YSlcbiAgICAgIC8vIHNlcmlhbGl6ZSB0aGUgb2JqZWN0IGludG8gYSBmb3JtYXQgdGhhdCB0aGUgYmFja2VuZCBpcyB1c2VkIHRvIChubyBKU09OIHN0cmluZ3MpXG4gICAgICAgIC5zZXJpYWxpemUob2JqID0+IE9iamVjdC5lbnRyaWVzKG9iailcbiAgICAgICAgICAubWFwKGtleVZhbCA9PiBgJHtrZXlWYWxbMF19PSR7a2V5VmFsWzFdfSZgKVxuICAgICAgICAgIC5qb2luKCcnKSk7XG4gICAgfVxuXG4gICAgUE9TVFJlcXVlc3Qud2l0aENyZWRlbnRpYWxzKClcbiAgICAgIC50aW1lb3V0KHsgcmVzcG9uc2U6IHRoaXMudGltZW91dCB9KTtcblxuICAgIE9iamVjdC5lbnRyaWVzKGxvY0hlYWRlcnMpLm1hcChrZXlWYWwgPT4gUE9TVFJlcXVlc3Quc2V0KGtleVZhbFswXSwga2V5VmFsWzFdKSk7XG5cbiAgICByZXR1cm4gUE9TVFJlcXVlc3Q7XG4gIH1cblxuICAvKipcbiAgICogUG9zdHMgZGF0YSB0byBhIGZhY3RvcnkgcmVzb3VyY2Ugd2l0aCB0aGUgaW50ZW50IHRvIGNyZWF0ZSBhIG5ldyByZXNvdXJjZS5cbiAgICogVGhhdCBpcywgaXQgcG9zdHMgZGF0YSBhbmQgZXhwZWN0cyBhIExvY2F0aW9uIGhlYWRlciBiYWNrIHdpdGggaW5mb3JtYXRpb24gb24gdGhlIGNyZWF0ZWRcbiAgICogcmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgLSBmYWN0b3J5IHJlc291cmNlLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGRhdGEgLSB0aGUgZGF0YSB0aGF0IGlzIHRvIGJlIHBvc3RlZCBhcyBhIHN0cmluZyxcbiAgICogaWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgc2VyaWFsaXplZCBhcyBqc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48U3RyaW5nPn1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZSh1cmksIGRhdGEpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucG9zdCh1cmksIGRhdGEpO1xuICAgIC8vIGxldCBsb2NhdGlvbiA9IHJlc3BvbnNlLmdldEhlYWRlcignTG9jYXRpb24nKTtcbiAgICBsZXQgeyBsb2NhdGlvbiB9ID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICAvLyBJbiBzb21lIHdlaXJkIGNhc2VzLCBsaWtlIHdoZW4gbWFraW5nIHJlcXVlc3RzIGZyb20gZmlsZTovLy9cbiAgICAvLyB3ZSBkbyBub3QgaGF2ZSBhY2Nlc3MgdG8gaGVhZGVycy5cbiAgICBpZiAoIWxvY2F0aW9uICYmIHJlc3BvbnNlLmJvZHkpIHtcbiAgICAgIGNvbnN0IGlkeCA9IHVyaS5pbmRleE9mKCc/Jyk7XG4gICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICBsb2NhdGlvbiA9IHVyaS5zdWJzdHIoMCwgdXJpLmluZGV4T2YoJz8nKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2NhdGlvbiA9IHVyaTtcbiAgICAgIH1cbiAgICAgIGxvY2F0aW9uICs9IGAvZW50cnkvJHtKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpLmVudHJ5SWR9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYSByZXNvdXJjZSB3aXRoIGEgbmV3IHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJpIHRoZSBhZGRyZXNzIHRvIHB1dCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBkYXRhIC0gdGhlIGRhdGEgdG8gcHV0LiBJZiBhbiBvYmplY3QgdGhlIGRhdGEgaXMgc2VudCBhcyBmb3JtIGRhdGEuXG4gICAqIEBwYXJhbSB7RGF0ZT19IG1vZERhdGUgYSBkYXRlIHRvIHVzZSBmb3IgdGhlIEhUVFAgaWYtdW5tb2RpZmllZC1zaW5jZSBoZWFkZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IC0gaW5kaWNhdGVzIHRoZSBjb250ZW50LXR5cGUgb2YgdGhlIGRhdGEsIGRlZmF1bHQgaXNcbiAgICogYXBwbGljYXRpb24vanNvbiwgZXhjZXB0IGlmIHRoZSBkYXRhIGlzIGFuIG9iamVjdCBpbiB3aGljaCBjYXNlIHRoZSBkZWZhdWx0IGlzXG4gICAqIG11bHRpcGFydC9mb3JtLWRhdGEuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IEEgdGhlbmFibGUgb2JqZWN0XG4gICAqL1xuICBwdXQodXJpLCBkYXRhLCBtb2REYXRlLCBmb3JtYXQpIHtcbiAgICBjb25zdCBsb2NIZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKTtcbiAgICBpZiAobW9kRGF0ZSkge1xuICAgICAgbG9jSGVhZGVyc1snSWYtVW5tb2RpZmllZC1TaW5jZSddID0gbW9kRGF0ZS50b1VUQ1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBsb2NIZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IGZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgbG9jSGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7IC8vIEB0b2RvIHBlcmhhcHMgbm90IG5lZWRlZCwgdGhpcyBpcyBkZWZhdWx0XG4gICAgfVxuXG4gICAgY29uc3QgcHV0UmVxdWVzdCA9IHN1cGVyYWdlbnQucHV0KHVyaSlcbiAgICAgIC5xdWVyeSh7IHByZXZlbnRDYWNoZTogZ2V0UHJldmVudENhY2hlTnVtYmVyKCkgfSlcbiAgICAgIC5zZW5kKGRhdGEpXG4gICAgICAud2l0aENyZWRlbnRpYWxzKClcbiAgICAgIC50aW1lb3V0KHsgcmVzcG9uc2U6IHRoaXMudGltZW91dCB9KTtcblxuICAgIE9iamVjdC5lbnRyaWVzKGxvY0hlYWRlcnMpLm1hcChrZXlWYWwgPT4gcHV0UmVxdWVzdC5zZXQoa2V5VmFsWzBdLCBrZXlWYWxbMV0pKTtcblxuICAgIHJldHVybiBwdXRSZXF1ZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSByZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVyaSBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyB0byBiZSBkZWxldGVkLlxuICAgKiBAcGFyYW0ge0RhdGU9fSBtb2REYXRlIGEgZGF0ZSB0byB1c2UgZm9yIHRoZSBIVFRQIGlmLXVubW9kaWZpZWQtc2luY2UgaGVhZGVyLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHRoZW5hYmxlIG9iamVjdFxuICAgKi9cbiAgZGVsKHVyaSwgbW9kRGF0ZSkge1xuICAgIGNvbnN0IGxvY0hlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpO1xuICAgIGRlbGV0ZSBsb2NIZWFkZXJzWydDb250ZW50LVR5cGUnXTtcbiAgICBpZiAobW9kRGF0ZSkge1xuICAgICAgbG9jSGVhZGVyc1snSWYtVW5tb2RpZmllZC1TaW5jZSddID0gbW9kRGF0ZS50b1VUQ1N0cmluZygpO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZVJlcXVlc3QgPSBzdXBlcmFnZW50LmRlbCh1cmkpXG4gICAgICAucXVlcnkoeyBwcmV2ZW50Q2FjaGU6IGdldFByZXZlbnRDYWNoZU51bWJlcigpIH0pXG4gICAgICAud2l0aENyZWRlbnRpYWxzKClcbiAgICAgIC50aW1lb3V0KHsgcmVzcG9uc2U6IHRoaXMudGltZW91dCB9KTtcblxuICAgIE9iamVjdC5lbnRyaWVzKGxvY0hlYWRlcnMpLm1hcChrZXlWYWwgPT4gZGVsZXRlUmVxdWVzdC5zZXQoa2V5VmFsWzBdLCBrZXlWYWxbMV0pKTtcblxuICAgIHJldHVybiBkZWxldGVSZXF1ZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3QgYSBmaWxlIHRvIGEgVVJJLlxuICAgKiBJbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQgYSBmaWxlIGlzIHJlcHJlc2VudGVkIHZpYSBhbiBpbnB1dCB0YWcgd2hpY2ggcmVmZXJlbmNlc1xuICAgKiB0aGUgZmlsZSB0byBiZSB1cGxvYWRlZCB2aWEgaXRzIHZhbHVlIGF0dHJpYnV0ZS5cbiAgICogSW4gbm9kZSBlbnZpcm9ubWVudHMgdGhlIGZpbGUgaXMgcmVwcmVzZW50ZWQgYXMgYSBzdHJlYW0gY29uc3RydWN0ZWQgdmlhXG4gICAqIGZzLmNyZWF0ZVJlYWRTdHJlYW0oJ2ZpbGUudHh0JykuXG4gICAqXG4gICAqID4gXyoqVW5kZXIgdGhlIGhvb2QqKiB0aGUgdGFnIGlzIG1vdmVkIGludG8gYSBmb3JtIGluIGFuIGludmlzaWJsZSBpZnJhbWVcbiAgICogd2hpY2ggdGhlbiBpcyBzdWJtaXR0ZWQuIElmIHRoZXJlIGlzIGEgcmVzcG9uc2UgaXQgaXMgcHJvdmlkZWQgaW4gYSB0ZXh0YXJlYSB3aGljaFxuICAgKiBjYW4gYmUgbG9va2VkIGludG8gc2luY2Ugd2UgYXJlIG9uIHRoZSBzYW1lIGRvbWFpbi5fXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmkgdGhlIFVSSSB0byB3aGljaCB3ZSB3aWxsIHB1dCB0aGUgZmlsZS5cbiAgICogQHBhcmFtIHtkYXRhfSBkYXRhIC0gaW5wdXQgdGFnIG9yIHN0cmVhbSB0aGF0IG1heSBmb3IgaW5zdGFuY2UgY29ycmVzcG9uZCB0byBhIGZpbGVcbiAgICogaW4gYSBub2RlanMgc2V0dGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCB0aGUgZm9ybWF0IHRvIGhhbmRsZSB0aGUgcmVzcG9uc2UgYXMsIGVpdGhlciB0ZXh0LCB4bWwsIGh0bWwgb3IganNvblxuICAgKiAoanNvbiBpcyBkZWZhdWx0KS5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gQSB0aGVuYWJsZSBvYmplY3RcbiAgICovXG4gIHB1dEZpbGUodXJpLCBkYXRhLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5wb3N0KHVyaSwgZGF0YSwgbnVsbCwgZm9ybWF0KTtcbiAgfVxufVxuXG4iLCIvKlxuICogSmF2YVNjcmlwdCBNRDVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ibHVlaW1wL0phdmFTY3JpcHQtTUQ1XG4gKlxuICogQ29weXJpZ2h0IDIwMTEsIFNlYmFzdGlhbiBUc2NoYW5cbiAqIGh0dHBzOi8vYmx1ZWltcC5uZXRcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqIEJhc2VkIG9uXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3VyaXR5LCBJbmMuIE1ENSBNZXNzYWdlXG4gKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLlxuICogVmVyc2lvbiAyLjIgQ29weXJpZ2h0IChDKSBQYXVsIEpvaG5zdG9uIDE5OTkgLSAyMDA5XG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cblxuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG47KGZ1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIC8qXG4gICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXG4gICovXG4gIGZ1bmN0aW9uIHNhZmVBZGQgKHgsIHkpIHtcbiAgICB2YXIgbHN3ID0gKHggJiAweGZmZmYpICsgKHkgJiAweGZmZmYpXG4gICAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpXG4gICAgcmV0dXJuIChtc3cgPDwgMTYpIHwgKGxzdyAmIDB4ZmZmZilcbiAgfVxuXG4gIC8qXG4gICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICAqL1xuICBmdW5jdGlvbiBiaXRSb3RhdGVMZWZ0IChudW0sIGNudCkge1xuICAgIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKVxuICB9XG5cbiAgLypcbiAgKiBUaGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29yaXRobSB1c2VzLlxuICAqL1xuICBmdW5jdGlvbiBtZDVjbW4gKHEsIGEsIGIsIHgsIHMsIHQpIHtcbiAgICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKVxuICB9XG4gIGZ1bmN0aW9uIG1kNWZmIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbigoYiAmIGMpIHwgKH5iICYgZCksIGEsIGIsIHgsIHMsIHQpXG4gIH1cbiAgZnVuY3Rpb24gbWQ1Z2cgKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICByZXR1cm4gbWQ1Y21uKChiICYgZCkgfCAoYyAmIH5kKSwgYSwgYiwgeCwgcywgdClcbiAgfVxuICBmdW5jdGlvbiBtZDVoaCAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBtZDVjbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KVxuICB9XG4gIGZ1bmN0aW9uIG1kNWlpIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpXG4gIH1cblxuICAvKlxuICAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGguXG4gICovXG4gIGZ1bmN0aW9uIGJpbmxNRDUgKHgsIGxlbikge1xuICAgIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gICAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCAobGVuICUgMzIpXG4gICAgeFsoKGxlbiArIDY0KSA+Pj4gOSA8PCA0KSArIDE0XSA9IGxlblxuXG4gICAgdmFyIGlcbiAgICB2YXIgb2xkYVxuICAgIHZhciBvbGRiXG4gICAgdmFyIG9sZGNcbiAgICB2YXIgb2xkZFxuICAgIHZhciBhID0gMTczMjU4NDE5M1xuICAgIHZhciBiID0gLTI3MTczMzg3OVxuICAgIHZhciBjID0gLTE3MzI1ODQxOTRcbiAgICB2YXIgZCA9IDI3MTczMzg3OFxuXG4gICAgZm9yIChpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICBvbGRhID0gYVxuICAgICAgb2xkYiA9IGJcbiAgICAgIG9sZGMgPSBjXG4gICAgICBvbGRkID0gZFxuXG4gICAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpXSwgNywgLTY4MDg3NjkzNilcbiAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpXG4gICAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE3LCA2MDYxMDU4MTkpXG4gICAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgM10sIDIyLCAtMTA0NDUyNTMzMClcbiAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5NylcbiAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA1XSwgMTIsIDEyMDAwODA0MjYpXG4gICAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE3LCAtMTQ3MzIzMTM0MSlcbiAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4MylcbiAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNywgMTc3MDAzNTQxNilcbiAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA5XSwgMTIsIC0xOTU4NDE0NDE3KVxuICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2MylcbiAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxMV0sIDIyLCAtMTk5MDQwNDE2MilcbiAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyAxMl0sIDcsIDE4MDQ2MDM2ODIpXG4gICAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKVxuICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKVxuICAgICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDE1XSwgMjIsIDEyMzY1MzUzMjkpXG5cbiAgICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNSwgLTE2NTc5NjUxMClcbiAgICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpXG4gICAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNCwgNjQzNzE3NzEzKVxuICAgICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaV0sIDIwLCAtMzczODk3MzAyKVxuICAgICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKVxuICAgICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDEwXSwgOSwgMzgwMTYwODMpXG4gICAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgMTVdLCAxNCwgLTY2MDQ3ODMzNSlcbiAgICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpXG4gICAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgOV0sIDUsIDU2ODQ0NjQzOClcbiAgICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAxNF0sIDksIC0xMDE5ODAzNjkwKVxuICAgICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSlcbiAgICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA4XSwgMjAsIDExNjM1MzE1MDEpXG4gICAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMTNdLCA1LCAtMTQ0NDY4MTQ2NylcbiAgICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KVxuICAgICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNCwgMTczNTMyODQ3MylcbiAgICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyAxMl0sIDIwLCAtMTkyNjYwNzczNClcblxuICAgICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA0LCAtMzc4NTU4KVxuICAgICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpXG4gICAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNiwgMTgzOTAzMDU2MilcbiAgICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxNF0sIDIzLCAtMzUzMDk1NTYpXG4gICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKVxuICAgICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDRdLCAxMSwgMTI3Mjg5MzM1MylcbiAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTYsIC0xNTU0OTc2MzIpXG4gICAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApXG4gICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMTNdLCA0LCA2ODEyNzkxNzQpXG4gICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpXSwgMTEsIC0zNTg1MzcyMjIpXG4gICAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KVxuICAgICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDZdLCAyMywgNzYwMjkxODkpXG4gICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgOV0sIDQsIC02NDAzNjQ0ODcpXG4gICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSlcbiAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE2LCA1MzA3NDI1MjApXG4gICAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMl0sIDIzLCAtOTk1MzM4NjUxKVxuXG4gICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpXSwgNiwgLTE5ODYzMDg0NClcbiAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpXG4gICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNSwgLTE0MTYzNTQ5MDUpXG4gICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgNV0sIDIxLCAtNTc0MzQwNTUpXG4gICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKVxuICAgICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDNdLCAxMCwgLTE4OTQ5ODY2MDYpXG4gICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNSwgLTEwNTE1MjMpXG4gICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSlcbiAgICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNiwgMTg3MzMxMzM1OSlcbiAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxNV0sIDEwLCAtMzA2MTE3NDQpXG4gICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MClcbiAgICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxM10sIDIxLCAxMzA5MTUxNjQ5KVxuICAgICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDRdLCA2LCAtMTQ1NTIzMDcwKVxuICAgICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KVxuICAgICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNSwgNzE4Nzg3MjU5KVxuICAgICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDldLCAyMSwgLTM0MzQ4NTU1MSlcblxuICAgICAgYSA9IHNhZmVBZGQoYSwgb2xkYSlcbiAgICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpXG4gICAgICBjID0gc2FmZUFkZChjLCBvbGRjKVxuICAgICAgZCA9IHNhZmVBZGQoZCwgb2xkZClcbiAgICB9XG4gICAgcmV0dXJuIFthLCBiLCBjLCBkXVxuICB9XG5cbiAgLypcbiAgKiBDb252ZXJ0IGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMgdG8gYSBzdHJpbmdcbiAgKi9cbiAgZnVuY3Rpb24gYmlubDJyc3RyIChpbnB1dCkge1xuICAgIHZhciBpXG4gICAgdmFyIG91dHB1dCA9ICcnXG4gICAgdmFyIGxlbmd0aDMyID0gaW5wdXQubGVuZ3RoICogMzJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoMzI7IGkgKz0gOCkge1xuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGlucHV0W2kgPj4gNV0gPj4+IChpICUgMzIpKSAmIDB4ZmYpXG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRcbiAgfVxuXG4gIC8qXG4gICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3Jkc1xuICAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLlxuICAqL1xuICBmdW5jdGlvbiByc3RyMmJpbmwgKGlucHV0KSB7XG4gICAgdmFyIGlcbiAgICB2YXIgb3V0cHV0ID0gW11cbiAgICBvdXRwdXRbKGlucHV0Lmxlbmd0aCA+PiAyKSAtIDFdID0gdW5kZWZpbmVkXG4gICAgZm9yIChpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgb3V0cHV0W2ldID0gMFxuICAgIH1cbiAgICB2YXIgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDhcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoODsgaSArPSA4KSB7XG4gICAgICBvdXRwdXRbaSA+PiA1XSB8PSAoaW5wdXQuY2hhckNvZGVBdChpIC8gOCkgJiAweGZmKSA8PCAoaSAlIDMyKVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICAvKlxuICAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGEgcmF3IHN0cmluZ1xuICAqL1xuICBmdW5jdGlvbiByc3RyTUQ1IChzKSB7XG4gICAgcmV0dXJuIGJpbmwycnN0cihiaW5sTUQ1KHJzdHIyYmlubChzKSwgcy5sZW5ndGggKiA4KSlcbiAgfVxuXG4gIC8qXG4gICogQ2FsY3VsYXRlIHRoZSBITUFDLU1ENSwgb2YgYSBrZXkgYW5kIHNvbWUgZGF0YSAocmF3IHN0cmluZ3MpXG4gICovXG4gIGZ1bmN0aW9uIHJzdHJITUFDTUQ1IChrZXksIGRhdGEpIHtcbiAgICB2YXIgaVxuICAgIHZhciBia2V5ID0gcnN0cjJiaW5sKGtleSlcbiAgICB2YXIgaXBhZCA9IFtdXG4gICAgdmFyIG9wYWQgPSBbXVxuICAgIHZhciBoYXNoXG4gICAgaXBhZFsxNV0gPSBvcGFkWzE1XSA9IHVuZGVmaW5lZFxuICAgIGlmIChia2V5Lmxlbmd0aCA+IDE2KSB7XG4gICAgICBia2V5ID0gYmlubE1ENShia2V5LCBrZXkubGVuZ3RoICogOClcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgIGlwYWRbaV0gPSBia2V5W2ldIF4gMHgzNjM2MzYzNlxuICAgICAgb3BhZFtpXSA9IGJrZXlbaV0gXiAweDVjNWM1YzVjXG4gICAgfVxuICAgIGhhc2ggPSBiaW5sTUQ1KGlwYWQuY29uY2F0KHJzdHIyYmlubChkYXRhKSksIDUxMiArIGRhdGEubGVuZ3RoICogOClcbiAgICByZXR1cm4gYmlubDJyc3RyKGJpbmxNRDUob3BhZC5jb25jYXQoaGFzaCksIDUxMiArIDEyOCkpXG4gIH1cblxuICAvKlxuICAqIENvbnZlcnQgYSByYXcgc3RyaW5nIHRvIGEgaGV4IHN0cmluZ1xuICAqL1xuICBmdW5jdGlvbiByc3RyMmhleCAoaW5wdXQpIHtcbiAgICB2YXIgaGV4VGFiID0gJzAxMjM0NTY3ODlhYmNkZWYnXG4gICAgdmFyIG91dHB1dCA9ICcnXG4gICAgdmFyIHhcbiAgICB2YXIgaVxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgeCA9IGlucHV0LmNoYXJDb2RlQXQoaSlcbiAgICAgIG91dHB1dCArPSBoZXhUYWIuY2hhckF0KCh4ID4+PiA0KSAmIDB4MGYpICsgaGV4VGFiLmNoYXJBdCh4ICYgMHgwZilcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG5cbiAgLypcbiAgKiBFbmNvZGUgYSBzdHJpbmcgYXMgdXRmLThcbiAgKi9cbiAgZnVuY3Rpb24gc3RyMnJzdHJVVEY4IChpbnB1dCkge1xuICAgIHJldHVybiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpKVxuICB9XG5cbiAgLypcbiAgKiBUYWtlIHN0cmluZyBhcmd1bWVudHMgYW5kIHJldHVybiBlaXRoZXIgcmF3IG9yIGhleCBlbmNvZGVkIHN0cmluZ3NcbiAgKi9cbiAgZnVuY3Rpb24gcmF3TUQ1IChzKSB7XG4gICAgcmV0dXJuIHJzdHJNRDUoc3RyMnJzdHJVVEY4KHMpKVxuICB9XG4gIGZ1bmN0aW9uIGhleE1ENSAocykge1xuICAgIHJldHVybiByc3RyMmhleChyYXdNRDUocykpXG4gIH1cbiAgZnVuY3Rpb24gcmF3SE1BQ01ENSAoaywgZCkge1xuICAgIHJldHVybiByc3RySE1BQ01ENShzdHIycnN0clVURjgoayksIHN0cjJyc3RyVVRGOChkKSlcbiAgfVxuICBmdW5jdGlvbiBoZXhITUFDTUQ1IChrLCBkKSB7XG4gICAgcmV0dXJuIHJzdHIyaGV4KHJhd0hNQUNNRDUoaywgZCkpXG4gIH1cblxuICBmdW5jdGlvbiBtZDUgKHN0cmluZywga2V5LCByYXcpIHtcbiAgICBpZiAoIWtleSkge1xuICAgICAgaWYgKCFyYXcpIHtcbiAgICAgICAgcmV0dXJuIGhleE1ENShzdHJpbmcpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmF3TUQ1KHN0cmluZylcbiAgICB9XG4gICAgaWYgKCFyYXcpIHtcbiAgICAgIHJldHVybiBoZXhITUFDTUQ1KGtleSwgc3RyaW5nKVxuICAgIH1cbiAgICByZXR1cm4gcmF3SE1BQ01ENShrZXksIHN0cmluZylcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1kNVxuICAgIH0pXG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IG1kNVxuICB9IGVsc2Uge1xuICAgICQubWQ1ID0gbWQ1XG4gIH1cbn0pKHRoaXMpXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3N1cGVyYWdlbnQnKTtcbmNvbnN0IGZvcm1pZGFibGUgPSByZXF1aXJlKCdmb3JtaWRhYmxlJyk7XG5jb25zdCBGb3JtRGF0YSA9IHJlcXVpcmUoJ2Zvcm0tZGF0YScpO1xuY29uc3QgUmVzcG9uc2UgPSByZXF1aXJlKCcuL3Jlc3BvbnNlJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgndXJsJykuZm9ybWF0O1xuY29uc3QgcmVzb2x2ZSA9IHJlcXVpcmUoJ3VybCcpLnJlc29sdmU7XG5sZXQgbWV0aG9kcyA9IHJlcXVpcmUoJ21ldGhvZHMnKTtcbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuY29uc3QgdW56aXAgPSByZXF1aXJlKCcuL3VuemlwJykudW56aXA7XG5jb25zdCBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKTtcbmNvbnN0IG1pbWUgPSByZXF1aXJlKCdtaW1lJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcXMgPSByZXF1aXJlKCdxcycpO1xuY29uc3QgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcbmNvbnN0IFJlcXVlc3RCYXNlID0gcmVxdWlyZSgnLi4vcmVxdWVzdC1iYXNlJyk7XG5jb25zdCBDb29raWVKYXIgPSByZXF1aXJlKCdjb29raWVqYXInKTtcblxuZnVuY3Rpb24gcmVxdWVzdChtZXRob2QsIHVybCkge1xuICAvLyBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgdXJsKSB7XG4gICAgcmV0dXJuIG5ldyBleHBvcnRzLlJlcXVlc3QoJ0dFVCcsIG1ldGhvZCkuZW5kKHVybCk7XG4gIH1cblxuICAvLyB1cmwgZmlyc3RcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgZXhwb3J0cy5SZXF1ZXN0KCdHRVQnLCBtZXRob2QpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBleHBvcnRzLlJlcXVlc3QobWV0aG9kLCB1cmwpO1xufVxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWVzdDtcblxuLyoqXG4gKiBFeHBvc2UgYFJlcXVlc3RgLlxuICovXG5cbmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRXhwb3NlIHRoZSBhZ2VudCBmdW5jdGlvblxuICovXG5cbmV4cG9ydHMuYWdlbnQgPSByZXF1aXJlKCcuL2FnZW50Jyk7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBub29wKCl7fTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlc3BvbnNlYC5cbiAqL1xuXG5leHBvcnRzLlJlc3BvbnNlID0gUmVzcG9uc2U7XG5cbi8qKlxuICogRGVmaW5lIFwiZm9ybVwiIG1pbWUgdHlwZS5cbiAqL1xuXG5taW1lLmRlZmluZSh7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBbJ2Zvcm0nLCAndXJsZW5jb2RlZCcsICdmb3JtLWRhdGEnXVxufSwgdHJ1ZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgbWFwLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2xzID0ge1xuICAnaHR0cDonOiBodHRwLFxuICAnaHR0cHM6JzogaHR0cHMsXG59O1xuXG4vKipcbiAqIERlZmF1bHQgc2VyaWFsaXphdGlvbiBtYXAuXG4gKlxuICogICAgIHN1cGVyYWdlbnQuc2VyaWFsaXplWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKG9iail7XG4gKiAgICAgICByZXR1cm4gJ2dlbmVyYXRlZCB4bWwgaGVyZSc7XG4gKiAgICAgfTtcbiAqXG4gKi9cblxuZXhwb3J0cy5zZXJpYWxpemUgPSB7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBxcy5zdHJpbmdpZnksXG4gICdhcHBsaWNhdGlvbi9qc29uJzogSlNPTi5zdHJpbmdpZnksXG59O1xuXG4vKipcbiAqIERlZmF1bHQgcGFyc2Vycy5cbiAqXG4gKiAgICAgc3VwZXJhZ2VudC5wYXJzZVsnYXBwbGljYXRpb24veG1sJ10gPSBmdW5jdGlvbihyZXMsIGZuKXtcbiAqICAgICAgIGZuKG51bGwsIHJlcyk7XG4gKiAgICAgfTtcbiAqXG4gKi9cblxuZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2VycycpO1xuXG4vKipcbiAqIEluaXRpYWxpemUgaW50ZXJuYWwgaGVhZGVyIHRyYWNraW5nIHByb3BlcnRpZXMgb24gYSByZXF1ZXN0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXEgdGhlIGluc3RhbmNlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2luaXRIZWFkZXJzKHJlcSkge1xuICBjb25zdCB1YSA9IGBub2RlLXN1cGVyYWdlbnQvJHtwa2cudmVyc2lvbn1gO1xuICByZXEuX2hlYWRlciA9IHsgLy8gY29lcmNlcyBoZWFkZXIgbmFtZXMgdG8gbG93ZXJjYXNlXG4gICAgJ3VzZXItYWdlbnQnOiB1YVxuICB9O1xuICByZXEuaGVhZGVyID0geyAvLyBwcmVzZXJ2ZXMgaGVhZGVyIG5hbWUgY2FzZVxuICAgICdVc2VyLUFnZW50JzogdWFcbiAgfTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBSZXF1ZXN0YCB3aXRoIHRoZSBnaXZlbiBgbWV0aG9kYCBhbmQgYHVybGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdChtZXRob2QsIHVybCkge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiB1cmwpIHVybCA9IGZvcm1hdCh1cmwpO1xuICB0aGlzLl9hZ2VudCA9IGZhbHNlO1xuICB0aGlzLl9mb3JtRGF0YSA9IG51bGw7XG4gIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICB0aGlzLnVybCA9IHVybDtcbiAgX2luaXRIZWFkZXJzKHRoaXMpO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5fcmVkaXJlY3RzID0gMDtcbiAgdGhpcy5yZWRpcmVjdHMobWV0aG9kID09PSAnSEVBRCcgPyAwIDogNSk7XG4gIHRoaXMuY29va2llcyA9ICcnO1xuICB0aGlzLnFzID0ge307XG4gIHRoaXMuX3F1ZXJ5ID0gW107XG4gIHRoaXMucXNSYXcgPSB0aGlzLl9xdWVyeTsgLy8gVW51c2VkLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgb25seVxuICB0aGlzLl9yZWRpcmVjdExpc3QgPSBbXTtcbiAgdGhpcy5fc3RyZWFtUmVxdWVzdCA9IGZhbHNlO1xuICB0aGlzLm9uY2UoJ2VuZCcsIHRoaXMuY2xlYXJUaW1lb3V0LmJpbmQodGhpcykpO1xufVxuXG4vKipcbiAqIEluaGVyaXQgZnJvbSBgU3RyZWFtYCAod2hpY2ggaW5oZXJpdHMgZnJvbSBgRXZlbnRFbWl0dGVyYCkuXG4gKiBNaXhpbiBgUmVxdWVzdEJhc2VgLlxuICovXG51dGlsLmluaGVyaXRzKFJlcXVlc3QsIFN0cmVhbSk7XG5SZXF1ZXN0QmFzZShSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUXVldWUgdGhlIGdpdmVuIGBmaWxlYCBhcyBhbiBhdHRhY2htZW50IHRvIHRoZSBzcGVjaWZpZWQgYGZpZWxkYCxcbiAqIHdpdGggb3B0aW9uYWwgYG9wdGlvbnNgIChvciBmaWxlbmFtZSkuXG4gKlxuICogYGBgIGpzXG4gKiByZXF1ZXN0LnBvc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvdXBsb2FkJylcbiAqICAgLmF0dGFjaCgnZmllbGQnLCBCdWZmZXIuZnJvbSgnPGI+SGVsbG8gd29ybGQ8L2I+JyksICdoZWxsby5odG1sJylcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKiBgYGBcbiAqXG4gKiBBIGZpbGVuYW1lIG1heSBhbHNvIGJlIHVzZWQ6XG4gKlxuICogYGBgIGpzXG4gKiByZXF1ZXN0LnBvc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvdXBsb2FkJylcbiAqICAgLmF0dGFjaCgnZmlsZXMnLCAnaW1hZ2UuanBnJylcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEBwYXJhbSB7U3RyaW5nfGZzLlJlYWRTdHJlYW18QnVmZmVyfSBmaWxlXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbihmaWVsZCwgZmlsZSwgb3B0aW9ucyl7XG4gIGlmIChmaWxlKSB7XG4gICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgIHRocm93IEVycm9yKFwic3VwZXJhZ2VudCBjYW4ndCBtaXggLnNlbmQoKSBhbmQgLmF0dGFjaCgpXCIpO1xuICAgIH1cblxuICAgIGxldCBvID0gb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICAgIG8gPSB7IGZpbGVuYW1lOiBvcHRpb25zIH07XG4gICAgfVxuXG4gICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBmaWxlKSB7XG4gICAgICBpZiAoIW8uZmlsZW5hbWUpIG8uZmlsZW5hbWUgPSBmaWxlO1xuICAgICAgZGVidWcoJ2NyZWF0aW5nIGBmcy5SZWFkU3RyZWFtYCBpbnN0YW5jZSBmb3IgZmlsZTogJXMnLCBmaWxlKTtcbiAgICAgIGZpbGUgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGUpO1xuICAgIH0gZWxzZSBpZiAoIW8uZmlsZW5hbWUgJiYgZmlsZS5wYXRoKSB7XG4gICAgICBvLmZpbGVuYW1lID0gZmlsZS5wYXRoO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEZvcm1EYXRhKCkuYXBwZW5kKGZpZWxkLCBmaWxlLCBvKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3QucHJvdG90eXBlLl9nZXRGb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX2Zvcm1EYXRhKSB7XG4gICAgdGhpcy5fZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICB0aGlzLl9mb3JtRGF0YS5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB0aGlzLmFib3J0KCk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2Zvcm1EYXRhO1xufTtcblxuLyoqXG4gKiBHZXRzL3NldHMgdGhlIGBBZ2VudGAgdG8gdXNlIGZvciB0aGlzIEhUVFAgcmVxdWVzdC4gVGhlIGRlZmF1bHQgKGlmIHRoaXNcbiAqIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQpIGlzIHRvIG9wdCBvdXQgb2YgY29ubmVjdGlvbiBwb29saW5nIChgYWdlbnQ6IGZhbHNlYCkuXG4gKlxuICogQHBhcmFtIHtodHRwLkFnZW50fSBhZ2VudFxuICogQHJldHVybiB7aHR0cC5BZ2VudH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWdlbnQgPSBmdW5jdGlvbihhZ2VudCl7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX2FnZW50O1xuICB0aGlzLl9hZ2VudCA9IGFnZW50O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IF9Db250ZW50LVR5cGVfIHJlc3BvbnNlIGhlYWRlciBwYXNzZWQgdGhyb3VnaCBgbWltZS5sb29rdXAoKWAuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICByZXF1ZXN0LnBvc3QoJy8nKVxuICogICAgICAgIC50eXBlKCd4bWwnKVxuICogICAgICAgIC5zZW5kKHhtbHN0cmluZylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnLycpXG4gKiAgICAgICAgLnR5cGUoJ2pzb24nKVxuICogICAgICAgIC5zZW5kKGpzb25zdHJpbmcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXF1ZXN0LnBvc3QoJy8nKVxuICogICAgICAgIC50eXBlKCdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuc2VuZChqc29uc3RyaW5nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgcmV0dXJuIHRoaXMuc2V0KFxuICAgICdDb250ZW50LVR5cGUnLFxuICAgIH50eXBlLmluZGV4T2YoJy8nKSA/IHR5cGUgOiBtaW1lLmxvb2t1cCh0eXBlKVxuICApO1xufTtcblxuLyoqXG4gKiBTZXQgX0FjY2VwdF8gcmVzcG9uc2UgaGVhZGVyIHBhc3NlZCB0aHJvdWdoIGBtaW1lLmxvb2t1cCgpYC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIHN1cGVyYWdlbnQudHlwZXMuanNvbiA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAqXG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvYWdlbnQnKVxuICogICAgICAgIC5hY2NlcHQoJ2pzb24nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy9hZ2VudCcpXG4gKiAgICAgICAgLmFjY2VwdCgnYXBwbGljYXRpb24vanNvbicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFjY2VwdFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uKHR5cGUpe1xuICByZXR1cm4gdGhpcy5zZXQoJ0FjY2VwdCcsIH50eXBlLmluZGV4T2YoJy8nKVxuICAgID8gdHlwZVxuICAgIDogbWltZS5sb29rdXAodHlwZSkpO1xufTtcblxuLyoqXG4gKiBBZGQgcXVlcnktc3RyaW5nIGB2YWxgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgcmVxdWVzdC5nZXQoJy9zaG9lcycpXG4gKiAgICAgLnF1ZXJ5KCdzaXplPTEwJylcbiAqICAgICAucXVlcnkoeyBjb2xvcjogJ2JsdWUnIH0pXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uKHZhbCl7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgdmFsKSB7XG4gICAgdGhpcy5fcXVlcnkucHVzaCh2YWwpO1xuICB9IGVsc2Uge1xuICAgIGV4dGVuZCh0aGlzLnFzLCB2YWwpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXcml0ZSByYXcgYGRhdGFgIC8gYGVuY29kaW5nYCB0byB0aGUgc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfFN0cmluZ30gZGF0YVxuICogQHBhcmFtIHtTdHJpbmd9IGVuY29kaW5nXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGRhdGEsIGVuY29kaW5nKXtcbiAgY29uc3QgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIGlmICghdGhpcy5fc3RyZWFtUmVxdWVzdCkge1xuICAgIHRoaXMuX3N0cmVhbVJlcXVlc3QgPSB0cnVlO1xuICB9XG4gIHJldHVybiByZXEud3JpdGUoZGF0YSwgZW5jb2RpbmcpO1xufTtcblxuLyoqXG4gKiBQaXBlIHRoZSByZXF1ZXN0IGJvZHkgdG8gYHN0cmVhbWAuXG4gKlxuICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucyl7XG4gIHRoaXMucGlwZWQgPSB0cnVlOyAvLyBIQUNLLi4uXG4gIHRoaXMuYnVmZmVyKGZhbHNlKTtcbiAgdGhpcy5lbmQoKTtcbiAgcmV0dXJuIHRoaXMuX3BpcGVDb250aW51ZShzdHJlYW0sIG9wdGlvbnMpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuX3BpcGVDb250aW51ZSA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucyl7XG4gIHRoaXMucmVxLm9uY2UoJ3Jlc3BvbnNlJywgcmVzID0+IHtcbiAgICAvLyByZWRpcmVjdFxuICAgIGNvbnN0IHJlZGlyZWN0ID0gaXNSZWRpcmVjdChyZXMuc3RhdHVzQ29kZSk7XG4gICAgaWYgKHJlZGlyZWN0ICYmIHRoaXMuX3JlZGlyZWN0cysrICE9IHRoaXMuX21heFJlZGlyZWN0cykge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlZGlyZWN0KHJlcykuX3BpcGVDb250aW51ZShzdHJlYW0sIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHRoaXMucmVzID0gcmVzO1xuICAgIHRoaXMuX2VtaXRSZXNwb25zZSgpO1xuICAgIGlmICh0aGlzLl9hYm9ydGVkKSByZXR1cm47XG5cbiAgICBpZiAodGhpcy5fc2hvdWxkVW56aXAocmVzKSkge1xuICAgICAgY29uc3QgdW56aXBPYmogPSB6bGliLmNyZWF0ZVVuemlwKCk7XG4gICAgICB1bnppcE9iai5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7IC8vIHVuZXhwZWN0ZWQgZW5kIG9mIGZpbGUgaXMgaWdub3JlZCBieSBicm93c2VycyBhbmQgY3VybFxuICAgICAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmVzLnBpcGUodW56aXBPYmopLnBpcGUoc3RyZWFtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnBpcGUoc3RyZWFtLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmVzLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtO1xufTtcblxuLyoqXG4gKiBFbmFibGUgLyBkaXNhYmxlIGJ1ZmZlcmluZy5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSBbdmFsXVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmJ1ZmZlciA9IGZ1bmN0aW9uKHZhbCl7XG4gIHRoaXMuX2J1ZmZlciA9IChmYWxzZSAhPT0gdmFsKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlZGlyZWN0IHRvIGB1cmxcbiAqXG4gKiBAcGFyYW0ge0luY29taW5nTWVzc2FnZX0gcmVzXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLl9yZWRpcmVjdCA9IGZ1bmN0aW9uKHJlcyl7XG4gIGxldCB1cmwgPSByZXMuaGVhZGVycy5sb2NhdGlvbjtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsYmFjayhuZXcgRXJyb3IoJ05vIGxvY2F0aW9uIGhlYWRlciBmb3IgcmVkaXJlY3QnKSwgcmVzKTtcbiAgfVxuXG4gIGRlYnVnKCdyZWRpcmVjdCAlcyAtPiAlcycsIHRoaXMudXJsLCB1cmwpO1xuXG4gIC8vIGxvY2F0aW9uXG4gIHVybCA9IHJlc29sdmUodGhpcy51cmwsIHVybCk7XG5cbiAgLy8gZW5zdXJlIHRoZSByZXNwb25zZSBpcyBiZWluZyBjb25zdW1lZFxuICAvLyB0aGlzIGlzIHJlcXVpcmVkIGZvciBOb2RlIHYwLjEwK1xuICByZXMucmVzdW1lKCk7XG5cbiAgbGV0IGhlYWRlcnMgPSB0aGlzLnJlcS5faGVhZGVycztcblxuICBjb25zdCBjaGFuZ2VzT3JpZ2luID0gcGFyc2UodXJsKS5ob3N0ICE9PSBwYXJzZSh0aGlzLnVybCkuaG9zdDtcblxuICAvLyBpbXBsZW1lbnRhdGlvbiBvZiAzMDIgZm9sbG93aW5nIGRlZmFjdG8gc3RhbmRhcmRcbiAgaWYgKHJlcy5zdGF0dXNDb2RlID09IDMwMSB8fCByZXMuc3RhdHVzQ29kZSA9PSAzMDIpe1xuICAgIC8vIHN0cmlwIENvbnRlbnQtKiByZWxhdGVkIGZpZWxkc1xuICAgIC8vIGluIGNhc2Ugb2YgUE9TVCBldGNcbiAgICBoZWFkZXJzID0gdXRpbHMuY2xlYW5IZWFkZXIodGhpcy5yZXEuX2hlYWRlcnMsIGNoYW5nZXNPcmlnaW4pO1xuXG4gICAgLy8gZm9yY2UgR0VUXG4gICAgdGhpcy5tZXRob2QgPSAnSEVBRCcgPT0gdGhpcy5tZXRob2RcbiAgICAgID8gJ0hFQUQnXG4gICAgICA6ICdHRVQnO1xuXG4gICAgLy8gY2xlYXIgZGF0YVxuICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICB9XG4gIC8vIDMwMyBpcyBhbHdheXMgR0VUXG4gIGlmIChyZXMuc3RhdHVzQ29kZSA9PSAzMDMpIHtcbiAgICAvLyBzdHJpcCBDb250ZW50LSogcmVsYXRlZCBmaWVsZHNcbiAgICAvLyBpbiBjYXNlIG9mIFBPU1QgZXRjXG4gICAgaGVhZGVycyA9IHV0aWxzLmNsZWFuSGVhZGVyKHRoaXMucmVxLl9oZWFkZXJzLCBjaGFuZ2VzT3JpZ2luKTtcblxuICAgIC8vIGZvcmNlIG1ldGhvZFxuICAgIHRoaXMubWV0aG9kID0gJ0dFVCc7XG5cbiAgICAvLyBjbGVhciBkYXRhXG4gICAgdGhpcy5fZGF0YSA9IG51bGw7XG4gIH1cbiAgLy8gMzA3IHByZXNlcnZlcyBtZXRob2RcbiAgLy8gMzA4IHByZXNlcnZlcyBtZXRob2RcbiAgZGVsZXRlIGhlYWRlcnMuaG9zdDtcblxuICBkZWxldGUgdGhpcy5yZXE7XG4gIGRlbGV0ZSB0aGlzLl9mb3JtRGF0YTtcblxuICAvLyByZW1vdmUgYWxsIGFkZCBoZWFkZXIgZXhjZXB0IFVzZXItQWdlbnRcbiAgX2luaXRIZWFkZXJzKHRoaXMpO1xuXG4gIC8vIHJlZGlyZWN0XG4gIHRoaXMuX2VuZENhbGxlZCA9IGZhbHNlO1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5xcyA9IHt9O1xuICB0aGlzLl9xdWVyeS5sZW5ndGggPSAwO1xuICB0aGlzLnNldChoZWFkZXJzKTtcbiAgdGhpcy5lbWl0KCdyZWRpcmVjdCcsIHJlcyk7XG4gIHRoaXMuX3JlZGlyZWN0TGlzdC5wdXNoKHRoaXMudXJsKTtcbiAgdGhpcy5lbmQodGhpcy5fY2FsbGJhY2spO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEF1dGhvcml6YXRpb24gZmllbGQgdmFsdWUgd2l0aCBgdXNlcmAgYW5kIGBwYXNzYC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgIC5hdXRoKCd0b2JpJywgJ2xlYXJuYm9vc3QnKVxuICogICAuYXV0aCgndG9iaTpsZWFybmJvb3N0JylcbiAqICAgLmF1dGgoJ3RvYmknKVxuICogICAuYXV0aChhY2Nlc3NUb2tlbiwgeyB0eXBlOiAnYmVhcmVyJyB9KVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gW3Bhc3NdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbnMgd2l0aCBhdXRob3JpemF0aW9uIHR5cGUgJ2Jhc2ljJyBvciAnYmVhcmVyJyAoJ2Jhc2ljJyBpcyBkZWZhdWx0KVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmF1dGggPSBmdW5jdGlvbih1c2VyLCBwYXNzLCBvcHRpb25zKXtcbiAgaWYgKDEgPT09IGFyZ3VtZW50cy5sZW5ndGgpIHBhc3MgPSAnJztcbiAgaWYgKHR5cGVvZiBwYXNzID09PSAnb2JqZWN0JyAmJiBwYXNzICE9PSBudWxsKSB7IC8vIHBhc3MgaXMgb3B0aW9uYWwgYW5kIGNhbiBiZSByZXBsYWNlZCB3aXRoIG9wdGlvbnNcbiAgICBvcHRpb25zID0gcGFzcztcbiAgICBwYXNzID0gJyc7XG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHsgdHlwZTogJ2Jhc2ljJyB9O1xuICB9XG5cbiAgdmFyIGVuY29kZXIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzdHJpbmcpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfTtcblxuICByZXR1cm4gdGhpcy5fYXV0aCh1c2VyLCBwYXNzLCBvcHRpb25zLCBlbmNvZGVyKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjZXJ0aWZpY2F0ZSBhdXRob3JpdHkgb3B0aW9uIGZvciBodHRwcyByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXl9IGNlcnRcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jYSA9IGZ1bmN0aW9uKGNlcnQpe1xuICB0aGlzLl9jYSA9IGNlcnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNsaWVudCBjZXJ0aWZpY2F0ZSBrZXkgb3B0aW9uIGZvciBodHRwcyByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgU3RyaW5nfSBjZXJ0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24oY2VydCl7XG4gIHRoaXMuX2tleSA9IGNlcnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGtleSwgY2VydGlmaWNhdGUsIGFuZCBDQSBjZXJ0cyBvZiB0aGUgY2xpZW50IGluIFBGWCBvciBQS0NTMTIgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgU3RyaW5nfSBjZXJ0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUucGZ4ID0gZnVuY3Rpb24oY2VydCkge1xuICBpZiAodHlwZW9mIGNlcnQgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoY2VydCkpIHtcbiAgICB0aGlzLl9wZnggPSBjZXJ0LnBmeDtcbiAgICB0aGlzLl9wYXNzcGhyYXNlID0gY2VydC5wYXNzcGhyYXNlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3BmeCA9IGNlcnQ7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgY2xpZW50IGNlcnRpZmljYXRlIG9wdGlvbiBmb3IgaHR0cHMgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IFN0cmluZ30gY2VydFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNlcnQgPSBmdW5jdGlvbihjZXJ0KXtcbiAgdGhpcy5fY2VydCA9IGNlcnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYW4gaHR0cFtzXSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm4ge091dGdvaW5nTWVzc2FnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbigpe1xuICBpZiAodGhpcy5yZXEpIHJldHVybiB0aGlzLnJlcTtcblxuICBjb25zdCBvcHRpb25zID0ge307XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBxdWVyeSA9IHFzLnN0cmluZ2lmeSh0aGlzLnFzLCB7XG4gICAgICBpbmRpY2VzOiBmYWxzZSxcbiAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHJ1ZSxcbiAgICB9KTtcbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIHRoaXMucXMgPSB7fTtcbiAgICAgIHRoaXMuX3F1ZXJ5LnB1c2gocXVlcnkpO1xuICAgIH1cbiAgICB0aGlzLl9maW5hbGl6ZVF1ZXJ5U3RyaW5nKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xuICB9XG5cbiAgbGV0IHVybCA9IHRoaXMudXJsO1xuICBjb25zdCByZXRyaWVzID0gdGhpcy5fcmV0cmllcztcblxuICAvLyBkZWZhdWx0IHRvIGh0dHA6Ly9cbiAgaWYgKDAgIT0gdXJsLmluZGV4T2YoJ2h0dHAnKSkgdXJsID0gYGh0dHA6Ly8ke3VybH1gO1xuICB1cmwgPSBwYXJzZSh1cmwpO1xuXG4gIC8vIHN1cHBvcnQgdW5peCBzb2NrZXRzXG4gIGlmICgvXmh0dHBzP1xcK3VuaXg6Ly50ZXN0KHVybC5wcm90b2NvbCkgPT09IHRydWUpIHtcbiAgICAvLyBnZXQgdGhlIHByb3RvY29sXG4gICAgdXJsLnByb3RvY29sID0gYCR7dXJsLnByb3RvY29sLnNwbGl0KCcrJylbMF19OmA7XG5cbiAgICAvLyBnZXQgdGhlIHNvY2tldCwgcGF0aFxuICAgIGNvbnN0IHVuaXhQYXJ0cyA9IHVybC5wYXRoLm1hdGNoKC9eKFteL10rKSguKykkLyk7XG4gICAgb3B0aW9ucy5zb2NrZXRQYXRoID0gdW5peFBhcnRzWzFdLnJlcGxhY2UoLyUyRi9nLCAnLycpO1xuICAgIHVybC5wYXRoID0gdW5peFBhcnRzWzJdO1xuICB9XG5cbiAgLy8gb3B0aW9uc1xuICBvcHRpb25zLm1ldGhvZCA9IHRoaXMubWV0aG9kO1xuICBvcHRpb25zLnBvcnQgPSB1cmwucG9ydDtcbiAgb3B0aW9ucy5wYXRoID0gdXJsLnBhdGg7XG4gIG9wdGlvbnMuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgb3B0aW9ucy5jYSA9IHRoaXMuX2NhO1xuICBvcHRpb25zLmtleSA9IHRoaXMuX2tleTtcbiAgb3B0aW9ucy5wZnggPSB0aGlzLl9wZng7XG4gIG9wdGlvbnMuY2VydCA9IHRoaXMuX2NlcnQ7XG4gIG9wdGlvbnMucGFzc3BocmFzZSA9IHRoaXMuX3Bhc3NwaHJhc2U7XG4gIG9wdGlvbnMuYWdlbnQgPSB0aGlzLl9hZ2VudDtcblxuICAvLyBpbml0aWF0ZSByZXF1ZXN0XG4gIGNvbnN0IG1vZCA9IGV4cG9ydHMucHJvdG9jb2xzW3VybC5wcm90b2NvbF07XG5cbiAgLy8gcmVxdWVzdFxuICBjb25zdCByZXEgPSAodGhpcy5yZXEgPSBtb2QucmVxdWVzdChvcHRpb25zKSk7XG5cbiAgLy8gc2V0IHRjcCBubyBkZWxheVxuICByZXEuc2V0Tm9EZWxheSh0cnVlKTtcblxuICBpZiAoJ0hFQUQnICE9IG9wdGlvbnMubWV0aG9kKSB7XG4gICAgcmVxLnNldEhlYWRlcignQWNjZXB0LUVuY29kaW5nJywgJ2d6aXAsIGRlZmxhdGUnKTtcbiAgfVxuICB0aGlzLnByb3RvY29sID0gdXJsLnByb3RvY29sO1xuICB0aGlzLmhvc3QgPSB1cmwuaG9zdDtcblxuICAvLyBleHBvc2UgZXZlbnRzXG4gIHJlcS5vbmNlKCdkcmFpbicsICgpID0+IHsgdGhpcy5lbWl0KCdkcmFpbicpOyB9KTtcblxuICByZXEub25jZSgnZXJyb3InLCBlcnIgPT4ge1xuICAgIC8vIGZsYWcgYWJvcnRpb24gaGVyZSBmb3Igb3V0IHRpbWVvdXRzXG4gICAgLy8gYmVjYXVzZSBub2RlIHdpbGwgZW1pdCBhIGZhdXgtZXJyb3IgXCJzb2NrZXQgaGFuZyB1cFwiXG4gICAgLy8gd2hlbiByZXF1ZXN0IGlzIGFib3J0ZWQgYmVmb3JlIGEgY29ubmVjdGlvbiBpcyBtYWRlXG4gICAgaWYgKHRoaXMuX2Fib3J0ZWQpIHJldHVybjtcbiAgICAvLyBpZiBub3QgdGhlIHNhbWUsIHdlIGFyZSBpbiB0aGUgKipvbGQqKiAoY2FuY2VsbGVkKSByZXF1ZXN0LFxuICAgIC8vIHNvIG5lZWQgdG8gY29udGludWUgKHNhbWUgYXMgZm9yIGFib3ZlKVxuICAgIGlmICh0aGlzLl9yZXRyaWVzICE9PSByZXRyaWVzKSByZXR1cm47XG4gICAgLy8gaWYgd2UndmUgcmVjZWl2ZWQgYSByZXNwb25zZSB0aGVuIHdlIGRvbid0IHdhbnQgdG8gbGV0XG4gICAgLy8gYW4gZXJyb3IgaW4gdGhlIHJlcXVlc3QgYmxvdyB1cCB0aGUgcmVzcG9uc2VcbiAgICBpZiAodGhpcy5yZXNwb25zZSkgcmV0dXJuO1xuICAgIHRoaXMuY2FsbGJhY2soZXJyKTtcbiAgfSk7XG5cbiAgLy8gYXV0aFxuICBpZiAodXJsLmF1dGgpIHtcbiAgICBjb25zdCBhdXRoID0gdXJsLmF1dGguc3BsaXQoJzonKTtcbiAgICB0aGlzLmF1dGgoYXV0aFswXSwgYXV0aFsxXSk7XG4gIH1cbiAgaWYgKHRoaXMudXNlcm5hbWUgJiYgdGhpcy5wYXNzd29yZCkge1xuICAgIHRoaXMuYXV0aCh0aGlzLnVzZXJuYW1lLCB0aGlzLnBhc3N3b3JkKTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmhlYWRlcikge1xuICAgIGlmICh0aGlzLmhlYWRlci5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgcmVxLnNldEhlYWRlcihrZXksIHRoaXMuaGVhZGVyW2tleV0pO1xuICB9XG5cbiAgLy8gYWRkIGNvb2tpZXNcbiAgaWYgKHRoaXMuY29va2llcykge1xuICAgIGlmKHRoaXMuaGVhZGVyLmhhc093blByb3BlcnR5KCdjb29raWUnKSkge1xuICAgICAgLy8gbWVyZ2VcbiAgICAgIGNvbnN0IHRtcEphciA9IG5ldyBDb29raWVKYXIuQ29va2llSmFyKCk7XG4gICAgICB0bXBKYXIuc2V0Q29va2llcyh0aGlzLmhlYWRlci5jb29raWUuc3BsaXQoJzsnKSk7XG4gICAgICB0bXBKYXIuc2V0Q29va2llcyh0aGlzLmNvb2tpZXMuc3BsaXQoJzsnKSk7XG4gICAgICByZXEuc2V0SGVhZGVyKCdDb29raWUnLHRtcEphci5nZXRDb29raWVzKENvb2tpZUphci5Db29raWVBY2Nlc3NJbmZvLkFsbCkudG9WYWx1ZVN0cmluZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxLnNldEhlYWRlcignQ29va2llJywgdGhpcy5jb29raWVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBJbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggYGVycmAgYW5kIGByZXNgXG4gKiBhbmQgaGFuZGxlIGFyaXR5IGNoZWNrLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uKGVyciwgcmVzKXtcbiAgaWYgKHRoaXMuX3Nob3VsZFJldHJ5KGVyciwgcmVzKSkge1xuICAgIHJldHVybiB0aGlzLl9yZXRyeSgpO1xuICB9XG5cbiAgLy8gQXZvaWQgdGhlIGVycm9yIHdoaWNoIGlzIGVtaXR0ZWQgZnJvbSAnc29ja2V0IGhhbmcgdXAnIHRvIGNhdXNlIHRoZSBmbiB1bmRlZmluZWQgZXJyb3Igb24gSlMgcnVudGltZS5cbiAgY29uc3QgZm4gPSB0aGlzLl9jYWxsYmFjayB8fCBub29wO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICBpZiAodGhpcy5jYWxsZWQpIHJldHVybiBjb25zb2xlLndhcm4oJ3N1cGVyYWdlbnQ6IGRvdWJsZSBjYWxsYmFjayBidWcnKTtcbiAgdGhpcy5jYWxsZWQgPSB0cnVlO1xuXG4gIGlmICghZXJyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy5faXNSZXNwb25zZU9LKHJlcykpIHtcbiAgICAgICAgbGV0IG1zZyA9ICdVbnN1Y2Nlc3NmdWwgSFRUUCByZXNwb25zZSc7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICBtc2cgPSBodHRwLlNUQVRVU19DT0RFU1tyZXMuc3RhdHVzXSB8fCBtc2c7XG4gICAgICAgIH1cbiAgICAgICAgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIGVyci5zdGF0dXMgPSByZXMgPyByZXMuc3RhdHVzIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKG5ld19lcnIpIHtcbiAgICAgIGVyciA9IG5ld19lcnI7XG4gICAgfVxuICB9XG4gIC8vIEl0J3MgaW1wb3J0YW50IHRoYXQgdGhlIGNhbGxiYWNrIGlzIGNhbGxlZCBvdXRzaWRlIHRyeS9jYXRjaFxuICAvLyB0byBhdm9pZCBkb3VibGUgY2FsbGJhY2tcbiAgaWYgKCFlcnIpIHtcbiAgICByZXR1cm4gZm4obnVsbCwgcmVzKTtcbiAgfVxuXG4gIGVyci5yZXNwb25zZSA9IHJlcztcbiAgaWYgKHRoaXMuX21heFJldHJpZXMpIGVyci5yZXRyaWVzID0gdGhpcy5fcmV0cmllcyAtIDE7XG5cbiAgLy8gb25seSBlbWl0IGVycm9yIGV2ZW50IGlmIHRoZXJlIGlzIGEgbGlzdGVuZXJcbiAgLy8gb3RoZXJ3aXNlIHdlIGFzc3VtZSB0aGUgY2FsbGJhY2sgdG8gYC5lbmQoKWAgd2lsbCBnZXQgdGhlIGVycm9yXG4gIGlmIChlcnIgJiYgdGhpcy5saXN0ZW5lcnMoJ2Vycm9yJykubGVuZ3RoID4gMCkge1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgZm4oZXJyLCByZXMpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhIGhvc3Qgb2JqZWN0LFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuUmVxdWVzdC5wcm90b3R5cGUuX2lzSG9zdCA9IGZ1bmN0aW9uIF9pc0hvc3Qob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBTdHJlYW0gfHwgb2JqIGluc3RhbmNlb2YgRm9ybURhdGE7XG59XG5cbi8qKlxuICogSW5pdGlhdGUgcmVxdWVzdCwgaW52b2tpbmcgY2FsbGJhY2sgYGZuKGVyciwgcmVzKWBcbiAqIHdpdGggYW4gaW5zdGFuY2VvZiBgUmVzcG9uc2VgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuX2VtaXRSZXNwb25zZSA9IGZ1bmN0aW9uKGJvZHksIGZpbGVzKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKHRoaXMpO1xuICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJlc3BvbnNlLnJlZGlyZWN0cyA9IHRoaXMuX3JlZGlyZWN0TGlzdDtcbiAgaWYgKHVuZGVmaW5lZCAhPT0gYm9keSkge1xuICAgIHJlc3BvbnNlLmJvZHkgPSBib2R5O1xuICB9XG4gIHJlc3BvbnNlLmZpbGVzID0gZmlsZXM7XG4gIHRoaXMuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG5cblJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGZuKSB7XG4gIHRoaXMucmVxdWVzdCgpO1xuICBkZWJ1ZygnJXMgJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmwpO1xuXG4gIGlmICh0aGlzLl9lbmRDYWxsZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnV2FybmluZzogLmVuZCgpIHdhcyBjYWxsZWQgdHdpY2UuIFRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbiBzdXBlcmFnZW50J1xuICAgICk7XG4gIH1cbiAgdGhpcy5fZW5kQ2FsbGVkID0gdHJ1ZTtcblxuICAvLyBzdG9yZSBjYWxsYmFja1xuICB0aGlzLl9jYWxsYmFjayA9IGZuIHx8IG5vb3A7XG5cbiAgcmV0dXJuIHRoaXMuX2VuZCgpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZGF0YSA9IHRoaXMuX2RhdGE7XG4gIGNvbnN0IHJlcSA9IHRoaXMucmVxO1xuICBsZXQgYnVmZmVyID0gdGhpcy5fYnVmZmVyO1xuICBjb25zdCBtZXRob2QgPSB0aGlzLm1ldGhvZDtcblxuICB0aGlzLl9zZXRUaW1lb3V0cygpO1xuXG4gIC8vIGJvZHlcbiAgaWYgKCdIRUFEJyAhPSBtZXRob2QgJiYgIXJlcS5faGVhZGVyU2VudCkge1xuICAgIC8vIHNlcmlhbGl6ZSBzdHVmZlxuICAgIGlmICgnc3RyaW5nJyAhPSB0eXBlb2YgZGF0YSkge1xuICAgICAgbGV0IGNvbnRlbnRUeXBlID0gcmVxLmdldEhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAvLyBQYXJzZSBvdXQganVzdCB0aGUgY29udGVudCB0eXBlIGZyb20gdGhlIGhlYWRlciAoaWdub3JlIHRoZSBjaGFyc2V0KVxuICAgICAgaWYgKGNvbnRlbnRUeXBlKSBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnNwbGl0KCc7JylbMF07XG4gICAgICBsZXQgc2VyaWFsaXplID0gZXhwb3J0cy5zZXJpYWxpemVbY29udGVudFR5cGVdO1xuICAgICAgaWYgKCFzZXJpYWxpemUgJiYgaXNKU09OKGNvbnRlbnRUeXBlKSkge1xuICAgICAgICBzZXJpYWxpemUgPSBleHBvcnRzLnNlcmlhbGl6ZVsnYXBwbGljYXRpb24vanNvbiddO1xuICAgICAgfVxuICAgICAgaWYgKHNlcmlhbGl6ZSkgZGF0YSA9IHNlcmlhbGl6ZShkYXRhKTtcbiAgICB9XG5cbiAgICAvLyBjb250ZW50LWxlbmd0aFxuICAgIGlmIChkYXRhICYmICFyZXEuZ2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcpKSB7XG4gICAgICByZXEuc2V0SGVhZGVyKCdDb250ZW50LUxlbmd0aCcsIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSA/IGRhdGEubGVuZ3RoIDogQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlc3BvbnNlXG4gIHJlcS5vbmNlKCdyZXNwb25zZScsIHJlcyA9PiB7XG4gICAgZGVidWcoJyVzICVzIC0+ICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJsLCByZXMuc3RhdHVzQ29kZSk7XG5cbiAgICBpZiAodGhpcy5fcmVzcG9uc2VUaW1lb3V0VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGlwZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtYXggPSB0aGlzLl9tYXhSZWRpcmVjdHM7XG4gICAgY29uc3QgbWltZSA9IHV0aWxzLnR5cGUocmVzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddIHx8ICcnKSB8fCAndGV4dC9wbGFpbic7XG4gICAgY29uc3QgdHlwZSA9IG1pbWUuc3BsaXQoJy8nKVswXTtcbiAgICBjb25zdCBtdWx0aXBhcnQgPSAnbXVsdGlwYXJ0JyA9PSB0eXBlO1xuICAgIGNvbnN0IHJlZGlyZWN0ID0gaXNSZWRpcmVjdChyZXMuc3RhdHVzQ29kZSk7XG4gICAgbGV0IHBhcnNlciA9IHRoaXMuX3BhcnNlcjtcbiAgICBjb25zdCByZXNwb25zZVR5cGUgPSB0aGlzLl9yZXNwb25zZVR5cGU7XG5cbiAgICB0aGlzLnJlcyA9IHJlcztcblxuICAgIC8vIHJlZGlyZWN0XG4gICAgaWYgKHJlZGlyZWN0ICYmIHRoaXMuX3JlZGlyZWN0cysrICE9IG1heCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlZGlyZWN0KHJlcyk7XG4gICAgfVxuXG4gICAgaWYgKCdIRUFEJyA9PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdGhpcy5lbWl0KCdlbmQnKTtcbiAgICAgIHRoaXMuY2FsbGJhY2sobnVsbCwgdGhpcy5fZW1pdFJlc3BvbnNlKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHpsaWIgc3VwcG9ydFxuICAgIGlmICh0aGlzLl9zaG91bGRVbnppcChyZXMpKSB7XG4gICAgICB1bnppcChyZXEsIHJlcyk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgcGFyc2VyID0gZXhwb3J0cy5wYXJzZS5pbWFnZTsgLy8gSXQncyBhY3R1YWxseSBhIGdlbmVyaWMgQnVmZmVyXG4gICAgICAgIGJ1ZmZlciA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG11bHRpcGFydCkge1xuICAgICAgICBjb25zdCBmb3JtID0gbmV3IGZvcm1pZGFibGUuSW5jb21pbmdGb3JtKCk7XG4gICAgICAgIHBhcnNlciA9IGZvcm0ucGFyc2UuYmluZChmb3JtKTtcbiAgICAgICAgYnVmZmVyID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNJbWFnZU9yVmlkZW8obWltZSkpIHtcbiAgICAgICAgcGFyc2VyID0gZXhwb3J0cy5wYXJzZS5pbWFnZTtcbiAgICAgICAgYnVmZmVyID0gdHJ1ZTsgLy8gRm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGJ1ZmZlcmluZyBkZWZhdWx0IGlzIGFkLWhvYyBNSU1FLWRlcGVuZGVudFxuICAgICAgfSBlbHNlIGlmIChleHBvcnRzLnBhcnNlW21pbWVdKSB7XG4gICAgICAgIHBhcnNlciA9IGV4cG9ydHMucGFyc2VbbWltZV07XG4gICAgICB9IGVsc2UgaWYgKCd0ZXh0JyA9PSB0eXBlKSB7XG4gICAgICAgIHBhcnNlciA9IGV4cG9ydHMucGFyc2UudGV4dDtcbiAgICAgICAgYnVmZmVyID0gKGJ1ZmZlciAhPT0gZmFsc2UpO1xuXG4gICAgICAgIC8vIGV2ZXJ5b25lIHdhbnRzIHRoZWlyIG93biB3aGl0ZS1sYWJlbGVkIGpzb25cbiAgICAgIH0gZWxzZSBpZiAoaXNKU09OKG1pbWUpKSB7XG4gICAgICAgIHBhcnNlciA9IGV4cG9ydHMucGFyc2VbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICAgICAgYnVmZmVyID0gKGJ1ZmZlciAhPT0gZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChidWZmZXIpIHtcbiAgICAgICAgcGFyc2VyID0gZXhwb3J0cy5wYXJzZS50ZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGJ5IGRlZmF1bHQgb25seSBidWZmZXIgdGV4dC8qLCBqc29uIGFuZCBtZXNzZWQgdXAgdGhpbmcgZnJvbSBoZWxsXG4gICAgaWYgKCh1bmRlZmluZWQgPT09IGJ1ZmZlciAmJiBpc1RleHQobWltZSkpIHx8IGlzSlNPTihtaW1lKSkge1xuICAgICAgYnVmZmVyID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgcGFyc2VySGFuZGxlc0VuZCA9IGZhbHNlO1xuICAgIGlmIChidWZmZXIpIHtcbiAgICAgIC8vIFByb3RlY3Rpb25hIGFnYWluc3QgemlwIGJvbWJzIGFuZCBvdGhlciBudWlzYW5jZVxuICAgICAgbGV0IHJlc3BvbnNlQnl0ZXNMZWZ0ID0gdGhpcy5fbWF4UmVzcG9uc2VTaXplIHx8IDIwMDAwMDAwMDtcbiAgICAgIHJlcy5vbignZGF0YScsIGJ1ZiA9PiB7XG4gICAgICAgIHJlc3BvbnNlQnl0ZXNMZWZ0IC09IGJ1Zi5ieXRlTGVuZ3RoIHx8IGJ1Zi5sZW5ndGg7XG4gICAgICAgIGlmIChyZXNwb25zZUJ5dGVzTGVmdCA8IDApIHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgcHJvcGFnYXRlIHRocm91Z2ggZXJyb3IgZXZlbnRcbiAgICAgICAgICBjb25zdCBlcnIgPSBFcnJvcihcIk1heGltdW0gcmVzcG9uc2Ugc2l6ZSByZWFjaGVkXCIpO1xuICAgICAgICAgIGVyci5jb2RlID0gXCJFVE9PTEFSR0VcIjtcbiAgICAgICAgICAvLyBQYXJzZXJzIGFyZW4ndCByZXF1aXJlZCB0byBvYnNlcnZlIGVycm9yIGV2ZW50LFxuICAgICAgICAgIC8vIHNvIHdvdWxkIGluY29ycmVjdGx5IHJlcG9ydCBzdWNjZXNzXG4gICAgICAgICAgcGFyc2VySGFuZGxlc0VuZCA9IGZhbHNlO1xuICAgICAgICAgIC8vIFdpbGwgZW1pdCBlcnJvciBldmVudFxuICAgICAgICAgIHJlcy5kZXN0cm95KGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYXJzZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFVuYnVmZmVyZWQgcGFyc2VycyBhcmUgc3VwcG9zZWQgdG8gZW1pdCByZXNwb25zZSBlYXJseSxcbiAgICAgICAgLy8gd2hpY2ggaXMgd2VpcmQgQlRXLCBiZWNhdXNlIHJlc3BvbnNlLmJvZHkgd29uJ3QgYmUgdGhlcmUuXG4gICAgICAgIHBhcnNlckhhbmRsZXNFbmQgPSBidWZmZXI7XG5cbiAgICAgICAgcGFyc2VyKHJlcywgKGVyciwgb2JqLCBmaWxlcykgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLnRpbWVkb3V0KSB7XG4gICAgICAgICAgICAvLyBUaW1lb3V0IGhhcyBhbHJlYWR5IGhhbmRsZWQgYWxsIGNhbGxiYWNrc1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEludGVudGlvbmFsIChub24tdGltZW91dCkgYWJvcnQgaXMgc3VwcG9zZWQgdG8gcHJlc2VydmUgcGFydGlhbCByZXNwb25zZSxcbiAgICAgICAgICAvLyBldmVuIGlmIGl0IGRvZXNuJ3QgcGFyc2UuXG4gICAgICAgICAgaWYgKGVyciAmJiAhdGhpcy5fYWJvcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGFyc2VySGFuZGxlc0VuZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlbmQnKTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sobnVsbCwgdGhpcy5fZW1pdFJlc3BvbnNlKG9iaiwgZmlsZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucmVzID0gcmVzO1xuXG4gICAgLy8gdW5idWZmZXJlZFxuICAgIGlmICghYnVmZmVyKSB7XG4gICAgICBkZWJ1ZygndW5idWZmZXJlZCAlcyAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVybCk7XG4gICAgICB0aGlzLmNhbGxiYWNrKG51bGwsIHRoaXMuX2VtaXRSZXNwb25zZSgpKTtcbiAgICAgIGlmIChtdWx0aXBhcnQpIHJldHVybjsgLy8gYWxsb3cgbXVsdGlwYXJ0IHRvIGhhbmRsZSBlbmQgZXZlbnRcbiAgICAgIHJlcy5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgIGRlYnVnKCdlbmQgJXMgJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmwpO1xuICAgICAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdGVybWluYXRpbmcgZXZlbnRzXG4gICAgcmVzLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgIHBhcnNlckhhbmRsZXNFbmQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICB9KTtcbiAgICBpZiAoIXBhcnNlckhhbmRsZXNFbmQpXG4gICAgICByZXMub25jZSgnZW5kJywgKCkgPT4ge1xuICAgICAgICBkZWJ1ZygnZW5kICVzICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJsKTtcbiAgICAgICAgLy8gVE9ETzogdW5sZXNzIGJ1ZmZlcmluZyBlbWl0IGVhcmxpZXIgdG8gc3RyZWFtXG4gICAgICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sobnVsbCwgdGhpcy5fZW1pdFJlc3BvbnNlKCkpO1xuICAgICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuZW1pdCgncmVxdWVzdCcsIHRoaXMpO1xuXG4gIGNvbnN0IGdldFByb2dyZXNzTW9uaXRvciA9ICgpID0+IHtcbiAgICBjb25zdCBsZW5ndGhDb21wdXRhYmxlID0gdHJ1ZTtcbiAgICBjb25zdCB0b3RhbCA9IHJlcS5nZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJyk7XG4gICAgbGV0IGxvYWRlZCA9IDA7XG5cbiAgICBjb25zdCBwcm9ncmVzcyA9IG5ldyBTdHJlYW0uVHJhbnNmb3JtKCk7XG4gICAgcHJvZ3Jlc3MuX3RyYW5zZm9ybSA9IChjaHVuaywgZW5jb2RpbmcsIGNiKSA9PiB7XG4gICAgICBsb2FkZWQgKz0gY2h1bmsubGVuZ3RoO1xuICAgICAgdGhpcy5lbWl0KCdwcm9ncmVzcycsIHtcbiAgICAgICAgZGlyZWN0aW9uOiAndXBsb2FkJyxcbiAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICAgICAgbG9hZGVkLFxuICAgICAgICB0b3RhbCxcbiAgICAgIH0pO1xuICAgICAgY2IobnVsbCwgY2h1bmspO1xuICAgIH07XG4gICAgcmV0dXJuIHByb2dyZXNzO1xuICB9O1xuXG4gIGNvbnN0IGJ1ZmZlclRvQ2h1bmtzID0gKGJ1ZmZlcikgPT4ge1xuICAgIGNvbnN0IGNodW5rU2l6ZSA9IDE2ICogMTAyNDsgLy8gZGVmYXVsdCBoaWdoV2F0ZXJNYXJrIHZhbHVlXG4gICAgY29uc3QgY2h1bmtpbmcgPSBuZXcgU3RyZWFtLlJlYWRhYmxlKCk7XG4gICAgY29uc3QgdG90YWxMZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICAgIGNvbnN0IHJlbWFpbmRlciA9IHRvdGFsTGVuZ3RoICUgY2h1bmtTaXplO1xuICAgIGNvbnN0IGN1dG9mZiA9IHRvdGFsTGVuZ3RoIC0gcmVtYWluZGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXRvZmY7IGkgKz0gY2h1bmtTaXplKSB7XG4gICAgICBjb25zdCBjaHVuayA9IGJ1ZmZlci5zbGljZShpLCBpICsgY2h1bmtTaXplKTtcbiAgICAgIGNodW5raW5nLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIGlmIChyZW1haW5kZXIgPiAwKSB7XG4gICAgICBjb25zdCByZW1haW5kZXJCdWZmZXIgPSBidWZmZXIuc2xpY2UoLXJlbWFpbmRlcik7XG4gICAgICBjaHVua2luZy5wdXNoKHJlbWFpbmRlckJ1ZmZlcik7XG4gICAgfVxuXG4gICAgY2h1bmtpbmcucHVzaChudWxsKTsgLy8gbm8gbW9yZSBkYXRhXG5cbiAgICByZXR1cm4gY2h1bmtpbmc7XG4gIH1cblxuICAvLyBpZiBhIEZvcm1EYXRhIGluc3RhbmNlIGdvdCBjcmVhdGVkLCB0aGVuIHdlIHNlbmQgdGhhdCBhcyB0aGUgcmVxdWVzdCBib2R5XG4gIGNvbnN0IGZvcm1EYXRhID0gdGhpcy5fZm9ybURhdGE7XG4gIGlmIChmb3JtRGF0YSkge1xuXG4gICAgLy8gc2V0IGhlYWRlcnNcbiAgICBjb25zdCBoZWFkZXJzID0gZm9ybURhdGEuZ2V0SGVhZGVycygpO1xuICAgIGZvciAoY29uc3QgaSBpbiBoZWFkZXJzKSB7XG4gICAgICBkZWJ1Zygnc2V0dGluZyBGb3JtRGF0YSBoZWFkZXI6IFwiJXM6ICVzXCInLCBpLCBoZWFkZXJzW2ldKTtcbiAgICAgIHJlcS5zZXRIZWFkZXIoaSwgaGVhZGVyc1tpXSk7XG4gICAgfVxuXG4gICAgLy8gYXR0ZW1wdCB0byBnZXQgXCJDb250ZW50LUxlbmd0aFwiIGhlYWRlclxuICAgIGZvcm1EYXRhLmdldExlbmd0aCgoZXJyLCBsZW5ndGgpID0+IHtcbiAgICAgIC8vIFRPRE86IEFkZCBjaHVua2VkIGVuY29kaW5nIHdoZW4gbm8gbGVuZ3RoIChpZiBlcnIpXG5cbiAgICAgIGRlYnVnKCdnb3QgRm9ybURhdGEgQ29udGVudC1MZW5ndGg6ICVzJywgbGVuZ3RoKTtcbiAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgbGVuZ3RoKSB7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZm9ybURhdGEucGlwZShnZXRQcm9ncmVzc01vbml0b3IoKSkucGlwZShyZXEpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgIGJ1ZmZlclRvQ2h1bmtzKGRhdGEpLnBpcGUoZ2V0UHJvZ3Jlc3NNb25pdG9yKCkpLnBpcGUocmVxKTtcbiAgfSBlbHNlIHtcbiAgICByZXEuZW5kKGRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgcmVzcG9uc2UgaGFzIGEgbm9uLTAtc2l6ZWQgZ3ppcC1lbmNvZGVkIGJvZHlcbiAqL1xuUmVxdWVzdC5wcm90b3R5cGUuX3Nob3VsZFVuemlwID0gcmVzID0+IHtcbiAgaWYgKHJlcy5zdGF0dXNDb2RlID09PSAyMDQgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDMwNCkge1xuICAgIC8vIFRoZXNlIGFyZW4ndCBzdXBwb3NlZCB0byBoYXZlIGFueSBib2R5XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaGVhZGVyIGNvbnRlbnQgaXMgYSBzdHJpbmcsIGFuZCBkaXN0aW5jdGlvbiBiZXR3ZWVuIDAgYW5kIG5vIGluZm9ybWF0aW9uIGlzIGNydWNpYWxcbiAgaWYgKCcwJyA9PT0gcmVzLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pIHtcbiAgICAvLyBXZSBrbm93IHRoYXQgdGhlIGJvZHkgaXMgZW1wdHkgKHVuZm9ydHVuYXRlbHksIHRoaXMgY2hlY2sgZG9lcyBub3QgY292ZXIgY2h1bmtlZCBlbmNvZGluZylcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBjb25zb2xlLmxvZyhyZXMpO1xuICByZXR1cm4gL15cXHMqKD86ZGVmbGF0ZXxnemlwKVxccyokLy50ZXN0KHJlcy5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10pO1xufTtcblxuLy8gZ2VuZXJhdGUgSFRUUCB2ZXJiIG1ldGhvZHNcbmlmIChtZXRob2RzLmluZGV4T2YoJ2RlbCcpID09IC0xKSB7XG4gIC8vIGNyZWF0ZSBhIGNvcHkgc28gd2UgZG9uJ3QgY2F1c2UgY29uZmxpY3RzIHdpdGhcbiAgLy8gb3RoZXIgcGFja2FnZXMgdXNpbmcgdGhlIG1ldGhvZHMgcGFja2FnZSBhbmRcbiAgLy8gbnBtIDMueFxuICBtZXRob2RzID0gbWV0aG9kcy5zbGljZSgwKTtcbiAgbWV0aG9kcy5wdXNoKCdkZWwnKTtcbn1cbm1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4ge1xuICBjb25zdCBuYW1lID0gbWV0aG9kO1xuICBtZXRob2QgPSAnZGVsJyA9PSBtZXRob2QgPyAnZGVsZXRlJyA6IG1ldGhvZDtcblxuICBtZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcbiAgcmVxdWVzdFtuYW1lXSA9ICh1cmwsIGRhdGEsIGZuKSA9PiB7XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdChtZXRob2QsIHVybCk7XG4gICAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIChmbiA9IGRhdGEpLCAoZGF0YSA9IG51bGwpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBpZiAobWV0aG9kID09PSAnR0VUJyB8fCBtZXRob2QgPT09ICdIRUFEJykge1xuICAgICAgICByZXEucXVlcnkoZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXEuc2VuZChkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm4gJiYgcmVxLmVuZChmbik7XG4gICAgcmV0dXJuIHJlcTtcbiAgfTtcbn0pO1xuXG4vKipcbiAqIENoZWNrIGlmIGBtaW1lYCBpcyB0ZXh0IGFuZCBzaG91bGQgYmUgYnVmZmVyZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1pbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGlzVGV4dChtaW1lKSB7XG4gIGNvbnN0IHBhcnRzID0gbWltZS5zcGxpdCgnLycpO1xuICBjb25zdCB0eXBlID0gcGFydHNbMF07XG4gIGNvbnN0IHN1YnR5cGUgPSBwYXJ0c1sxXTtcblxuICByZXR1cm4gJ3RleHQnID09IHR5cGUgfHwgJ3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgPT0gc3VidHlwZTtcbn1cblxuZnVuY3Rpb24gaXNJbWFnZU9yVmlkZW8obWltZSkge1xuICBjb25zdCB0eXBlID0gbWltZS5zcGxpdCgnLycpWzBdO1xuXG4gIHJldHVybiAnaW1hZ2UnID09IHR5cGUgfHwgJ3ZpZGVvJyA9PSB0eXBlO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGBtaW1lYCBpcyBqc29uIG9yIGhhcyAranNvbiBzdHJ1Y3R1cmVkIHN5bnRheCBzdWZmaXguXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1pbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0pTT04obWltZSkge1xuICAvLyBzaG91bGQgbWF0Y2ggL2pzb24gb3IgK2pzb25cbiAgLy8gYnV0IG5vdCAvanNvbi1zZXFcbiAgcmV0dXJuIC9bXFwvK11qc29uKCR8W14tXFx3XSkvLnRlc3QobWltZSk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2Ugc2hvdWxkIGZvbGxvdyB0aGUgcmVkaXJlY3QgYGNvZGVgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNSZWRpcmVjdChjb2RlKSB7XG4gIHJldHVybiB+WzMwMSwgMzAyLCAzMDMsIDMwNSwgMzA3LCAzMDhdLmluZGV4T2YoY29kZSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcbiAgY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1ZztcbiAgY3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuICBjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG4gIGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuICBjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG4gIGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuICBjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG4gIE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgY3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuICB9KTtcbiAgLyoqXG4gICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICAqL1xuXG4gIGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuICAvKipcbiAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAgKi9cblxuICBjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuICBjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuICAvKipcbiAgKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gICpcbiAgKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gICovXG5cbiAgY3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuICAvKipcbiAgKiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG4gIGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICAgIHZhciBoYXNoID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcbiAgfVxuXG4gIGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG4gIC8qKlxuICAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAqIEBhcGkgcHVibGljXG4gICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG4gICAgdmFyIHByZXZUaW1lO1xuXG4gICAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICAvLyBEaXNhYmxlZD9cbiAgICAgIGlmICghZGVidWcuZW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZiA9IGRlYnVnOyAvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXG4gICAgICB2YXIgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcbiAgICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgICBzZWxmLmRpZmYgPSBtcztcbiAgICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICAgIHByZXZUaW1lID0gY3VycjtcbiAgICAgIGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgICAgfSAvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXG5cbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24gKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgICBpZiAobWF0Y2ggPT09ICclJScpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTsgLy8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXG4gICAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTsgLy8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblxuICAgICAgY3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuICAgICAgdmFyIGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuICAgICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgIGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gICAgZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG4gICAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICAgIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuICAgIGRlYnVnLmV4dGVuZCA9IGV4dGVuZDsgLy8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG4gICAgLy8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuICAgIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cbiAgICBpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuICAgIH1cblxuICAgIGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcbiAgICByZXR1cm4gZGVidWc7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcbiAgfVxuICAvKipcbiAgKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuXG4gIGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gICAgY3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcbiAgICBjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuICAgIGNyZWF0ZURlYnVnLnNraXBzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXNwbGl0W2ldKSB7XG4gICAgICAgIC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuICAgICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgICBjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuICAgICAgaW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gICpcbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuICB9XG4gIC8qKlxuICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICogQHJldHVybiB7Qm9vbGVhbn1cbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gICAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAqIENvZXJjZSBgdmFsYC5cbiAgKlxuICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAqIEByZXR1cm4ge01peGVkfVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG5cbiAgZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgY3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG4gIHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcblxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3J5cHRvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJpbmdfZGVjb2RlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJ2YXIgYXN5bmMgPSByZXF1aXJlKCcuL2FzeW5jLmpzJylcbiAgLCBhYm9ydCA9IHJlcXVpcmUoJy4vYWJvcnQuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBpdGVyYXRlO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWFjaCBqb2Igb2JqZWN0XG4gKlxuICogQHBhcmFtIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGN1cnJlbnQgam9iIHN0YXR1c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICovXG5mdW5jdGlvbiBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgY2FsbGJhY2spXG57XG4gIC8vIHN0b3JlIGN1cnJlbnQgaW5kZXhcbiAgdmFyIGtleSA9IHN0YXRlWydrZXllZExpc3QnXSA/IHN0YXRlWydrZXllZExpc3QnXVtzdGF0ZS5pbmRleF0gOiBzdGF0ZS5pbmRleDtcblxuICBzdGF0ZS5qb2JzW2tleV0gPSBydW5Kb2IoaXRlcmF0b3IsIGtleSwgbGlzdFtrZXldLCBmdW5jdGlvbihlcnJvciwgb3V0cHV0KVxuICB7XG4gICAgLy8gZG9uJ3QgcmVwZWF0IHlvdXJzZWxmXG4gICAgLy8gc2tpcCBzZWNvbmRhcnkgY2FsbGJhY2tzXG4gICAgaWYgKCEoa2V5IGluIHN0YXRlLmpvYnMpKVxuICAgIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiB1cCBqb2JzXG4gICAgZGVsZXRlIHN0YXRlLmpvYnNba2V5XTtcblxuICAgIGlmIChlcnJvcilcbiAgICB7XG4gICAgICAvLyBkb24ndCBwcm9jZXNzIHJlc3Qgb2YgdGhlIHJlc3VsdHNcbiAgICAgIC8vIHN0b3Agc3RpbGwgYWN0aXZlIGpvYnNcbiAgICAgIC8vIGFuZCByZXNldCB0aGUgbGlzdFxuICAgICAgYWJvcnQoc3RhdGUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgc3RhdGUucmVzdWx0c1trZXldID0gb3V0cHV0O1xuICAgIH1cblxuICAgIC8vIHJldHVybiBzYWx2YWdlZCByZXN1bHRzXG4gICAgY2FsbGJhY2soZXJyb3IsIHN0YXRlLnJlc3VsdHMpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgam9iIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gaW52b2tlXG4gKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0ga2V5IC0ga2V5L2luZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoZSBsaXN0IG9mIGpvYnNcbiAqIEBwYXJhbSAgIHttaXhlZH0gaXRlbSAtIGpvYiBkZXNjcmlwdGlvblxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgYWZ0ZXIgaXRlcmF0b3IgaXMgZG9uZSB3aXRoIHRoZSBqb2JcbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxtaXhlZH0gLSBqb2IgYWJvcnQgZnVuY3Rpb24gb3Igc29tZXRoaW5nIGVsc2VcbiAqL1xuZnVuY3Rpb24gcnVuSm9iKGl0ZXJhdG9yLCBrZXksIGl0ZW0sIGNhbGxiYWNrKVxue1xuICB2YXIgYWJvcnRlcjtcblxuICAvLyBhbGxvdyBzaG9ydGN1dCBpZiBpdGVyYXRvciBleHBlY3RzIG9ubHkgdHdvIGFyZ3VtZW50c1xuICBpZiAoaXRlcmF0b3IubGVuZ3RoID09IDIpXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwgYXN5bmMoY2FsbGJhY2spKTtcbiAgfVxuICAvLyBvdGhlcndpc2UgZ28gd2l0aCBmdWxsIHRocmVlIGFyZ3VtZW50c1xuICBlbHNlXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwga2V5LCBhc3luYyhjYWxsYmFjaykpO1xuICB9XG5cbiAgcmV0dXJuIGFib3J0ZXI7XG59XG4iLCJ2YXIgZGVmZXIgPSByZXF1aXJlKCcuL2RlZmVyLmpzJyk7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBhc3luYztcblxuLyoqXG4gKiBSdW5zIHByb3ZpZGVkIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XG4gKiBldmVuIGlmIGNhbGxiYWNrIGl0c2VsZiBpcyBub3RcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gaW52b2tlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gYXVnbWVudGVkIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGFzeW5jKGNhbGxiYWNrKVxue1xuICB2YXIgaXNBc3luYyA9IGZhbHNlO1xuXG4gIC8vIGNoZWNrIGlmIGFzeW5jIGhhcHBlbmVkXG4gIGRlZmVyKGZ1bmN0aW9uKCkgeyBpc0FzeW5jID0gdHJ1ZTsgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jX2NhbGxiYWNrKGVyciwgcmVzdWx0KVxuICB7XG4gICAgaWYgKGlzQXN5bmMpXG4gICAge1xuICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgZGVmZXIoZnVuY3Rpb24gbmV4dFRpY2tfY2FsbGJhY2soKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4iLCIvLyBBUElcbm1vZHVsZS5leHBvcnRzID0gYWJvcnQ7XG5cbi8qKlxuICogQWJvcnRzIGxlZnRvdmVyIGFjdGl2ZSBqb2JzXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIC0gY3VycmVudCBzdGF0ZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYWJvcnQoc3RhdGUpXG57XG4gIE9iamVjdC5rZXlzKHN0YXRlLmpvYnMpLmZvckVhY2goY2xlYW4uYmluZChzdGF0ZSkpO1xuXG4gIC8vIHJlc2V0IGxlZnRvdmVyIGpvYnNcbiAgc3RhdGUuam9icyA9IHt9O1xufVxuXG4vKipcbiAqIENsZWFucyB1cCBsZWZ0b3ZlciBqb2IgYnkgaW52b2tpbmcgYWJvcnQgZnVuY3Rpb24gZm9yIHRoZSBwcm92aWRlZCBqb2IgaWRcbiAqXG4gKiBAdGhpcyAgc3RhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0ga2V5IC0gam9iIGlkIHRvIGFib3J0XG4gKi9cbmZ1bmN0aW9uIGNsZWFuKGtleSlcbntcbiAgaWYgKHR5cGVvZiB0aGlzLmpvYnNba2V5XSA9PSAnZnVuY3Rpb24nKVxuICB7XG4gICAgdGhpcy5qb2JzW2tleV0oKTtcbiAgfVxufVxuIiwiLy8gQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXRlO1xuXG4vKipcbiAqIENyZWF0ZXMgaW5pdGlhbCBzdGF0ZSBvYmplY3RcbiAqIGZvciBpdGVyYXRpb24gb3ZlciBsaXN0XG4gKlxuICogQHBhcmFtICAge2FycmF5fG9iamVjdH0gbGlzdCAtIGxpc3QgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb258bnVsbH0gc29ydE1ldGhvZCAtIGZ1bmN0aW9uIHRvIHVzZSBmb3Iga2V5cyBzb3J0LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYG51bGxgIHRvIGtlZXAgdGhlbSBhcyBpc1xuICogQHJldHVybnMge29iamVjdH0gLSBpbml0aWFsIHN0YXRlIG9iamVjdFxuICovXG5mdW5jdGlvbiBzdGF0ZShsaXN0LCBzb3J0TWV0aG9kKVxue1xuICB2YXIgaXNOYW1lZExpc3QgPSAhQXJyYXkuaXNBcnJheShsaXN0KVxuICAgICwgaW5pdFN0YXRlID1cbiAgICB7XG4gICAgICBpbmRleCAgICA6IDAsXG4gICAgICBrZXllZExpc3Q6IGlzTmFtZWRMaXN0IHx8IHNvcnRNZXRob2QgPyBPYmplY3Qua2V5cyhsaXN0KSA6IG51bGwsXG4gICAgICBqb2JzICAgICA6IHt9LFxuICAgICAgcmVzdWx0cyAgOiBpc05hbWVkTGlzdCA/IHt9IDogW10sXG4gICAgICBzaXplICAgICA6IGlzTmFtZWRMaXN0ID8gT2JqZWN0LmtleXMobGlzdCkubGVuZ3RoIDogbGlzdC5sZW5ndGhcbiAgICB9XG4gICAgO1xuXG4gIGlmIChzb3J0TWV0aG9kKVxuICB7XG4gICAgLy8gc29ydCBhcnJheSBrZXlzIGJhc2VkIG9uIGl0J3MgdmFsdWVzXG4gICAgLy8gc29ydCBvYmplY3QncyBrZXlzIGp1c3Qgb24gb3duIG1lcml0XG4gICAgaW5pdFN0YXRlLmtleWVkTGlzdC5zb3J0KGlzTmFtZWRMaXN0ID8gc29ydE1ldGhvZCA6IGZ1bmN0aW9uKGEsIGIpXG4gICAge1xuICAgICAgcmV0dXJuIHNvcnRNZXRob2QobGlzdFthXSwgbGlzdFtiXSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gaW5pdFN0YXRlO1xufVxuIiwidmFyIGFib3J0ID0gcmVxdWlyZSgnLi9hYm9ydC5qcycpXG4gICwgYXN5bmMgPSByZXF1aXJlKCcuL2FzeW5jLmpzJylcbiAgO1xuXG4vLyBBUElcbm1vZHVsZS5leHBvcnRzID0gdGVybWluYXRvcjtcblxuLyoqXG4gKiBUZXJtaW5hdGVzIGpvYnMgaW4gdGhlIGF0dGFjaGVkIHN0YXRlIGNvbnRleHRcbiAqXG4gKiBAdGhpcyAgQXN5bmNLaXRTdGF0ZSNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZmluYWwgY2FsbGJhY2sgdG8gaW52b2tlIGFmdGVyIHRlcm1pbmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHRlcm1pbmF0b3IoY2FsbGJhY2spXG57XG4gIGlmICghT2JqZWN0LmtleXModGhpcy5qb2JzKS5sZW5ndGgpXG4gIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBmYXN0IGZvcndhcmQgaXRlcmF0aW9uIGluZGV4XG4gIHRoaXMuaW5kZXggPSB0aGlzLnNpemU7XG5cbiAgLy8gYWJvcnQgam9ic1xuICBhYm9ydCh0aGlzKTtcblxuICAvLyBzZW5kIGJhY2sgcmVzdWx0cyB3ZSBoYXZlIHNvIGZhclxuICBhc3luYyhjYWxsYmFjaykobnVsbCwgdGhpcy5yZXN1bHRzKTtcbn1cbiIsInZhciBpdGVyYXRlICAgID0gcmVxdWlyZSgnLi9saWIvaXRlcmF0ZS5qcycpXG4gICwgaW5pdFN0YXRlICA9IHJlcXVpcmUoJy4vbGliL3N0YXRlLmpzJylcbiAgLCB0ZXJtaW5hdG9yID0gcmVxdWlyZSgnLi9saWIvdGVybWluYXRvci5qcycpXG4gIDtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWxPcmRlcmVkO1xuLy8gc29ydGluZyBoZWxwZXJzXG5tb2R1bGUuZXhwb3J0cy5hc2NlbmRpbmcgID0gYXNjZW5kaW5nO1xubW9kdWxlLmV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIHNvcnRlZCBhcnJheSBlbGVtZW50cyBpbiBzZXJpZXNcbiAqXG4gKiBAcGFyYW0gICB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gYXJyYXkgb3Igb2JqZWN0IChuYW1lZCBsaXN0KSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gc29ydE1ldGhvZCAtIGN1c3RvbSBzb3J0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gLSBqb2JzIHRlcm1pbmF0b3JcbiAqL1xuZnVuY3Rpb24gc2VyaWFsT3JkZXJlZChsaXN0LCBpdGVyYXRvciwgc29ydE1ldGhvZCwgY2FsbGJhY2spXG57XG4gIHZhciBzdGF0ZSA9IGluaXRTdGF0ZShsaXN0LCBzb3J0TWV0aG9kKTtcblxuICBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgZnVuY3Rpb24gaXRlcmF0b3JIYW5kbGVyKGVycm9yLCByZXN1bHQpXG4gIHtcbiAgICBpZiAoZXJyb3IpXG4gICAge1xuICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGUuaW5kZXgrKztcblxuICAgIC8vIGFyZSB3ZSB0aGVyZSB5ZXQ/XG4gICAgaWYgKHN0YXRlLmluZGV4IDwgKHN0YXRlWydrZXllZExpc3QnXSB8fCBsaXN0KS5sZW5ndGgpXG4gICAge1xuICAgICAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGl0ZXJhdG9ySGFuZGxlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZG9uZSBoZXJlXG4gICAgY2FsbGJhY2sobnVsbCwgc3RhdGUucmVzdWx0cyk7XG4gIH0pO1xuXG4gIHJldHVybiB0ZXJtaW5hdG9yLmJpbmQoc3RhdGUsIGNhbGxiYWNrKTtcbn1cblxuLypcbiAqIC0tIFNvcnQgbWV0aG9kc1xuICovXG5cbi8qKlxuICogc29ydCBoZWxwZXIgdG8gc29ydCBhcnJheSBlbGVtZW50cyBpbiBhc2NlbmRpbmcgb3JkZXJcbiAqXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGEgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSAgIHttaXhlZH0gYiAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHJldHVybnMge251bWJlcn0gLSBjb21wYXJpc29uIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYilcbntcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwO1xufVxuXG4vKipcbiAqIHNvcnQgaGVscGVyIHRvIHNvcnQgYXJyYXkgZWxlbWVudHMgaW4gZGVzY2VuZGluZyBvcmRlclxuICpcbiAqIEBwYXJhbSAgIHttaXhlZH0gYSAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHBhcmFtICAge21peGVkfSBiIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGNvbXBhcmlzb24gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGRlc2NlbmRpbmcoYSwgYilcbntcbiAgcmV0dXJuIC0xICogYXNjZW5kaW5nKGEsIGIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgbWltZSB0eXBlIGZvciB0aGUgZ2l2ZW4gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy50eXBlID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvICo7ICovKS5zaGlmdCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gaGVhZGVyIGZpZWxkIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5wYXJhbXMgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KC8gKjsgKi8pLnJlZHVjZShmdW5jdGlvbihvYmosIHN0cil7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKj0gKi8pO1xuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5zaGlmdCgpO1xuXG4gICAgaWYgKGtleSAmJiB2YWwpIG9ialtrZXldID0gdmFsO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogUGFyc2UgTGluayBoZWFkZXIgZmllbGRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucGFyc2VMaW5rcyA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAqLCAqLykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgc3RyKXtcbiAgICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoLyAqOyAqLyk7XG4gICAgdmFyIHVybCA9IHBhcnRzWzBdLnNsaWNlKDEsIC0xKTtcbiAgICB2YXIgcmVsID0gcGFydHNbMV0uc3BsaXQoLyAqPSAqLylbMV0uc2xpY2UoMSwgLTEpO1xuICAgIG9ialtyZWxdID0gdXJsO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogU3RyaXAgY29udGVudCByZWxhdGVkIGZpZWxkcyBmcm9tIGBoZWFkZXJgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmNsZWFuSGVhZGVyID0gZnVuY3Rpb24oaGVhZGVyLCBjaGFuZ2VzT3JpZ2luKXtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC10eXBlJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2NvbnRlbnQtbGVuZ3RoJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ3RyYW5zZmVyLWVuY29kaW5nJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2hvc3QnXTtcbiAgLy8gc2VjdWlydHlcbiAgaWYgKGNoYW5nZXNPcmlnaW4pIHtcbiAgICBkZWxldGUgaGVhZGVyWydhdXRob3JpemF0aW9uJ107XG4gICAgZGVsZXRlIGhlYWRlclsnY29va2llJ107XG4gIH1cbiAgcmV0dXJuIGhlYWRlcjtcbn07XG4iLCIvKiFcbiAqIG1ldGhvZHNcbiAqIENvcHlyaWdodChjKSAyMDEzLTIwMTQgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDE1LTIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEN1cnJlbnROb2RlTWV0aG9kcygpIHx8IGdldEJhc2ljTm9kZU1ldGhvZHMoKTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgTm9kZS5qcyBtZXRob2RzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50Tm9kZU1ldGhvZHMoKSB7XG4gIHJldHVybiBodHRwLk1FVEhPRFMgJiYgaHR0cC5NRVRIT0RTLm1hcChmdW5jdGlvbiBsb3dlckNhc2VNZXRob2QobWV0aG9kKSB7XG4gICAgcmV0dXJuIG1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIFwiYmFzaWNcIiBOb2RlLmpzIG1ldGhvZHMsIGEgc25hcHNob3QgZnJvbSBOb2RlLmpzIDAuMTAuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldEJhc2ljTm9kZU1ldGhvZHMoKSB7XG4gIHJldHVybiBbXG4gICAgJ2dldCcsXG4gICAgJ3Bvc3QnLFxuICAgICdwdXQnLFxuICAgICdoZWFkJyxcbiAgICAnZGVsZXRlJyxcbiAgICAnb3B0aW9ucycsXG4gICAgJ3RyYWNlJyxcbiAgICAnY29weScsXG4gICAgJ2xvY2snLFxuICAgICdta2NvbCcsXG4gICAgJ21vdmUnLFxuICAgICdwdXJnZScsXG4gICAgJ3Byb3BmaW5kJyxcbiAgICAncHJvcHBhdGNoJyxcbiAgICAndW5sb2NrJyxcbiAgICAncmVwb3J0JyxcbiAgICAnbWthY3Rpdml0eScsXG4gICAgJ2NoZWNrb3V0JyxcbiAgICAnbWVyZ2UnLFxuICAgICdtLXNlYXJjaCcsXG4gICAgJ25vdGlmeScsXG4gICAgJ3N1YnNjcmliZScsXG4gICAgJ3Vuc3Vic2NyaWJlJyxcbiAgICAncGF0Y2gnLFxuICAgICdzZWFyY2gnLFxuICAgICdjb25uZWN0J1xuICBdO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiemxpYlwiKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBhcnJheVRvT2JqZWN0ID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICgob3B0aW9ucyAmJiAob3B0aW9ucy5wbGFpbk9iamVjdHMgfHwgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpKSB8fCAhaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbdGFyZ2V0LCBzb3VyY2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmICFBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBhcnJheVRvT2JqZWN0KHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbCh0YXJnZXQsIGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFtpXSAmJiB0eXBlb2YgdGFyZ2V0W2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRbaV0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IG1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxudmFyIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIsIGRlY29kZXIsIGNoYXJzZXQpIHtcbiAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzLnJlcGxhY2UoLyVbMC05YS1mXXsyfS9naSwgdW5lc2NhcGUpO1xuICAgIH1cbiAgICAvLyB1dGYtOFxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzO1xuICAgIH1cbn07XG5cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyLCBkZWZhdWx0RW5jb2RlciwgY2hhcnNldCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIgOiBTdHJpbmcoc3RyKTtcblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdXQgKz0gc3RyaW5nLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyBoZXhUYWJsZVtjXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4QzAgfCAoYyA+PiA2KV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID49IDB4RTAwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4RTAgfCAoYyA+PiAxMildICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG4gICAgICAgIG91dCArPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDEyKSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxudmFyIGNvbXBhY3QgPSBmdW5jdGlvbiBjb21wYWN0KHZhbHVlKSB7XG4gICAgdmFyIHF1ZXVlID0gW3sgb2JqOiB7IG86IHZhbHVlIH0sIHByb3A6ICdvJyB9XTtcbiAgICB2YXIgcmVmcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlW2ldO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICAgICAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsICYmIHJlZnMuaW5kZXhPZih2YWwpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goeyBvYmo6IG9iaiwgcHJvcDoga2V5IH0pO1xuICAgICAgICAgICAgICAgIHJlZnMucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcGFjdFF1ZXVlKHF1ZXVlKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBpc1JlZ0V4cCA9IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG52YXIgaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhcnJheVRvT2JqZWN0OiBhcnJheVRvT2JqZWN0LFxuICAgIGFzc2lnbjogYXNzaWduLFxuICAgIGNvbWJpbmU6IGNvbWJpbmUsXG4gICAgY29tcGFjdDogY29tcGFjdCxcbiAgICBkZWNvZGU6IGRlY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gICAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6ICdSRkMzOTg2JyxcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcbiIsImltcG9ydCBtZDUgZnJvbSAnYmx1ZWltcC1tZDUnO1xuaW1wb3J0IHsgbmFtZXNwYWNlcyB9IGZyb20gJ3JkZmpzb24nO1xuaW1wb3J0IENvbnRleHQgZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBFbnRyeVN0b3JlIGZyb20gJy4vRW50cnlTdG9yZSc7XG5pbXBvcnQgU2VhcmNoTGlzdCBmcm9tICcuL1NlYXJjaExpc3QnO1xuXG5jb25zdCBlbmNvZGVTdHIgPSBzdHIgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHN0ci5yZXBsYWNlKC86L2csICdcXFxcOicpXG4gIC5yZXBsYWNlKC9cXCgvZywgJ1xcXFwoJykucmVwbGFjZSgvXFwpL2csICdcXFxcKScpKTtcbmNvbnN0IHNob3J0ZW4gPSBwcmVkaWNhdGUgPT4gbWQ1KG5hbWVzcGFjZXMuZXhwYW5kKHByZWRpY2F0ZSkpLnN1YnN0cigwLCA4KTtcbmNvbnN0IG5ncmFtTGltaXQgPSAxNTtcbmNvbnN0IGlzTmdyYW0gPSBrZXkgPT4ga2V5LmluZGV4T2YoJ3RpdGxlJykgPT09IDBcbiAgfHwga2V5LmluZGV4T2YoJ3RhZy5saXRlcmFsJykgPT09IDBcbiAgfHwgKGtleS5pbmRleE9mKCdtZXRhZGF0YS5wcmVkaWNhdGUubGl0ZXJhbCcpID09PSAwICYmXG4gICAga2V5LmluZGV4T2YoJ21ldGFkYXRhLnByZWRpY2F0ZS5saXRlcmFsXycpICE9PSAwKVxuICB8fCAoa2V5LmluZGV4T2YoJ3JlbGF0ZWQubWV0YWRhdGEucHJlZGljYXRlLmxpdGVyYWwnKSA9PT0gMCAmJlxuICAgIGtleS5pbmRleE9mKCdyZWxhdGVkLm1ldGFkYXRhLnByZWRpY2F0ZS5saXRlcmFsXycpICE9PSAwKTtcbmNvbnN0IGlzRXhhY3RNYXRjaCA9IGtleSA9PiBrZXkuaW5kZXhPZigncHJlZGljYXRlLmxpdGVyYWxfcycpID4gMCB8fCBrZXkuaW5kZXhPZigncHJlZGljYXRlLmxpdGVyYWwnKSA9PT0gLTE7XG4vKipcbiAqIEVtcHR5IHNwYWNlcyBpbiBzZWFyY2ggdGVybSBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgQU5EIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgT1IuXG4gKiBJbiBhZGRpdGlvbiwgZmllbGRzIGluZGV4ZWQgYXMgdGV4dF9uZ3JhbSB3aWxsIGhhdmUgdG8gYmUgc2hvcnRlbmVkIHRvIHRoZSBuZ3JhbSBtYXggbGltaXRcbiAqIGFzIHRoZXkgd2lsbCBub3QgbWF0Y2ggb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSB0ZXJtXG4gKiBAcGFyYW0gaXNGYWNldFxuICogQHJldHVybiB7Kn1cbiAqL1xuY29uc3Qgc29sckZyaWVuZGx5ID0gKGtleSwgdGVybSwgaXNGYWNldCkgPT4ge1xuICBsZXQgYW5kID0gdGVybS50cmltKCkucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpO1xuICBpZiAoaXNOZ3JhbShrZXkpICYmIGlzRmFjZXQgIT09IHRydWUpIHtcbiAgICBhbmQgPSBhbmQuc3BsaXQoJyAnKS5tYXAodCA9PiAodC5sZW5ndGggPCBuZ3JhbUxpbWl0ID8gZW5jb2RlU3RyKHQpIDpcbiAgICAgIGVuY29kZVN0cih0LnN1YnN0cigwLCBuZ3JhbUxpbWl0KSkpKTtcbiAgfSBlbHNlIGlmIChpc0V4YWN0TWF0Y2goa2V5KSkge1xuICAgIGlmIChhbmQuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgYW5kID0gW2VuY29kZVN0cihhbmQpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5kID0gW2BcIiR7ZW5jb2RlU3RyKGFuZCl9XCJgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYW5kID0gYW5kLnNwbGl0KCcgJykubWFwKHQgPT4gZW5jb2RlU3RyKHQpKTtcbiAgfVxuICByZXR1cm4gYW5kLmxlbmd0aCA9PT0gMSA/IGFuZFswXSA6IGAoJHthbmQuam9pbignK0FORCsnKX0pYDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBzdHJ1Y3RcbiAqIEBwYXJhbSBpc0FuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCBidWlsZFF1ZXJ5ID0gKHN0cnVjdCwgaXNBbmQpID0+IHtcbiAgY29uc3QgdGVybXMgPSBbXTtcbiAgT2JqZWN0LmtleXMoc3RydWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBsZXQgdmFsID0gc3RydWN0W2tleV07XG4gICAgdmFsID0gQXJyYXkuaXNBcnJheSh2YWwpID8gdmFsLm1hcCh2ID0+IG5hbWVzcGFjZXMuZXhwYW5kKHYpKSA6IG5hbWVzcGFjZXMuZXhwYW5kKHZhbCk7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ29yJzpcbiAgICAgICAgdGVybXMucHVzaChidWlsZFF1ZXJ5KHZhbCwgZmFsc2UpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhbmQnOlxuICAgICAgICB0ZXJtcy5wdXNoKGJ1aWxkUXVlcnkodmFsLCB0cnVlKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGVybXMucHVzaChgJHtrZXl9OiR7c29sckZyaWVuZGx5KGtleSwgdmFsKX1gKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICBjb25zdCBvciA9IFtdO1xuICAgICAgICAgIHZhbC5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgICAgICBvci5wdXNoKGAke2tleX06JHtzb2xyRnJpZW5kbHkoa2V5LCBvKX1gKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAob3IubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGVybXMucHVzaChgKCR7b3Iuam9pbignK09SKycpfSlgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVybXMucHVzaChgJHtvci5qb2luKCcrT1IrJyl9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gVE9ET1xuICAgICAgICB9XG4gICAgfVxuICB9KTtcbiAgaWYgKHRlcm1zLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYCgke3Rlcm1zLmpvaW4oaXNBbmQgPyAnK0FORCsnIDogJytPUisnKX0pYDtcbiAgfVxuICByZXR1cm4gdGVybXMuam9pbihgJHtpc0FuZCA/ICcrQU5EKycgOiAnK09SKyd9YCk7XG59O1xuXG4vKipcbiAqIFRoZSBTb2xyUXVlcnkgY2xhc3MgcHJvdmlkZXMgYSB3YXkgdG8gY3JlYXRlIGEgcXVlcnkgYnkgY2hhaW5pbmcgbWV0aG9kIGNhbGxzIGFjY29yZGluZyB0b1xuICogdGhlIGJ1aWxkZXIgcGF0dGVybi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IHNxID0gZXMubmV3U29sclF1ZXJ5KCkudGl0bGUoXCJzb21lIHRpdGxlXCIpLnR5cGUoXCJodHRwOi8vZXhhbXBsZS5jb20vUGVyc29uXCIpXG4gKlxuICogVGhlIGV4YW1wbGUgeWllbGRzIGEgc2VhcmNoIGZvciBlbnRyaWVzIHRoYXQgaGF2ZSBhIHRpdGxlIHRoYXQgY29udGFpbnMgXCJzb21lIHRpdGxlXCJcbiAqIGFuZCBhIHJkZjp0eXBlIG9mIFwiaHR0cDovL2V4YW1wbGUuY29tL1BlcnNvblwiIGV4cHJlc3NlZCBpbiB0aGUgbWV0YWRhdGEuXG4gKiBUbyBleGVjdXRlIHRoZSBxdWVyeSB5b3UgY2FuIGVpdGhlciBhc2sgZm9yIGEge0BsaW5rIHN0b3JlL1NlYXJjaExpc3R9IGFuZCB0aGVuIGNhbGxcbiAqIGdldEVudHJpZXMgKG9yIGZvckVhY2gpOlxuICpcbiAqICAgICBjb25zdCBzbCA9IHNxLmxpc3QoKTtcbiAqICAgICBzbC5nZXRFbnRyaWVzKCkudGhlbigoZW50cnlBcnIpID0+IHsvLyBEbyBzb21ldGhpbmcgfSlcbiAqXG4gKiBPciB5b3UgdXNlIHRoZSBhYmJyZXZpYXRlZCB2ZXJzaW9uIHdoZXJlIHlvdSBqdXN0IGNhbGwgZ2V0RW50cmllcyBkaXJlY3RseSAob3IgZm9yRWFjaClcbiAqIG9uIHRoZSBTb2xyUXVlcnk6XG4gKlxuICogICAgIHNxLmdldEVudHJpZXMoKVxuICpcbiAqIFRoZSBtYWpvcml0eSBvZiB0aGUgbWV0aG9kcyB3b3JrIHRoZSBzYW1lIHdheSwgdGhhdCBpcyB0aGV5IHRha2UgdHdvIHZhbHVlcywgYSB2YWx1ZSBhbmQgYVxuICogcG9zc2libGUgbmVnYXRpb24gZmxhZy4gVGhlIHZhbHVlIGNhbiBiZSBhbiBhcnJheSBjb3JyZXNwb25kaW5nIHRvIGEgZGlzanVuY3Rpb24gYW5kIGlmIHRoZVxuICogZmxhZyBpcyBzZXQgdHJ1ZSB0aGUgc2VhcmNoIHN0cmluZyB3aWxsIGJlIGNvbnN0cnVjdGVkIHRvIHNlYXJjaCBmb3IgdGhlIG5lZ2F0aW9uIG9mIHRoZVxuICogcHJvdmlkZWQgdmFsdWUuIEZvciBleGFtcGxlLCBpZiBhIGdyYXBoIHR5cGUgaW4gdGhlIGZvcm0gb2YgYW4gYXJyYXkgY29udGFpbmluZyBMaXN0IGFuZCBVc2VyXG4gKiBpcyBwcm92aWRlZCB0b2dldGhlciB3aXRoIGEgbmVnYXRpb24gYm9vbGVhbiBzZXQgdG8gdHJ1ZSwgdGhlIHF1ZXJ5IHdpbGwgc2VhcmNoIGZvciBhbnl0aGluZ1xuICogYnV0IGxpc3RzIGFuZCB1c2VyczpcbiAqXG4gKiAgICAgc3EuZ3JhcGhUeXBlKFt0eXBlcy5HVF9MSVNULCB0eXBlcy5HVF9VU0VSXSwgdHJ1ZSlcbiAqXG4gKiBTdXBwb3J0ZWQgbWV0aG9kcyBvbiB0aGUgc29sciBvYmplY3QgY29ycmVzcG9uZCBpbiBsYXJnZSB0byB0aGUgYXZhaWxhYmxlIHNvbHIgZmllbGRzXG4gKiBkb2N1bWVudGVkIGF0LCBzb21lIG1ldGhvZCBuYW1lcyBhcmUgZGlmZmVyZW50IHRvIGF2b2lkIGRvdHM6XG4gKiB7QGxpbmsgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9lbnRyeXN0b3JlL3dpa2kvS25vd2xlZGdlQmFzZVNlYXJjaH1cbiAqXG4gKiBUaGVyZSBpcyBhbHNvIGEgc3BlY2lhbCBtZXRob2QgKHtAbGluayBzdG9yZS9Tb2xyUXVlcnkjZ2V0UXVlcnkgZ2V0UXVlcnl9KSBmb3IgZ2V0dGluZyB0aGVcbiAqIHF1ZXJ5IGFzIGEgc3RyaW5nIHRoYXQgaXMgdXNlZCBieSBFbnRyeVN0b3JlIEFQSSBiZWhpbmQgdGhlIHNjZW5lcywgeW91IGNhbiBzYWZlbHkgaWdub3JlXG4gKiB0aGlzIG1ldGhvZC5cbiAqXG4gKiBAZXhwb3J0cyBzdG9yZS9Tb2xyUXVlcnlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29sclF1ZXJ5IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeVN0b3JlfSBlbnRyeXN0b3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnRyeXN0b3JlKSB7XG4gICAgdGhpcy5fZW50cnlzdG9yZSA9IGVudHJ5c3RvcmU7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gW107XG4gICAgdGhpcy5yZWxhdGVkUHJvcGVydGllcyA9IFtdO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsICo+fVxuICAgICAqL1xuICAgIHRoaXMucGFyYW1zID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsIGFueT59XG4gICAgICovXG4gICAgdGhpcy5tb2RpZmllcnMgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U2V0PE9iamVjdD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hbmQgPSBuZXcgU2V0KCk7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U2V0PE9iamVjdD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9vciA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmZhY2V0cHJlZGljYXRlcyA9IHt9O1xuICAgIHRoaXMucmVsYXRlZEZhY2V0cHJlZGljYXRlcyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcShrZXksIHZhbCwgbW9kaWZpZXIgPSBudWxsKSB7XG4gICAgdGhpcy5wYXJhbXMuc2V0KGtleSwgdmFsKTtcbiAgICBpZiAobW9kaWZpZXIgPT09IG51bGwpIHtcbiAgICAgIHRoaXMubW9kaWZpZXJzLnNldChrZXksIG1vZGlmaWVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBhbGwgdGl0bGVzIGluIGFsbCBsYW5ndWFnZXMsIG11bHRpdmFsdWVkLCBjYW5ub3QgYmUgc29ydGVkIG9uLlxuICAgKiBJbmNsdWRlcyBkYzp0aXRsZSwgZGN0ZXJtczp0aXRsZSwgc2tvczpwcmVmTGFiZWwsIHNrb3M6YWx0TGFiZWwsIHNrb3M6aGlkZGVuTGFiZWwsXG4gICAqIHJkZnM6bGFiZWwsIGZvYWY6bmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICB0aXRsZSh2YWwsIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3EoJ3RpdGxlJywgdmFsLCBtb2RpZmllcik7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBhbGwgZGVzY3JpcHRpb25zIGluIGFsbCBsYW5ndWFnZXMsIG11bHRpdmFsdWVkLCBjYW5ub3QgYmUgc29ydGVkIG9uLlxuICAgKiBJbmNsdWRlcyBkYzpkZXNjcmlwdGlvbiwgZGN0ZXJtczpkZXNjcmlwdGlvbiwgcmRmczpjb21tZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgZGVzY3JpcHRpb24odmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdkZXNjcmlwdGlvbicsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgYWxsIHRhZ3MgbGl0ZXJhbHMgaW4gYWxsIGxhbmd1YWdlcywgbXVsdGl2YWx1ZWQsIGNhbm5vdCBiZSBzb3J0ZWQgb24uXG4gICAqIEluY2x1ZGVzIGRjOnN1YmplY3QsIGRjdGVybXM6c3ViamVjdCwgZGNhdDprZXl3b3JkIGFuZCBsb206a2V5d29yZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gdmFsXG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIHRhZ0xpdGVyYWwodmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCd0YWcubGl0ZXJhbCcsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgYWxsIHRhZyBVUklzLCBtdWx0aXZhbHVlZCwgY2Fubm90IGJlIHNvcnRlZCBvbi5cbiAgICogSW5jbHVkZXMgZGM6c3ViamVjdCwgZGN0ZXJtczpzdWJqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgdGFnVVJJKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgndGFnLnVyaScsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgdGhlIGxhbmd1YWdlIChhcyBhIGxpdGVyYWwpIG9mIHRoZSByZXNvdXJjZSwgc2luZ2xlIHZhbHVlLCBjYW4gYmUgdXNlZCBmb3Igc29ydGluZz9cbiAgICogSW5jbHVkZXMgZGM6bGFuZ3VhZ2UsIGRjdGVybXM6bGFuZ3VhZ2VcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBsYW5nKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnbGFuZycsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgdGl0bGUsIGRlc2NyaXB0aW9uIGFuZCB0YWdzLCBtdWx0aXZhbHVlLCBjYW5ub3QgYmUgc29ydGVkIG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gdmFsXG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGFsbCh2YWwsIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3EoJ2FsbCcsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgYWxsIFVSSXMgaW4gc3ViamVjdCBwb3NpdGlvbiBpbiB0aGUgbWV0YWRhdGEsIGV4Y2VwdCB0aGUgcmVzb3VyY2VVUkkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgc3ViamVjdCh2YWwsIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3EoJ21ldGFkYXRhLnN1YmplY3QnLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIGFsbCBVUklzIGluIHByZWRpY2F0ZSBwb3NpdGlvbiBpbiB0aGUgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgcHJlZGljYXRlKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnbWV0YWRhdGEucHJlZGljYXRlJywgdmFsLCBtb2RpZmllcik7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBhbGwgbGl0ZXJhbHMgaW4gb2JqZWN0IHBvc2l0aW9uIGluIHRoZSBtZXRhZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBvYmplY3RMaXRlcmFsKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnbWV0YWRhdGEub2JqZWN0LmxpdGVyYWwnLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIGFsbCBVUklzIGluIG9iamVjdCBwb3NpdGlvbiBpbiB0aGUgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgb2JqZWN0VXJpKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnbWV0YWRhdGEub2JqZWN0LnVyaScsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgdGhlIHJlc291cmNlVVJJIG9mIHRoZSBlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICByZXNvdXJjZSh2YWwsIG1vZGlmaWVyID0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLl9xKCdyZXNvdXJjZScsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgdGhlIGVudHJ5VVJJIG9mIHRoZSBlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICB1cmkodmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCd1cmknLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIGFsbCB0eXBlcyBvZiB0aGUgcmVzb3VyY2VVUkksIGkuZS5cbiAgICogYWxsIFVSSXMgcG9pbnRlZCB0byB2aWEgcmRmOnR5cGUgZnJvbSB0aGUgcmVzb3VyY2VVUkkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSByZGZUeXBlXG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIHJkZlR5cGUocmRmVHlwZSwgbW9kaWZpZXIgPSBudWxsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmRmVHlwZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9xKCdyZGZUeXBlJywgcmRmVHlwZS5tYXAodCA9PiBuYW1lc3BhY2VzLmV4cGFuZCh0KSksIG1vZGlmaWVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3EoJ3JkZlR5cGUnLCBuYW1lc3BhY2VzLmV4cGFuZChyZGZUeXBlKSwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgYWxsIGNyZWF0b3JzIChpbiB0aGUgZW50cnkgaW5mb3JtYXRpb24gZ3JhcGgpIGV4cHJlc3NlZCB2aWEgdGhlaXIgcmVzb3VyY2VVUklzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gdmFsXG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGNyZWF0b3IodmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdjcmVhdG9yJywgdmFsLCBtb2RpZmllcik7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBhbGwgY29udHJpYnV0b3JzIChpbiB0aGUgZW50cnkgaW5mb3JtYXRpb24gZ3JhcGgpIGV4cHJlc3NlZCB2aWEgdGhlaXIgcmVzb3VyY2VVUklzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gdmFsXG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGNvbnRyaWJ1dG9ycyh2YWwsIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3EoJ2NvbnRyaWJ1dG9ycycsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgb25seSBlbnRyaWVzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGdpdmVuIGxpc3RzLCBpZGVudGlmaWVkIHZpYSB0aGVpciByZXNvdXJjZVVSSXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgbGlzdHModmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdsaXN0cycsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgZW50cmllcyB0aGF0IGFyZSBjcmVhdGVkIGF0IHRoZSBzcGVjaWZpYyBkYXRlLCBtb3N0IHVzZWZ1bCBmb3Igc29ydGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBjcmVhdGVkKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnY3JlYXRlZCcsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgZW50cmllcyB0aGF0IGFyZSBtb2RpZmllZCBhdCB0aGUgc3BlY2lmaWMgZGF0ZSwgbW9zdCB1c2VmdWwgZm9yIHNvcnRpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgbW9kaWZpZWQodmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdtb2RpZmllZCcsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgZW50cmllcyB3aXRoIHRoZSBnaXZlbiBlbnRyeSB0eXBlLCB1c2UgdGhlIHZhbHVlcyBpbiB7QGxpbmsgc3RvcmUvdHlwZXN9LCBlLmcuXG4gICAqIHNxLmVudHJ5VHlwZSh0eXBlcy5FVF9MSU5LKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBlbnRyeVR5cGUodmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdlbnRyeVR5cGUnLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIGVudHJpZXMgd2l0aCB0aGUgZ2l2ZW4gZ3JhcGggdHlwZSwgdXNlIHRoZSB2YWx1ZXMgaW4ge0BsaW5rIHN0b3JlL3R5cGVzfSwgZS5nLlxuICAgKiBzcS5lbnRyeVR5cGUodHlwZXMuR1RfVVNFUikuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgZ3JhcGhUeXBlKHZhbCwgbW9kaWZpZXIgPSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX3EoJ2dyYXBoVHlwZScsIHZhbCwgbW9kaWZpZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgZW50cmllcyB3aXRoIHRoZSBnaXZlbiByZXNvdXJjZSB0eXBlLCB1c2UgdGhlIHZhbHVlcyBpbiB7QGxpbmsgc3RvcmUvdHlwZXN9LCBlLmcuXG4gICAqIHNxLmVudHJ5VHlwZSh0eXBlcy5SVF9JTkZPUk1BVElPTlJFU09VUkNFKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICByZXNvdXJjZVR5cGUodmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdyZXNvdXJjZVR5cGUnLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIG9ubHkgcHVibGljIGVudHJpZXMuIFdhcm5pbmcsIGluZGl2aWR1YWwgZW50cnlzIHB1YmxpYyBmbGFnIGlzIGluaGVyaXRlZCBmcm9tXG4gICAqIHN1cnJvdW5kaW5nIGNvbnRleHQgYW5kIGlmIHRoZSBjb250ZXh0IEFDTCBpcyB1cGRhdGVkIHRoZSBlbnRyeXMgYXJlIG5vdCByZWluZGV4ZWRcbiAgICogYXV0b21hdGljYWxseS4gSGVuY2UsIHRoaXMgZmxhZyBtYXkgYmUgaW5jb3JyZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V9IGlzUHVibGljXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIHB1YmxpY1JlYWQoaXNQdWJsaWMgPSB0cnVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3EoJ3B1YmxpYycsIGlzUHVibGljID09PSB0cnVlID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBvbmx5IGVudHJpZXMgd2l0aCBleHBsaWNpdGx5IEFDTCBzdGF0aW5nIHVzZXIocykgaGFzIGFkbWluIHJpZ2h0c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gdmFsXG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGFkbWluKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnYWNsLmFkbWluJywgdmFsLCBtb2RpZmllcik7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBvbmx5IGVudHJpZXMgd2l0aCBleHBsaWNpdGx5IEFDTCBzdGF0aW5nIHVzZXIocykgaGFzIG1ldGFkYXRhIHJlYWQgcmlnaHRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgbWV0YWRhdGFSZWFkKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnYWNsLm1ldGFkYXRhLnInLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIG9ubHkgZW50cmllcyB3aXRoIGV4cGxpY2l0bHkgQUNMIHN0YXRpbmcgdXNlcihzKSBoYXMgbWV0YWRhdGEgd3JpdGUgKGFuZCByZWFkKSByaWdodHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBtZXRhZGF0YVdyaXRlKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnYWNsLm1ldGFkYXRhLnJ3JywgdmFsLCBtb2RpZmllcik7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBvbmx5IGVudHJpZXMgd2l0aCBleHBsaWNpdGx5IEFDTCBzdGF0aW5nIHVzZXIocykgaGFzIHJlc291cmNlIHJlYWQgcmlnaHRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB2YWxcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgcmVzb3VyY2VSZWFkKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnYWNsLnJlc291cmNlLnInLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIG9ubHkgZW50cmllcyB3aXRoIGV4cGxpY2l0bHkgQUNMIHN0YXRpbmcgdXNlcihzKSBoYXMgcmVzb3VyY2Ugd3JpdGUgKGFuZCByZWFkKSByaWdodHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICByZXNvdXJjZVdyaXRlKHZhbCwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcSgnYWNsLnJlc291cmNlLnJ3JywgdmFsLCBtb2RpZmllcik7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2hlcyBlbnRyaWVzIHdpdGggd2l0aCBzcGVjaWZpYyBzdGF0dXMgKGV4cHJlc3NlZCBpbiBlbnRyeSBpbmZvcm1hdGlvbiBncmFwaClcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHZhbFxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBzdGF0dXModmFsLCBtb2RpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9xKCdzdGF0dXMnLCB2YWwsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIG9ubHkgZW50cmllcyB3aXRoaW4gc3BlY2lmaWVkIGNvbnRleHQocylcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RvcmUvQ29udGV4dH0gY29udGV4dCBlaXRoZXIgYSBjb250ZXh0SWQsIHRoZSByZXNvdXJjZVVSSSBmb3IgYVxuICAgKyAgICAgKiBjb250ZXh0LCBhIHN0b3JlL0NvbnRleHQgaW5zdGFuY2Ugb3IgYW4gYXJyYXkgY29udGFpbmluZyBhbnkgb2YgdGhvc2UuIEluIGNhc2Ugb2YgYVxuICAgKyAgICAgKiBzdHJpbmcsIGVpdGhlciBkaXJlY3RseSBvciB3aXRoaW4gdGhlIGFycmF5IGFuZCBpdCBzdGFydHMgd2l0aCAnaHR0cCcgaXQgaXMgYXNzdW1lZCBpdCBpc1xuICAgKyAgICAgKiB0aGUgcmVzb3VyY2VVUkkgb2YgdGhlIGNvbnRleHQsIG90aGVyd2lzZSB0aGUgY29udGV4dCBpcyBhc3N1bWVkIHRvIGJlIGEgY29udGV4dElkLlxuICAgKiBAcGFyYW0ge3RydWV8ZmFsc2V8c3RyaW5nfSBtb2RpZmllclxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBjb250ZXh0KGNvbnRleHQsIG1vZGlmaWVyID0gbnVsbCkge1xuICAgIGNvbnN0IGYgPSAoYykgPT4ge1xuICAgICAgaWYgKGMgJiYgYy5nZXRSZXNvdXJjZVVSSSkge1xuICAgICAgICByZXR1cm4gYy5nZXRSZXNvdXJjZVVSSSgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycgJiYgYyAhPT0gJycpIHtcbiAgICAgICAgaWYgKGMuaW5kZXhPZignaHR0cCcpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudHJ5c3RvcmUuZ2V0Q29udGV4dEJ5SWQoYykuZ2V0UmVzb3VyY2VVUkkoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgY29uc3QgcmVzb3VyY2VVUklBcnIgPSBjb250ZXh0Lm1hcChmKS5maWx0ZXIodiA9PiB2ICE9PSBudWxsKTtcbiAgICAgIGlmIChyZXNvdXJjZVVSSUFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX3EoJ2NvbnRleHQnLCByZXNvdXJjZVVSSUFyciwgbW9kaWZpZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZXNvdXJjZVVSSSA9IGYoY29udGV4dCk7XG4gICAgICBpZiAocmVzb3VyY2VVUkkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3EoJ2NvbnRleHQnLCByZXNvdXJjZVVSSSwgbW9kaWZpZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgYSBxdWVyeSBpbiB0aGUgZm9ybSBvZiBhbiBvYmplY3Qgc3RydWN0dXJlIHdoZXJlIHRoZSB0b3BsZXZlbCBhdHRyaWJ1dGVzXG4gICAqIGFyZSBkaXNqdW5jdGl2ZSAoT1I6ZWQgdG9nZXRoZXIpLiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgd2lsbCBxdWVyeSBmb3IgdGhpbmdzIHRoYXRcbiAgICogYXJlIHR5cGVkIGFzIHZlZGdldGFibGVzIEFORCBoYXZlIHRoZSB3b3JkICd0b21hdG8nIGluIGVpdGhlciB0aGUgdGl0bGUgT1IgZGVzY3JpcHRpb246XG4gICAqIHF1ZXJ5LnJkZlR5cGUoJ2V4OlZlZGdldGFibGUpLm9yKHtcbiAgICogICB0aXRsZTogJ3RvbWF0bycsXG4gICAqICAgZGVzY3JpcHRpb246ICd0b21hdG8nXG4gICAqIH0pO1xuICAgKlxuICAgKiBOb3RlLCB0aGUgbmFtZSBvZiB0aGUgbWV0aG9kICgnb3InKSBkb2VzIG5vdCByZWZlcnMgdG8gaG93IHRoZSBvYmplY3Qgc3RydWN0dXJlIGlzXG4gICAqIGNvbWJpbmVkIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHF1ZXJ5LCBvbmx5IGhvdyB0aGUgaW5uZXIgcGFydHMgb2YgdGhlIG9iamVjdCBzdHJ1Y3R1cmVcbiAgICogaXMgY29tYmluZWQuIFRvIGNoYW5nZSB0aGUgdG9wbGV2ZWwgYmVoYXZpb3VyIG9mIHRoZSBxdWVyeSBmcm9tIGFuIGFuZCB0byBhbiBvcixcbiAgICogdXNlIHRoZSBkaXNqdW5jdGl2ZSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdHJ1Y3R1cmVcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgb3Ioc3RydWN0dXJlKSB7XG4gICAgdGhpcy5fb3IuYWRkKHN0cnVjdHVyZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBhIHF1ZXJ5IGluIHRoZSBmb3JtIG9mIGFuIG9iamVjdCBzdHJ1Y3R1cmUgd2hlcmUgdGhlIHRvcGxldmVsIGF0dHJpYnV0ZXNcbiAgICogYXJlIGNvbmp1bmN0aXZlIChBTkQ6ZWQgdG9nZXRoZXIpLiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgd2lsbCBxdWVyeSBmb3IgdGhpbmdzIHRoYXRcbiAgICogYXJlIHR5cGVkIGFzIHZlZGdldGFibGVzIE9SIHR5cGVkIGFzIGZydWl0IEFORCBoYXMgYSB0aXRsZSB0aGF0IGNvbnRhaW5zIHRoZSB3b3JkICdvcmFuZ2UnOlxuICAgKiBxdWVyeS5kaXNqdW5jdGl2ZSgpLnJkZlR5cGUoJ2V4OlZlZGdldGFibGUpLmFuZCh7XG4gICAqICAgcmRmVHlwZTogJ2V4OkZydWl0JyxcbiAgICogICB0aXRsZTogJ09yYW5nZScsXG4gICAqIH0pO1xuICAgKlxuICAgKiBOb3RlLCB0aGUgbmFtZSBvZiB0aGUgbWV0aG9kICgnYW5kJykgZG9lcyBub3QgcmVmZXJzIHRvIGhvdyB0aGUgb2JqZWN0IHN0cnVjdHVyZSBpc1xuICAgKiBjb21iaW5lZCB3aXRoIHRoZSByZXN0IG9mIHRoZSBxdWVyeSwgb25seSBob3cgdGhlIGlubmVyIHBhcnRzIG9mIHRoZSBvYmplY3Qgc3RydWN0dXJlXG4gICAqIGlzIGNvbWJpbmVkLiBJbiB0aGlzIGV4YW1wbGUgd2UgaGF2ZSBjaGFuZ2UgdGhlIHRvcGxldmVsIGJlaGF2aW91ciBvZiB0aGUgcXVlcnkgdG9cbiAgICogYmVjb21lIGRpc2p1bmN0aXZlIChiZWluZyBPUjplZCB0b2dldGhlciksIHRoaXMgaXMgdG8gbWFrZSB0aGUgcXVlcnkgbW9yZSByZXByZXNlbnRhdGl2ZVxuICAgKiBzaW5jZSB0aGVyZSBpcyBubyBuZWVkIGZvciB0aGUgZ3JvdXBpbmcgb2YgdGhlIG9iamVjdCBzdHJ1Y3R1cmUgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RydWN0dXJlXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGFuZChzdHJ1Y3R1cmUpIHtcbiAgICB0aGlzLl9hbmQuYWRkKHN0cnVjdHVyZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHRpdGxlX2xhbmcodGl0bGUsIGxhbmd1YWdlKSB7XG4gIH1cblxuICAvKipcbiAgICogSWYgYSB0aXRsZSBoYXMgYSBsYW5ndWFnZSBzZXQsIGEgZHluYW1pYyBmaWVsZCBpcyBjcmVhdGVkIHdpdGggdGhlIHBhdHRlcm4gXCJ0aXRsZS5lblwiLFxuICAgKiB3aXRob3V0IG11bHRpIHZhbHVlIHN1cHBvcnQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgY29udGV4dCBvZiBzb3J0aW5nLlxuICAgKiBAcGFyYW0gdGl0bGUge1N0cmluZ30gdGhlIHRpdGxlIHRvIHNlYXJjaCBmb3JcbiAgICogQHBhcmFtIGxhbmd1YWdlIHtTdHJpbmd9IHRoZSBsYW5ndWFnZSBvZiB0aGUgdGl0bGUgZm9yIGluc3RhbmNlIFwiZW5cIi5cbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgdGl0bGVXaXRoTGFuZ3VhZ2UodGl0bGUsIGxhbmd1YWdlKSB7XG4gICAgdGhpcy5fdGl0bGVfbGFuZyA9IHsgdmFsdWU6IHRpdGxlLCBsYW5ndWFnZSB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgc3BlY2lmaWMgcHJvcGVydHkgdmFsdWUgY29tYmluYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBvYmplY3RcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHBhcmFtIHt0ZXh0fHN0cmluZ30gW2luZGV4VHlwZT1uZ3JhbV0gJ25ncmFtJyBjb3JyZXNwb25kcyB0byBwYXJ0aWFsIHN0cmluZ1xuICAgKiBtYXRjaGluZywgc3RyaW5nIGNvcnJlc3BvbmRzIHRvIGV4YWN0IHN0cmluZyBtYXRjaGluZyBhbmQgdGV4dCBjb3JyZXNwb25kcyB0byB3b3JkIG1hdGNoaW5nLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWxhdGVkPWZhbHNlXSB3aWxsIHNlYXJjaCBpbiByZWxhdGVkIHByb3BlcnRpZXMgaWYgdHJ1ZSwgZGVmYXVsdCBpcyBmYWxzZVxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBsaXRlcmFsUHJvcGVydHkocHJlZGljYXRlLCBvYmplY3QsIG1vZGlmaWVyLCBpbmRleFR5cGUgPSAnbmdyYW0nLCByZWxhdGVkID0gZmFsc2UpIHtcbiAgICBjb25zdCBrZXkgPSBzaG9ydGVuKHByZWRpY2F0ZSk7XG4gICAgbGV0IG5vZGV0eXBlO1xuICAgIHN3aXRjaCAoaW5kZXhUeXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgbm9kZXR5cGUgPSAnbGl0ZXJhbF90JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBub2RldHlwZSA9ICdsaXRlcmFsX3MnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ25ncmFtJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG5vZGV0eXBlID0gJ2xpdGVyYWwnO1xuICAgIH1cbiAgICAocmVsYXRlZCA/IHRoaXMucmVsYXRlZFByb3BlcnRpZXMgOiB0aGlzLnByb3BlcnRpZXMpLnB1c2goe1xuICAgICAgbWQ1OiBrZXksXG4gICAgICBwcmVkOiBwcmVkaWNhdGUsXG4gICAgICBvYmplY3QsXG4gICAgICBtb2RpZmllcixcbiAgICAgIG5vZGV0eXBlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoZXMgc3BlY2lmaWMgcHJvcGVydHkgdmFsdWUgY29tYmluYXRpb25zIHdoZW4gdGhlIHZhbHVlIGlzIGFuIGludGVnZXIuXG4gICAqIE5vdGUgdGhhdCB0aGUgaW50ZWdlciB2YWx1ZXMgYXJlIHNpbmdsZSB2YWx1ZSBwZXIgcHJvcGVydHkgYW5kIGNhbiBiZSB1c2VkIGZvciBzb3J0aW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBvYmplY3RcbiAgICogQHBhcmFtIHt0cnVlfGZhbHNlfHN0cmluZ30gbW9kaWZpZXJcbiAgICogQHBhcmFtIHtib29sZWFufSByZWxhdGVkIC0gd2lsbCBzZWFyY2ggaW4gcmVsYXRlZCBwcm9wZXJ0aWVzIGlmIHRydWUsIGRlZmF1bHQgaXMgZmFsc2VcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgaW50ZWdlclByb3BlcnR5KHByZWRpY2F0ZSwgb2JqZWN0LCBtb2RpZmllciwgcmVsYXRlZCA9IGZhbHNlKSB7XG4gICAgY29uc3Qga2V5ID0gc2hvcnRlbihwcmVkaWNhdGUpO1xuICAgIChyZWxhdGVkID8gdGhpcy5yZWxhdGVkUHJvcGVydGllcyA6IHRoaXMucHJvcGVydGllcykucHVzaCh7XG4gICAgICBtZDU6IGtleSxcbiAgICAgIHByZWQ6IHByZWRpY2F0ZSxcbiAgICAgIG9iamVjdCxcbiAgICAgIG1vZGlmaWVyLFxuICAgICAgbm9kZXR5cGU6ICdpbnRlZ2VyJyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaGVzIHNwZWNpZmljIHByb3BlcnR5IHZhbHVlIGNvbWJpbmF0aW9ucyB3aGVuIHRoZSB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICAgKiBOb3RlIHRoYXQgdGhlIGludGVnZXIgdmFsdWVzIGFyZSBzaW5nbGUgdmFsdWUgcGVyIHByb3BlcnR5IGFuZCBjYW4gYmUgdXNlZCBmb3Igc29ydGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWRpY2F0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gb2JqZWN0XG4gICAqIEBwYXJhbSB7dHJ1ZXxmYWxzZXxzdHJpbmd9IG1vZGlmaWVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVsYXRlZCAtIHdpbGwgc2VhcmNoIGluIHJlbGF0ZWQgcHJvcGVydGllcyBpZiB0cnVlLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIHVyaVByb3BlcnR5KHByZWRpY2F0ZSwgb2JqZWN0LCBtb2RpZmllciwgcmVsYXRlZCA9IGZhbHNlKSB7XG4gICAgY29uc3Qga2V5ID0gc2hvcnRlbihwcmVkaWNhdGUpO1xuXG4gICAgKHJlbGF0ZWQgPyB0aGlzLnJlbGF0ZWRQcm9wZXJ0aWVzIDogdGhpcy5wcm9wZXJ0aWVzKS5wdXNoKHtcbiAgICAgIG1kNToga2V5LFxuICAgICAgcHJlZDogcHJlZGljYXRlLFxuICAgICAgb2JqZWN0OiBBcnJheS5pc0FycmF5KG9iamVjdCkgPyBvYmplY3QubWFwKG8gPT4gbmFtZXNwYWNlcy5leHBhbmQobykpIDpcbiAgICAgICAgbmFtZXNwYWNlcy5leHBhbmQob2JqZWN0KSxcbiAgICAgIG1vZGlmaWVyLFxuICAgICAgbm9kZXR5cGU6ICd1cmknLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBhZ2luYXRpb24gbGltaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXRcbiAgICogQHJldHVybiB7c3RvcmUvU29sclF1ZXJ5fVxuICAgKi9cbiAgbGltaXQobGltaXQpIHtcbiAgICB0aGlzLl9saW1pdCA9IGxpbWl0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHBhZ2luYXRpb24gbGltaXQgaWYgaXQgc2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGltaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpbWl0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJhbWV0ZXIgXCJzb3J0XCIgY2FuIGJlIHVzZWQgZm9yIFNvbHItc3R5bGUgc29ydGluZywgZS5nLiBcInNvcnQ9dGl0bGUrYXNjLG1vZGlmaWVkK2Rlc2NcIi5cbiAgICogVGhlIGRlZmF1bHQgc29ydGluZyB2YWx1ZSBpcyB0byBzb3J0IGFmdGVyIHRoZSBzY29yZSAocmVsZXZhbmN5KSBhbmQgdGhlIG1vZGlmaWNhdGlvbiBkYXRlLlxuICAgKiBBbGwgc3RyaW5nIGFuZCBub24tbXVsdGkgdmFsdWUgZmllbGRzIGNhbiBiZSB1c2VkIGZvciBzb3J0aW5nLCB0aGlzIGJhc2ljYWxseSBleGNsdWRlcyB0aXRsZSxcbiAgICogZGVzY3JpcHRpb24gYW5kIGtleXdvcmRzLFxuICAgKiBidXQgYWxsb3dzIHNvcnRpbmcgYWZ0ZXIgZS5nLiB0aXRsZS5lbi5cbiAgICogSWYgbm8gc29ydCBpcyBleHBsaWNpdGx5IGdpdmVuIHRoZSBkZWZhdWx0IHNvcnQgc3RyaW5nIHVzZWQgaXMgXCJzY29yZSthc2NcIi5cbiAgICogQHBhcmFtIHNvcnQge1N0cmluZ30gYSBsaXN0IG9mIGZpZWxkcyB0b2dldGhlciB3aXRoICcrYXNjJyBvciAnK2Rlc2MnLCBmaXJzdCBmaWVsZCBoYXMgdGhlXG4gICAqIGhpZ2hlc3QgcHJpb3JpdHkgd2hlbiBzb3J0aW5nLlxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBzb3J0KHNvcnQpIHtcbiAgICB0aGlzLl9zb3J0ID0gc29ydDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYW4gZXhwbGljaXQgb2Zmc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBvZmZzZXQob2Zmc2V0KSB7XG4gICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmYWNldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlbGF0ZWQ9ZmFsc2VdXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGZhY2V0KGZhY2V0LCBwcmVkaWNhdGUsIHJlbGF0ZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuZmFjZXRzID0gdGhpcy5mYWNldHMgfHwgW107XG4gICAgaWYgKHByZWRpY2F0ZSkge1xuICAgICAgdGhpcy5mYWNldDJwcmVkaWNhdGUgPSB0aGlzLmZhY2V0MnByZWRpY2F0ZSB8fCB7fTtcbiAgICAgIHRoaXMuZmFjZXQycHJlZGljYXRlW2ZhY2V0XSA9IG5hbWVzcGFjZXMuZXhwYW5kKHByZWRpY2F0ZSk7XG4gICAgICBpZiAocmVsYXRlZCkge1xuICAgICAgICB0aGlzLnJlbGF0ZWRGYWNldHByZWRpY2F0ZXNbcHJlZGljYXRlXSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZhY2V0cHJlZGljYXRlc1twcmVkaWNhdGVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5mYWNldHMucHVzaChmYWNldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBpbmNsdWRlIGxpdGVyYWwgZmFjZXRzIGZvciB0aGUgZ2l2ZW4gcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVkaWNhdGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVsYXRlZD1mYWxzZV0gd2hldGhlciB0aGUgZmFjZXQgaXMgb24gdGhlIHJlbGF0ZWQgcHJlZGljYXRlcywgZGVmYXVsdCBpcyBmYWxzZVxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBsaXRlcmFsRmFjZXQocHJlZGljYXRlLCByZWxhdGVkID0gZmFsc2UpIHtcbiAgICB0aGlzLmZhY2V0KGAke3JlbGF0ZWQgPyAncmVsYXRlZC4nIDogJyd9bWV0YWRhdGEucHJlZGljYXRlLmxpdGVyYWxfcy4ke3Nob3J0ZW4ocHJlZGljYXRlKX1gLCBwcmVkaWNhdGUsIHJlbGF0ZWQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdG8gaW5jbHVkZSBVUkkgZmFjZXRzIGZvciB0aGUgZ2l2ZW4gcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVkaWNhdGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVsYXRlZD1mYWxzZV0gd2hldGhlciB0aGUgZmFjZXQgaXMgb24gdGhlIHJlbGF0ZWQgcHJlZGljYXRlcywgZGVmYXVsdCBpcyBmYWxzZVxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICB1cmlGYWNldChwcmVkaWNhdGUsIHJlbGF0ZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuZmFjZXQoYCR7cmVsYXRlZCA/ICdyZWxhdGVkLicgOiAnJ31tZXRhZGF0YS5wcmVkaWNhdGUudXJpLiR7c2hvcnRlbihwcmVkaWNhdGUpfWAsIHByZWRpY2F0ZSwgcmVsYXRlZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCB0byBpbmNsdWRlIGludGVnZXIgZmFjZXRzIGZvciB0aGUgZ2l2ZW4gcHJlZGljYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVkaWNhdGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVsYXRlZD1mYWxzZV0gd2hldGhlciB0aGUgZmFjZXQgaXMgb24gdGhlIHJlbGF0ZWQgcHJlZGljYXRlcywgZGVmYXVsdCBpcyBmYWxzZVxuICAgKiBAcmV0dXJuIHtzdG9yZS9Tb2xyUXVlcnl9XG4gICAqL1xuICBpbnRlZ2VyRmFjZXQocHJlZGljYXRlLCByZWxhdGVkID0gZmFsc2UpIHtcbiAgICB0aGlzLmZhY2V0KGAke3JlbGF0ZWQgPyAncmVsYXRlZC4nIDogJyd9bWV0YWRhdGEucHJlZGljYXRlLmludGVnZXIuJHtzaG9ydGVuKHByZWRpY2F0ZSl9YCwgcHJlZGljYXRlLCByZWxhdGVkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIHRoZSBxdWVyeSBjb25zdHJ1Y3Rpb24gdG8gbWFrZSB0aGUgZmllbGRzIGFkZGVkIHZpYSB0aGUgcHJvcGVydHkgbWV0aG9kc1xuICAgKiAodXJpUHJvcGVydHksIGxpdGVyYWxQcm9wZXJ0eSBhbmQgaW50ZWdlclByb3BlcnR5KSB0byBiZSBkaXNqdW5jdGl2ZSByYXRoZXIgdGhhblxuICAgKiBjb25qdW5jdGl2ZS4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICAgICBlcy5uZXdTb2xyUXVlcnkoKS5kaXNqdW5jdGl2ZVByb3BlcnRpZXMoKS5saXRlcmFsUHJvcGVydHkoXCJkY3Rlcm1zOnRpdGxlXCIsIFwiYmFuYW5hXCIpXG4gICAqICAgICAgICAgIC51cmlQcm9wZXJ0eShcImRjdGVybXM6c3ViamVjdFwiLCBcImV4OkJhbmFuYVwiKTtcbiAgICpcbiAgICogV2lsbCBzZWFyY2ggZm9yIGVudHJpZXMgdGhhdCBoYXZlIGVpdGhlciBhIFwiYmFuYW5hXCIgaW4gdGhlIHRpdGxlIG9yIGEgcmVsYXRpb24gdG9cbiAgICogZXg6QmFuYW5hIHZpYSBkY3Rlcm1zOnN1YmplY3QuIFRoZSBkZWZhdWx0LCB3aXRob3V0IGRpc2p1bmN0aXZlUHJvcGVydGllcyBiZWluZyBjYWxsZWRcbiAgICogaXMgdG8gY3JlYXRlIGEgY29uanVuY3Rpb24sIGkuZS4gQU5EIHRoZW0gdG9nZXRoZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGRpc2p1bmN0aXZlUHJvcGVydGllcygpIHtcbiAgICB0aGlzLmRpc2p1bmN0aXZlUHJvcGVydGllcyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGVsbCB0aGUgcXVlcnkgY29uc3RydWN0aW9uIHRvIG1ha2UgdG9wIGxldmVsIGZpZWxkcyBkaXNqdW5jdGl2ZSByYXRoZXIgdGhhblxuICAgKiBjb25qdW5jdGl2ZS4gRm9yIGV4YW1wbGVcbiAgICpcbiAgICogICAgIGVzLm5ld1NvbHJRdWVyeSgpLmRpc2p1bmN0aXZlKCkudGl0bGUoXCJiYW5hbmFcIikuZGVzY3JpcHRpb24oXCJ0b21hdG9cIilcbiAgICpcbiAgICogV2lsbCBzZWFyY2ggZm9yIGVudHJpZXMgdGhhdCBoYXZlIGVpdGhlciBhIFwiYmFuYW5hXCIgaW4gdGhlIHRpdGxlIG9yIFwidG9tYXRvXCIgaW4gdGhlXG4gICAqIGRlc2NyaXB0aW9uIHJhdGhlciB0aGFuIGVudHJpZXMgdGhhdCBoYXZlIGJvdGggd2hpY2ggaXMgdGhlIGRlZmF1bHQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0b3JlL1NvbHJRdWVyeX1cbiAgICovXG4gIGRpc2p1bmN0aXZlKCkge1xuICAgIHRoaXMuZGlzanVuY3RpdmUgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIFNlYXJjaExpc3QgZnJvIHRoaXMgU29sclF1ZXJ5LlxuICAgKlxuICAgKiBAcGFyYW0gYXN5bmNDYWxsVHlwZVxuICAgKiBAcmV0dXJucyB7c3RvcmUvU2VhcmNoTGlzdH1cbiAgICovXG4gIGxpc3QoYXN5bmNDYWxsVHlwZSkge1xuICAgIHJldHVybiBuZXcgU2VhcmNoTGlzdCh0aGlzLl9lbnRyeXN0b3JlLCB0aGlzLCBhc3luY0NhbGxUeXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9kdWNlcyB0aGUgYWN0dWFsIHF1ZXJ5IHRvIHRoZSBFbnRyeVN0b3JlIEFQSS5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBnZXRRdWVyeSgpIHtcbiAgICBjb25zdCBhbmQgPSBbXTtcbiAgICBpZiAodGhpcy5fdGl0bGVfbGFuZyAhPSBudWxsKSB7XG4gICAgICBhbmQucHVzaChgdGl0bGUuJHt0aGlzLl90aXRsZV9sYW5nLmxhbmd9OiR7c29sckZyaWVuZGx5KHRoaXMuX3RpdGxlX2xhbmcubGFuZyxcbiAgICAgICAgdGhpcy5fdGl0bGVfbGFuZy52YWx1ZSl9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXJhbXMuZm9yRWFjaCgodiwga2V5KSA9PiB7XG4gICAgICBjb25zdCBtb2RpZmllciA9IHRoaXMubW9kaWZpZXJzLmdldChrZXkpO1xuICAgICAgaWYgKCh0eXBlb2YgdiA9PT0gJ3N0cmluZycpICYmIHYgIT09ICcnKSB7XG4gICAgICAgIGlmIChtb2RpZmllciA9PT0gdHJ1ZSB8fCBtb2RpZmllciA9PT0gJ25vdCcpIHtcbiAgICAgICAgICBhbmQucHVzaChgTk9UKCR7a2V5fToke3NvbHJGcmllbmRseShrZXksIHYpfSlgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbmQucHVzaChgJHtrZXl9OiR7c29sckZyaWVuZGx5KGtleSwgdil9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2KSAmJiB2Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgb3IgPSBbXTtcbiAgICAgICAgdi5mb3JFYWNoKChvdikgPT4ge1xuICAgICAgICAgIGlmICgodHlwZW9mIG92ID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgIG9yLnB1c2goYCR7a2V5fToke3NvbHJGcmllbmRseShrZXksIG92KX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobW9kaWZpZXIgPT09IHRydWUgfHwgbW9kaWZpZXIgPT09ICdub3QnKSB7XG4gICAgICAgICAgYW5kLnB1c2goYE5PVCgke29yLmpvaW4oJytPUisnKX0pYCk7XG4gICAgICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICdhbmQnKSB7XG4gICAgICAgICAgYW5kLnB1c2goYCgke29yLmpvaW4oJytBTkQrJyl9KWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFuZC5wdXNoKGAoJHtvci5qb2luKCcrT1IrJyl9KWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5yZWxhdGVkUHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBvciA9IFtdO1xuICAgICAgdGhpcy5yZWxhdGVkUHJvcGVydGllcy5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHByb3Aub2JqZWN0O1xuICAgICAgICBjb25zdCBrZXkgPSBgcmVsYXRlZC5tZXRhZGF0YS5wcmVkaWNhdGUuJHtwcm9wLm5vZGV0eXBlfS4ke3Byb3AubWQ1fWA7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9yLnB1c2goYCR7a2V5fToke3NvbHJGcmllbmRseShrZXksIG9iaiwgdGhpcy5yZWxhdGVkRmFjZXRwcmVkaWNhdGVzW3Byb3AucHJlZF0pfWApO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG9iai5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgICAgICBvci5wdXNoKGAke2tleX06JHtzb2xyRnJpZW5kbHkoa2V5LCBvLCB0aGlzLnJlbGF0ZWRGYWNldHByZWRpY2F0ZXNbcHJvcC5wcmVkXSl9YCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYW5kLnB1c2goYCgke29yLmpvaW4oJytPUisnKX0pYCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRpc2p1bmN0aXZlUHJvcGVydGllcyB8fCB0aGlzLmRpc2p1bmN0aXZlKSB7XG4gICAgICBjb25zdCBvciA9IFtdO1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gcHJvcC5vYmplY3Q7XG4gICAgICAgIGNvbnN0IGtleSA9IGBtZXRhZGF0YS5wcmVkaWNhdGUuJHtwcm9wLm5vZGV0eXBlfS4ke3Byb3AubWQ1fWA7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9yLnB1c2goYCR7a2V5fToke3NvbHJGcmllbmRseShrZXksIG9iaiwgdGhpcy5mYWNldHByZWRpY2F0ZXNbcHJvcC5wcmVkXSl9YCk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopICYmIG9iai5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgb2JqLmZvckVhY2goKG8pID0+IHtcbiAgICAgICAgICAgIG9yLnB1c2goYCR7a2V5fToke3NvbHJGcmllbmRseShrZXksIG8sIHRoaXMuZmFjZXRwcmVkaWNhdGVzW3Byb3AucHJlZF0pfWApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChvci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFuZC5wdXNoKGAoJHtvci5qb2luKCcrT1IrJyl9KWApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBwcm9wLm9iamVjdDtcbiAgICAgICAgY29uc3Qga2V5ID0gYG1ldGFkYXRhLnByZWRpY2F0ZS4ke3Byb3Aubm9kZXR5cGV9LiR7cHJvcC5tZDV9YDtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHByb3AubW9kaWZpZXIgPT09IHRydWUgfHwgcHJvcC5tb2RpZmllciA9PT0gJ25vdCcpIHtcbiAgICAgICAgICAgIGFuZC5wdXNoKGBOT1QoJHtrZXl9OiR7c29sckZyaWVuZGx5KGtleSwgb2JqLCB0aGlzLmZhY2V0cHJlZGljYXRlc1twcm9wLnByZWRdKX0pYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuZC5wdXNoKGAke2tleX06JHtzb2xyRnJpZW5kbHkoa2V5LCBvYmosIHRoaXMuZmFjZXRwcmVkaWNhdGVzW3Byb3AucHJlZF0pfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBvciA9IFtdO1xuICAgICAgICAgIG9iai5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgICAgICBvci5wdXNoKGAke2tleX06JHtzb2xyRnJpZW5kbHkoa2V5LCBvLCB0aGlzLmZhY2V0cHJlZGljYXRlc1twcm9wLnByZWRdKX1gKTtcbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICBpZiAocHJvcC5tb2RpZmllciA9PT0gdHJ1ZSB8fCBwcm9wLm1vZGlmaWVyID09PSAnbm90Jykge1xuICAgICAgICAgICAgYW5kLnB1c2goYE5PVCgke29yLmpvaW4oJytPUisnKX0pYCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9wLm1vZGlmaWVyID09PSAnYW5kJykge1xuICAgICAgICAgICAgYW5kLnB1c2goYCgke29yLmpvaW4oJytBTkQrJyl9KWApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmQucHVzaChgKCR7b3Iuam9pbignK09SKycpfSlgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLl9hbmQuZm9yRWFjaCgoc3RydWN0KSA9PiB7XG4gICAgICBhbmQucHVzaChidWlsZFF1ZXJ5KHN0cnVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuICAgIHRoaXMuX29yLmZvckVhY2goKHN0cnVjdCkgPT4ge1xuICAgICAgYW5kLnB1c2goYnVpbGRRdWVyeShzdHJ1Y3QsIGZhbHNlKSk7XG4gICAgfSk7XG5cbiAgICBsZXQgdHJhaWwgPSAnJztcbiAgICBpZiAodGhpcy5fbGltaXQgIT0gbnVsbCkge1xuICAgICAgdHJhaWwgPSBgJmxpbWl0PSR7dGhpcy5fbGltaXR9YDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX29mZnNldCkge1xuICAgICAgdHJhaWwgPSBgJHt0cmFpbH0mb2Zmc2V0PSR7dGhpcy5fb2Zmc2V0fWA7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3J0KSB7XG4gICAgICB0cmFpbCA9IGAke3RyYWlsfSZzb3J0PSR7dGhpcy5fc29ydCB8fCAnc2NvcmUrYXNjJ31gO1xuICAgIH1cbiAgICBpZiAodGhpcy5mYWNldHMpIHtcbiAgICAgIHRyYWlsICs9IGAmZmFjZXRGaWVsZHM9JHt0aGlzLmZhY2V0cy5qb2luKCcsJyl9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMuX2VudHJ5c3RvcmUuZ2V0QmFzZVVSSSgpfXNlYXJjaD90eXBlPXNvbHImcXVlcnk9JHthbmQuam9pbih0aGlzLmRpc2p1bmN0aXZlID8gJytPUicgOiAnK0FORCsnKX0ke3RyYWlsfWA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHBhZ2VcbiAgICogQHJldHVybnMge1Byb21pc2UuPEFycmF5LjxFbnRyeT4+fSB0aGUgcHJvbWlzZSB3aWxsIHJldHVybiBhbiBlbnRyeS1hcnJheS5cbiAgICogQHNlZSB7c3RvcmUvTGlzdC5nZXRFbnRyaWVzfVxuICAgKi9cbiAgZ2V0RW50cmllcyhwYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdCgpLmdldEVudHJpZXMocGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGZ1bmNcbiAgICogQHJldHVybiB7cHJvbWlzZX1cbiAgICogQHNlZSB7c3RvcmUvTGlzdC5mb3JFYWNofVxuICAgKi9cbiAgZm9yRWFjaChmdW5jKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdCgpLmZvckVhY2goZnVuYyk7XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImltcG9ydCB4bWxkb20gZnJvbSAneG1sZG9tJztcbmltcG9ydCBmYWN0b3J5IGZyb20gJy4vZmFjdG9yeSc7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSAnLi9SZXNvdXJjZSc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiBGaWxlIHJlc291cmNlcyBhcmUgcmVzb3VyY2VzIGxvY2F0ZWQgaW4gdGhlIEVudHJ5c3RvcmUgcmVwb3NpdG9yeSB0aGF0IGhhdmUgYSBncmFwaCB0eXBlIG9mXG4gKiBub25lLCBlLmcuIG5vbmUgb2YgdGhlIHNwZWNpYWwgY2FzZXMgZm9yIHdoaWNoIHRoZXJlIGFyZSBzcGVjaWFsIHRyZWF0bWVudCBpbiBFbnRyeVN0b3JlLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL0ZpbGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZVJlc291cmNlIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAvKipcbiAgICogUHVzaGVzIGEgZmlsZSB0byB0aGUgc2VydmVyIGZvciB0aGlzIHJlc291cmNlLlxuICAgKiBJbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQgYSBmaWxlIGlzIHJlcHJlc2VudGVkIHZpYSBhbiBpbnB1dCB0YWcgd2hpY2ggcmVmZXJlbmNlc1xuICAgKiB0aGUgZmlsZSB0byBiZSB1cGxvYWRlZCB2aWEgaXRzIHZhbHVlIGF0dHJpYnV0ZS4gRS5nLjpcbiAgICpcbiAgICogICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgbmFtZT1cInVwbG9hZEZpbGVcIi8+XG4gICAqXG4gICAqIER1cmluZyB0aGUgdXBsb2FkaW5nIHByb2Nlc3MgdGhlIGlucHV0IHRhZyB3aWxsIGJlIG1vdmVkIHRlbXBvcmFyaWx5IGluIHRoZSBET00gdHJlZSxcbiAgICogaXQgd2lsbCBiZSByZXN0b3JlZCB0byBpdHMgb3JpZ2luYWwgcG9zaXRpb24gYWZ0ZXJ3YXJkcyAoYm90aCB1cG9uIHN1Y2Nlc3MgYW5kIGZhaWx1cmUpLlxuICAgKlxuICAgKiBJbiBhIG5vZGVqcyBlbnZpcm9ubWVudHMgdGhlIGZpbGUgaXMgbGV2ZXJhZ2VkIGFzIGEgc3RyZWFtLCBpLmUuOlxuICAgKiByZXMucHV0RmlsZShmcy5jcmVhdGVSZWFkU3RyZWFtKCdmaWxlLnR4dCcpKTtcbiAgICpcbiAgICogQHBhcmFtIHtub2RlfGZpbGVIYW5kbGV9IGRhdGEgLSBpbnB1dCB0YWcgb3IgZmlsZSBoYW5kbGUgdGhhdCBjb3JyZXNwb25kcyB0byBhIGZpbGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSBpbmRpY2F0ZXMgdGhlIG1pbWV0eXBlIG9mIHRoZSBkYXRhXG4gICAqIEB0b2RvIGZpeC1pZi1tb2RpZmllZC1zaW5jZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHB1dEZpbGUoZGF0YSwgZm9ybWF0KSB7XG4gICAgbGV0IHVybDtcbiAgICAvLyBub2luc3BlY3Rpb24gQW1kTW9kdWxlc0RlcGVuZGVuY2llc1xuICAgIGlmIChpc0Jyb3dzZXIoKSAmJiBkYXRhIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgaWYgKGRhdGEubmFtZSA9PSBudWxsIHx8IGRhdGEubmFtZSA9PT0gJycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsdXJlLCBjYW5ub3QgdXBsb2FkIHJlc291cmNlIGZyb20gaW5wdXQgZWxlbWVudCB1bmxlc3MgYSBuYW1lJyArXG4gICAgICAgICAgJyBhdHRyaWJ1dGUgaXMgcHJvdmlkZWQuJyk7XG4gICAgICB9XG4gICAgICB1cmwgPSBmYWN0b3J5LmdldFB1dEZpbGVVUkkodGhpcy5nZXRSZXNvdXJjZVVSSSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsID0gdGhpcy5nZXRSZXNvdXJjZVVSSSgpO1xuICAgIH1cbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIHJldHVybiBlcy5oYW5kbGVBc3luYyhlcy5nZXRSRVNUKCkucHV0RmlsZSh1cmwsIGRhdGEsIGZvcm1hdCkudGhlbigocmVzKSA9PiB7XG4gICAgICB0aGlzLmdldEVudHJ5KHRydWUpLnNldFJlZnJlc2hOZWVkZWQoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSksICdwdXRGaWxlJyk7XG4gIH1cblxuICAvKipcbiAgICogUHVzaGVzIGRhdGEgdG8gdGhlIHNlcnZlciBmb3IgdGhpcyByZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgLSB0byBiZSBzdG9yZWQgYXMgYSBmaWxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gdGhlIGZvcm1hdCBvZiB0aGUgZGF0YSBhcyBhIG1pbWV0eXBlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHB1dChkYXRhLCBmb3JtYXQgPSAnYXBwbGljYXRpb24vanNvbicpIHtcbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIHJldHVybiBlcy5oYW5kbGVBc3luYyhlcy5nZXRSRVNUKCkucHV0KHRoaXMuZ2V0UmVzb3VyY2VVUkkoKSwgZGF0YSwgbnVsbCwgZm9ybWF0KSwgJ3B1dEZpbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoZXMgdGV4dCBjb250ZW50IHRvIHRoZSBzZXJ2ZXIgZm9yIHRoaXMgcmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdG8gYmUgc3RvcmVkIGFzIGEgZmlsZSwgZm9ybWF0IHdpbGwgYmUgc2V0IHRvIHRleHQvcGxhaW4uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgcHV0VGV4dCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMucHV0KHRleHQsICd0ZXh0L3BsYWluJyk7XG4gIH1cblxuICAvKipcbiAgICogUHVzaGVzIEpTT04gY29udGVudCB0byB0aGUgc2VydmVyIGZvciB0aGlzIHJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdG8gYmUgc3RvcmVkIGFzIGEganNvbiBvYmplY3QsIGZvcm1hdCB3aWxsIGJlIHNldCB0byBhcHBsaWNhdGlvbi9qc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHB1dEpTT04ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0KEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2hlcyB4bWwgY29udGVudCB0byB0aGUgc2VydmVyIGZvciB0aGlzIHJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xEb2N1bWVudH0geG1sIC0gdG8gYmUgc3RvcmVkIGFzIGEgeG1sIG9iamVjdCwgZm9ybWF0IHdpbGwgYmUgc2V0IHRvXG4gICAqIGFwcGxpY2F0aW9uL2pzb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKiBAdG9kbyBub3QgZmluaXNoZWQgb3IgdGVzdGVkXG4gICAqL1xuICBwdXRYTUwoeG1sKSB7XG4gICAgbGV0IF94bWwgPSB4bWw7XG4gICAgY29uc3QgWE1MU2VyaWFsaXplciA9IGlzQnJvd3NlcigpID8gd2luZG93LlhNTFNlcmlhbGl6ZXIgOiB4bWxkb20uWE1MU2VyaWFsaXplcjtcblxuICAgIGlmICghaXNCcm93c2VyKCkgfHwgX3htbCBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBHZWNrby0gYW5kIFdlYmtpdC1iYXNlZCBicm93c2VycyAoRmlyZWZveCwgQ2hyb21lKSwgT3BlcmEuXG4gICAgICAgIF94bWwgPSAobmV3IFhNTFNlcmlhbGl6ZXIoKSkuc2VyaWFsaXplVG9TdHJpbmcoX3htbCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAgICAgICAgX3htbCA9IF94bWwueG1sO1xuICAgICAgICB9IGNhdGNoIChlZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWG1sc2VyaWFsaXplciBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCh0eXBlb2YgX3htbCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZm9ybWF0IG9mIHBhcmFtZXRlciB4bWwgdG8gbWV0aG9kIHB1dEFzWE1MJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnB1dChfeG1sLCAndGV4dC94bWwnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7eGhyUHJvbWlzZX0gd2hpY2ggZm9ybWF0IHRoZSByZXNvdXJjZSBpcyByZXR1cm5lZCBpbiB0aGUgcHJvbWlzZSAoc3RyaW5nLCBqc29uIG9yXG4gICAqIHhtbCkgZGVwZW5kcyBvbiB3aGF0IGlzIHNwZWNpZmllZCBpbiB0aGUgbWltZXR5cGUuIFhtbCBpcyBvbmx5IHJldHVybmVkIGluIGEgYnJvd3NlclxuICAgKiBlbnZpcm9ubWVudCwgaWYgbm90IGluIGEgYnJvd3NlciBhIHN0cmluZyBpcyByZXR1cm5lZC5cbiAgICovXG4gIGdldCgpIHtcbiAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmdldEVudHJ5KHRydWUpLmdldEVudHJ5SW5mbygpLmdldEZvcm1hdCgpO1xuICAgIGNvbnN0IGVzID0gdGhpcy5nZXRFbnRyeVN0b3JlKCk7XG4gICAgcmV0dXJuIGVzLmhhbmRsZUFzeW5jKGVzLmdldFJFU1QoKS5nZXQodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCBmb3JtYXQpLCAnZ2V0RmlsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBpZ25vcmVzIHdoYXQgaXMgc3BlY2lmaWVkIGluIHRoZSBtaW1ldHlwZSBhbmQgcmV0dXJucyB0aGUgcmVzb3VyY2VcbiAgICogYXMgYSBzdHJpbmcgaW4gdGhlIHByb21pc2UuXG4gICAqL1xuICBnZXRUZXh0KCkge1xuICAgIGNvbnN0IGVzID0gdGhpcy5nZXRFbnRyeVN0b3JlKCk7XG4gICAgcmV0dXJuIGVzLmhhbmRsZUFzeW5jKHRoaXMuZ2V0RW50cnlTdG9yZSgpLmdldFJFU1QoKS5nZXQodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCAndGV4dC9wbGFpbicsIHRydWUpLCAnZ2V0RmlsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBpZ25vcmVzIHdoYXQgaXMgc3BlY2lmaWVkIGluIHRoZSBtaW1ldHlwZSBhbmQgcmV0dXJucyB0aGUgcmVzb3VyY2VcbiAgICogYXMgYSBqYXZhc2NyaXB0IG9iamVjdCBpbiB0aGUgcHJvbWlzZS5cbiAgICovXG4gIGdldEpTT04oKSB7XG4gICAgY29uc3QgZXMgPSB0aGlzLmdldEVudHJ5U3RvcmUoKTtcbiAgICByZXR1cm4gZXMuaGFuZGxlQXN5bmMoZXMuZ2V0UkVTVCgpLmdldCh0aGlzLmdldFJlc291cmNlVVJJKCksICdhcHBsaWNhdGlvbi9qc29uJyksICdnZXRGaWxlJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1Byb21pc2V9IGlnbm9yZXMgd2hhdCBpcyBzcGVjaWZpZWQgaW4gdGhlIG1pbWV0eXBlIGFuZCByZXR1cm5zIHRoZSByZXNvdXJjZVxuICAgKiBpbiB0aGUgcHJvbWlzZSBhcyBhIFhNTCBEb2N1bWVudCBvciBhIHN0cmluZyAoZGVwZW5kaW5nIG9uIGlmIHlvdSBhcmUgaW4gYnJvd3NlciBvciBub3QpLlxuICAgKi9cbiAgZ2V0WE1MKCkge1xuICAgIGNvbnN0IGVzID0gdGhpcy5nZXRFbnRyeVN0b3JlKCk7XG4gICAgcmV0dXJuIGVzLmhhbmRsZUFzeW5jKGVzLmdldFJFU1QoKS5nZXQodGhpcy5nZXRSZXNvdXJjZVVSSSgpLCAndGV4dC94bWwnKSwgJ2dldEZpbGUnKTtcbiAgfVxufVxuIiwiaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0JztcbmltcG9ydCB0ZXJtcyBmcm9tICcuL3Rlcm1zJztcblxuLyoqXG4gKiBHcm91cCBpcyBhIHN1YmNsYXNzIG9mIHRoZSBMaXN0IHJlc291cmNlIGFuZCBjb250YWlucyBhIGxpc3Qgb2YgdXNlcnMuXG4gKiBUaGUgZ3JvdXAgcmVzb3VyY2UgVVJJIGNhbiBiZSByZWZlcnJlZCB0byBmcm9tIGFjY2VzcyBjb250cm9sIGxpc3RzLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL0dyb3VwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwIGV4dGVuZHMgTGlzdCB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWUgb2YgdGhlIGdyb3VwLCB0aGlzIGlzIGEgYSB1bmlxdWUgbmFtZSAodXNlcm5hbWUpIGluIHRoZSBjdXJyZW50XG4gICAqIHJlcG9zaXRvcnkncyBfcHJpbmNpcGFscyBjb250ZXh0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSBuZXcgbmFtZSBvZiB0aGUgZ3JvdXAsIGl0IHdpbGwgbm90IHN1Y2NlZWQgaWYgaXQgaXMgYWxyZWFkeSBpbiB1c2UsIGZvciBpbnN0YW5jZSBieVxuICAgKiBhbm90aGVyIHVzZXIgb3IgZ3JvdXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0TmFtZShuYW1lKSB7XG4gICAgY29uc3Qgb2xkTmFtZSA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5U3RvcmUuaGFuZGxlQXN5bmModGhpcy5fZW50cnlTdG9yZS5nZXRSRVNUKCkucHV0KFxuICAgICAgYCR7dGhpcy5nZXRFbnRyeVVSSSgpfS9uYW1lYCwgSlNPTi5zdHJpbmdpZnkoeyBuYW1lIH0pKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmdldEVudHJ5KHRydWUpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5nZXRFbnRyeUluZm8oKS5fbmFtZSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LCAoZSkgPT4ge1xuICAgICAgICB0aGlzLl9uYW1lID0gb2xkTmFtZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pLCAnc2V0R3JvdXBOYW1lJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBob21lIGNvbnRleHQgZm9yIHRoaXMgdXNlci5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gLSBhIGNvbnRleHQgaWQgKG5vdCB0aGUgZnVsbCByZXNvdXJjZSBVUkkpLlxuICAgKi9cbiAgZ2V0SG9tZUNvbnRleHQoKSB7XG4gICAgY29uc3QgZXMgPSB0aGlzLmdldEVudHJ5U3RvcmUoKTtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMuZ2V0RW50cnkodHJ1ZSk7XG4gICAgY29uc3QgY29udGV4dFJlc291cmNlVVJJID0gZW50cnkuZ2V0RW50cnlJbmZvKCkuZ2V0R3JhcGgoKS5maW5kRmlyc3RWYWx1ZShcbiAgICAgIGVudHJ5LmdldFJlc291cmNlVVJJKCksIHRlcm1zLmhvbWVDb250ZXh0KTtcbiAgICBpZiAoY29udGV4dFJlc291cmNlVVJJICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBlcy5nZXRFbnRyeUlkKGNvbnRleHRSZXNvdXJjZVVSSSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgbmV3IGhvbWUgY29udGV4dCBmb3IgdGhpcyBncm91cC5cbiAgICogTm90ZSB0aGF0IHRoZSBob21lIGNvbnRleHQgaXMgc3RvcmVkIGluIHRoZSBlbnRyeWluZm9ybWF0aW9uLCBoZW5jZSwgYWxsIG90aGVyIGNoYW5nZXMgbWFkZVxuICAgKiB0byB0aGUgZW50cnlpbmZvcm1hdGlvbiB3aWxsIGJlIHNhdmVkIHVubGVzcyB0aGUgZG9Ob3RQdXNoVG9SZXBvc2l0b3J5IGZsYWcgaXMgc2V0IHRvIHRydWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0SWQgLSBhIGNvbnRleHQgaWQgKG5vdCB0aGUgZnVsbCByZXNvdXJjZSBVUkkpLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvTm90UHVzaFRvUmVwb3NpdG9yeSBpZiB0cnVlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgbWFkZSBpbiB0aGVcbiAgICogZW50cnlpbmZvcm1hdGlvbiBidXQgaXQgd2lsbCBub3QgYmUgcHVzaGVkIHRvIHRoZSByZXNwb3NpdG9yeS4gVG8gZG8gdGhpcyB5b3UgbmVlZCB0byBnZXRcbiAgICogYSBob2xkIG9mIHRoZSBlbnRyeWluZm9ybWF0aW9uIGFuZCBjYWxsIGNvbW1pdC5cbiAgICogQHJldHVybnMge1Byb21pc2UuPHN0b3JlL0VudHJ5SW5mbz58dW5kZWZpbmVkfVxuICAgKi9cbiAgc2V0SG9tZUNvbnRleHQoY29udGV4dElkLCBkb05vdFB1c2hUb1JlcG9zaXRvcnkpIHtcbiAgICBjb25zdCBlcyA9IHRoaXMuZ2V0RW50cnlTdG9yZSgpO1xuICAgIGNvbnN0IG5ld0NvbnRleHRVUkkgPSBlcy5nZXRSZXNvdXJjZVVSSSgnX2NvbnRleHRzJywgY29udGV4dElkKTtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMuZ2V0RW50cnkodHJ1ZSk7XG4gICAgY29uc3QgZ3JhcGggPSBlbnRyeS5nZXRFbnRyeUluZm8oKS5nZXRHcmFwaCgpO1xuICAgIGdyYXBoLmZpbmRBbmRSZW1vdmUoZW50cnkuZ2V0UmVzb3VyY2VVUkkoKSwgdGVybXMuaG9tZUNvbnRleHQpO1xuICAgIGdyYXBoLmFkZChlbnRyeS5nZXRSZXNvdXJjZVVSSSgpLCB0ZXJtcy5ob21lQ29udGV4dCwgeyB0eXBlOiAndXJpJywgdmFsdWU6IG5ld0NvbnRleHRVUkkgfSk7XG4gICAgaWYgKGRvTm90UHVzaFRvUmVwb3NpdG9yeSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGVudHJ5LmdldEVudHJ5SW5mbygpLmNvbW1pdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIERhdGEgY29udGFpbnMgYWxsVW5zb3J0ZWQgYXJyYXksIHNpemUsIGFuZCBjaGlsZHJlbi5cbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHBhcmFtIGNoaWxkcmVuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlKGRhdGEsIGNoaWxkcmVuKSB7XG4gICAgc3VwZXIuX3VwZGF0ZShkYXRhLCBjaGlsZHJlbik7XG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcbiAgfVxufVxuIiwiaW1wb3J0ICdjb3JlLWpzL3N0YWJsZSc7XG5pbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XG5cbi8qXG4gKiBUaGUgZXhwb3NlZCBFbnRyeVN0b3JlIEFQSVxuICovXG5leHBvcnQgeyBkZWZhdWx0IGFzIGZhY3RvcnkgfSBmcm9tICcuL2ZhY3RvcnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBodG1sIH0gZnJvbSAnLi9odG1sJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHJvbWlzZVV0aWwgfSBmcm9tICcuL3Byb21pc2VVdGlsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVzdCB9IGZyb20gJy4vUmVzdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvbHIgfSBmcm9tICcuL1NvbHJRdWVyeSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHR5cGVzIH0gZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEF1dGggfSBmcm9tICcuL0F1dGgnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDYWNoZSB9IGZyb20gJy4vQ2FjaGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRW50cnkgfSBmcm9tICcuL0VudHJ5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRW50cnlJbmZvIH0gZnJvbSAnLi9FbnRyeUluZm8nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFbnRyeVN0b3JlIH0gZnJvbSAnLi9FbnRyeVN0b3JlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRW50cnlTdG9yZVV0aWwgfSBmcm9tICcuL0VudHJ5U3RvcmVVdGlsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRmlsZSB9IGZyb20gJy4vRmlsZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyYXBoIH0gZnJvbSAnLi9HcmFwaCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyb3VwIH0gZnJvbSAnLi9Hcm91cCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3QgfSBmcm9tICcuL0xpc3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQaXBlbGluZSB9IGZyb20gJy4vUGlwZWxpbmUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQcm90b3R5cGVFbnRyeSB9IGZyb20gJy4vUHJvdG90eXBlRW50cnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSZXNvdXJjZSB9IGZyb20gJy4vUmVzb3VyY2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTZWFyY2hMaXN0IH0gZnJvbSAnLi9TZWFyY2hMaXN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3RyaW5nIH0gZnJvbSAnLi9TdHJpbmcnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBVc2VyIH0gZnJvbSAnLi9Vc2VyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGVybXMgfSBmcm9tICcuL3Rlcm1zJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXRpbHMgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCB7IG5hbWVzcGFjZXMgfSBmcm9tICdyZGZqc29uJzsgLy8gQHRvZG8gQHZhbGVudGlubyBub3QgaWRlYWxcbiIsInJlcXVpcmUoJy4uL2VzJyk7XG5yZXF1aXJlKCcuLi93ZWInKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5pcy12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dyYXBwZWQtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBKU09OID0gZ2xvYmFsLkpTT047XG52YXIgbmF0aXZlSlNPTlN0cmluZ2lmeSA9IEpTT04gJiYgSlNPTi5zdHJpbmdpZnk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gTkFUSVZFX1NZTUJPTCAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9QcmltaXRpdmUoViwgdHJ1ZSk7XG4gIHZhciBlbnVtZXJhYmxlID0gbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywgUCkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzKHRoaXMsIFApIHx8ICFoYXMoQWxsU3ltYm9scywgUCkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhoaWRkZW5LZXlzLCBrZXkpKSByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5KU09OICYmICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIHJldHVybiBuYXRpdmVKU09OU3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgIHx8IG5hdGl2ZUpTT05TdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgfHwgbmF0aXZlSlNPTlN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9Jztcbn0pIH0sIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGluZGV4ID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBuYXRpdmVKU09OU3RyaW5naWZ5LmFwcGx5KEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoISRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdKSBoaWRlKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuYXN5bmNJdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5hc3luY2l0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaGFzSW5zdGFuY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmlzY29uY2F0c3ByZWFkYWJsZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hBbGxgIHdlbGwta25vd24gc3ltYm9sXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoQWxsJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnJlcGxhY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucmVwbGFjZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNlYXJjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5zZWFyY2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc2VhcmNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwZWNpZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BlY2llc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwbGl0YCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnNwbGl0XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwbGl0Jyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnRvUHJpbWl0aXZlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnRvcHJpbWl0aXZlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnVuc2NvcGFibGVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnVuc2NvcGFibGVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBjcmVhdGU6IGNyZWF0ZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG9iamVjdERlZmluZVByb3BlcnR5TW9kaWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFERVNDUklQVE9SUywgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydHk6IG9iamVjdERlZmluZVByb3BlcnR5TW9kaWxlLmZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFERVNDUklQVE9SUywgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXknKS5lbnRyaWVzO1xuXG4vLyBgT2JqZWN0LmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xuXG52YXIgbmF0aXZlRnJlZXplID0gT2JqZWN0LmZyZWV6ZTtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVGcmVlemUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmZyZWV6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZnJlZXplXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBmcmVlemU6IGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiBuYXRpdmVGcmVlemUgJiYgaXNPYmplY3QoaXQpID8gbmF0aXZlRnJlZXplKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5mcm9tRW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZnJvbS1lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGZyb21FbnRyaWVzOiBmdW5jdGlvbiBmcm9tRW50cmllcyhpdGVyYWJsZSkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgY3JlYXRlUHJvcGVydHkob2JqLCBrLCB2KTtcbiAgICB9LCB1bmRlZmluZWQsIHRydWUpO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0KGl0KSwga2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpLmY7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xuXG4vLyBgT2JqZWN0LmlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5pc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpczogaXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlSXNFeHRlbnNpYmxlKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IG5hdGl2ZUlzRXh0ZW5zaWJsZSA/IG5hdGl2ZUlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUlzRnJvemVuKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0Zyb3plbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBpc0Zyb3plbjogZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gbmF0aXZlSXNGcm96ZW4gPyBuYXRpdmVJc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUlzU2VhbGVkID0gT2JqZWN0LmlzU2VhbGVkO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUlzU2VhbGVkKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc1NlYWxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNzZWFsZWRcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBpc1NlYWxlZDogZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gbmF0aXZlSXNTZWFsZWQgPyBuYXRpdmVJc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVQcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVQcmV2ZW50RXh0ZW5zaW9ucygxKTsgfSk7XG5cbi8vIGBPYmplY3QucHJldmVudEV4dGVuc2lvbnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByZXZlbnRleHRlbnNpb25zXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlUHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gbmF0aXZlUHJldmVudEV4dGVuc2lvbnMob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlU2VhbCA9IE9iamVjdC5zZWFsO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZVNlYWwoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnNlYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNlYWxcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIHNlYWw6IGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlU2VhbCAmJiBpc09iamVjdChpdCkgPyBuYXRpdmVTZWFsKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2Zcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXknKS52YWx1ZXM7XG5cbi8vIGBPYmplY3QudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykge1xuICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICB9XG59KTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICh0b1N0cmluZyAhPT0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nKSB7XG4gIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpICE9PSAnW29iamVjdCB6XScgPyBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufSA6IHRlc3QudG9TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mb3JjZWQtb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtbWV0aG9kcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZm9yY2VkLW9iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLW1ldGhvZHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1tZXRob2RzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgICAgdmFyIGRlc2M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSkpIHJldHVybiBkZXNjLmdldDtcbiAgICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1tZXRob2RzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgICAgdmFyIGRlc2M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSkpIHJldHVybiBkZXNjLnNldDtcbiAgICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlIH0sIHtcbiAgYmluZDogYmluZFxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcgPSBGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZztcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSEFTX0lOU1RBTkNFID0gd2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS1AQGhhc2luc3RhbmNlXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoRnVuY3Rpb25Qcm90b3R5cGUsIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAgIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gICAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbi8vIGBBcnJheS5pc0FycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciBJU05UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbi8vIGBBcnJheS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5vZlxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNOVF9HRU5FUklDIH0sIHtcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFyZ3VtZW50c0xlbmd0aCk7XG4gICAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhcmd1bWVudHNMZW5ndGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBjb3B5V2l0aGluOiBjb3B5V2l0aGluXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5ldmVyeTtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBzbG9wcHlBcnJheU1ldGhvZCgnZXZlcnknKSB9LCB7XG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaWxsOiBmaWxsXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkQgPSAnZmluZCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkQgaW4gW10pIEFycmF5KDEpW0ZJTkRdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZmxhdE1hcFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0OiBmdW5jdGlvbiBmbGF0KC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRNYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZmxhdE1hcFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgc2xvcHB5QXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZCcpO1xuXG52YXIgbmF0aXZlSW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbnZhciBORUdBVElWRV9aRVJPID0gISFuYXRpdmVJbmRleE9mICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNMT1BQWV9NRVRIT0QgPSBzbG9wcHlBcnJheU1ldGhvZCgnaW5kZXhPZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgU0xPUFBZX01FVEhPRCB9LCB7XG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSBbXS5qb2luO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTTE9QUFlfTUVUSE9EID0gc2xvcHB5QXJyYXlNZXRob2QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8IFNMT1BQWV9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBuYXRpdmVKb2luLmNhbGwodG9JbmRleGVkT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogbGFzdEluZGV4T2YgIT09IFtdLmxhc3RJbmRleE9mIH0sIHtcbiAgbGFzdEluZGV4T2Y6IGxhc3RJbmRleE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKSB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IHNsb3BweUFycmF5TWV0aG9kKCdyZWR1Y2UnKSB9LCB7XG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IHNsb3BweUFycmF5TWV0aG9kKCdyZWR1Y2VSaWdodCcpIH0sIHtcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZVJpZ2h0KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbnZhciBuYXRpdmVSZXZlcnNlID0gW10ucmV2ZXJzZTtcbnZhciB0ZXN0ID0gWzEsIDJdO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJldmVyc2Vcbi8vIGZpeCBmb3IgU2FmYXJpIDEyLjAgYnVnXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTg4Nzk0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTdHJpbmcodGVzdCkgPT09IFN0cmluZyh0ZXN0LnJldmVyc2UoKSkgfSwge1xuICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgIGlmIChpc0FycmF5KHRoaXMpKSB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHJldHVybiBuYXRpdmVSZXZlcnNlLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIWFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJykgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgQ29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZS5jYWxsKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5zb21lO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBzbG9wcHlBcnJheU1ldGhvZCgnc29tZScpIH0sIHtcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxudmFyIG5hdGl2ZVNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTTE9QUFlfTUVUSE9EID0gc2xvcHB5QXJyYXlNZXRob2QoJ3NvcnQnKTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCBTTE9QUFlfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIWFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpIH0sIHtcbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyKGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQgPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCk7XG4gICAgfVxuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICBmcm9tID0gYWN0dWFsU3RhcnQgKyBrO1xuICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgfVxuICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgaWYgKGluc2VydENvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudDtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IGxlbjsgayA+IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7IGstLSkgZGVsZXRlIE9bayAtIDFdO1xuICAgIH0gZWxzZSBpZiAoaW5zZXJ0Q291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQgLSAxO1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudCAtIDE7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IDA7IGsgPCBpbnNlcnRDb3VudDsgaysrKSB7XG4gICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgIH1cbiAgICBPLmxlbmd0aCA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0LWFycmF5LUBAc3BlY2llc1xuc2V0U3BlY2llcygnQXJyYXknKTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwiLy8gdGhpcyBtZXRob2Qgd2FzIGFkZGVkIHRvIHVuc2NvcGFibGVzIGFmdGVyIGltcGxlbWVudGF0aW9uXG4vLyBpbiBwb3B1bGFyIGVuZ2luZXMsIHNvIGl0J3MgbW92ZWQgdG8gYSBzZXBhcmF0ZSBtb2R1bGVcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdmbGF0TWFwJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgbmF0aXZlRnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG52YXIgSU5DT1JSRUNUX0xFTkdUSCA9ICEhbmF0aXZlRnJvbUNvZGVQb2ludCAmJiBuYXRpdmVGcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxO1xuXG4vLyBgU3RyaW5nLmZyb21Db2RlUG9pbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLmZyb21jb2RlcG9pbnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9MRU5HVEggfSwge1xuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMEZGRkYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4RDgwMCwgY29kZSAlIDB4NDAwICsgMHhEQzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiBlbGVtZW50cy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYFN0cmluZy5yYXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnJhd1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHN0YXQ6IHRydWUgfSwge1xuICByYXc6IGZ1bmN0aW9uIHJhdyh0ZW1wbGF0ZSkge1xuICAgIHZhciByYXdUZW1wbGF0ZSA9IHRvSW5kZXhlZE9iamVjdCh0ZW1wbGF0ZS5yYXcpO1xuICAgIHZhciBsaXRlcmFsU2VnbWVudHMgPSB0b0xlbmd0aChyYXdUZW1wbGF0ZS5sZW5ndGgpO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGl0ZXJhbFNlZ21lbnRzID4gaSkge1xuICAgICAgZWxlbWVudHMucHVzaChTdHJpbmcocmF3VGVtcGxhdGVbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhcmd1bWVudHNMZW5ndGgpIGVsZW1lbnRzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIGVsZW1lbnRzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuIGNvZGVBdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG52YXIgbmF0aXZlRW5kc1dpdGggPSAnJy5lbmRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5lbmRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnZW5kc1dpdGgnKSB9LCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVFbmRzV2l0aFxuICAgICAgPyBuYXRpdmVFbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+U3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpXG4gICAgICAuaW5kZXhPZihub3RBUmVnRXhwKHNlYXJjaFN0cmluZyksIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIG1hdGNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBtYXRjaGVyICE9PSB1bmRlZmluZWQgPyBtYXRjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBNQVRDSF9BTEwgPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoQWxsJyk7XG52YXIgUkVHRVhQX1NUUklORyA9ICdSZWdFeHAgU3RyaW5nJztcbnZhciBSRUdFWFBfU1RSSU5HX0lURVJBVE9SID0gUkVHRVhQX1NUUklORyArICcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUkVHRVhQX1NUUklOR19JVEVSQVRPUik7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZWdFeHBCdWlsdGluRXhlYyA9IFJlZ0V4cFByb3RvdHlwZS5leGVjO1xuXG52YXIgcmVnRXhwRXhlYyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICB2YXIgcmVzdWx0O1xuICBpZiAodHlwZW9mIGV4ZWMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgZXhlYyByZXN1bHQnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiByZWdFeHBCdWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJlZ2V4cCwgc3RyaW5nLCBnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiBnbG9iYWwsXG4gICAgdW5pY29kZTogZnVsbFVuaWNvZGUsXG4gICAgZG9uZTogZmFsc2VcbiAgfSk7XG59LCBSRUdFWFBfU1RSSU5HLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB2YXIgUiA9IHN0YXRlLnJlZ2V4cDtcbiAgdmFyIFMgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBtYXRjaCA9IHJlZ0V4cEV4ZWMoUiwgUyk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogc3RhdGUuZG9uZSA9IHRydWUgfTtcbiAgaWYgKHN0YXRlLmdsb2JhbCkge1xuICAgIGlmIChTdHJpbmcobWF0Y2hbMF0pID09ICcnKSBSLmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChSLmxhc3RJbmRleCksIHN0YXRlLnVuaWNvZGUpO1xuICAgIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbnZhciAkbWF0Y2hBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBTID0gU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICBmbGFnc1ZhbHVlID0gUi5mbGFncztcbiAgaWYgKGZsYWdzVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldEZsYWdzLmNhbGwoUik7XG4gIH1cbiAgZmxhZ3MgPSBmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhmbGFnc1ZhbHVlKTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICBnbG9iYWwgPSAhIX5mbGFncy5pbmRleE9mKCdnJyk7XG4gIGZ1bGxVbmljb2RlID0gISF+ZmxhZ3MuaW5kZXhPZigndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctbWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgdmFyIFMsIG1hdGNoZXIsIHJ4O1xuICAgIGlmIChyZWdleHAgIT0gbnVsbCkge1xuICAgICAgbWF0Y2hlciA9IHJlZ2V4cFtNQVRDSF9BTExdO1xuICAgICAgaWYgKG1hdGNoZXIgPT09IHVuZGVmaW5lZCAmJiBJU19QVVJFICYmIGNsYXNzb2YocmVnZXhwKSA9PSAnUmVnRXhwJykgbWF0Y2hlciA9ICRtYXRjaEFsbDtcbiAgICAgIGlmIChtYXRjaGVyICE9IG51bGwpIHJldHVybiBhRnVuY3Rpb24obWF0Y2hlcikuY2FsbChyZWdleHAsIE8pO1xuICAgIH1cbiAgICBTID0gU3RyaW5nKE8pO1xuICAgIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAsICdnJyk7XG4gICAgcmV0dXJuIElTX1BVUkUgPyAkbWF0Y2hBbGwuY2FsbChyeCwgUykgOiByeFtNQVRDSF9BTExdKFMpO1xuICB9XG59KTtcblxuSVNfUFVSRSB8fCBNQVRDSF9BTEwgaW4gUmVnRXhwUHJvdG90eXBlIHx8IGhpZGUoUmVnRXhwUHJvdG90eXBlLCBNQVRDSF9BTEwsICRtYXRjaEFsbCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5lbmQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWJraXQtc3RyaW5nLXBhZC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZEVuZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLnN0YXJ0O1xudmFyIFdFQktJVF9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2Via2l0LXN0cmluZy1wYWQtYnVnJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwZWF0OiByZXBlYXRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gcmVwbGFjZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBuYXRpdmVSZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVSZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc2VhcmNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gc2VhcmNoZXIgIT09IHVuZGVmaW5lZCA/IHNlYXJjaGVyLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgYXJyYXlQdXNoID0gW10ucHVzaDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuICFSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChTUExJVCwgbmF0aXZlU3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJy5zcGxpdCgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDEgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGhcbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXJyYXlQdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gb3V0cHV0LnNsaWNlKDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBuYXRpdmVTcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09IG5hdGl2ZVNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sICFTVVBQT1JUU19ZKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG52YXIgbmF0aXZlU3RhcnRzV2l0aCA9ICcnLnN0YXJ0c1dpdGg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJykgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZm9yY2VkLXN0cmluZy10cmltLW1ldGhvZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW0nKSB9LCB7XG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS5zdGFydDtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctdHJpbS1tZXRob2QnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1TdGFydCcpO1xuXG52YXIgdHJpbVN0YXJ0ID0gRk9SQ0VEID8gZnVuY3Rpb24gdHJpbVN0YXJ0KCkge1xuICByZXR1cm4gJHRyaW1TdGFydCh0aGlzKTtcbn0gOiAnJy50cmltU3RhcnQ7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVN0YXJ0LCB0cmltTGVmdCB9YCBtZXRob2RzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0cmltU3RhcnQ6IHRyaW1TdGFydCxcbiAgdHJpbUxlZnQ6IHRyaW1TdGFydFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLmVuZDtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctdHJpbS1tZXRob2QnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1FbmQnKTtcblxudmFyIHRyaW1FbmQgPSBGT1JDRUQgPyBmdW5jdGlvbiB0cmltRW5kKCkge1xuICByZXR1cm4gJHRyaW1FbmQodGhpcyk7XG59IDogJycudHJpbUVuZDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltRW5kLCB0cmltUmlnaHQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdHJpbUVuZDogdHJpbUVuZCxcbiAgdHJpbVJpZ2h0OiB0cmltRW5kXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYW5jaG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYW5jaG9yXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYW5jaG9yJykgfSwge1xuICBhbmNob3I6IGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmlnYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmlnXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYmlnJykgfSwge1xuICBiaWc6IGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mb3JjZWQtc3RyaW5nLWh0bWwtbWV0aG9kJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJsaW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdibGluaycpIH0sIHtcbiAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZm9yY2VkLXN0cmluZy1odG1sLW1ldGhvZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ib2xkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYm9sZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JvbGQnKSB9LCB7XG4gIGJvbGQ6IGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5maXhlZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZpeGVkJykgfSwge1xuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mb3JjZWQtc3RyaW5nLWh0bWwtbWV0aG9kJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRjb2xvcicpIH0sIHtcbiAgZm9udGNvbG9yOiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mb3JjZWQtc3RyaW5nLWh0bWwtbWV0aG9kJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZm9udHNpemVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250c2l6ZScpIH0sIHtcbiAgZm9udHNpemU6IGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZm9yY2VkLXN0cmluZy1odG1sLW1ldGhvZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaXRhbGljc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2l0YWxpY3MnKSB9LCB7XG4gIGl0YWxpY3M6IGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUubGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdsaW5rJykgfSwge1xuICBsaW5rOiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc21hbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zbWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3NtYWxsJykgfSwge1xuICBzbWFsbDogZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mb3JjZWQtc3RyaW5nLWh0bWwtbWV0aG9kJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0cmlrZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0cmlrZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N0cmlrZScpIH0sIHtcbiAgc3RyaWtlOiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZm9yY2VkLXN0cmluZy1odG1sLW1ldGhvZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdWJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdWInKSB9LCB7XG4gIHN1YjogZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZvcmNlZC1zdHJpbmctaHRtbC1tZXRob2QnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3VwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3VwXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3VwJykgfSwge1xuICBzdXA6IGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBpc0ZvcmNlZCgnUmVnRXhwJywgKCFDT1JSRUNUX05FVyB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpO1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLWNvbnN0cnVjdG9yXG5pZiAoRk9SQ0VEKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyICYmIGZsYWdzQXJlVW5kZWZpbmVkID8gcGF0dGVyblxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBOYXRpdmVSZWdFeHAocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0FyZVVuZGVmaW5lZCA/IHBhdHRlcm4uc291cmNlIDogcGF0dGVybiwgZmxhZ3MpXG4gICAgICAgIDogTmF0aXZlUmVnRXhwKChwYXR0ZXJuSXNSZWdFeHAgPSBwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwV3JhcHBlcilcbiAgICAgICAgICA/IHBhdHRlcm4uc291cmNlXG4gICAgICAgICAgOiBwYXR0ZXJuLCBwYXR0ZXJuSXNSZWdFeHAgJiYgZmxhZ3NBcmVVbmRlZmluZWQgPyBnZXRGbGFncy5jYWxsKHBhdHRlcm4pIDogZmxhZ3MpXG4gICAgICAsIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgcmVkZWZpbmUoZ2xvYmFsLCAnUmVnRXhwJywgUmVnRXhwV3JhcHBlcik7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5pZiAoREVTQ1JJUFRPUlMgJiYgLy4vZy5mbGFncyAhPSAnZycpIHtcbiAgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2R1bGUuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogcmVnRXhwRmxhZ3NcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwID0gU3RyaW5nKFIuc291cmNlKTtcbiAgICB2YXIgcmYgPSBSLmZsYWdzO1xuICAgIHZhciBmID0gU3RyaW5nKHJmID09PSB1bmRlZmluZWQgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSA/IGZsYWdzLmNhbGwoUikgOiByZik7XG4gICAgcmV0dXJuICcvJyArIHAgKyAnLycgKyBmO1xuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlSW50SW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGFyc2UtaW50Jyk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VJbnQgIT0gcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiB9LCB7XG4gIHBhcnNlSW50OiBwYXJzZUludEltcGxlbWVudGF0aW9uXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXJzZS1mbG9hdCcpO1xuXG4vLyBgcGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUZsb2F0ICE9IHBhcnNlRmxvYXRJbXBsZW1lbnRhdGlvbiB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRJbXBsZW1lbnRhdGlvblxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgTnVtYmVyUHJvdG90eXBlID0gTmF0aXZlTnVtYmVyLnByb3RvdHlwZTtcblxuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NMQVNTT0YgPSBjbGFzc29mKGNyZWF0ZShOdW1iZXJQcm90b3R5cGUpKSA9PSBOVU1CRVI7XG5cbi8vIGBUb051bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gdHJpbShpdCk7XG4gICAgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBkaWdpdHMgPSBpdC5zbGljZSgyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXItY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZChOVU1CRVIsICFOYXRpdmVOdW1iZXIoJyAwbzEnKSB8fCAhTmF0aXZlTnVtYmVyKCcwYjEnKSB8fCBOYXRpdmVOdW1iZXIoJysweDEnKSkpIHtcbiAgdmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgZHVtbXkgPSB0aGlzO1xuICAgIHJldHVybiBkdW1teSBpbnN0YW5jZW9mIE51bWJlcldyYXBwZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DTEFTU09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBOdW1iZXJQcm90b3R5cGUudmFsdWVPZi5jYWxsKGR1bW15KTsgfSkgOiBjbGFzc29mKGR1bW15KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IE5hdGl2ZU51bWJlcih0b051bWJlcihpdCkpLCBkdW1teSwgTnVtYmVyV3JhcHBlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlTnVtYmVyKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKE5hdGl2ZU51bWJlciwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcyhOdW1iZXJXcmFwcGVyLCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShOdW1iZXJXcmFwcGVyLCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihOYXRpdmVOdW1iZXIsIGtleSkpO1xuICAgIH1cbiAgfVxuICBOdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbiAgTnVtYmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTnVtYmVyV3JhcHBlcjtcbiAgcmVkZWZpbmUoZ2xvYmFsLCBOVU1CRVIsIE51bWJlcldyYXBwZXIpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuRVBTSUxPTmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5lcHNpbG9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01Milcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc2Zpbml0ZVxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwgeyBpc0Zpbml0ZTogbnVtYmVySXNGaW5pdGUgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgZ2xvYmFsSXNGaW5pdGUgPSBnbG9iYWwuaXNGaW5pdGU7XG5cbi8vIGBOdW1iZXIuaXNGaW5pdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIGdsb2JhbElzRmluaXRlKGl0KTtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdlcicpO1xuXG4vLyBgTnVtYmVyLmlzSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzSW50ZWdlcjogaXNJbnRlZ2VyXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLmlzTmFOYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc25hblxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ2VyJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcblxuLy8gYE51bWJlci5pc1NhZmVJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MUZGRkZGRkZGRkZGRkY7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5tYXhfc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIE1BWF9TQUZFX0lOVEVHRVI6IDB4MUZGRkZGRkZGRkZGRkZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5taW5fc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIE1JTl9TQUZFX0lOVEVHRVI6IC0weDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGFyc2UtZmxvYXQnKTtcblxuLy8gYE51bWJlci5wYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZUZsb2F0XG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBOdW1iZXIucGFyc2VGbG9hdCAhPSBwYXJzZUZsb2F0IH0sIHtcbiAgcGFyc2VGbG9hdDogcGFyc2VGbG9hdFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUludCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXJzZS1pbnQnKTtcblxuLy8gYE51bWJlci5wYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXIucGFyc2VpbnRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUludCAhPSBwYXJzZUludCB9LCB7XG4gIHBhcnNlSW50OiBwYXJzZUludFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZVRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG5cbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG52YXIgRk9SQ0VEID0gbmF0aXZlVG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIG5hdGl2ZVRvRml4ZWQuY2FsbCh7fSk7XG59KTtcblxuLy8gYE51bWJlci5wcm90b3R5cGUudG9GaXhlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZml4ZWRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICB2YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgYzIgPSBjO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCA2KSB7XG4gICAgICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBjMiAlIDFlNztcbiAgICAgICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICAgICAgdmFyIGluZGV4ID0gNjtcbiAgICAgIHZhciBjID0gMDtcbiAgICAgIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICAgICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBmbG9vcihjIC8gbik7XG4gICAgICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZGF0YVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluZGV4ID0gNjtcbiAgICAgIHZhciBzID0gJyc7XG4gICAgICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgICAgIGlmIChzICE9PSAnJyB8fCBpbmRleCA9PT0gMCB8fCBkYXRhW2luZGV4XSAhPT0gMCkge1xuICAgICAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKCcwJywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHM7XG4gICAgfTtcblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcignSW5jb3JyZWN0IGZyYWN0aW9uIGRpZ2l0cycpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICByZXN1bHQgPSBkYXRhVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQuY2FsbCgnMCcsIGZyYWN0RGlnaXRzIC0gaykgKyByZXN1bHRcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgayAtIGZyYWN0RGlnaXRzKSArICcuJyArIHJlc3VsdC5zbGljZShrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIG5hdGl2ZVRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiBuYXRpdmVUb1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIG5hdGl2ZVRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5wcm90b3R5cGUudG9wcmVjaXNpb25cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVRvUHJlY2lzaW9uLmNhbGwodGhpc051bWJlclZhbHVlKHRoaXMpKVxuICAgICAgOiBuYXRpdmVUb1ByZWNpc2lvbi5jYWxsKHRoaXNOdW1iZXJWYWx1ZSh0aGlzKSwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzFwJyk7XG5cbnZhciBuYXRpdmVBY29zaCA9IE1hdGguYWNvc2g7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIEZPUkNFRCA9ICFuYXRpdmVBY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gIHx8IE1hdGguZmxvb3IobmF0aXZlQWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpICE9IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICB8fCBuYXRpdmVBY29zaChJbmZpbml0eSkgIT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmFjb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1hdGguYWNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gbG9nKHgpICsgTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBuYXRpdmVBc2luaCA9IE1hdGguYXNpbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IGxvZyh4ICsgc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gYE1hdGguYXNpbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5hc2luaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIShuYXRpdmVBc2luaCAmJiAxIC8gbmF0aXZlQXNpbmgoMCkgPiAwKSB9LCB7XG4gIGFzaW5oOiBhc2luaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIG5hdGl2ZUF0YW5oID0gTWF0aC5hdGFuaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcblxuLy8gYE1hdGguYXRhbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5hdGFuaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIShuYXRpdmVBdGFuaCAmJiAxIC8gbmF0aXZlQXRhbmgoLTApIDwgMCkgfSwge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IGxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcblxuLy8gYE1hdGguY2JydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmNicnRcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBwb3coYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE9HMkUgPSBNYXRoLkxPRzJFO1xuXG4vLyBgTWF0aC5jbHozMmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmNsejMyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBmbG9vcihsb2coeCArIDAuNSkgKiBMT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBuYXRpdmVDb3NoID0gTWF0aC5jb3NoO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIEUgPSBNYXRoLkU7XG5cbi8vIGBNYXRoLmNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5jb3NoXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIW5hdGl2ZUNvc2ggfHwgbmF0aXZlQ29zaCg3MTApID09PSBJbmZpbml0eSB9LCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHZhciB0ID0gZXhwbTEoYWJzKHgpIC0gMSkgKyAxO1xuICAgIHJldHVybiAodCArIDEgLyAodCAqIEUgKiBFKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gYE1hdGguZXhwbTFgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGV4cG0xICE9IE1hdGguZXhwbTEgfSwgeyBleHBtMTogZXhwbTEgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1mcm91bmQnKTtcblxuLy8gYE1hdGguZnJvdW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1hdGguZnJvdW5kXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBmcm91bmQ6IGZyb3VuZCB9KTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5mcm91bmRcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBhYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG4vLyBgTWF0aC5oeXBvdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmh5cG90XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogc3FydChzdW0pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVJbXVsID0gTWF0aC5pbXVsO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlSW11bCgweEZGRkZGRkZGLCA1KSAhPSAtNSB8fCBuYXRpdmVJbXVsLmxlbmd0aCAhPSAyO1xufSk7XG5cbi8vIGBNYXRoLmltdWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWF0aC5pbXVsXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweEZGRkY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExPRzEwRSA9IE1hdGguTE9HMTBFO1xuXG4vLyBgTWF0aC5sb2cxMGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzEwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBsb2coeCkgKiBMT0cxMEU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxcCcpO1xuXG4vLyBgTWF0aC5sb2cxcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBsb2cxcDogbG9nMXAgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBgTWF0aC5sb2cyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1hdGgubG9nMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIGxvZyh4KSAvIExOMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG4vLyBgTWF0aC5zaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1hdGguc2lnblxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2lnbjogc2lnblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGV4cCA9IE1hdGguZXhwO1xudmFyIEUgPSBNYXRoLkU7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KTtcblxuLy8gYE1hdGguc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLnNpbmhcbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBhYnMoeCA9ICt4KSA8IDEgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMiA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKEUgLyAyKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gYE1hdGgudGFuaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLnRhbmhcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsInZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBNYXRoW0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTWF0aC50cnVuY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgRGF0ZS5ub3dgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGF0ZS5ub3dcbiQoeyB0YXJnZXQ6ICdEYXRlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2pzb25cbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvaXNvc3RyaW5nXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nIH0sIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvdHlwZS5nZXRUaW1lO1xudmFyIG5hdGl2ZURhdGVUb0lTT1N0cmluZyA9IERhdGVQcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBmYWlscyBoZXJlOlxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVEYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZGF0ZSA9IHRoaXM7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHNpZ24gPSB5ZWFyIDwgMCA/ICctJyA6IHllYXIgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzaWduICsgcGFkU3RhcnQoYWJzKHllYXIpLCBzaWduID8gNiA6IDQsIDApICtcbiAgICAnLScgKyBwYWRTdGFydChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyLCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZGF0ZS5nZXRVVENEYXRlKCksIDIsIDApICtcbiAgICAnVCcgKyBwYWRTdGFydChkYXRlLmdldFVUQ0hvdXJzKCksIDIsIDApICtcbiAgICAnOicgKyBwYWRTdGFydChkYXRlLmdldFVUQ01pbnV0ZXMoKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGRhdGUuZ2V0VVRDU2Vjb25kcygpLCAyLCAwKSArXG4gICAgJy4nICsgcGFkU3RhcnQobWlsbGlzZWNvbmRzLCAzLCAwKSArXG4gICAgJ1onO1xufSA6IG5hdGl2ZURhdGVUb0lTT1N0cmluZztcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgbmF0aXZlRGF0ZVRvU3RyaW5nID0gRGF0ZVByb3RvdHlwZVtUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG90eXBlLmdldFRpbWU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyBuYXRpdmVEYXRlVG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgZGF0ZVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIERhdGVQcm90b3R5cGUpKSBoaWRlKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZGF0ZVRvUHJpbWl0aXZlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICB9IHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPT0gJ251bWJlcicpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJGZldGNoID0gZ2xvYmFsLmZldGNoO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtTUEVDSUVTXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICB9O1xuICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhKChJU19OT0RFIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAmJiAoIUlTX1BVUkUgfHwgcHJvbWlzZVsnZmluYWxseSddKVxuICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICAvLyB3cmFwIGZldGNoIHJlc3VsdFxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKFByb21pc2VDb25zdHJ1Y3RvciwgJGZldGNoLmFwcGx5KGdsb2JhbCwgYXJndW1lbnRzKSk7XG4gICAgfVxuICB9KTtcbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gcGF0aFtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYXBhYmlsaXR5LnJlamVjdC5jYWxsKHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZXNvbHZlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgTWFwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignTWFwJywgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIEludGVybmFsTWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKTtcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uV2VhayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBlbmZvcmNlSXRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG5cbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxuLy8gYFdlYWtNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy13ZWFrbWFwLWNvbnN0cnVjdG9yXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ1dlYWtNYXAnLCB3cmFwcGVyLCBjb2xsZWN0aW9uV2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbi8vIFdlIGNhbid0IHVzZSBmZWF0dXJlIGRldGVjdGlvbiBiZWNhdXNlIGl0IGNyYXNoIHNvbWUgb2xkIElFIGJ1aWxkc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ4NVxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsV2Vha01hcCA9IGNvbGxlY3Rpb25XZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsICdXZWFrTWFwJywgdHJ1ZSk7XG4gIEludGVybmFsTWV0YWRhdGFNb2R1bGUuUkVRVUlSRUQgPSB0cnVlO1xuICB2YXIgV2Vha01hcFByb3RvdHlwZSA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZURlbGV0ZSA9IFdlYWtNYXBQcm90b3R5cGVbJ2RlbGV0ZSddO1xuICB2YXIgbmF0aXZlSGFzID0gV2Vha01hcFByb3RvdHlwZS5oYXM7XG4gIHZhciBuYXRpdmVHZXQgPSBXZWFrTWFwUHJvdG90eXBlLmdldDtcbiAgdmFyIG5hdGl2ZVNldCA9IFdlYWtNYXBQcm90b3R5cGUuc2V0O1xuICByZWRlZmluZUFsbChXZWFrTWFwUHJvdG90eXBlLCB7XG4gICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlLmNhbGwodGhpcywga2V5KSB8fCBzdGF0ZS5mcm96ZW5bJ2RlbGV0ZSddKGtleSk7XG4gICAgICB9IHJldHVybiBuYXRpdmVEZWxldGUuY2FsbCh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuLmhhcyhrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpID8gbmF0aXZlR2V0LmNhbGwodGhpcywga2V5KSA6IHN0YXRlLmZyb3plbi5nZXQoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUdldC5jYWxsKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KSA/IG5hdGl2ZVNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIGBXZWFrU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uV2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgQXJyYXlCdWZmZXIgPSBhcnJheUJ1ZmZlck1vZHVsZVtBUlJBWV9CVUZGRVJdO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG5cbi8vIGBBcnJheUJ1ZmZlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IE5hdGl2ZUFycmF5QnVmZmVyICE9PSBBcnJheUJ1ZmZlciB9LCB7XG4gIEFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlclxufSk7XG5cbnNldFNwZWNpZXMoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcblxuLy8gYEFycmF5QnVmZmVyLmlzVmlld2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5pc3ZpZXdcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICBpc1ZpZXc6IEFycmF5QnVmZmVyVmlld0NvcmUuaXNWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlID0gQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgSU5DT1JSRUNUX1NMSUNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyBBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KTtcblxuLy8gYEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHByb3RvOiB0cnVlLCB1bnNhZmU6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX1NMSUNFIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAobmF0aXZlQXJyYXlCdWZmZXJTbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmF0aXZlQXJyYXlCdWZmZXJTbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3U291cmNlID0gbmV3IERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VGFyZ2V0ID0gbmV3IERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdUYXJnZXQuc2V0VWludDgoaW5kZXgrKywgdmlld1NvdXJjZS5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLk5BVElWRV9BUlJBWV9CVUZGRVI7XG5cbi8vIGBEYXRhVmlld2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWRhdGF2aWV3LWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSIH0sIHtcbiAgRGF0YVZpZXc6IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3XG59KTtcbiIsInZhciB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEludDhBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xudHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG50eXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDhDbGFtcGVkQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbnR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwidmFyIHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgSW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xudHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG50eXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG50eXBlZEFycmF5Q29uc3RydWN0b3IoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDMyQXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbnR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xudHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDY0QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbnR5cGVkQXJyYXlDb25zdHJ1Y3RvcignRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXlzLWNvbnN0cnVjdG9ycy1yZXF1aXJlcy13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHR5cGVkQXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20nKTtcblxuLy8gYCVUeXBlZEFycmF5JS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5mcm9tXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFN0YXRpYygnZnJvbScsIHR5cGVkQXJyYXlGcm9tLCBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5cy1jb25zdHJ1Y3RvcnMtcmVxdWlyZXMtd3JhcHBlcnMnKTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbi8vIGAlVHlwZWRBcnJheSUub2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLm9mXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFN0YXRpYygnb2YnLCBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmNvcHl3aXRoaW5cbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ2NvcHlXaXRoaW4nLCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgcmV0dXJuICRjb3B5V2l0aGluLmNhbGwoYVR5cGVkQXJyYXkodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5ldmVyeTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5ldmVyeVxuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnZXZlcnknLCBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGV2ZXJ5KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ2ZpbGwnLCBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykge1xuICByZXR1cm4gJGZpbGwuYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbHRlclxuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnZmlsdGVyJywgZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHZhciBsaXN0ID0gJGZpbHRlcihhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ2ZpbmQnLCBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kKGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZEluZGV4O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kaW5kZXhcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ2ZpbmRJbmRleCcsIGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5mb3JlYWNoXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvKCdmb3JFYWNoJywgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAkZm9yRWFjaChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ2luY2x1ZGVzJywgZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluY2x1ZGVzKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmRleG9mXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvKCdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5kZXhPZihhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xudmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG52YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0UHJvdG8gPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvO1xudmFyIG5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvciA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGVbSVRFUkFUT1JdO1xuXG52YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhIW5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvclxuICAmJiAobmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRQcm90bygnZW50cmllcycsIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gIHJldHVybiBhcnJheUVudHJpZXMuY2FsbChhVHlwZWRBcnJheSh0aGlzKSk7XG59KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5rZXlzXG5leHBvcnRQcm90bygna2V5cycsIGZ1bmN0aW9uIGtleXMoKSB7XG4gIHJldHVybiBhcnJheUtleXMuY2FsbChhVHlwZWRBcnJheSh0aGlzKSk7XG59KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnZhbHVlc1xuZXhwb3J0UHJvdG8oJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsICFDT1JSRUNUX0lURVJfTkFNRSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLUBAaXRlcmF0b3JcbmV4cG9ydFByb3RvKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCAhQ09SUkVDVF9JVEVSX05BTUUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyICRqb2luID0gW10uam9pbjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmpvaW5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnam9pbicsIGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gIHJldHVybiAkam9pbi5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkbGFzdEluZGV4T2YuYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLm1hcFxuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnbWFwJywgZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJG1hcChhVHlwZWRBcnJheSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzcGVjaWVzQ29uc3RydWN0b3IoTywgTy5jb25zdHJ1Y3RvcikpKShsZW5ndGgpO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICByZXR1cm4gJHJlZHVjZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWNodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvKCdyZWR1Y2VSaWdodCcsIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgcmV0dXJuICRyZWR1Y2VSaWdodChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZXZlcnNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zZXRcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ3NldCcsIGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMSk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoJyk7XG4gIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyICRzbGljZSA9IFtdLnNsaWNlO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgbmV3IEludDhBcnJheSgxKS5zbGljZSgpO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9ICRzbGljZS5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCBzdGFydCwgZW5kKTtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvbWVcbkFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0UHJvdG8oJ3NvbWUnLCBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkc29tZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29ydFxuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnc29ydCcsIGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gIHJldHVybiAkc29ydC5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCBjb21wYXJlZm4pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRQcm90bygnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPLmNvbnN0cnVjdG9yKSkoXG4gICAgTy5idWZmZXIsXG4gICAgTy5ieXRlT2Zmc2V0ICsgYmVnaW5JbmRleCAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSBiZWdpbkluZGV4KVxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciAkdG9Mb2NhbGVTdHJpbmcgPSBbXS50b0xvY2FsZVN0cmluZztcbnZhciAkc2xpY2UgPSBbXS5zbGljZTtcblxuLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxudmFyIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID0gISFJbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgSW50OEFycmF5KDEpKTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IEludDhBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvbG9jYWxlc3RyaW5nXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvKCd0b0xvY2FsZVN0cmluZycsIGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICByZXR1cm4gJHRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9TVFJJTkdfQlVHID8gJHNsaWNlLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpIDogYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIFVpbnQ4QXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5VG9TdHJpbmcgPSBbXS50b1N0cmluZztcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICBhcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICB9O1xufVxuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvc3RyaW5nXG5BcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFByb3RvKCd0b1N0cmluZycsIGFycmF5VG9TdHJpbmcsIChVaW50OEFycmF5UHJvdG90eXBlIHx8IHt9KS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQXBwbHkgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2FwcGx5Jyk7XG52YXIgZnVuY3Rpb25BcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuXG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbnZhciBPUFRJT05BTF9BUkdVTUVOVFNfTElTVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFJlZmxlY3QuYXBwbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5hcHBseVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9QVElPTkFMX0FSR1VNRU5UU19MSVNUIH0sIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIG5hdGl2ZUFwcGx5XG4gICAgICA/IG5hdGl2ZUFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxuICAgICAgOiBmdW5jdGlvbkFwcGx5LmNhbGwodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVDb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xuXG4vLyBgUmVmbGVjdC5jb25zdHJ1Y3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xudmFyIEZPUkNFRCA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiBGT1JDRUQgfSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gbmF0aXZlQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbnZhciBFUlJPUl9JTlNURUFEX09GX0ZBTFNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0YXJnZXQsIGtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVsZXRlcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3QuZ2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0XG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzY3JpcHRvciwgcHJvdG90eXBlO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBkZXNjcmlwdG9yLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgaWYgKGlzT2JqZWN0KHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvdHlwZSwgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZ2V0OiBnZXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gb2JqZWN0R2V0UHJvdG90eXBlT2YoYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBSZWZsZWN0Lmhhc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lmhhc1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBvYmplY3RJc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4vLyBgUmVmbGVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuIG9iamVjdElzRXh0ZW5zaWJsZSA/IG9iamVjdElzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5vd25rZXlzXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBvd25LZXlzOiBvd25LZXlzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcblxuLy8gYFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgdmFyIG9iamVjdFByZXZlbnRFeHRlbnNpb25zID0gZ2V0QnVpbHRJbignT2JqZWN0JywgJ3ByZXZlbnRFeHRlbnNpb25zJyk7XG4gICAgICBpZiAob2JqZWN0UHJldmVudEV4dGVuc2lvbnMpIG9iamVjdFByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3Quc2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3Quc2V0XG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG90eXBlO1xuICBpZiAoIW93bkRlc2NyaXB0b3IpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzY3JpcHRvciwgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2NyaXB0b3Iuc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjcmlwdG9yLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldDogc2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xudmFyIG9iamVjdFNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBSZWZsZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3Quc2V0cHJvdG90eXBlb2ZcbmlmIChvYmplY3RTZXRQcm90b3R5cGVPZikgJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIucXVldWUtbWljcm90YXNrJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGhpZGUoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIGhpZGUoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBoaWRlKENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpO1xuXG52YXIgRk9SQ0VEID0gIWdsb2JhbC5zZXRJbW1lZGlhdGUgfHwgIWdsb2JhbC5jbGVhckltbWVkaWF0ZTtcblxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlL1xucmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBzZXRJbW1lZGlhdGVgIG1ldGhvZFxuICAvLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvI3NpLXNldEltbWVkaWF0ZVxuICBzZXRJbW1lZGlhdGU6IHRhc2suc2V0LFxuICAvLyBgY2xlYXJJbW1lZGlhdGVgIG1ldGhvZFxuICAvLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvI3NpLWNsZWFySW1tZWRpYXRlXG4gIGNsZWFySW1tZWRpYXRlOiB0YXNrLmNsZWFyXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4vLyBgcXVldWVNaWNyb3Rhc2tgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tcXVldWVtaWNyb3Rhc2tcbiQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIG5vVGFyZ2V0R2V0OiB0cnVlIH0sIHtcbiAgcXVldWVNaWNyb3Rhc2s6IGZ1bmN0aW9uIHF1ZXVlTWljcm90YXNrKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHNjaGVkdWxlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQgLyogLCAuLi5hcmd1bWVudHMgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHNjaGVkdWxlcihib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgaGFuZGxlciA9PSAnZnVuY3Rpb24nID8gaGFuZGxlciA6IEZ1bmN0aW9uKGhhbmRsZXIpKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogaGFuZGxlciwgdGltZW91dCk7XG4gIH07XG59O1xuXG4vLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI3RpbWVyc1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZm9yY2VkOiBNU0lFIH0sIHtcbiAgLy8gYHNldFRpbWVvdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXR0aW1lb3V0XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICAvLyBgc2V0SW50ZXJ2YWxgIG1ldGhvZFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXRpbnRlcnZhbFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG52YXIgYXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcbnZhciB0b0FTQ0lJID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3B1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bQS1aYS16XS87XG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrXFwtLkEtWmEtel0vO1xudmFyIERJR0lUID0gL1xcZC87XG52YXIgSEVYX1NUQVJUID0gL14oMHh8MFgpLztcbnZhciBPQ1QgPSAvXlswLTddKyQvO1xudmFyIERFQyA9IC9eXFxkKyQvO1xudmFyIEhFWCA9IC9eW1xcZEEtRmEtZl0rJC87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQgPSAvW1xcdTAwMDBcXHUwMDA5XFx1MDAwQVxcdTAwMEQgIyUvOj9AW1xcXFxdXS87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQgPSAvW1xcdTAwMDBcXHUwMDA5XFx1MDAwQVxcdTAwMEQgIy86P0BbXFxcXF1dLztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSA9IC9eW1xcdTAwMDAtXFx1MDAxRiBdK3xbXFx1MDAwMC1cXHUwMDFGIF0rJC9nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBUQUJfQU5EX05FV19MSU5FID0gL1tcXHUwMDA5XFx1MDAwQVxcdTAwMERdL2c7XG52YXIgRU9GO1xuXG52YXIgcGFyc2VIb3N0ID0gZnVuY3Rpb24gKHVybCwgaW5wdXQpIHtcbiAgdmFyIHJlc3VsdCwgY29kZVBvaW50cywgaW5kZXg7XG4gIGlmIChpbnB1dC5jaGFyQXQoMCkgPT0gJ1snKSB7XG4gICAgaWYgKGlucHV0LmNoYXJBdChpbnB1dC5sZW5ndGggLSAxKSAhPSAnXScpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgcmVzdWx0ID0gcGFyc2VJUHY2KGlucHV0LnNsaWNlKDEsIC0xKSk7XG4gICAgaWYgKCFyZXN1bHQpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgdXJsLmhvc3QgPSByZXN1bHQ7XG4gIC8vIG9wYXF1ZSBob3N0XG4gIH0gZWxzZSBpZiAoIWlzU3BlY2lhbCh1cmwpKSB7XG4gICAgaWYgKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQudGVzdChpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29kZVBvaW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHJlc3VsdCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaW5kZXhdLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICB9XG4gICAgdXJsLmhvc3QgPSByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgaW5wdXQgPSB0b0FTQ0lJKGlucHV0KTtcbiAgICBpZiAoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVC50ZXN0KGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSBwYXJzZUlQdjQoaW5wdXQpO1xuICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgdXJsLmhvc3QgPSByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBwYXJzZUlQdjQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHBhcnRzID0gaW5wdXQuc3BsaXQoJy4nKTtcbiAgdmFyIHBhcnRzTGVuZ3RoLCBudW1iZXJzLCBpbmRleCwgcGFydCwgcmFkaXgsIG51bWJlciwgaXB2NDtcbiAgaWYgKHBhcnRzLmxlbmd0aCAmJiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PSAnJykge1xuICAgIHBhcnRzLnBvcCgpO1xuICB9XG4gIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuICBpZiAocGFydHNMZW5ndGggPiA0KSByZXR1cm4gaW5wdXQ7XG4gIG51bWJlcnMgPSBbXTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBwYXJ0ID0gcGFydHNbaW5kZXhdO1xuICAgIGlmIChwYXJ0ID09ICcnKSByZXR1cm4gaW5wdXQ7XG4gICAgcmFkaXggPSAxMDtcbiAgICBpZiAocGFydC5sZW5ndGggPiAxICYmIHBhcnQuY2hhckF0KDApID09ICcwJykge1xuICAgICAgcmFkaXggPSBIRVhfU1RBUlQudGVzdChwYXJ0KSA/IDE2IDogODtcbiAgICAgIHBhcnQgPSBwYXJ0LnNsaWNlKHJhZGl4ID09IDggPyAxIDogMik7XG4gICAgfVxuICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgbnVtYmVyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEocmFkaXggPT0gMTAgPyBERUMgOiByYWRpeCA9PSA4ID8gT0NUIDogSEVYKS50ZXN0KHBhcnQpKSByZXR1cm4gaW5wdXQ7XG4gICAgICBudW1iZXIgPSBwYXJzZUludChwYXJ0LCByYWRpeCk7XG4gICAgfVxuICAgIG51bWJlcnMucHVzaChudW1iZXIpO1xuICB9XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbnVtYmVyID0gbnVtYmVyc1tpbmRleF07XG4gICAgaWYgKGluZGV4ID09IHBhcnRzTGVuZ3RoIC0gMSkge1xuICAgICAgaWYgKG51bWJlciA+PSBwb3coMjU2LCA1IC0gcGFydHNMZW5ndGgpKSByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA+IDI1NSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgaXB2NCA9IG51bWJlcnMucG9wKCk7XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG51bWJlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgaXB2NCArPSBudW1iZXJzW2luZGV4XSAqIHBvdygyNTYsIDMgLSBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIGlwdjQ7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbnZhciBwYXJzZUlQdjYgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGFkZHJlc3MgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gIHZhciBwaWVjZUluZGV4ID0gMDtcbiAgdmFyIGNvbXByZXNzID0gbnVsbDtcbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgdmFsdWUsIGxlbmd0aCwgbnVtYmVyc1NlZW4sIGlwdjRQaWVjZSwgbnVtYmVyLCBzd2Fwcywgc3dhcDtcblxuICB2YXIgY2hhciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5wdXQuY2hhckF0KHBvaW50ZXIpO1xuICB9O1xuXG4gIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgaWYgKGlucHV0LmNoYXJBdCgxKSAhPSAnOicpIHJldHVybjtcbiAgICBwb2ludGVyICs9IDI7XG4gICAgcGllY2VJbmRleCsrO1xuICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgfVxuICB3aGlsZSAoY2hhcigpKSB7XG4gICAgaWYgKHBpZWNlSW5kZXggPT0gOCkgcmV0dXJuO1xuICAgIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHJldHVybjtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIHBpZWNlSW5kZXgrKztcbiAgICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgSEVYLnRlc3QoY2hhcigpKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZSAqIDE2ICsgcGFyc2VJbnQoY2hhcigpLCAxNik7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBsZW5ndGgrKztcbiAgICB9XG4gICAgaWYgKGNoYXIoKSA9PSAnLicpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHJldHVybjtcbiAgICAgIG51bWJlcnNTZWVuID0gMDtcbiAgICAgIHdoaWxlIChjaGFyKCkpIHtcbiAgICAgICAgaXB2NFBpZWNlID0gbnVsbDtcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID4gMCkge1xuICAgICAgICAgIGlmIChjaGFyKCkgPT0gJy4nICYmIG51bWJlcnNTZWVuIDwgNCkgcG9pbnRlcisrO1xuICAgICAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRElHSVQudGVzdChjaGFyKCkpKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChESUdJVC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgICAgICBudW1iZXIgPSBwYXJzZUludChjaGFyKCksIDEwKTtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSBpcHY0UGllY2UgPSBudW1iZXI7XG4gICAgICAgICAgZWxzZSBpZiAoaXB2NFBpZWNlID09IDApIHJldHVybjtcbiAgICAgICAgICBlbHNlIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPiAyNTUpIHJldHVybjtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAyNTYgKyBpcHY0UGllY2U7XG4gICAgICAgIG51bWJlcnNTZWVuKys7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA9PSAyIHx8IG51bWJlcnNTZWVuID09IDQpIHBpZWNlSW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJzU2VlbiAhPSA0KSByZXR1cm47XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNoYXIoKSA9PSAnOicpIHtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGlmICghY2hhcigpKSByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjaGFyKCkpIHJldHVybjtcbiAgICBhZGRyZXNzW3BpZWNlSW5kZXgrK10gPSB2YWx1ZTtcbiAgfVxuICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcbiAgICBzd2FwcyA9IHBpZWNlSW5kZXggLSBjb21wcmVzcztcbiAgICBwaWVjZUluZGV4ID0gNztcbiAgICB3aGlsZSAocGllY2VJbmRleCAhPSAwICYmIHN3YXBzID4gMCkge1xuICAgICAgc3dhcCA9IGFkZHJlc3NbcGllY2VJbmRleF07XG4gICAgICBhZGRyZXNzW3BpZWNlSW5kZXgtLV0gPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTtcbiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyAtLXN3YXBzXSA9IHN3YXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBpZWNlSW5kZXggIT0gOCkgcmV0dXJuO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbnZhciBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChpcHY2KSB7XG4gIHZhciBtYXhJbmRleCA9IG51bGw7XG4gIHZhciBtYXhMZW5ndGggPSAxO1xuICB2YXIgY3VyclN0YXJ0ID0gbnVsbDtcbiAgdmFyIGN1cnJMZW5ndGggPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICBmb3IgKDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgaWYgKGlwdjZbaW5kZXhdICE9PSAwKSB7XG4gICAgICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICAgICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGN1cnJTdGFydCA9IG51bGw7XG4gICAgICBjdXJyTGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkgY3VyclN0YXJ0ID0gaW5kZXg7XG4gICAgICArK2N1cnJMZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgfVxuICByZXR1cm4gbWF4SW5kZXg7XG59O1xuXG52YXIgc2VyaWFsaXplSG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XG4gIHZhciByZXN1bHQsIGluZGV4LCBjb21wcmVzcywgaWdub3JlMDtcbiAgLy8gaXB2NFxuICBpZiAodHlwZW9mIGhvc3QgPT0gJ251bWJlcicpIHtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICByZXN1bHQudW5zaGlmdChob3N0ICUgMjU2KTtcbiAgICAgIGhvc3QgPSBmbG9vcihob3N0IC8gMjU2KTtcbiAgICB9IHJldHVybiByZXN1bHQuam9pbignLicpO1xuICAvLyBpcHY2XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT0gJ29iamVjdCcpIHtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb21wcmVzcyA9IGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlKGhvc3QpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpZ25vcmUwICYmIGhvc3RbaW5kZXhdID09PSAwKSBjb250aW51ZTtcbiAgICAgIGlmIChpZ25vcmUwKSBpZ25vcmUwID0gZmFsc2U7XG4gICAgICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdCArPSBpbmRleCA/ICc6JyA6ICc6Oic7XG4gICAgICAgIGlnbm9yZTAgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IGhvc3RbaW5kZXhdLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaWYgKGluZGV4IDwgNykgcmVzdWx0ICs9ICc6JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdbJyArIHJlc3VsdCArICddJztcbiAgfSByZXR1cm4gaG9zdDtcbn07XG5cbnZhciBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0ID0ge307XG52YXIgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcgJzogMSwgJ1wiJzogMSwgJzwnOiAxLCAnPic6IDEsICdgJzogMVxufSk7XG52YXIgcGF0aFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCwge1xuICAnIyc6IDEsICc/JzogMSwgJ3snOiAxLCAnfSc6IDFcbn0pO1xudmFyIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgcGF0aFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJy8nOiAxLCAnOic6IDEsICc7JzogMSwgJz0nOiAxLCAnQCc6IDEsICdbJzogMSwgJ1xcXFwnOiAxLCAnXSc6IDEsICdeJzogMSwgJ3wnOiAxXG59KTtcblxudmFyIHBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbiAoY2hhciwgc2V0KSB7XG4gIHZhciBjb2RlID0gY29kZUF0KGNoYXIsIDApO1xuICByZXR1cm4gY29kZSA+IDB4MjAgJiYgY29kZSA8IDB4N0YgJiYgIWhhcyhzZXQsIGNoYXIpID8gY2hhciA6IGVuY29kZVVSSUNvbXBvbmVudChjaGFyKTtcbn07XG5cbnZhciBzcGVjaWFsU2NoZW1lcyA9IHtcbiAgZnRwOiAyMSxcbiAgZmlsZTogbnVsbCxcbiAgZ29waGVyOiA3MCxcbiAgaHR0cDogODAsXG4gIGh0dHBzOiA0NDMsXG4gIHdzOiA4MCxcbiAgd3NzOiA0NDNcbn07XG5cbnZhciBpc1NwZWNpYWwgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBoYXMoc3BlY2lhbFNjaGVtZXMsIHVybC5zY2hlbWUpO1xufTtcblxudmFyIGluY2x1ZGVzQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiB1cmwudXNlcm5hbWUgIT0gJycgfHwgdXJsLnBhc3N3b3JkICE9ICcnO1xufTtcblxudmFyIGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuICF1cmwuaG9zdCB8fCB1cmwuY2Fubm90QmVBQmFzZVVSTCB8fCB1cmwuc2NoZW1lID09ICdmaWxlJztcbn07XG5cbnZhciBpc1dpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcsIG5vcm1hbGl6ZWQpIHtcbiAgdmFyIHNlY29uZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT0gMiAmJiBBTFBIQS50ZXN0KHN0cmluZy5jaGFyQXQoMCkpXG4gICAgJiYgKChzZWNvbmQgPSBzdHJpbmcuY2hhckF0KDEpKSA9PSAnOicgfHwgKCFub3JtYWxpemVkICYmIHNlY29uZCA9PSAnfCcpKTtcbn07XG5cbnZhciBzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgdGhpcmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihzdHJpbmcuc2xpY2UoMCwgMikpICYmIChcbiAgICBzdHJpbmcubGVuZ3RoID09IDIgfHxcbiAgICAoKHRoaXJkID0gc3RyaW5nLmNoYXJBdCgyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcXFwnIHx8IHRoaXJkID09PSAnPycgfHwgdGhpcmQgPT09ICcjJylcbiAgKTtcbn07XG5cbnZhciBzaG9ydGVuVVJMc1BhdGggPSBmdW5jdGlvbiAodXJsKSB7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHZhciBwYXRoU2l6ZSA9IHBhdGgubGVuZ3RoO1xuICBpZiAocGF0aFNpemUgJiYgKHVybC5zY2hlbWUgIT0gJ2ZpbGUnIHx8IHBhdGhTaXplICE9IDEgfHwgIWlzV2luZG93c0RyaXZlTGV0dGVyKHBhdGhbMF0sIHRydWUpKSkge1xuICAgIHBhdGgucG9wKCk7XG4gIH1cbn07XG5cbnZhciBpc1NpbmdsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLicgfHwgc2VnbWVudC50b0xvd2VyQ2FzZSgpID09PSAnJTJlJztcbn07XG5cbnZhciBpc0RvdWJsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHNlZ21lbnQgPSBzZWdtZW50LnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLi4nIHx8IHNlZ21lbnQgPT09ICclMmUuJyB8fCBzZWdtZW50ID09PSAnLiUyZScgfHwgc2VnbWVudCA9PT0gJyUyZSUyZSc7XG59O1xuXG4vLyBTdGF0ZXM6XG52YXIgU0NIRU1FX1NUQVJUID0ge307XG52YXIgU0NIRU1FID0ge307XG52YXIgTk9fU0NIRU1FID0ge307XG52YXIgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBQQVRIX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFJFTEFUSVZFID0ge307XG52YXIgUkVMQVRJVkVfU0xBU0ggPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMgPSB7fTtcbnZhciBBVVRIT1JJVFkgPSB7fTtcbnZhciBIT1NUID0ge307XG52YXIgSE9TVE5BTUUgPSB7fTtcbnZhciBQT1JUID0ge307XG52YXIgRklMRSA9IHt9O1xudmFyIEZJTEVfU0xBU0ggPSB7fTtcbnZhciBGSUxFX0hPU1QgPSB7fTtcbnZhciBQQVRIX1NUQVJUID0ge307XG52YXIgUEFUSCA9IHt9O1xudmFyIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEggPSB7fTtcbnZhciBRVUVSWSA9IHt9O1xudmFyIEZSQUdNRU5UID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xudmFyIHBhcnNlVVJMID0gZnVuY3Rpb24gKHVybCwgaW5wdXQsIHN0YXRlT3ZlcnJpZGUsIGJhc2UpIHtcbiAgdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIGJ1ZmZlciA9ICcnO1xuICB2YXIgc2VlbkF0ID0gZmFsc2U7XG4gIHZhciBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICB2YXIgc2VlblBhc3N3b3JkVG9rZW4gPSBmYWxzZTtcbiAgdmFyIGNvZGVQb2ludHMsIGNoYXIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgdXJsLnBhdGggPSBbXTtcbiAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSBmYWxzZTtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJycpO1xuICB9XG5cbiAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkge1xuICAgIGNoYXIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdO1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOlxuICAgICAgICBpZiAoY2hhciAmJiBBTFBIQS50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTQ0hFTUU6XG4gICAgICAgIGlmIChjaGFyICYmIChBTFBIQU5VTUVSSUMudGVzdChjaGFyKSB8fCBjaGFyID09ICcrJyB8fCBjaGFyID09ICctJyB8fCBjaGFyID09ICcuJykpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonKSB7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgKFxuICAgICAgICAgICAgKGlzU3BlY2lhbCh1cmwpICE9IGhhcyhzcGVjaWFsU2NoZW1lcywgYnVmZmVyKSkgfHxcbiAgICAgICAgICAgIChidWZmZXIgPT0gJ2ZpbGUnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSB8fFxuICAgICAgICAgICAgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwuaG9zdClcbiAgICAgICAgICApKSByZXR1cm47XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJ1ZmZlcjtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHVybCkgJiYgYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSB1cmwuc2NoZW1lKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHVybCkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgcG9pbnRlciA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIE5PX1NDSEVNRTpcbiAgICAgICAgaWYgKCFiYXNlIHx8IChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnID8gRklMRSA6IFJFTEFUSVZFO1xuICAgICAgICBjb250aW51ZTtcblxuICAgICAgY2FzZSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nICYmIGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9PUl9BVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgIGlmIChjaGFyID09IEVPRikge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnLycgfHwgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5wYXRoLnBvcCgpO1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBSRUxBVElWRV9TTEFTSDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJy8nKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOlxuICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICBpZiAoY2hhciAhPSAnLycgfHwgYnVmZmVyLmNoYXJBdChwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmIGNoYXIgIT0gJ1xcXFwnKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnQCcpIHtcbiAgICAgICAgICBpZiAoc2VlbkF0KSBidWZmZXIgPSAnJTQwJyArIGJ1ZmZlcjtcbiAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludCwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfQVVUSE9SSVRZO1xuICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEhPU1Q7XG4gICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgSE9TVDpcbiAgICAgIGNhc2UgSE9TVE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnOicgJiYgIXNlZW5CcmFja2V0KSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTtcbiAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBQT1JUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlID09IEhPU1ROQU1FKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFyID09ICdbJykgc2VlbkJyYWNrZXQgPSB0cnVlO1xuICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJ10nKSBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBPUlQ6XG4gICAgICAgIGlmIChESUdJVC50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpIHx8XG4gICAgICAgICAgc3RhdGVPdmVycmlkZVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoYnVmZmVyICE9ICcnKSB7XG4gICAgICAgICAgICB2YXIgcG9ydCA9IHBhcnNlSW50KGJ1ZmZlciwgMTApO1xuICAgICAgICAgICAgaWYgKHBvcnQgPiAweEZGRkYpIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgICB1cmwucG9ydCA9IChpc1NwZWNpYWwodXJsKSAmJiBwb3J0ID09PSBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSkgPyBudWxsIDogcG9ydDtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEZJTEU6XG4gICAgICAgIHVybC5zY2hlbWUgPSAnZmlsZSc7XG4gICAgICAgIGlmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykgc3RhdGUgPSBGSUxFX1NMQVNIO1xuICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIGlmIChjaGFyID09IEVPRikge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpIHVybC5wYXRoLnB1c2goYmFzZS5wYXRoWzBdKTtcbiAgICAgICAgICBlbHNlIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgRklMRV9IT1NUOlxuICAgICAgICBpZiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyID09ICcnKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBpZiAodXJsLmhvc3QgPT0gJ2xvY2FsaG9zdCcpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgfSBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQQVRIX1NUQVJUOlxuICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmIGNoYXIgIT0gJ1xcXFwnKSBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICc/Jykge1xuICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaGFyICE9ICcvJykgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSDpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB8fFxuICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgc2hvcnRlblVSTHNQYXRoKHVybCk7XG4gICAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgIShjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgIShjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5ob3N0KSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBidWZmZXIgPSBidWZmZXIuY2hhckF0KDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goYnVmZmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmIChjaGFyID09IEVPRiB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJykpIHtcbiAgICAgICAgICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykge1xuICAgICAgICAgICAgICB1cmwucGF0aC5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNoYXIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOlxuICAgICAgICBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUVVFUlk6XG4gICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSBcIidcIiAmJiBpc1NwZWNpYWwodXJsKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB1cmwucXVlcnkgKz0gJyUyMyc7XG4gICAgICAgICAgZWxzZSB1cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShjaGFyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBGUkFHTUVOVDpcbiAgICAgICAgaWYgKGNoYXIgIT0gRU9GKSB1cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZShjaGFyLCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb2ludGVyKys7XG4gIH1cbn07XG5cbi8vIGBVUkxgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1jbGFzc1xudmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHtcbiAgdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG4gIHZhciBiYXNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciB1cmxTdHJpbmcgPSBTdHJpbmcodXJsKTtcbiAgdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7IHR5cGU6ICdVUkwnIH0pO1xuICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlO1xuICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGJhc2UgaW5zdGFuY2VvZiBVUkxDb25zdHJ1Y3RvcikgYmFzZVN0YXRlID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZShiYXNlKTtcbiAgICBlbHNlIHtcbiAgICAgIGZhaWx1cmUgPSBwYXJzZVVSTChiYXNlU3RhdGUgPSB7fSwgU3RyaW5nKGJhc2UpKTtcbiAgICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgfVxuICB9XG4gIGZhaWx1cmUgPSBwYXJzZVVSTChzdGF0ZSwgdXJsU3RyaW5nLCBudWxsLCBiYXNlU3RhdGUpO1xuICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gc3RhdGUuc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICB2YXIgc2VhcmNoUGFyYW1zU3RhdGUgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHNlYXJjaFBhcmFtcyk7XG4gIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVNlYXJjaFBhcmFtcyhzdGF0ZS5xdWVyeSk7XG4gIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzdGF0ZS5xdWVyeSA9IFN0cmluZyhzZWFyY2hQYXJhbXMpIHx8IG51bGw7XG4gIH07XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGF0LmhyZWYgPSBzZXJpYWxpemVVUkwuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lm9yaWdpbiA9IGdldE9yaWdpbi5jYWxsKHRoYXQpO1xuICAgIHRoYXQucHJvdG9jb2wgPSBnZXRQcm90b2NvbC5jYWxsKHRoYXQpO1xuICAgIHRoYXQudXNlcm5hbWUgPSBnZXRVc2VybmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQucGFzc3dvcmQgPSBnZXRQYXNzd29yZC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaG9zdCA9IGdldEhvc3QuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhvc3RuYW1lID0gZ2V0SG9zdG5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBvcnQgPSBnZXRQb3J0LmNhbGwodGhhdCk7XG4gICAgdGhhdC5wYXRobmFtZSA9IGdldFBhdGhuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5zZWFyY2ggPSBnZXRTZWFyY2guY2FsbCh0aGF0KTtcbiAgICB0aGF0LnNlYXJjaFBhcmFtcyA9IGdldFNlYXJjaFBhcmFtcy5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaGFzaCA9IGdldEhhc2guY2FsbCh0aGF0KTtcbiAgfVxufTtcblxudmFyIFVSTFByb3RvdHlwZSA9IFVSTENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxudmFyIHNlcmlhbGl6ZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7XG4gIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDtcbiAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgdmFyIHF1ZXJ5ID0gdXJsLnF1ZXJ5O1xuICB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7XG4gIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7XG4gIGlmIChob3N0ICE9PSBudWxsKSB7XG4gICAgb3V0cHV0ICs9ICcvLyc7XG4gICAgaWYgKGluY2x1ZGVzQ3JlZGVudGlhbHModXJsKSkge1xuICAgICAgb3V0cHV0ICs9IHVzZXJuYW1lICsgKHBhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCc7XG4gICAgfVxuICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICAgIGlmIChwb3J0ICE9PSBudWxsKSBvdXRwdXQgKz0gJzonICsgcG9ydDtcbiAgfSBlbHNlIGlmIChzY2hlbWUgPT0gJ2ZpbGUnKSBvdXRwdXQgKz0gJy8vJztcbiAgb3V0cHV0ICs9IHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgcGF0aC5qb2luKCcvJykgOiAnJztcbiAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7XG4gIGlmIChmcmFnbWVudCAhPT0gbnVsbCkgb3V0cHV0ICs9ICcjJyArIGZyYWdtZW50O1xuICByZXR1cm4gb3V0cHV0O1xufTtcblxudmFyIGdldE9yaWdpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICBpZiAoc2NoZW1lID09ICdibG9iJykgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChzY2hlbWUucGF0aFswXSkub3JpZ2luO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH1cbiAgaWYgKHNjaGVtZSA9PSAnZmlsZScgfHwgIWlzU3BlY2lhbCh1cmwpKSByZXR1cm4gJ251bGwnO1xuICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHVybC5ob3N0KSArIChwb3J0ICE9PSBudWxsID8gJzonICsgcG9ydCA6ICcnKTtcbn07XG5cbnZhciBnZXRQcm90b2NvbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2NoZW1lICsgJzonO1xufTtcblxudmFyIGdldFVzZXJuYW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS51c2VybmFtZTtcbn07XG5cbnZhciBnZXRQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykucGFzc3dvcmQ7XG59O1xuXG52YXIgZ2V0SG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIHJldHVybiBob3N0ID09PSBudWxsID8gJydcbiAgICA6IHBvcnQgPT09IG51bGwgPyBzZXJpYWxpemVIb3N0KGhvc3QpXG4gICAgOiBzZXJpYWxpemVIb3N0KGhvc3QpICsgJzonICsgcG9ydDtcbn07XG5cbnZhciBnZXRIb3N0bmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvc3QgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLmhvc3Q7XG4gIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpO1xufTtcblxudmFyIGdldFBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwb3J0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5wb3J0O1xuICByZXR1cm4gcG9ydCA9PT0gbnVsbCA/ICcnIDogU3RyaW5nKHBvcnQpO1xufTtcblxudmFyIGdldFBhdGhuYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgcmV0dXJuIHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgcGF0aC5qb2luKCcvJykgOiAnJztcbn07XG5cbnZhciBnZXRTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucXVlcnk7XG4gIHJldHVybiBxdWVyeSA/ICc/JyArIHF1ZXJ5IDogJyc7XG59O1xuXG52YXIgZ2V0U2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZWFyY2hQYXJhbXM7XG59O1xuXG52YXIgZ2V0SGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZyYWdtZW50ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5mcmFnbWVudDtcbiAgcmV0dXJuIGZyYWdtZW50ID8gJyMnICsgZnJhZ21lbnQgOiAnJztcbn07XG5cbnZhciBhY2Nlc3NvckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHsgZ2V0OiBnZXR0ZXIsIHNldDogc2V0dGVyLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUgfTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBkZWZpbmVQcm9wZXJ0aWVzKFVSTFByb3RvdHlwZSwge1xuICAgIC8vIGBVUkwucHJvdG90eXBlLmhyZWZgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgICBocmVmOiBhY2Nlc3NvckRlc2NyaXB0b3Ioc2VyaWFsaXplVVJMLCBmdW5jdGlvbiAoaHJlZikge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgdXJsU3RyaW5nID0gU3RyaW5nKGhyZWYpO1xuICAgICAgdmFyIGZhaWx1cmUgPSBwYXJzZVVSTCh1cmwsIHVybFN0cmluZyk7XG4gICAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgICAgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSh1cmwuc2VhcmNoUGFyYW1zKS51cGRhdGVTZWFyY2hQYXJhbXModXJsLnF1ZXJ5KTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5vcmlnaW5gIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgICBvcmlnaW46IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRPcmlnaW4pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnByb3RvY29sYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICAgIHByb3RvY29sOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UHJvdG9jb2wsIGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhwcm90b2NvbCkgKyAnOicsIFNDSEVNRV9TVEFSVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUudXNlcm5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gICAgdXNlcm5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRVc2VybmFtZSwgZnVuY3Rpb24gKHVzZXJuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKFN0cmluZyh1c2VybmFtZSkpO1xuICAgICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKSByZXR1cm47XG4gICAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cmwudXNlcm5hbWUgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhc3N3b3JkYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICAgIHBhc3N3b3JkOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UGFzc3dvcmQsIGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbShTdHJpbmcocGFzc3dvcmQpKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgdXJsLnBhc3N3b3JkID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXJsLnBhc3N3b3JkICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0XG4gICAgaG9zdDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhvc3QsIGZ1bmN0aW9uIChob3N0KSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcoaG9zdCksIEhPU1QpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhvc3RuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICAgIGhvc3RuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0SG9zdG5hbWUsIGZ1bmN0aW9uIChob3N0bmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKGhvc3RuYW1lKSwgSE9TVE5BTUUpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBvcnRgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgICBwb3J0OiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UG9ydCwgZnVuY3Rpb24gKHBvcnQpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKSByZXR1cm47XG4gICAgICBwb3J0ID0gU3RyaW5nKHBvcnQpO1xuICAgICAgaWYgKHBvcnQgPT0gJycpIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgIGVsc2UgcGFyc2VVUkwodXJsLCBwb3J0LCBQT1JUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXRobmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgICBwYXRobmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhdGhuYW1lLCBmdW5jdGlvbiAocGF0aG5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICB1cmwucGF0aCA9IFtdO1xuICAgICAgcGFyc2VVUkwodXJsLCBwYXRobmFtZSArICcnLCBQQVRIX1NUQVJUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaFxuICAgIHNlYXJjaDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaCwgZnVuY3Rpb24gKHNlYXJjaCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoKTtcbiAgICAgIGlmIChzZWFyY2ggPT0gJycpIHtcbiAgICAgICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgnPycgPT0gc2VhcmNoLmNoYXJBdCgwKSkgc2VhcmNoID0gc2VhcmNoLnNsaWNlKDEpO1xuICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgcGFyc2VVUkwodXJsLCBzZWFyY2gsIFFVRVJZKTtcbiAgICAgIH1cbiAgICAgIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUodXJsLnNlYXJjaFBhcmFtcykudXBkYXRlU2VhcmNoUGFyYW1zKHVybC5xdWVyeSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoUGFyYW1zYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gICAgc2VhcmNoUGFyYW1zOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0U2VhcmNoUGFyYW1zKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5oYXNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gICAgaGFzaDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhhc2gsIGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGhhc2ggPSBTdHJpbmcoaGFzaCk7XG4gICAgICBpZiAoaGFzaCA9PSAnJykge1xuICAgICAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoJyMnID09IGhhc2guY2hhckF0KDApKSBoYXNoID0gaGFzaC5zbGljZSgxKTtcbiAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgcGFyc2VVUkwodXJsLCBoYXNoLCBGUkFHTUVOVCk7XG4gICAgfSlcbiAgfSk7XG59XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiBzZXJpYWxpemVVUkwuY2FsbCh0aGlzKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNVUkwtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbmlmIChOYXRpdmVVUkwpIHtcbiAgdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5jcmVhdGVPYmplY3RVUkw7XG4gIHZhciBuYXRpdmVSZXZva2VPYmplY3RVUkwgPSBOYXRpdmVVUkwucmV2b2tlT2JqZWN0VVJMO1xuICAvLyBgVVJMLmNyZWF0ZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvY3JlYXRlT2JqZWN0VVJMXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBpZiAobmF0aXZlQ3JlYXRlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ2NyZWF0ZU9iamVjdFVSTCcsIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTChibG9iKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTC5hcHBseShOYXRpdmVVUkwsIGFyZ3VtZW50cyk7XG4gIH0pO1xuICAvLyBgVVJMLnJldm9rZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvcmV2b2tlT2JqZWN0VVJMXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBpZiAobmF0aXZlUmV2b2tlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGZ1bmN0aW9uIHJldm9rZU9iamVjdFVSTCh1cmwpIHtcbiAgICByZXR1cm4gbmF0aXZlUmV2b2tlT2JqZWN0VVJMLmFwcGx5KE5hdGl2ZVVSTCwgYXJndW1lbnRzKTtcbiAgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBVUkw6IFVSTENvbnN0cnVjdG9yXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9wdW55Y29kZS5qcy9ibG9iL21hc3Rlci9wdW55Y29kZS5qc1xudmFyIG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFwwLVxcdTAwN0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG52YXIgT1ZFUkZMT1dfRVJST1IgPSAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnO1xudmFyIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4gKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4gKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4gKiBtYXRjaGluZyBVVEYtMTYuXG4gKi9cbnZhciB1Y3MyZGVjb2RlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuICAgICAgdmFyIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBMb3cgc3Vycm9nYXRlLlxuICAgICAgICBvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQncyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGVcbiAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqL1xudmFyIGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uIChkaWdpdCkge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKi9cbnZhciBhZGFwdCA9IGZ1bmN0aW9uIChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcbiAgdmFyIGsgPSAwO1xuICBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG4gIGZvciAoOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgfVxuICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcbiAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAgbWF4LXN0YXRlbWVudHNcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuXG4gIC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aC5cbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuICB2YXIgbiA9IGluaXRpYWxOO1xuICB2YXIgZGVsdGEgPSAwO1xuICB2YXIgYmlhcyA9IGluaXRpYWxCaWFzO1xuICB2YXIgaSwgY3VycmVudFZhbHVlO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG4gICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgb3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICB9XG5cbiAgICBkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuICAgIG4gPSBtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHtcbiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG4gICAgICAgIHZhciBxID0gZGVsdGE7XG4gICAgICAgIGZvciAodmFyIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgICsraGFuZGxlZENQQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKytkZWx0YTtcbiAgICArK247XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLnNwbGl0KCcuJyk7XG4gIHZhciBpLCBsYWJlbDtcbiAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxhYmVsID0gbGFiZWxzW2ldO1xuICAgIGVuY29kZWQucHVzaChyZWdleE5vbkFTQ0lJLnRlc3QobGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gZW5jb2RlZC5qb2luKCcuJyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gIH0gcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbiQoeyB0YXJnZXQ6ICdVUkwnLCBwcm90bzogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9LCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiBVUkwucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvL1s0XSAgIFx0TmFtZVN0YXJ0Q2hhclx0ICAgOjo9ICAgXHRcIjpcIiB8IFtBLVpdIHwgXCJfXCIgfCBbYS16XSB8IFsjeEMwLSN4RDZdIHwgWyN4RDgtI3hGNl0gfCBbI3hGOC0jeDJGRl0gfCBbI3gzNzAtI3gzN0RdIHwgWyN4MzdGLSN4MUZGRl0gfCBbI3gyMDBDLSN4MjAwRF0gfCBbI3gyMDcwLSN4MjE4Rl0gfCBbI3gyQzAwLSN4MkZFRl0gfCBbI3gzMDAxLSN4RDdGRl0gfCBbI3hGOTAwLSN4RkRDRl0gfCBbI3hGREYwLSN4RkZGRF0gfCBbI3gxMDAwMC0jeEVGRkZGXVxyXG4vL1s0YV0gICBcdE5hbWVDaGFyXHQgICA6Oj0gICBcdE5hbWVTdGFydENoYXIgfCBcIi1cIiB8IFwiLlwiIHwgWzAtOV0gfCAjeEI3IHwgWyN4MDMwMC0jeDAzNkZdIHwgWyN4MjAzRi0jeDIwNDBdXHJcbi8vWzVdICAgXHROYW1lXHQgICA6Oj0gICBcdE5hbWVTdGFydENoYXIgKE5hbWVDaGFyKSpcclxudmFyIG5hbWVTdGFydENoYXIgPSAvW0EtWl9hLXpcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS8vL1xcdTEwMDAwLVxcdUVGRkZGXHJcbnZhciBuYW1lQ2hhciA9IG5ldyBSZWdFeHAoXCJbXFxcXC1cXFxcLjAtOVwiK25hbWVTdGFydENoYXIuc291cmNlLnNsaWNlKDEsLTEpK1wiXFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDBdXCIpO1xyXG52YXIgdGFnTmFtZVBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeJytuYW1lU3RhcnRDaGFyLnNvdXJjZStuYW1lQ2hhci5zb3VyY2UrJyooPzpcXDonK25hbWVTdGFydENoYXIuc291cmNlK25hbWVDaGFyLnNvdXJjZSsnKik/JCcpO1xyXG4vL3ZhciB0YWdOYW1lUGF0dGVybiA9IC9eW2EtekEtWl9dW1xcd1xcLVxcLl0qKD86XFw6W2EtekEtWl9dW1xcd1xcLVxcLl0qKT8kL1xyXG4vL3ZhciBoYW5kbGVycyA9ICdyZXNvbHZlRW50aXR5LGdldEV4dGVybmFsU3Vic2V0LGNoYXJhY3RlcnMsZW5kRG9jdW1lbnQsZW5kRWxlbWVudCxlbmRQcmVmaXhNYXBwaW5nLGlnbm9yYWJsZVdoaXRlc3BhY2UscHJvY2Vzc2luZ0luc3RydWN0aW9uLHNldERvY3VtZW50TG9jYXRvcixza2lwcGVkRW50aXR5LHN0YXJ0RG9jdW1lbnQsc3RhcnRFbGVtZW50LHN0YXJ0UHJlZml4TWFwcGluZyxub3RhdGlvbkRlY2wsdW5wYXJzZWRFbnRpdHlEZWNsLGVycm9yLGZhdGFsRXJyb3Isd2FybmluZyxhdHRyaWJ1dGVEZWNsLGVsZW1lbnREZWNsLGV4dGVybmFsRW50aXR5RGVjbCxpbnRlcm5hbEVudGl0eURlY2wsY29tbWVudCxlbmRDREFUQSxlbmREVEQsZW5kRW50aXR5LHN0YXJ0Q0RBVEEsc3RhcnREVEQsc3RhcnRFbnRpdHknLnNwbGl0KCcsJylcclxuXHJcbi8vU19UQUcsXHRTX0FUVFIsXHRTX0VRLFx0U19BVFRSX05PUVVPVF9WQUxVRVxyXG4vL1NfQVRUUl9TUEFDRSxcdFNfQVRUUl9FTkQsXHRTX1RBR19TUEFDRSwgU19UQUdfQ0xPU0VcclxudmFyIFNfVEFHID0gMDsvL3RhZyBuYW1lIG9mZmVycmluZ1xyXG52YXIgU19BVFRSID0gMTsvL2F0dHIgbmFtZSBvZmZlcnJpbmcgXHJcbnZhciBTX0FUVFJfU1BBQ0U9MjsvL2F0dHIgbmFtZSBlbmQgYW5kIHNwYWNlIG9mZmVyXHJcbnZhciBTX0VRID0gMzsvLz1zcGFjZT9cclxudmFyIFNfQVRUUl9OT1FVT1RfVkFMVUUgPSA0Oy8vYXR0ciB2YWx1ZShubyBxdW90IHZhbHVlIG9ubHkpXHJcbnZhciBTX0FUVFJfRU5EID0gNTsvL2F0dHIgdmFsdWUgZW5kIGFuZCBubyBzcGFjZShxdW90IGVuZClcclxudmFyIFNfVEFHX1NQQUNFID0gNjsvLyhhdHRyIHZhbHVlIGVuZCB8fCB0YWcgZW5kICkgJiYgKHNwYWNlIG9mZmVyKVxyXG52YXIgU19UQUdfQ0xPU0UgPSA3Oy8vY2xvc2VkIGVsPGVsIC8+XHJcblxyXG5mdW5jdGlvbiBYTUxSZWFkZXIoKXtcclxuXHRcclxufVxyXG5cclxuWE1MUmVhZGVyLnByb3RvdHlwZSA9IHtcclxuXHRwYXJzZTpmdW5jdGlvbihzb3VyY2UsZGVmYXVsdE5TTWFwLGVudGl0eU1hcCl7XHJcblx0XHR2YXIgZG9tQnVpbGRlciA9IHRoaXMuZG9tQnVpbGRlcjtcclxuXHRcdGRvbUJ1aWxkZXIuc3RhcnREb2N1bWVudCgpO1xyXG5cdFx0X2NvcHkoZGVmYXVsdE5TTWFwICxkZWZhdWx0TlNNYXAgPSB7fSlcclxuXHRcdHBhcnNlKHNvdXJjZSxkZWZhdWx0TlNNYXAsZW50aXR5TWFwLFxyXG5cdFx0XHRcdGRvbUJ1aWxkZXIsdGhpcy5lcnJvckhhbmRsZXIpO1xyXG5cdFx0ZG9tQnVpbGRlci5lbmREb2N1bWVudCgpO1xyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBwYXJzZShzb3VyY2UsZGVmYXVsdE5TTWFwQ29weSxlbnRpdHlNYXAsZG9tQnVpbGRlcixlcnJvckhhbmRsZXIpe1xyXG5cdGZ1bmN0aW9uIGZpeGVkRnJvbUNoYXJDb2RlKGNvZGUpIHtcclxuXHRcdC8vIFN0cmluZy5wcm90b3R5cGUuZnJvbUNoYXJDb2RlIGRvZXMgbm90IHN1cHBvcnRzXHJcblx0XHQvLyA+IDIgYnl0ZXMgdW5pY29kZSBjaGFycyBkaXJlY3RseVxyXG5cdFx0aWYgKGNvZGUgPiAweGZmZmYpIHtcclxuXHRcdFx0Y29kZSAtPSAweDEwMDAwO1xyXG5cdFx0XHR2YXIgc3Vycm9nYXRlMSA9IDB4ZDgwMCArIChjb2RlID4+IDEwKVxyXG5cdFx0XHRcdCwgc3Vycm9nYXRlMiA9IDB4ZGMwMCArIChjb2RlICYgMHgzZmYpO1xyXG5cclxuXHRcdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoc3Vycm9nYXRlMSwgc3Vycm9nYXRlMik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZnVuY3Rpb24gZW50aXR5UmVwbGFjZXIoYSl7XHJcblx0XHR2YXIgayA9IGEuc2xpY2UoMSwtMSk7XHJcblx0XHRpZihrIGluIGVudGl0eU1hcCl7XHJcblx0XHRcdHJldHVybiBlbnRpdHlNYXBba107IFxyXG5cdFx0fWVsc2UgaWYoay5jaGFyQXQoMCkgPT09ICcjJyl7XHJcblx0XHRcdHJldHVybiBmaXhlZEZyb21DaGFyQ29kZShwYXJzZUludChrLnN1YnN0cigxKS5yZXBsYWNlKCd4JywnMHgnKSkpXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKCdlbnRpdHkgbm90IGZvdW5kOicrYSk7XHJcblx0XHRcdHJldHVybiBhO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRmdW5jdGlvbiBhcHBlbmRUZXh0KGVuZCl7Ly9oYXMgc29tZSBidWdzXHJcblx0XHRpZihlbmQ+c3RhcnQpe1xyXG5cdFx0XHR2YXIgeHQgPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0LGVuZCkucmVwbGFjZSgvJiM/XFx3KzsvZyxlbnRpdHlSZXBsYWNlcik7XHJcblx0XHRcdGxvY2F0b3ImJnBvc2l0aW9uKHN0YXJ0KTtcclxuXHRcdFx0ZG9tQnVpbGRlci5jaGFyYWN0ZXJzKHh0LDAsZW5kLXN0YXJ0KTtcclxuXHRcdFx0c3RhcnQgPSBlbmRcclxuXHRcdH1cclxuXHR9XHJcblx0ZnVuY3Rpb24gcG9zaXRpb24ocCxtKXtcclxuXHRcdHdoaWxlKHA+PWxpbmVFbmQgJiYgKG0gPSBsaW5lUGF0dGVybi5leGVjKHNvdXJjZSkpKXtcclxuXHRcdFx0bGluZVN0YXJ0ID0gbS5pbmRleDtcclxuXHRcdFx0bGluZUVuZCA9IGxpbmVTdGFydCArIG1bMF0ubGVuZ3RoO1xyXG5cdFx0XHRsb2NhdG9yLmxpbmVOdW1iZXIrKztcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnbGluZSsrOicsbG9jYXRvcixzdGFydFBvcyxlbmRQb3MpXHJcblx0XHR9XHJcblx0XHRsb2NhdG9yLmNvbHVtbk51bWJlciA9IHAtbGluZVN0YXJ0KzE7XHJcblx0fVxyXG5cdHZhciBsaW5lU3RhcnQgPSAwO1xyXG5cdHZhciBsaW5lRW5kID0gMDtcclxuXHR2YXIgbGluZVBhdHRlcm4gPSAvLiooPzpcXHJcXG4/fFxcbil8LiokL2dcclxuXHR2YXIgbG9jYXRvciA9IGRvbUJ1aWxkZXIubG9jYXRvcjtcclxuXHRcclxuXHR2YXIgcGFyc2VTdGFjayA9IFt7Y3VycmVudE5TTWFwOmRlZmF1bHROU01hcENvcHl9XVxyXG5cdHZhciBjbG9zZU1hcCA9IHt9O1xyXG5cdHZhciBzdGFydCA9IDA7XHJcblx0d2hpbGUodHJ1ZSl7XHJcblx0XHR0cnl7XHJcblx0XHRcdHZhciB0YWdTdGFydCA9IHNvdXJjZS5pbmRleE9mKCc8JyxzdGFydCk7XHJcblx0XHRcdGlmKHRhZ1N0YXJ0PDApe1xyXG5cdFx0XHRcdGlmKCFzb3VyY2Uuc3Vic3RyKHN0YXJ0KS5tYXRjaCgvXlxccyokLykpe1xyXG5cdFx0XHRcdFx0dmFyIGRvYyA9IGRvbUJ1aWxkZXIuZG9jO1xyXG5cdCAgICBcdFx0XHR2YXIgdGV4dCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShzb3VyY2Uuc3Vic3RyKHN0YXJ0KSk7XHJcblx0ICAgIFx0XHRcdGRvYy5hcHBlbmRDaGlsZCh0ZXh0KTtcclxuXHQgICAgXHRcdFx0ZG9tQnVpbGRlci5jdXJyZW50RWxlbWVudCA9IHRleHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0YWdTdGFydD5zdGFydCl7XHJcblx0XHRcdFx0YXBwZW5kVGV4dCh0YWdTdGFydCk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3dpdGNoKHNvdXJjZS5jaGFyQXQodGFnU3RhcnQrMSkpe1xyXG5cdFx0XHRjYXNlICcvJzpcclxuXHRcdFx0XHR2YXIgZW5kID0gc291cmNlLmluZGV4T2YoJz4nLHRhZ1N0YXJ0KzMpO1xyXG5cdFx0XHRcdHZhciB0YWdOYW1lID0gc291cmNlLnN1YnN0cmluZyh0YWdTdGFydCsyLGVuZCk7XHJcblx0XHRcdFx0dmFyIGNvbmZpZyA9IHBhcnNlU3RhY2sucG9wKCk7XHJcblx0XHRcdFx0aWYoZW5kPDApe1xyXG5cdFx0XHRcdFx0XHJcblx0ICAgICAgICBcdFx0dGFnTmFtZSA9IHNvdXJjZS5zdWJzdHJpbmcodGFnU3RhcnQrMikucmVwbGFjZSgvW1xcczxdLiovLCcnKTtcclxuXHQgICAgICAgIFx0XHQvL2NvbnNvbGUuZXJyb3IoJyNAQEBAQEAnK3RhZ05hbWUpXHJcblx0ICAgICAgICBcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKFwiZW5kIHRhZyBuYW1lOiBcIit0YWdOYW1lKycgaXMgbm90IGNvbXBsZXRlOicrY29uZmlnLnRhZ05hbWUpO1xyXG5cdCAgICAgICAgXHRcdGVuZCA9IHRhZ1N0YXJ0KzErdGFnTmFtZS5sZW5ndGg7XHJcblx0ICAgICAgICBcdH1lbHNlIGlmKHRhZ05hbWUubWF0Y2goL1xcczwvKSl7XHJcblx0ICAgICAgICBcdFx0dGFnTmFtZSA9IHRhZ05hbWUucmVwbGFjZSgvW1xcczxdLiovLCcnKTtcclxuXHQgICAgICAgIFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoXCJlbmQgdGFnIG5hbWU6IFwiK3RhZ05hbWUrJyBtYXliZSBub3QgY29tcGxldGUnKTtcclxuXHQgICAgICAgIFx0XHRlbmQgPSB0YWdTdGFydCsxK3RhZ05hbWUubGVuZ3RoO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvL2NvbnNvbGUuZXJyb3IocGFyc2VTdGFjay5sZW5ndGgscGFyc2VTdGFjaylcclxuXHRcdFx0XHQvL2NvbnNvbGUuZXJyb3IoY29uZmlnKTtcclxuXHRcdFx0XHR2YXIgbG9jYWxOU01hcCA9IGNvbmZpZy5sb2NhbE5TTWFwO1xyXG5cdFx0XHRcdHZhciBlbmRNYXRjaCA9IGNvbmZpZy50YWdOYW1lID09IHRhZ05hbWU7XHJcblx0XHRcdFx0dmFyIGVuZElnbm9yZUNhc2VNYWNoID0gZW5kTWF0Y2ggfHwgY29uZmlnLnRhZ05hbWUmJmNvbmZpZy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpXHJcblx0XHQgICAgICAgIGlmKGVuZElnbm9yZUNhc2VNYWNoKXtcclxuXHRcdCAgICAgICAgXHRkb21CdWlsZGVyLmVuZEVsZW1lbnQoY29uZmlnLnVyaSxjb25maWcubG9jYWxOYW1lLHRhZ05hbWUpO1xyXG5cdFx0XHRcdFx0aWYobG9jYWxOU01hcCl7XHJcblx0XHRcdFx0XHRcdGZvcih2YXIgcHJlZml4IGluIGxvY2FsTlNNYXApe1xyXG5cdFx0XHRcdFx0XHRcdGRvbUJ1aWxkZXIuZW5kUHJlZml4TWFwcGluZyhwcmVmaXgpIDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYoIWVuZE1hdGNoKXtcclxuXHRcdCAgICAgICAgICAgIFx0ZXJyb3JIYW5kbGVyLmZhdGFsRXJyb3IoXCJlbmQgdGFnIG5hbWU6IFwiK3RhZ05hbWUrJyBpcyBub3QgbWF0Y2ggdGhlIGN1cnJlbnQgc3RhcnQgdGFnTmFtZTonK2NvbmZpZy50YWdOYW1lICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHQgICAgICAgIH1lbHNle1xyXG5cdFx0ICAgICAgICBcdHBhcnNlU3RhY2sucHVzaChjb25maWcpXHJcblx0XHQgICAgICAgIH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRlbmQrKztcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHQvLyBlbmQgZWxtZW50XHJcblx0XHRcdGNhc2UgJz8nOi8vIDw/Li4uPz5cclxuXHRcdFx0XHRsb2NhdG9yJiZwb3NpdGlvbih0YWdTdGFydCk7XHJcblx0XHRcdFx0ZW5kID0gcGFyc2VJbnN0cnVjdGlvbihzb3VyY2UsdGFnU3RhcnQsZG9tQnVpbGRlcik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJyEnOi8vIDwhZG9jdHlwZSw8IVtDREFUQSw8IS0tXHJcblx0XHRcdFx0bG9jYXRvciYmcG9zaXRpb24odGFnU3RhcnQpO1xyXG5cdFx0XHRcdGVuZCA9IHBhcnNlRENDKHNvdXJjZSx0YWdTdGFydCxkb21CdWlsZGVyLGVycm9ySGFuZGxlcik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0bG9jYXRvciYmcG9zaXRpb24odGFnU3RhcnQpO1xyXG5cdFx0XHRcdHZhciBlbCA9IG5ldyBFbGVtZW50QXR0cmlidXRlcygpO1xyXG5cdFx0XHRcdHZhciBjdXJyZW50TlNNYXAgPSBwYXJzZVN0YWNrW3BhcnNlU3RhY2subGVuZ3RoLTFdLmN1cnJlbnROU01hcDtcclxuXHRcdFx0XHQvL2VsU3RhcnRFbmRcclxuXHRcdFx0XHR2YXIgZW5kID0gcGFyc2VFbGVtZW50U3RhcnRQYXJ0KHNvdXJjZSx0YWdTdGFydCxlbCxjdXJyZW50TlNNYXAsZW50aXR5UmVwbGFjZXIsZXJyb3JIYW5kbGVyKTtcclxuXHRcdFx0XHR2YXIgbGVuID0gZWwubGVuZ3RoO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKCFlbC5jbG9zZWQgJiYgZml4U2VsZkNsb3NlZChzb3VyY2UsZW5kLGVsLnRhZ05hbWUsY2xvc2VNYXApKXtcclxuXHRcdFx0XHRcdGVsLmNsb3NlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRpZighZW50aXR5TWFwLm5ic3Ape1xyXG5cdFx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygndW5jbG9zZWQgeG1sIGF0dHJpYnV0ZScpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihsb2NhdG9yICYmIGxlbil7XHJcblx0XHRcdFx0XHR2YXIgbG9jYXRvcjIgPSBjb3B5TG9jYXRvcihsb2NhdG9yLHt9KTtcclxuXHRcdFx0XHRcdC8vdHJ5ey8vYXR0cmlidXRlIHBvc2l0aW9uIGZpeGVkXHJcblx0XHRcdFx0XHRmb3IodmFyIGkgPSAwO2k8bGVuO2krKyl7XHJcblx0XHRcdFx0XHRcdHZhciBhID0gZWxbaV07XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uKGEub2Zmc2V0KTtcclxuXHRcdFx0XHRcdFx0YS5sb2NhdG9yID0gY29weUxvY2F0b3IobG9jYXRvcix7fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvL31jYXRjaChlKXtjb25zb2xlLmVycm9yKCdAQEBAQCcrZSl9XHJcblx0XHRcdFx0XHRkb21CdWlsZGVyLmxvY2F0b3IgPSBsb2NhdG9yMlxyXG5cdFx0XHRcdFx0aWYoYXBwZW5kRWxlbWVudChlbCxkb21CdWlsZGVyLGN1cnJlbnROU01hcCkpe1xyXG5cdFx0XHRcdFx0XHRwYXJzZVN0YWNrLnB1c2goZWwpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkb21CdWlsZGVyLmxvY2F0b3IgPSBsb2NhdG9yO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYoYXBwZW5kRWxlbWVudChlbCxkb21CdWlsZGVyLGN1cnJlbnROU01hcCkpe1xyXG5cdFx0XHRcdFx0XHRwYXJzZVN0YWNrLnB1c2goZWwpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKGVsLnVyaSA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnICYmICFlbC5jbG9zZWQpe1xyXG5cdFx0XHRcdFx0ZW5kID0gcGFyc2VIdG1sU3BlY2lhbENvbnRlbnQoc291cmNlLGVuZCxlbC50YWdOYW1lLGVudGl0eVJlcGxhY2VyLGRvbUJ1aWxkZXIpXHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRlbmQrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1jYXRjaChlKXtcclxuXHRcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKCdlbGVtZW50IHBhcnNlIGVycm9yOiAnK2UpXHJcblx0XHRcdC8vZXJyb3JIYW5kbGVyLmVycm9yKCdlbGVtZW50IHBhcnNlIGVycm9yOiAnK2UpO1xyXG5cdFx0XHRlbmQgPSAtMTtcclxuXHRcdFx0Ly90aHJvdyBlO1xyXG5cdFx0fVxyXG5cdFx0aWYoZW5kPnN0YXJ0KXtcclxuXHRcdFx0c3RhcnQgPSBlbmQ7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Ly9UT0RPOiDov5nph4zmnInlj6/og71zYXjlm57pgIDvvIzmnInkvY3nva7plJnor6/po47pmalcclxuXHRcdFx0YXBwZW5kVGV4dChNYXRoLm1heCh0YWdTdGFydCxzdGFydCkrMSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbmZ1bmN0aW9uIGNvcHlMb2NhdG9yKGYsdCl7XHJcblx0dC5saW5lTnVtYmVyID0gZi5saW5lTnVtYmVyO1xyXG5cdHQuY29sdW1uTnVtYmVyID0gZi5jb2x1bW5OdW1iZXI7XHJcblx0cmV0dXJuIHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAc2VlICNhcHBlbmRFbGVtZW50KHNvdXJjZSxlbFN0YXJ0RW5kLGVsLHNlbGZDbG9zZWQsZW50aXR5UmVwbGFjZXIsZG9tQnVpbGRlcixwYXJzZVN0YWNrKTtcclxuICogQHJldHVybiBlbmQgb2YgdGhlIGVsZW1lbnRTdGFydFBhcnQoZW5kIG9mIGVsZW1lbnRFbmRQYXJ0IGZvciBzZWxmQ2xvc2VkIGVsKVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VFbGVtZW50U3RhcnRQYXJ0KHNvdXJjZSxzdGFydCxlbCxjdXJyZW50TlNNYXAsZW50aXR5UmVwbGFjZXIsZXJyb3JIYW5kbGVyKXtcclxuXHR2YXIgYXR0ck5hbWU7XHJcblx0dmFyIHZhbHVlO1xyXG5cdHZhciBwID0gKytzdGFydDtcclxuXHR2YXIgcyA9IFNfVEFHOy8vc3RhdHVzXHJcblx0d2hpbGUodHJ1ZSl7XHJcblx0XHR2YXIgYyA9IHNvdXJjZS5jaGFyQXQocCk7XHJcblx0XHRzd2l0Y2goYyl7XHJcblx0XHRjYXNlICc9JzpcclxuXHRcdFx0aWYocyA9PT0gU19BVFRSKXsvL2F0dHJOYW1lXHJcblx0XHRcdFx0YXR0ck5hbWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscCk7XHJcblx0XHRcdFx0cyA9IFNfRVE7XHJcblx0XHRcdH1lbHNlIGlmKHMgPT09IFNfQVRUUl9TUEFDRSl7XHJcblx0XHRcdFx0cyA9IFNfRVE7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdC8vZmF0YWxFcnJvcjogZXF1YWwgbXVzdCBhZnRlciBhdHRyTmFtZSBvciBzcGFjZSBhZnRlciBhdHRyTmFtZVxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignYXR0cmlidXRlIGVxdWFsIG11c3QgYWZ0ZXIgYXR0ck5hbWUnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ1xcJyc6XHJcblx0XHRjYXNlICdcIic6XHJcblx0XHRcdGlmKHMgPT09IFNfRVEgfHwgcyA9PT0gU19BVFRSIC8vfHwgcyA9PSBTX0FUVFJfU1BBQ0VcclxuXHRcdFx0XHQpey8vZXF1YWxcclxuXHRcdFx0XHRpZihzID09PSBTX0FUVFIpe1xyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSB2YWx1ZSBtdXN0IGFmdGVyIFwiPVwiJylcclxuXHRcdFx0XHRcdGF0dHJOYW1lID0gc291cmNlLnNsaWNlKHN0YXJ0LHApXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0YXJ0ID0gcCsxO1xyXG5cdFx0XHRcdHAgPSBzb3VyY2UuaW5kZXhPZihjLHN0YXJ0KVxyXG5cdFx0XHRcdGlmKHA+MCl7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IHNvdXJjZS5zbGljZShzdGFydCxwKS5yZXBsYWNlKC8mIz9cXHcrOy9nLGVudGl0eVJlcGxhY2VyKTtcclxuXHRcdFx0XHRcdGVsLmFkZChhdHRyTmFtZSx2YWx1ZSxzdGFydC0xKTtcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFJfRU5EO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0Ly9mYXRhbEVycm9yOiBubyBlbmQgcXVvdCBtYXRjaFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdhdHRyaWJ1dGUgdmFsdWUgbm8gZW5kIFxcJycrYysnXFwnIG1hdGNoJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ZWxzZSBpZihzID09IFNfQVRUUl9OT1FVT1RfVkFMVUUpe1xyXG5cdFx0XHRcdHZhbHVlID0gc291cmNlLnNsaWNlKHN0YXJ0LHApLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coYXR0ck5hbWUsdmFsdWUsc3RhcnQscClcclxuXHRcdFx0XHRlbC5hZGQoYXR0ck5hbWUsdmFsdWUsc3RhcnQpO1xyXG5cdFx0XHRcdC8vY29uc29sZS5kaXIoZWwpXHJcblx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBcIicrYXR0ck5hbWUrJ1wiIG1pc3NlZCBzdGFydCBxdW90KCcrYysnKSEhJyk7XHJcblx0XHRcdFx0c3RhcnQgPSBwKzE7XHJcblx0XHRcdFx0cyA9IFNfQVRUUl9FTkRcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Ly9mYXRhbEVycm9yOiBubyBlcXVhbCBiZWZvcmVcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2F0dHJpYnV0ZSB2YWx1ZSBtdXN0IGFmdGVyIFwiPVwiJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICcvJzpcclxuXHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRjYXNlIFNfVEFHOlxyXG5cdFx0XHRcdGVsLnNldFRhZ05hbWUoc291cmNlLnNsaWNlKHN0YXJ0LHApKTtcclxuXHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRjYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRjYXNlIFNfVEFHX0NMT1NFOlxyXG5cdFx0XHRcdHMgPVNfVEFHX0NMT1NFO1xyXG5cdFx0XHRcdGVsLmNsb3NlZCA9IHRydWU7XHJcblx0XHRcdGNhc2UgU19BVFRSX05PUVVPVF9WQUxVRTpcclxuXHRcdFx0Y2FzZSBTX0FUVFI6XHJcblx0XHRcdGNhc2UgU19BVFRSX1NQQUNFOlxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHQvL2Nhc2UgU19FUTpcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhdHRyaWJ1dGUgaW52YWxpZCBjbG9zZSBjaGFyKCcvJylcIilcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJyc6Ly9lbmQgZG9jdW1lbnRcclxuXHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0JylcclxuXHRcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKCd1bmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xyXG5cdFx0XHRpZihzID09IFNfVEFHKXtcclxuXHRcdFx0XHRlbC5zZXRUYWdOYW1lKHNvdXJjZS5zbGljZShzdGFydCxwKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHA7XHJcblx0XHRjYXNlICc+JzpcclxuXHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRjYXNlIFNfVEFHOlxyXG5cdFx0XHRcdGVsLnNldFRhZ05hbWUoc291cmNlLnNsaWNlKHN0YXJ0LHApKTtcclxuXHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRjYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRjYXNlIFNfVEFHX0NMT1NFOlxyXG5cdFx0XHRcdGJyZWFrOy8vbm9ybWFsXHJcblx0XHRcdGNhc2UgU19BVFRSX05PUVVPVF9WQUxVRTovL0NvbXBhdGlibGUgc3RhdGVcclxuXHRcdFx0Y2FzZSBTX0FUVFI6XHJcblx0XHRcdFx0dmFsdWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscCk7XHJcblx0XHRcdFx0aWYodmFsdWUuc2xpY2UoLTEpID09PSAnLycpe1xyXG5cdFx0XHRcdFx0ZWwuY2xvc2VkICA9IHRydWU7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsLTEpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRjYXNlIFNfQVRUUl9TUEFDRTpcclxuXHRcdFx0XHRpZihzID09PSBTX0FUVFJfU1BBQ0Upe1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBhdHRyTmFtZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYocyA9PSBTX0FUVFJfTk9RVU9UX1ZBTFVFKXtcclxuXHRcdFx0XHRcdGVycm9ySGFuZGxlci53YXJuaW5nKCdhdHRyaWJ1dGUgXCInK3ZhbHVlKydcIiBtaXNzZWQgcXVvdChcIikhIScpO1xyXG5cdFx0XHRcdFx0ZWwuYWRkKGF0dHJOYW1lLHZhbHVlLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpLHN0YXJ0KVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYoY3VycmVudE5TTWFwWycnXSAhPT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnIHx8ICF2YWx1ZS5tYXRjaCgvXig/OmRpc2FibGVkfGNoZWNrZWR8c2VsZWN0ZWQpJC9pKSl7XHJcblx0XHRcdFx0XHRcdGVycm9ySGFuZGxlci53YXJuaW5nKCdhdHRyaWJ1dGUgXCInK3ZhbHVlKydcIiBtaXNzZWQgdmFsdWUhISBcIicrdmFsdWUrJ1wiIGluc3RlYWQhIScpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbC5hZGQodmFsdWUsdmFsdWUsc3RhcnQpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFNfRVE6XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdhdHRyaWJ1dGUgdmFsdWUgbWlzc2VkISEnKTtcclxuXHRcdFx0fVxyXG4vL1x0XHRcdGNvbnNvbGUubG9nKHRhZ05hbWUsdGFnTmFtZVBhdHRlcm4sdGFnTmFtZVBhdHRlcm4udGVzdCh0YWdOYW1lKSlcclxuXHRcdFx0cmV0dXJuIHA7XHJcblx0XHQvKnhtbCBzcGFjZSAnXFx4MjAnIHwgI3g5IHwgI3hEIHwgI3hBOyAqL1xyXG5cdFx0Y2FzZSAnXFx1MDA4MCc6XHJcblx0XHRcdGMgPSAnICc7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRpZihjPD0gJyAnKXsvL3NwYWNlXHJcblx0XHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRcdGNhc2UgU19UQUc6XHJcblx0XHRcdFx0XHRlbC5zZXRUYWdOYW1lKHNvdXJjZS5zbGljZShzdGFydCxwKSk7Ly90YWdOYW1lXHJcblx0XHRcdFx0XHRzID0gU19UQUdfU1BBQ0U7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFNfQVRUUjpcclxuXHRcdFx0XHRcdGF0dHJOYW1lID0gc291cmNlLnNsaWNlKHN0YXJ0LHApXHJcblx0XHRcdFx0XHRzID0gU19BVFRSX1NQQUNFO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfTk9RVU9UX1ZBTFVFOlxyXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gc291cmNlLnNsaWNlKHN0YXJ0LHApLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBcIicrdmFsdWUrJ1wiIG1pc3NlZCBxdW90KFwiKSEhJyk7XHJcblx0XHRcdFx0XHRlbC5hZGQoYXR0ck5hbWUsdmFsdWUsc3RhcnQpXHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRcdFx0cyA9IFNfVEFHX1NQQUNFO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Ly9jYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRcdC8vY2FzZSBTX0VROlxyXG5cdFx0XHRcdC8vY2FzZSBTX0FUVFJfU1BBQ0U6XHJcblx0XHRcdFx0Ly9cdHZvaWQoKTticmVhaztcclxuXHRcdFx0XHQvL2Nhc2UgU19UQUdfQ0xPU0U6XHJcblx0XHRcdFx0XHQvL2lnbm9yZSB3YXJuaW5nXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ZWxzZXsvL25vdCBzcGFjZVxyXG4vL1NfVEFHLFx0U19BVFRSLFx0U19FUSxcdFNfQVRUUl9OT1FVT1RfVkFMVUVcclxuLy9TX0FUVFJfU1BBQ0UsXHRTX0FUVFJfRU5ELFx0U19UQUdfU1BBQ0UsIFNfVEFHX0NMT1NFXHJcblx0XHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRcdC8vY2FzZSBTX1RBRzp2b2lkKCk7YnJlYWs7XHJcblx0XHRcdFx0Ly9jYXNlIFNfQVRUUjp2b2lkKCk7YnJlYWs7XHJcblx0XHRcdFx0Ly9jYXNlIFNfQVRUUl9OT1FVT1RfVkFMVUU6dm9pZCgpO2JyZWFrO1xyXG5cdFx0XHRcdGNhc2UgU19BVFRSX1NQQUNFOlxyXG5cdFx0XHRcdFx0dmFyIHRhZ05hbWUgPSAgZWwudGFnTmFtZTtcclxuXHRcdFx0XHRcdGlmKGN1cnJlbnROU01hcFsnJ10gIT09ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyB8fCAhYXR0ck5hbWUubWF0Y2goL14oPzpkaXNhYmxlZHxjaGVja2VkfHNlbGVjdGVkKSQvaSkpe1xyXG5cdFx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygnYXR0cmlidXRlIFwiJythdHRyTmFtZSsnXCIgbWlzc2VkIHZhbHVlISEgXCInK2F0dHJOYW1lKydcIiBpbnN0ZWFkMiEhJylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsLmFkZChhdHRyTmFtZSxhdHRyTmFtZSxzdGFydCk7XHJcblx0XHRcdFx0XHRzdGFydCA9IHA7XHJcblx0XHRcdFx0XHRzID0gU19BVFRSO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBzcGFjZSBpcyByZXF1aXJlZFwiJythdHRyTmFtZSsnXCIhIScpXHJcblx0XHRcdFx0Y2FzZSBTX1RBR19TUEFDRTpcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFI7XHJcblx0XHRcdFx0XHRzdGFydCA9IHA7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFNfRVE6XHJcblx0XHRcdFx0XHRzID0gU19BVFRSX05PUVVPVF9WQUxVRTtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gcDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgU19UQUdfQ0xPU0U6XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJlbGVtZW50cyBjbG9zZWQgY2hhcmFjdGVyICcvJyBhbmQgJz4nIG11c3QgYmUgY29ubmVjdGVkIHRvXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fS8vZW5kIG91dGVyIHN3aXRjaFxyXG5cdFx0Ly9jb25zb2xlLmxvZygncCsrJyxwKVxyXG5cdFx0cCsrO1xyXG5cdH1cclxufVxyXG4vKipcclxuICogQHJldHVybiB0cnVlIGlmIGhhcyBuZXcgbmFtZXNwYWNlIGRlZmluZVxyXG4gKi9cclxuZnVuY3Rpb24gYXBwZW5kRWxlbWVudChlbCxkb21CdWlsZGVyLGN1cnJlbnROU01hcCl7XHJcblx0dmFyIHRhZ05hbWUgPSBlbC50YWdOYW1lO1xyXG5cdHZhciBsb2NhbE5TTWFwID0gbnVsbDtcclxuXHQvL3ZhciBjdXJyZW50TlNNYXAgPSBwYXJzZVN0YWNrW3BhcnNlU3RhY2subGVuZ3RoLTFdLmN1cnJlbnROU01hcDtcclxuXHR2YXIgaSA9IGVsLmxlbmd0aDtcclxuXHR3aGlsZShpLS0pe1xyXG5cdFx0dmFyIGEgPSBlbFtpXTtcclxuXHRcdHZhciBxTmFtZSA9IGEucU5hbWU7XHJcblx0XHR2YXIgdmFsdWUgPSBhLnZhbHVlO1xyXG5cdFx0dmFyIG5zcCA9IHFOYW1lLmluZGV4T2YoJzonKTtcclxuXHRcdGlmKG5zcD4wKXtcclxuXHRcdFx0dmFyIHByZWZpeCA9IGEucHJlZml4ID0gcU5hbWUuc2xpY2UoMCxuc3ApO1xyXG5cdFx0XHR2YXIgbG9jYWxOYW1lID0gcU5hbWUuc2xpY2UobnNwKzEpO1xyXG5cdFx0XHR2YXIgbnNQcmVmaXggPSBwcmVmaXggPT09ICd4bWxucycgJiYgbG9jYWxOYW1lXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bG9jYWxOYW1lID0gcU5hbWU7XHJcblx0XHRcdHByZWZpeCA9IG51bGxcclxuXHRcdFx0bnNQcmVmaXggPSBxTmFtZSA9PT0gJ3htbG5zJyAmJiAnJ1xyXG5cdFx0fVxyXG5cdFx0Ly9jYW4gbm90IHNldCBwcmVmaXgsYmVjYXVzZSBwcmVmaXggIT09ICcnXHJcblx0XHRhLmxvY2FsTmFtZSA9IGxvY2FsTmFtZSA7XHJcblx0XHQvL3ByZWZpeCA9PSBudWxsIGZvciBubyBucyBwcmVmaXggYXR0cmlidXRlIFxyXG5cdFx0aWYobnNQcmVmaXggIT09IGZhbHNlKXsvL2hhY2shIVxyXG5cdFx0XHRpZihsb2NhbE5TTWFwID09IG51bGwpe1xyXG5cdFx0XHRcdGxvY2FsTlNNYXAgPSB7fVxyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coY3VycmVudE5TTWFwLDApXHJcblx0XHRcdFx0X2NvcHkoY3VycmVudE5TTWFwLGN1cnJlbnROU01hcD17fSlcclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKGN1cnJlbnROU01hcCwxKVxyXG5cdFx0XHR9XHJcblx0XHRcdGN1cnJlbnROU01hcFtuc1ByZWZpeF0gPSBsb2NhbE5TTWFwW25zUHJlZml4XSA9IHZhbHVlO1xyXG5cdFx0XHRhLnVyaSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLydcclxuXHRcdFx0ZG9tQnVpbGRlci5zdGFydFByZWZpeE1hcHBpbmcobnNQcmVmaXgsIHZhbHVlKSBcclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIGkgPSBlbC5sZW5ndGg7XHJcblx0d2hpbGUoaS0tKXtcclxuXHRcdGEgPSBlbFtpXTtcclxuXHRcdHZhciBwcmVmaXggPSBhLnByZWZpeDtcclxuXHRcdGlmKHByZWZpeCl7Ly9ubyBwcmVmaXggYXR0cmlidXRlIGhhcyBubyBuYW1lc3BhY2VcclxuXHRcdFx0aWYocHJlZml4ID09PSAneG1sJyl7XHJcblx0XHRcdFx0YS51cmkgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcclxuXHRcdFx0fWlmKHByZWZpeCAhPT0gJ3htbG5zJyl7XHJcblx0XHRcdFx0YS51cmkgPSBjdXJyZW50TlNNYXBbcHJlZml4IHx8ICcnXVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8ve2NvbnNvbGUubG9nKCcjIyMnK2EucU5hbWUsZG9tQnVpbGRlci5sb2NhdG9yLnN5c3RlbUlkKycnLGN1cnJlbnROU01hcCxhLnVyaSl9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIG5zcCA9IHRhZ05hbWUuaW5kZXhPZignOicpO1xyXG5cdGlmKG5zcD4wKXtcclxuXHRcdHByZWZpeCA9IGVsLnByZWZpeCA9IHRhZ05hbWUuc2xpY2UoMCxuc3ApO1xyXG5cdFx0bG9jYWxOYW1lID0gZWwubG9jYWxOYW1lID0gdGFnTmFtZS5zbGljZShuc3ArMSk7XHJcblx0fWVsc2V7XHJcblx0XHRwcmVmaXggPSBudWxsOy8vaW1wb3J0YW50ISFcclxuXHRcdGxvY2FsTmFtZSA9IGVsLmxvY2FsTmFtZSA9IHRhZ05hbWU7XHJcblx0fVxyXG5cdC8vbm8gcHJlZml4IGVsZW1lbnQgaGFzIGRlZmF1bHQgbmFtZXNwYWNlXHJcblx0dmFyIG5zID0gZWwudXJpID0gY3VycmVudE5TTWFwW3ByZWZpeCB8fCAnJ107XHJcblx0ZG9tQnVpbGRlci5zdGFydEVsZW1lbnQobnMsbG9jYWxOYW1lLHRhZ05hbWUsZWwpO1xyXG5cdC8vZW5kUHJlZml4TWFwcGluZyBhbmQgc3RhcnRQcmVmaXhNYXBwaW5nIGhhdmUgbm90IGFueSBoZWxwIGZvciBkb20gYnVpbGRlclxyXG5cdC8vbG9jYWxOU01hcCA9IG51bGxcclxuXHRpZihlbC5jbG9zZWQpe1xyXG5cdFx0ZG9tQnVpbGRlci5lbmRFbGVtZW50KG5zLGxvY2FsTmFtZSx0YWdOYW1lKTtcclxuXHRcdGlmKGxvY2FsTlNNYXApe1xyXG5cdFx0XHRmb3IocHJlZml4IGluIGxvY2FsTlNNYXApe1xyXG5cdFx0XHRcdGRvbUJ1aWxkZXIuZW5kUHJlZml4TWFwcGluZyhwcmVmaXgpIFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fWVsc2V7XHJcblx0XHRlbC5jdXJyZW50TlNNYXAgPSBjdXJyZW50TlNNYXA7XHJcblx0XHRlbC5sb2NhbE5TTWFwID0gbG9jYWxOU01hcDtcclxuXHRcdC8vcGFyc2VTdGFjay5wdXNoKGVsKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBwYXJzZUh0bWxTcGVjaWFsQ29udGVudChzb3VyY2UsZWxTdGFydEVuZCx0YWdOYW1lLGVudGl0eVJlcGxhY2VyLGRvbUJ1aWxkZXIpe1xyXG5cdGlmKC9eKD86c2NyaXB0fHRleHRhcmVhKSQvaS50ZXN0KHRhZ05hbWUpKXtcclxuXHRcdHZhciBlbEVuZFN0YXJ0ID0gIHNvdXJjZS5pbmRleE9mKCc8LycrdGFnTmFtZSsnPicsZWxTdGFydEVuZCk7XHJcblx0XHR2YXIgdGV4dCA9IHNvdXJjZS5zdWJzdHJpbmcoZWxTdGFydEVuZCsxLGVsRW5kU3RhcnQpO1xyXG5cdFx0aWYoL1smPF0vLnRlc3QodGV4dCkpe1xyXG5cdFx0XHRpZigvXnNjcmlwdCQvaS50ZXN0KHRhZ05hbWUpKXtcclxuXHRcdFx0XHQvL2lmKCEvXFxdXFxdPi8udGVzdCh0ZXh0KSl7XHJcblx0XHRcdFx0XHQvL2xleEhhbmRsZXIuc3RhcnRDREFUQSgpO1xyXG5cdFx0XHRcdFx0ZG9tQnVpbGRlci5jaGFyYWN0ZXJzKHRleHQsMCx0ZXh0Lmxlbmd0aCk7XHJcblx0XHRcdFx0XHQvL2xleEhhbmRsZXIuZW5kQ0RBVEEoKTtcclxuXHRcdFx0XHRcdHJldHVybiBlbEVuZFN0YXJ0O1xyXG5cdFx0XHRcdC8vfVxyXG5cdFx0XHR9Ly99ZWxzZXsvL3RleHQgYXJlYVxyXG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdGRvbUJ1aWxkZXIuY2hhcmFjdGVycyh0ZXh0LDAsdGV4dC5sZW5ndGgpO1xyXG5cdFx0XHRcdHJldHVybiBlbEVuZFN0YXJ0O1xyXG5cdFx0XHQvL31cclxuXHRcdFx0XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBlbFN0YXJ0RW5kKzE7XHJcbn1cclxuZnVuY3Rpb24gZml4U2VsZkNsb3NlZChzb3VyY2UsZWxTdGFydEVuZCx0YWdOYW1lLGNsb3NlTWFwKXtcclxuXHQvL2lmKHRhZ05hbWUgaW4gY2xvc2VNYXApe1xyXG5cdHZhciBwb3MgPSBjbG9zZU1hcFt0YWdOYW1lXTtcclxuXHRpZihwb3MgPT0gbnVsbCl7XHJcblx0XHQvL2NvbnNvbGUubG9nKHRhZ05hbWUpXHJcblx0XHRwb3MgPSAgc291cmNlLmxhc3RJbmRleE9mKCc8LycrdGFnTmFtZSsnPicpXHJcblx0XHRpZihwb3M8ZWxTdGFydEVuZCl7Ly/lv5jorrDpl63lkIhcclxuXHRcdFx0cG9zID0gc291cmNlLmxhc3RJbmRleE9mKCc8LycrdGFnTmFtZSlcclxuXHRcdH1cclxuXHRcdGNsb3NlTWFwW3RhZ05hbWVdID1wb3NcclxuXHR9XHJcblx0cmV0dXJuIHBvczxlbFN0YXJ0RW5kO1xyXG5cdC8vfSBcclxufVxyXG5mdW5jdGlvbiBfY29weShzb3VyY2UsdGFyZ2V0KXtcclxuXHRmb3IodmFyIG4gaW4gc291cmNlKXt0YXJnZXRbbl0gPSBzb3VyY2Vbbl19XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VEQ0Moc291cmNlLHN0YXJ0LGRvbUJ1aWxkZXIsZXJyb3JIYW5kbGVyKXsvL3N1cmUgc3RhcnQgd2l0aCAnPCEnXHJcblx0dmFyIG5leHQ9IHNvdXJjZS5jaGFyQXQoc3RhcnQrMilcclxuXHRzd2l0Y2gobmV4dCl7XHJcblx0Y2FzZSAnLSc6XHJcblx0XHRpZihzb3VyY2UuY2hhckF0KHN0YXJ0ICsgMykgPT09ICctJyl7XHJcblx0XHRcdHZhciBlbmQgPSBzb3VyY2UuaW5kZXhPZignLS0+JyxzdGFydCs0KTtcclxuXHRcdFx0Ly9hcHBlbmQgY29tbWVudCBzb3VyY2Uuc3Vic3RyaW5nKDQsZW5kKS8vPCEtLVxyXG5cdFx0XHRpZihlbmQ+c3RhcnQpe1xyXG5cdFx0XHRcdGRvbUJ1aWxkZXIuY29tbWVudChzb3VyY2Usc3RhcnQrNCxlbmQtc3RhcnQtNCk7XHJcblx0XHRcdFx0cmV0dXJuIGVuZCszO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoXCJVbmNsb3NlZCBjb21tZW50XCIpO1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdC8vZXJyb3JcclxuXHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0fVxyXG5cdGRlZmF1bHQ6XHJcblx0XHRpZihzb3VyY2Uuc3Vic3RyKHN0YXJ0KzMsNikgPT0gJ0NEQVRBWycpe1xyXG5cdFx0XHR2YXIgZW5kID0gc291cmNlLmluZGV4T2YoJ11dPicsc3RhcnQrOSk7XHJcblx0XHRcdGRvbUJ1aWxkZXIuc3RhcnRDREFUQSgpO1xyXG5cdFx0XHRkb21CdWlsZGVyLmNoYXJhY3RlcnMoc291cmNlLHN0YXJ0KzksZW5kLXN0YXJ0LTkpO1xyXG5cdFx0XHRkb21CdWlsZGVyLmVuZENEQVRBKCkgXHJcblx0XHRcdHJldHVybiBlbmQrMztcclxuXHRcdH1cclxuXHRcdC8vPCFET0NUWVBFXHJcblx0XHQvL3N0YXJ0RFREKGphdmEubGFuZy5TdHJpbmcgbmFtZSwgamF2YS5sYW5nLlN0cmluZyBwdWJsaWNJZCwgamF2YS5sYW5nLlN0cmluZyBzeXN0ZW1JZCkgXHJcblx0XHR2YXIgbWF0Y2hzID0gc3BsaXQoc291cmNlLHN0YXJ0KTtcclxuXHRcdHZhciBsZW4gPSBtYXRjaHMubGVuZ3RoO1xyXG5cdFx0aWYobGVuPjEgJiYgLyFkb2N0eXBlL2kudGVzdChtYXRjaHNbMF1bMF0pKXtcclxuXHRcdFx0dmFyIG5hbWUgPSBtYXRjaHNbMV1bMF07XHJcblx0XHRcdHZhciBwdWJpZCA9IGxlbj4zICYmIC9ecHVibGljJC9pLnRlc3QobWF0Y2hzWzJdWzBdKSAmJiBtYXRjaHNbM11bMF1cclxuXHRcdFx0dmFyIHN5c2lkID0gbGVuPjQgJiYgbWF0Y2hzWzRdWzBdO1xyXG5cdFx0XHR2YXIgbGFzdE1hdGNoID0gbWF0Y2hzW2xlbi0xXVxyXG5cdFx0XHRkb21CdWlsZGVyLnN0YXJ0RFREKG5hbWUscHViaWQgJiYgcHViaWQucmVwbGFjZSgvXihbJ1wiXSkoLio/KVxcMSQvLCckMicpLFxyXG5cdFx0XHRcdFx0c3lzaWQgJiYgc3lzaWQucmVwbGFjZSgvXihbJ1wiXSkoLio/KVxcMSQvLCckMicpKTtcclxuXHRcdFx0ZG9tQnVpbGRlci5lbmREVEQoKTtcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBsYXN0TWF0Y2guaW5kZXgrbGFzdE1hdGNoWzBdLmxlbmd0aFxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gLTE7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gcGFyc2VJbnN0cnVjdGlvbihzb3VyY2Usc3RhcnQsZG9tQnVpbGRlcil7XHJcblx0dmFyIGVuZCA9IHNvdXJjZS5pbmRleE9mKCc/Picsc3RhcnQpO1xyXG5cdGlmKGVuZCl7XHJcblx0XHR2YXIgbWF0Y2ggPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0LGVuZCkubWF0Y2goL148XFw/KFxcUyopXFxzKihbXFxzXFxTXSo/KVxccyokLyk7XHJcblx0XHRpZihtYXRjaCl7XHJcblx0XHRcdHZhciBsZW4gPSBtYXRjaFswXS5sZW5ndGg7XHJcblx0XHRcdGRvbUJ1aWxkZXIucHJvY2Vzc2luZ0luc3RydWN0aW9uKG1hdGNoWzFdLCBtYXRjaFsyXSkgO1xyXG5cdFx0XHRyZXR1cm4gZW5kKzI7XHJcblx0XHR9ZWxzZXsvL2Vycm9yXHJcblx0XHRcdHJldHVybiAtMTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIC0xO1xyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHNvdXJjZVxyXG4gKi9cclxuZnVuY3Rpb24gRWxlbWVudEF0dHJpYnV0ZXMoc291cmNlKXtcclxuXHRcclxufVxyXG5FbGVtZW50QXR0cmlidXRlcy5wcm90b3R5cGUgPSB7XHJcblx0c2V0VGFnTmFtZTpmdW5jdGlvbih0YWdOYW1lKXtcclxuXHRcdGlmKCF0YWdOYW1lUGF0dGVybi50ZXN0KHRhZ05hbWUpKXtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHRhZ05hbWU6Jyt0YWdOYW1lKVxyXG5cdFx0fVxyXG5cdFx0dGhpcy50YWdOYW1lID0gdGFnTmFtZVxyXG5cdH0sXHJcblx0YWRkOmZ1bmN0aW9uKHFOYW1lLHZhbHVlLG9mZnNldCl7XHJcblx0XHRpZighdGFnTmFtZVBhdHRlcm4udGVzdChxTmFtZSkpe1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXR0cmlidXRlOicrcU5hbWUpXHJcblx0XHR9XHJcblx0XHR0aGlzW3RoaXMubGVuZ3RoKytdID0ge3FOYW1lOnFOYW1lLHZhbHVlOnZhbHVlLG9mZnNldDpvZmZzZXR9XHJcblx0fSxcclxuXHRsZW5ndGg6MCxcclxuXHRnZXRMb2NhbE5hbWU6ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXNbaV0ubG9jYWxOYW1lfSxcclxuXHRnZXRMb2NhdG9yOmZ1bmN0aW9uKGkpe3JldHVybiB0aGlzW2ldLmxvY2F0b3J9LFxyXG5cdGdldFFOYW1lOmZ1bmN0aW9uKGkpe3JldHVybiB0aGlzW2ldLnFOYW1lfSxcclxuXHRnZXRVUkk6ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXNbaV0udXJpfSxcclxuXHRnZXRWYWx1ZTpmdW5jdGlvbihpKXtyZXR1cm4gdGhpc1tpXS52YWx1ZX1cclxuLy9cdCxnZXRJbmRleDpmdW5jdGlvbih1cmksIGxvY2FsTmFtZSkpe1xyXG4vL1x0XHRpZihsb2NhbE5hbWUpe1xyXG4vL1x0XHRcdFxyXG4vL1x0XHR9ZWxzZXtcclxuLy9cdFx0XHR2YXIgcU5hbWUgPSB1cmlcclxuLy9cdFx0fVxyXG4vL1x0fSxcclxuLy9cdGdldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VmFsdWUodGhpcy5nZXRJbmRleC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxcclxuLy9cdGdldFR5cGU6ZnVuY3Rpb24odXJpLGxvY2FsTmFtZSl7fVxyXG4vL1x0Z2V0VHlwZTpmdW5jdGlvbihpKXt9LFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBfc2V0X3Byb3RvXyh0aGl6LHBhcmVudCl7XHJcblx0dGhpei5fX3Byb3RvX18gPSBwYXJlbnQ7XHJcblx0cmV0dXJuIHRoaXo7XHJcbn1cclxuaWYoIShfc2V0X3Byb3RvXyh7fSxfc2V0X3Byb3RvXy5wcm90b3R5cGUpIGluc3RhbmNlb2YgX3NldF9wcm90b18pKXtcclxuXHRfc2V0X3Byb3RvXyA9IGZ1bmN0aW9uKHRoaXoscGFyZW50KXtcclxuXHRcdGZ1bmN0aW9uIHAoKXt9O1xyXG5cdFx0cC5wcm90b3R5cGUgPSBwYXJlbnQ7XHJcblx0XHRwID0gbmV3IHAoKTtcclxuXHRcdGZvcihwYXJlbnQgaW4gdGhpeil7XHJcblx0XHRcdHBbcGFyZW50XSA9IHRoaXpbcGFyZW50XTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBwO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gc3BsaXQoc291cmNlLHN0YXJ0KXtcclxuXHR2YXIgbWF0Y2g7XHJcblx0dmFyIGJ1ZiA9IFtdO1xyXG5cdHZhciByZWcgPSAvJ1teJ10rJ3xcIlteXCJdK1wifFteXFxzPD5cXC89XSs9P3woXFwvP1xccyo+fDwpL2c7XHJcblx0cmVnLmxhc3RJbmRleCA9IHN0YXJ0O1xyXG5cdHJlZy5leGVjKHNvdXJjZSk7Ly9za2lwIDxcclxuXHR3aGlsZShtYXRjaCA9IHJlZy5leGVjKHNvdXJjZSkpe1xyXG5cdFx0YnVmLnB1c2gobWF0Y2gpO1xyXG5cdFx0aWYobWF0Y2hbMV0pcmV0dXJuIGJ1ZjtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydHMuWE1MUmVhZGVyID0gWE1MUmVhZGVyO1xyXG5cclxuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgYmFzZTY0bWFwXG4gICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJyxcblxuICBjcnlwdCA9IHtcbiAgICAvLyBCaXQtd2lzZSByb3RhdGlvbiBsZWZ0XG4gICAgcm90bDogZnVuY3Rpb24obiwgYikge1xuICAgICAgcmV0dXJuIChuIDw8IGIpIHwgKG4gPj4+ICgzMiAtIGIpKTtcbiAgICB9LFxuXG4gICAgLy8gQml0LXdpc2Ugcm90YXRpb24gcmlnaHRcbiAgICByb3RyOiBmdW5jdGlvbihuLCBiKSB7XG4gICAgICByZXR1cm4gKG4gPDwgKDMyIC0gYikpIHwgKG4gPj4+IGIpO1xuICAgIH0sXG5cbiAgICAvLyBTd2FwIGJpZy1lbmRpYW4gdG8gbGl0dGxlLWVuZGlhbiBhbmQgdmljZSB2ZXJzYVxuICAgIGVuZGlhbjogZnVuY3Rpb24obikge1xuICAgICAgLy8gSWYgbnVtYmVyIGdpdmVuLCBzd2FwIGVuZGlhblxuICAgICAgaWYgKG4uY29uc3RydWN0b3IgPT0gTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBjcnlwdC5yb3RsKG4sIDgpICYgMHgwMEZGMDBGRiB8IGNyeXB0LnJvdGwobiwgMjQpICYgMHhGRjAwRkYwMDtcbiAgICAgIH1cblxuICAgICAgLy8gRWxzZSwgYXNzdW1lIGFycmF5IGFuZCBzd2FwIGFsbCBpdGVtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKVxuICAgICAgICBuW2ldID0gY3J5cHQuZW5kaWFuKG5baV0pO1xuICAgICAgcmV0dXJuIG47XG4gICAgfSxcblxuICAgIC8vIEdlbmVyYXRlIGFuIGFycmF5IG9mIGFueSBsZW5ndGggb2YgcmFuZG9tIGJ5dGVzXG4gICAgcmFuZG9tQnl0ZXM6IGZ1bmN0aW9uKG4pIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW107IG4gPiAwOyBuLS0pXG4gICAgICAgIGJ5dGVzLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGJpZy1lbmRpYW4gMzItYml0IHdvcmRzXG4gICAgYnl0ZXNUb1dvcmRzOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgd29yZHMgPSBbXSwgaSA9IDAsIGIgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyssIGIgKz0gOClcbiAgICAgICAgd29yZHNbYiA+Pj4gNV0gfD0gYnl0ZXNbaV0gPDwgKDI0IC0gYiAlIDMyKTtcbiAgICAgIHJldHVybiB3b3JkcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBiaWctZW5kaWFuIDMyLWJpdCB3b3JkcyB0byBhIGJ5dGUgYXJyYXlcbiAgICB3b3Jkc1RvQnl0ZXM6IGZ1bmN0aW9uKHdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBiID0gMDsgYiA8IHdvcmRzLmxlbmd0aCAqIDMyOyBiICs9IDgpXG4gICAgICAgIGJ5dGVzLnB1c2goKHdvcmRzW2IgPj4+IDVdID4+PiAoMjQgLSBiICUgMzIpKSAmIDB4RkYpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGhleCBzdHJpbmdcbiAgICBieXRlc1RvSGV4OiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgaGV4ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldID4+PiA0KS50b1N0cmluZygxNikpO1xuICAgICAgICBoZXgucHVzaCgoYnl0ZXNbaV0gJiAweEYpLnRvU3RyaW5nKDE2KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgaGV4IHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBoZXhUb0J5dGVzOiBmdW5jdGlvbihoZXgpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGMgPSAwOyBjIDwgaGV4Lmxlbmd0aDsgYyArPSAyKVxuICAgICAgICBieXRlcy5wdXNoKHBhcnNlSW50KGhleC5zdWJzdHIoYywgMiksIDE2KSk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgYmFzZS02NCBzdHJpbmdcbiAgICBieXRlc1RvQmFzZTY0OiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgYmFzZTY0ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIHRyaXBsZXQgPSAoYnl0ZXNbaV0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAxXSA8PCA4KSB8IGJ5dGVzW2kgKyAyXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA0OyBqKyspXG4gICAgICAgICAgaWYgKGkgKiA4ICsgaiAqIDYgPD0gYnl0ZXMubGVuZ3RoICogOClcbiAgICAgICAgICAgIGJhc2U2NC5wdXNoKGJhc2U2NG1hcC5jaGFyQXQoKHRyaXBsZXQgPj4+IDYgKiAoMyAtIGopKSAmIDB4M0YpKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBiYXNlNjQucHVzaCgnPScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2U2NC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJhc2UtNjQgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIGJhc2U2NFRvQnl0ZXM6IGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgICAgLy8gUmVtb3ZlIG5vbi1iYXNlLTY0IGNoYXJhY3RlcnNcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5yZXBsYWNlKC9bXkEtWjAtOStcXC9dL2lnLCAnJyk7XG5cbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGkgPSAwLCBpbW9kNCA9IDA7IGkgPCBiYXNlNjQubGVuZ3RoO1xuICAgICAgICAgIGltb2Q0ID0gKytpICUgNCkge1xuICAgICAgICBpZiAoaW1vZDQgPT0gMCkgY29udGludWU7XG4gICAgICAgIGJ5dGVzLnB1c2goKChiYXNlNjRtYXAuaW5kZXhPZihiYXNlNjQuY2hhckF0KGkgLSAxKSlcbiAgICAgICAgICAgICYgKE1hdGgucG93KDIsIC0yICogaW1vZDQgKyA4KSAtIDEpKSA8PCAoaW1vZDQgKiAyKSlcbiAgICAgICAgICAgIHwgKGJhc2U2NG1hcC5pbmRleE9mKGJhc2U2NC5jaGFyQXQoaSkpID4+PiAoNiAtIGltb2Q0ICogMikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBjcnlwdDtcbn0pKCk7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciAvIG53anMgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8IHByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCBwcm9jZXNzLmJyb3dzZXIgPT09IHRydWUgfHwgcHJvY2Vzcy5fX253anMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWycjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJywgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLCAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJywgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLCAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JywgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLCAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJywgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ107XG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblxuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXG5cbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSB8fCAvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8IHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkgfHwgLy8gSXMgZmlyZWZveCA+PSB2MzE/XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxIHx8IC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLyk7XG59XG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICsgdGhpcy5uYW1lc3BhY2UgKyAodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgKyBhcmdzWzBdICsgKHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICsgJysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTsgLy8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblxuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgaWYgKG1hdGNoID09PSAnJSUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5kZXgrKztcblxuICAgIGlmIChtYXRjaCA9PT0gJyVjJykge1xuICAgICAgLy8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gbG9nKCkge1xuICB2YXIgX2NvbnNvbGU7XG5cbiAgLy8gVGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICh0eXBlb2YgY29uc29sZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGNvbnNvbGUpKSA9PT0gJ29iamVjdCcgJiYgY29uc29sZS5sb2cgJiYgKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xufVxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBTd2FsbG93XG4gICAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIH1cbn1cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcblxuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9IC8vIFN3YWxsb3dcbiAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblxuXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICAvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG4gICAgLy8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlcnJvcikgey8vIFN3YWxsb3dcbiAgICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG52YXIgZm9ybWF0dGVycyA9IG1vZHVsZS5leHBvcnRzLmZvcm1hdHRlcnM7XG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcbiAgfVxufTtcblxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC0/XFxkP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xudmFyIHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbi8qKlxuICogVGhpcyBpcyB0aGUgTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuXG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWzYsIDIsIDMsIDQsIDUsIDFdO1xuXG50cnkge1xuICAvLyBPcHRpb25hbCBkZXBlbmRlbmN5IChhcyBpbiwgZG9lc24ndCBuZWVkIHRvIGJlIGluc3RhbGxlZCwgTk9UIGxpa2Ugb3B0aW9uYWxEZXBlbmRlbmNpZXMgaW4gcGFja2FnZS5qc29uKVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG4gIHZhciBzdXBwb3J0c0NvbG9yID0gcmVxdWlyZSgnc3VwcG9ydHMtY29sb3InKTtcblxuICBpZiAoc3VwcG9ydHNDb2xvciAmJiAoc3VwcG9ydHNDb2xvci5zdGRlcnIgfHwgc3VwcG9ydHNDb2xvcikubGV2ZWwgPj0gMikge1xuICAgIGV4cG9ydHMuY29sb3JzID0gWzIwLCAyMSwgMjYsIDI3LCAzMiwgMzMsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNTYsIDU3LCA2MiwgNjMsIDY4LCA2OSwgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsIDgxLCA5MiwgOTMsIDk4LCA5OSwgMTEyLCAxMTMsIDEyOCwgMTI5LCAxMzQsIDEzNSwgMTQ4LCAxNDksIDE2MCwgMTYxLCAxNjIsIDE2MywgMTY0LCAxNjUsIDE2NiwgMTY3LCAxNjgsIDE2OSwgMTcwLCAxNzEsIDE3MiwgMTczLCAxNzgsIDE3OSwgMTg0LCAxODUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTQsIDIxNSwgMjIwLCAyMjFdO1xuICB9XG59IGNhdGNoIChlcnJvcikge30gLy8gU3dhbGxvdyAtIHdlIG9ubHkgY2FyZSBpZiBgc3VwcG9ydHMtY29sb3JgIGlzIGF2YWlsYWJsZTsgaXQgZG9lc24ndCBoYXZlIHRvIGJlLlxuXG4vKipcbiAqIEJ1aWxkIHVwIHRoZSBkZWZhdWx0IGBpbnNwZWN0T3B0c2Agb2JqZWN0IGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqXG4gKiAgICQgREVCVUdfQ09MT1JTPW5vIERFQlVHX0RFUFRIPTEwIERFQlVHX1NIT1dfSElEREVOPWVuYWJsZWQgbm9kZSBzY3JpcHQuanNcbiAqL1xuXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIC9eZGVidWdfL2kudGVzdChrZXkpO1xufSkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAvLyBDYW1lbC1jYXNlXG4gIHZhciBwcm9wID0ga2V5LnN1YnN0cmluZyg2KS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL18oW2Etel0pL2csIGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsudG9VcHBlckNhc2UoKTtcbiAgfSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuXG4gIHZhciB2YWwgPSBwcm9jZXNzLmVudltrZXldO1xuXG4gIGlmICgvXih5ZXN8b258dHJ1ZXxlbmFibGVkKSQvaS50ZXN0KHZhbCkpIHtcbiAgICB2YWwgPSB0cnVlO1xuICB9IGVsc2UgaWYgKC9eKG5vfG9mZnxmYWxzZXxkaXNhYmxlZCkkL2kudGVzdCh2YWwpKSB7XG4gICAgdmFsID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAodmFsID09PSAnbnVsbCcpIHtcbiAgICB2YWwgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHZhbCA9IE51bWJlcih2YWwpO1xuICB9XG5cbiAgb2JqW3Byb3BdID0gdmFsO1xuICByZXR1cm4gb2JqO1xufSwge30pO1xuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICByZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0cyA/IEJvb2xlYW4oZXhwb3J0cy5pbnNwZWN0T3B0cy5jb2xvcnMpIDogdHR5LmlzYXR0eShwcm9jZXNzLnN0ZGVyci5mZCk7XG59XG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciBuYW1lID0gdGhpcy5uYW1lc3BhY2UsXG4gICAgICB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBpZiAodXNlQ29sb3JzKSB7XG4gICAgdmFyIGMgPSB0aGlzLmNvbG9yO1xuICAgIHZhciBjb2xvckNvZGUgPSBcIlxceDFCWzNcIiArIChjIDwgOCA/IGMgOiAnODs1OycgKyBjKTtcbiAgICB2YXIgcHJlZml4ID0gXCIgIFwiLmNvbmNhdChjb2xvckNvZGUsIFwiOzFtXCIpLmNvbmNhdChuYW1lLCBcIiBcXHgxQlswbVwiKTtcbiAgICBhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG4gICAgYXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpICsgXCJcXHgxQlswbVwiKTtcbiAgfSBlbHNlIHtcbiAgICBhcmdzWzBdID0gZ2V0RGF0ZSgpICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcbiAgaWYgKGV4cG9ydHMuaW5zcGVjdE9wdHMuaGlkZURhdGUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgJyAnO1xufVxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cblxuZnVuY3Rpb24gbG9nKCkge1xuICByZXR1cm4gcHJvY2Vzcy5zdGRlcnIud3JpdGUodXRpbC5mb3JtYXQuYXBwbHkodXRpbCwgYXJndW1lbnRzKSArICdcXG4nKTtcbn1cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIGlmIChuYW1lc3BhY2VzKSB7XG4gICAgcHJvY2Vzcy5lbnYuREVCVUcgPSBuYW1lc3BhY2VzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHlvdSBzZXQgYSBwcm9jZXNzLmVudiBmaWVsZCB0byBudWxsIG9yIHVuZGVmaW5lZCwgaXQgZ2V0cyBjYXN0IHRvIHRoZVxuICAgIC8vIHN0cmluZyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcuIEp1c3QgZGVsZXRlIGluc3RlYWQuXG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG59XG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHO1xufVxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluaXQoZGVidWcpIHtcbiAgZGVidWcuaW5zcGVjdE9wdHMgPSB7fTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhleHBvcnRzLmluc3BlY3RPcHRzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xudmFyIGZvcm1hdHRlcnMgPSBtb2R1bGUuZXhwb3J0cy5mb3JtYXR0ZXJzO1xuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKS5yZXBsYWNlKC9cXHMqXFxuXFxzKi9nLCAnICcpO1xufTtcbi8qKlxuICogTWFwICVPIHRvIGB1dGlsLmluc3BlY3QoKWAsIGFsbG93aW5nIG11bHRpcGxlIGxpbmVzIGlmIG5lZWRlZC5cbiAqL1xuXG5cbmZvcm1hdHRlcnMuTyA9IGZ1bmN0aW9uICh2KSB7XG4gIHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG4gIHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0dHlcIik7IiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgaGFzRmxhZyA9IHJlcXVpcmUoJ2hhcy1mbGFnJyk7XG5cbmNvbnN0IGVudiA9IHByb2Nlc3MuZW52O1xuXG5sZXQgZm9yY2VDb2xvcjtcbmlmIChoYXNGbGFnKCduby1jb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykpIHtcblx0Zm9yY2VDb2xvciA9IGZhbHNlO1xufSBlbHNlIGlmIChoYXNGbGFnKCdjb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPXRydWUnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj1hbHdheXMnKSkge1xuXHRmb3JjZUNvbG9yID0gdHJ1ZTtcbn1cbmlmICgnRk9SQ0VfQ09MT1InIGluIGVudikge1xuXHRmb3JjZUNvbG9yID0gZW52LkZPUkNFX0NPTE9SLmxlbmd0aCA9PT0gMCB8fCBwYXJzZUludChlbnYuRk9SQ0VfQ09MT1IsIDEwKSAhPT0gMDtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpIHtcblx0aWYgKGxldmVsID09PSAwKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZXZlbCxcblx0XHRoYXNCYXNpYzogdHJ1ZSxcblx0XHRoYXMyNTY6IGxldmVsID49IDIsXG5cdFx0aGFzMTZtOiBsZXZlbCA+PSAzXG5cdH07XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzQ29sb3Ioc3RyZWFtKSB7XG5cdGlmIChmb3JjZUNvbG9yID09PSBmYWxzZSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTE2bScpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9ZnVsbCcpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9dHJ1ZWNvbG9yJykpIHtcblx0XHRyZXR1cm4gMztcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0yNTYnKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKHN0cmVhbSAmJiAhc3RyZWFtLmlzVFRZICYmIGZvcmNlQ29sb3IgIT09IHRydWUpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGNvbnN0IG1pbiA9IGZvcmNlQ29sb3IgPyAxIDogMDtcblxuXHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuXHRcdC8vIE5vZGUuanMgNy41LjAgaXMgdGhlIGZpcnN0IHZlcnNpb24gb2YgTm9kZS5qcyB0byBpbmNsdWRlIGEgcGF0Y2ggdG9cblx0XHQvLyBsaWJ1diB0aGF0IGVuYWJsZXMgMjU2IGNvbG9yIG91dHB1dCBvbiBXaW5kb3dzLiBBbnl0aGluZyBlYXJsaWVyIGFuZCBpdFxuXHRcdC8vIHdvbid0IHdvcmsuIEhvd2V2ZXIsIGhlcmUgd2UgdGFyZ2V0IE5vZGUuanMgOCBhdCBtaW5pbXVtIGFzIGl0IGlzIGFuIExUU1xuXHRcdC8vIHJlbGVhc2UsIGFuZCBOb2RlLmpzIDcgaXMgbm90LiBXaW5kb3dzIDEwIGJ1aWxkIDEwNTg2IGlzIHRoZSBmaXJzdCBXaW5kb3dzXG5cdFx0Ly8gcmVsZWFzZSB0aGF0IHN1cHBvcnRzIDI1NiBjb2xvcnMuIFdpbmRvd3MgMTAgYnVpbGQgMTQ5MzEgaXMgdGhlIGZpcnN0IHJlbGVhc2Vcblx0XHQvLyB0aGF0IHN1cHBvcnRzIDE2bS9UcnVlQ29sb3IuXG5cdFx0Y29uc3Qgb3NSZWxlYXNlID0gb3MucmVsZWFzZSgpLnNwbGl0KCcuJyk7XG5cdFx0aWYgKFxuXHRcdFx0TnVtYmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpWzBdKSA+PSA4ICYmXG5cdFx0XHROdW1iZXIob3NSZWxlYXNlWzBdKSA+PSAxMCAmJlxuXHRcdFx0TnVtYmVyKG9zUmVsZWFzZVsyXSkgPj0gMTA1ODZcblx0XHQpIHtcblx0XHRcdHJldHVybiBOdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxNDkzMSA/IDMgOiAyO1xuXHRcdH1cblxuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKCdDSScgaW4gZW52KSB7XG5cdFx0aWYgKFsnVFJBVklTJywgJ0NJUkNMRUNJJywgJ0FQUFZFWU9SJywgJ0dJVExBQl9DSSddLnNvbWUoc2lnbiA9PiBzaWduIGluIGVudikgfHwgZW52LkNJX05BTUUgPT09ICdjb2Rlc2hpcCcpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRpZiAoJ1RFQU1DSVRZX1ZFUlNJT04nIGluIGVudikge1xuXHRcdHJldHVybiAvXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8udGVzdChlbnYuVEVBTUNJVFlfVkVSU0lPTikgPyAxIDogMDtcblx0fVxuXG5cdGlmIChlbnYuQ09MT1JURVJNID09PSAndHJ1ZWNvbG9yJykge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cblx0aWYgKCdURVJNX1BST0dSQU0nIGluIGVudikge1xuXHRcdGNvbnN0IHZlcnNpb24gPSBwYXJzZUludCgoZW52LlRFUk1fUFJPR1JBTV9WRVJTSU9OIHx8ICcnKS5zcGxpdCgnLicpWzBdLCAxMCk7XG5cblx0XHRzd2l0Y2ggKGVudi5URVJNX1BST0dSQU0pIHtcblx0XHRcdGNhc2UgJ2lUZXJtLmFwcCc6XG5cdFx0XHRcdHJldHVybiB2ZXJzaW9uID49IDMgPyAzIDogMjtcblx0XHRcdGNhc2UgJ0FwcGxlX1Rlcm1pbmFsJzpcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHQvLyBObyBkZWZhdWx0XG5cdFx0fVxuXHR9XG5cblx0aWYgKC8tMjU2KGNvbG9yKT8kL2kudGVzdChlbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMjtcblx0fVxuXG5cdGlmICgvXnNjcmVlbnxeeHRlcm18XnZ0MTAwfF52dDIyMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NPTE9SVEVSTScgaW4gZW52KSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoZW52LlRFUk0gPT09ICdkdW1iJykge1xuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRyZXR1cm4gbWluO1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0TGV2ZWwoc3RyZWFtKSB7XG5cdGNvbnN0IGxldmVsID0gc3VwcG9ydHNDb2xvcihzdHJlYW0pO1xuXHRyZXR1cm4gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3VwcG9ydHNDb2xvcjogZ2V0U3VwcG9ydExldmVsLFxuXHRzdGRvdXQ6IGdldFN1cHBvcnRMZXZlbChwcm9jZXNzLnN0ZG91dCksXG5cdHN0ZGVycjogZ2V0U3VwcG9ydExldmVsKHByb2Nlc3Muc3RkZXJyKVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gKGZsYWcsIGFyZ3YpID0+IHtcblx0YXJndiA9IGFyZ3YgfHwgcHJvY2Vzcy5hcmd2O1xuXHRjb25zdCBwcmVmaXggPSBmbGFnLnN0YXJ0c1dpdGgoJy0nKSA/ICcnIDogKGZsYWcubGVuZ3RoID09PSAxID8gJy0nIDogJy0tJyk7XG5cdGNvbnN0IHBvcyA9IGFyZ3YuaW5kZXhPZihwcmVmaXggKyBmbGFnKTtcblx0Y29uc3QgdGVybWluYXRvclBvcyA9IGFyZ3YuaW5kZXhPZignLS0nKTtcblx0cmV0dXJuIHBvcyAhPT0gLTEgJiYgKHRlcm1pbmF0b3JQb3MgPT09IC0xID8gdHJ1ZSA6IHBvcyA8IHRlcm1pbmF0b3JQb3MpO1xufTtcbiIsInZhciBJbmNvbWluZ0Zvcm0gPSByZXF1aXJlKCcuL2luY29taW5nX2Zvcm0nKS5JbmNvbWluZ0Zvcm07XG5JbmNvbWluZ0Zvcm0uSW5jb21pbmdGb3JtID0gSW5jb21pbmdGb3JtO1xubW9kdWxlLmV4cG9ydHMgPSBJbmNvbWluZ0Zvcm07XG4iLCJpZiAoZ2xvYmFsLkdFTlRMWSkgcmVxdWlyZSA9IEdFTlRMWS5oaWphY2socmVxdWlyZSk7XG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIEZpbGUgPSByZXF1aXJlKCcuL2ZpbGUnKSxcbiAgICBNdWx0aXBhcnRQYXJzZXIgPSByZXF1aXJlKCcuL211bHRpcGFydF9wYXJzZXInKS5NdWx0aXBhcnRQYXJzZXIsXG4gICAgUXVlcnlzdHJpbmdQYXJzZXIgPSByZXF1aXJlKCcuL3F1ZXJ5c3RyaW5nX3BhcnNlcicpLlF1ZXJ5c3RyaW5nUGFyc2VyLFxuICAgIE9jdGV0UGFyc2VyICAgICAgID0gcmVxdWlyZSgnLi9vY3RldF9wYXJzZXInKS5PY3RldFBhcnNlcixcbiAgICBKU09OUGFyc2VyID0gcmVxdWlyZSgnLi9qc29uX3BhcnNlcicpLkpTT05QYXJzZXIsXG4gICAgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlcixcbiAgICBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXIsXG4gICAgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtLFxuICAgIG9zID0gcmVxdWlyZSgnb3MnKTtcblxuZnVuY3Rpb24gSW5jb21pbmdGb3JtKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluY29taW5nRm9ybSkpIHJldHVybiBuZXcgSW5jb21pbmdGb3JtKG9wdHMpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICBvcHRzPW9wdHN8fHt9O1xuXG4gIHRoaXMuZXJyb3IgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG5cbiAgdGhpcy5tYXhGaWVsZHMgPSBvcHRzLm1heEZpZWxkcyB8fCAxMDAwO1xuICB0aGlzLm1heEZpZWxkc1NpemUgPSBvcHRzLm1heEZpZWxkc1NpemUgfHwgMjAgKiAxMDI0ICogMTAyNDtcbiAgdGhpcy5tYXhGaWxlU2l6ZSA9IG9wdHMubWF4RmlsZVNpemUgfHwgMjAwICogMTAyNCAqIDEwMjQ7XG4gIHRoaXMua2VlcEV4dGVuc2lvbnMgPSBvcHRzLmtlZXBFeHRlbnNpb25zIHx8IGZhbHNlO1xuICB0aGlzLnVwbG9hZERpciA9IG9wdHMudXBsb2FkRGlyIHx8IChvcy50bXBkaXIgJiYgb3MudG1wZGlyKCkpIHx8IG9zLnRtcERpcigpO1xuICB0aGlzLmVuY29kaW5nID0gb3B0cy5lbmNvZGluZyB8fCAndXRmLTgnO1xuICB0aGlzLmhlYWRlcnMgPSBudWxsO1xuICB0aGlzLnR5cGUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBvcHRzLmhhc2ggfHwgZmFsc2U7XG4gIHRoaXMubXVsdGlwbGVzID0gb3B0cy5tdWx0aXBsZXMgfHwgZmFsc2U7XG5cbiAgdGhpcy5ieXRlc1JlY2VpdmVkID0gbnVsbDtcbiAgdGhpcy5ieXRlc0V4cGVjdGVkID0gbnVsbDtcblxuICB0aGlzLl9wYXJzZXIgPSBudWxsO1xuICB0aGlzLl9mbHVzaGluZyA9IDA7XG4gIHRoaXMuX2ZpZWxkc1NpemUgPSAwO1xuICB0aGlzLl9maWxlU2l6ZSA9IDA7XG4gIHRoaXMub3BlbmVkRmlsZXMgPSBbXTtcblxuICByZXR1cm4gdGhpcztcbn1cbnV0aWwuaW5oZXJpdHMoSW5jb21pbmdGb3JtLCBFdmVudEVtaXR0ZXIpO1xuZXhwb3J0cy5JbmNvbWluZ0Zvcm0gPSBJbmNvbWluZ0Zvcm07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihyZXEsIGNiKSB7XG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmVxLnBhdXNlKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyB0aGUgc3RyZWFtIHdhcyBkZXN0cm95ZWRcbiAgICAgIGlmICghdGhpcy5lbmRlZCkge1xuICAgICAgICAvLyBiZWZvcmUgaXQgd2FzIGNvbXBsZXRlZCwgY3Jhc2ggJiBidXJuXG4gICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHRoaXMucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlcS5yZXN1bWUoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIHRoZSBzdHJlYW0gd2FzIGRlc3Ryb3llZFxuICAgICAgaWYgKCF0aGlzLmVuZGVkKSB7XG4gICAgICAgIC8vIGJlZm9yZSBpdCB3YXMgY29tcGxldGVkLCBjcmFzaCAmIGJ1cm5cbiAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBTZXR1cCBjYWxsYmFjayBmaXJzdCwgc28gd2UgZG9uJ3QgbWlzcyBhbnl0aGluZyBmcm9tIGRhdGEgZXZlbnRzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHkuXG4gIGlmIChjYikge1xuICAgIHZhciBmaWVsZHMgPSB7fSwgZmlsZXMgPSB7fTtcbiAgICB0aGlzXG4gICAgICAub24oJ2ZpZWxkJywgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgZmllbGRzW25hbWVdID0gdmFsdWU7XG4gICAgICB9KVxuICAgICAgLm9uKCdmaWxlJywgZnVuY3Rpb24obmFtZSwgZmlsZSkge1xuICAgICAgICBpZiAodGhpcy5tdWx0aXBsZXMpIHtcbiAgICAgICAgICBpZiAoZmlsZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlc1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgZmlsZXNbbmFtZV0gPSBbZmlsZXNbbmFtZV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZXNbbmFtZV0ucHVzaChmaWxlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsZXNbbmFtZV0gPSBmaWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaWxlc1tuYW1lXSA9IGZpbGU7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNiKGVyciwgZmllbGRzLCBmaWxlcyk7XG4gICAgICB9KVxuICAgICAgLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY2IobnVsbCwgZmllbGRzLCBmaWxlcyk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIFBhcnNlIGhlYWRlcnMgYW5kIHNldHVwIHRoZSBwYXJzZXIsIHJlYWR5IHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgZGF0YS5cbiAgdGhpcy53cml0ZUhlYWRlcnMocmVxLmhlYWRlcnMpO1xuXG4gIC8vIFN0YXJ0IGxpc3RlbmluZyBmb3IgZGF0YS5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXFcbiAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzZWxmLl9lcnJvcihlcnIpO1xuICAgIH0pXG4gICAgLm9uKCdhYm9ydGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Fib3J0ZWQnKTtcbiAgICAgIHNlbGYuX2Vycm9yKG5ldyBFcnJvcignUmVxdWVzdCBhYm9ydGVkJykpO1xuICAgIH0pXG4gICAgLm9uKCdkYXRhJywgZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICBzZWxmLndyaXRlKGJ1ZmZlcik7XG4gICAgfSlcbiAgICAub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXJyID0gc2VsZi5fcGFyc2VyLmVuZCgpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBzZWxmLl9lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuSW5jb21pbmdGb3JtLnByb3RvdHlwZS53cml0ZUhlYWRlcnMgPSBmdW5jdGlvbihoZWFkZXJzKSB7XG4gIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gIHRoaXMuX3BhcnNlQ29udGVudExlbmd0aCgpO1xuICB0aGlzLl9wYXJzZUNvbnRlbnRUeXBlKCk7XG59O1xuXG5JbmNvbWluZ0Zvcm0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIGlmICh0aGlzLmVycm9yKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghdGhpcy5fcGFyc2VyKSB7XG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCd1bmluaXRpYWxpemVkIHBhcnNlcicpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmJ5dGVzUmVjZWl2ZWQgKz0gYnVmZmVyLmxlbmd0aDtcbiAgdGhpcy5lbWl0KCdwcm9ncmVzcycsIHRoaXMuYnl0ZXNSZWNlaXZlZCwgdGhpcy5ieXRlc0V4cGVjdGVkKTtcblxuICB2YXIgYnl0ZXNQYXJzZWQgPSB0aGlzLl9wYXJzZXIud3JpdGUoYnVmZmVyKTtcbiAgaWYgKGJ5dGVzUGFyc2VkICE9PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdwYXJzZXIgZXJyb3IsICcrYnl0ZXNQYXJzZWQrJyBvZiAnK2J1ZmZlci5sZW5ndGgrJyBieXRlcyBwYXJzZWQnKSk7XG4gIH1cblxuICByZXR1cm4gYnl0ZXNQYXJzZWQ7XG59O1xuXG5JbmNvbWluZ0Zvcm0ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHRoaXMgZG9lcyBub3RoaW5nLCB1bmxlc3Mgb3ZlcndyaXR0ZW4gaW4gSW5jb21pbmdGb3JtLnBhcnNlXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIC8vIHRoaXMgZG9lcyBub3RoaW5nLCB1bmxlc3Mgb3ZlcndyaXR0ZW4gaW4gSW5jb21pbmdGb3JtLnBhcnNlXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUub25QYXJ0ID0gZnVuY3Rpb24ocGFydCkge1xuICAvLyB0aGlzIG1ldGhvZCBjYW4gYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIHVzZXJcbiAgdGhpcy5oYW5kbGVQYXJ0KHBhcnQpO1xufTtcblxuSW5jb21pbmdGb3JtLnByb3RvdHlwZS5oYW5kbGVQYXJ0ID0gZnVuY3Rpb24ocGFydCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gVGhpcyBNVVNUIGNoZWNrIGV4YWN0bHkgZm9yIHVuZGVmaW5lZC4gWW91IGNhbiBub3QgY2hhbmdlIGl0IHRvICFwYXJ0LmZpbGVuYW1lLlxuICBpZiAocGFydC5maWxlbmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHZhbHVlID0gJydcbiAgICAgICwgZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKHRoaXMuZW5jb2RpbmcpO1xuXG4gICAgcGFydC5vbignZGF0YScsIGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgc2VsZi5fZmllbGRzU2l6ZSArPSBidWZmZXIubGVuZ3RoO1xuICAgICAgaWYgKHNlbGYuX2ZpZWxkc1NpemUgPiBzZWxmLm1heEZpZWxkc1NpemUpIHtcbiAgICAgICAgc2VsZi5fZXJyb3IobmV3IEVycm9yKCdtYXhGaWVsZHNTaXplIGV4Y2VlZGVkLCByZWNlaXZlZCAnK3NlbGYuX2ZpZWxkc1NpemUrJyBieXRlcyBvZiBmaWVsZCBkYXRhJykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YWx1ZSArPSBkZWNvZGVyLndyaXRlKGJ1ZmZlcik7XG4gICAgfSk7XG5cbiAgICBwYXJ0Lm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuZW1pdCgnZmllbGQnLCBwYXJ0Lm5hbWUsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9mbHVzaGluZysrO1xuXG4gIHZhciBmaWxlID0gbmV3IEZpbGUoe1xuICAgIHBhdGg6IHRoaXMuX3VwbG9hZFBhdGgocGFydC5maWxlbmFtZSksXG4gICAgbmFtZTogcGFydC5maWxlbmFtZSxcbiAgICB0eXBlOiBwYXJ0Lm1pbWUsXG4gICAgaGFzaDogc2VsZi5oYXNoXG4gIH0pO1xuXG4gIHRoaXMuZW1pdCgnZmlsZUJlZ2luJywgcGFydC5uYW1lLCBmaWxlKTtcblxuICBmaWxlLm9wZW4oKTtcbiAgdGhpcy5vcGVuZWRGaWxlcy5wdXNoKGZpbGUpO1xuXG4gIHBhcnQub24oJ2RhdGEnLCBmdW5jdGlvbihidWZmZXIpIHtcbiAgICBzZWxmLl9maWxlU2l6ZSArPSBidWZmZXIubGVuZ3RoO1xuICAgIGlmIChzZWxmLl9maWxlU2l6ZSA+IHNlbGYubWF4RmlsZVNpemUpIHtcbiAgICAgIHNlbGYuX2Vycm9yKG5ldyBFcnJvcignbWF4RmlsZVNpemUgZXhjZWVkZWQsIHJlY2VpdmVkICcrc2VsZi5fZmlsZVNpemUrJyBieXRlcyBvZiBmaWxlIGRhdGEnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChidWZmZXIubGVuZ3RoID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZi5wYXVzZSgpO1xuICAgIGZpbGUud3JpdGUoYnVmZmVyLCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVzdW1lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHBhcnQub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIGZpbGUuZW5kKGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5fZmx1c2hpbmctLTtcbiAgICAgIHNlbGYuZW1pdCgnZmlsZScsIHBhcnQubmFtZSwgZmlsZSk7XG4gICAgICBzZWxmLl9tYXliZUVuZCgpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGR1bW15UGFyc2VyKHNlbGYpIHtcbiAgcmV0dXJuIHtcbiAgICBlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW5kZWQgPSB0cnVlO1xuICAgICAgc2VsZi5fbWF5YmVFbmQoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuSW5jb21pbmdGb3JtLnByb3RvdHlwZS5fcGFyc2VDb250ZW50VHlwZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5ieXRlc0V4cGVjdGVkID09PSAwKSB7XG4gICAgdGhpcy5fcGFyc2VyID0gZHVtbXlQYXJzZXIodGhpcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0aGlzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSB7XG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdiYWQgY29udGVudC10eXBlIGhlYWRlciwgbm8gY29udGVudC10eXBlJykpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddLm1hdGNoKC9vY3RldC1zdHJlYW0vaSkpIHtcbiAgICB0aGlzLl9pbml0T2N0ZXRTdHJlYW0oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5oZWFkZXJzWydjb250ZW50LXR5cGUnXS5tYXRjaCgvdXJsZW5jb2RlZC9pKSkge1xuICAgIHRoaXMuX2luaXRVcmxlbmNvZGVkKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuaGVhZGVyc1snY29udGVudC10eXBlJ10ubWF0Y2goL211bHRpcGFydC9pKSkge1xuICAgIHZhciBtID0gdGhpcy5oZWFkZXJzWydjb250ZW50LXR5cGUnXS5tYXRjaCgvYm91bmRhcnk9KD86XCIoW15cIl0rKVwifChbXjtdKykpL2kpO1xuICAgIGlmIChtKSB7XG4gICAgICB0aGlzLl9pbml0TXVsdGlwYXJ0KG1bMV0gfHwgbVsyXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2Vycm9yKG5ldyBFcnJvcignYmFkIGNvbnRlbnQtdHlwZSBoZWFkZXIsIG5vIG11bHRpcGFydCBib3VuZGFyeScpKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuaGVhZGVyc1snY29udGVudC10eXBlJ10ubWF0Y2goL2pzb24vaSkpIHtcbiAgICB0aGlzLl9pbml0SlNPTmVuY29kZWQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9lcnJvcihuZXcgRXJyb3IoJ2JhZCBjb250ZW50LXR5cGUgaGVhZGVyLCB1bmtub3duIGNvbnRlbnQtdHlwZTogJyt0aGlzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSk7XG59O1xuXG5JbmNvbWluZ0Zvcm0ucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICBpZiAodGhpcy5lcnJvciB8fCB0aGlzLmVuZGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lcnJvciA9IGVycjtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcGVuZWRGaWxlcykpIHtcbiAgICB0aGlzLm9wZW5lZEZpbGVzLmZvckVhY2goZnVuY3Rpb24oZmlsZSkge1xuICAgICAgZmlsZS5fd3JpdGVTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgc2V0VGltZW91dChmcy51bmxpbmssIDAsIGZpbGUucGF0aCwgZnVuY3Rpb24oZXJyb3IpIHsgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX3BhcnNlQ29udGVudExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmJ5dGVzUmVjZWl2ZWQgPSAwO1xuICBpZiAodGhpcy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSB7XG4gICAgdGhpcy5ieXRlc0V4cGVjdGVkID0gcGFyc2VJbnQodGhpcy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddLCAxMCk7XG4gIH0gZWxzZSBpZiAodGhpcy5oZWFkZXJzWyd0cmFuc2Zlci1lbmNvZGluZyddID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmJ5dGVzRXhwZWN0ZWQgPSAwO1xuICB9XG5cbiAgaWYgKHRoaXMuYnl0ZXNFeHBlY3RlZCAhPT0gbnVsbCkge1xuICAgIHRoaXMuZW1pdCgncHJvZ3Jlc3MnLCB0aGlzLmJ5dGVzUmVjZWl2ZWQsIHRoaXMuYnl0ZXNFeHBlY3RlZCk7XG4gIH1cbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX25ld1BhcnNlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IE11bHRpcGFydFBhcnNlcigpO1xufTtcblxuSW5jb21pbmdGb3JtLnByb3RvdHlwZS5faW5pdE11bHRpcGFydCA9IGZ1bmN0aW9uKGJvdW5kYXJ5KSB7XG4gIHRoaXMudHlwZSA9ICdtdWx0aXBhcnQnO1xuXG4gIHZhciBwYXJzZXIgPSBuZXcgTXVsdGlwYXJ0UGFyc2VyKCksXG4gICAgICBzZWxmID0gdGhpcyxcbiAgICAgIGhlYWRlckZpZWxkLFxuICAgICAgaGVhZGVyVmFsdWUsXG4gICAgICBwYXJ0O1xuXG4gIHBhcnNlci5pbml0V2l0aEJvdW5kYXJ5KGJvdW5kYXJ5KTtcblxuICBwYXJzZXIub25QYXJ0QmVnaW4gPSBmdW5jdGlvbigpIHtcbiAgICBwYXJ0ID0gbmV3IFN0cmVhbSgpO1xuICAgIHBhcnQucmVhZGFibGUgPSB0cnVlO1xuICAgIHBhcnQuaGVhZGVycyA9IHt9O1xuICAgIHBhcnQubmFtZSA9IG51bGw7XG4gICAgcGFydC5maWxlbmFtZSA9IG51bGw7XG4gICAgcGFydC5taW1lID0gbnVsbDtcblxuICAgIHBhcnQudHJhbnNmZXJFbmNvZGluZyA9ICdiaW5hcnknO1xuICAgIHBhcnQudHJhbnNmZXJCdWZmZXIgPSAnJztcblxuICAgIGhlYWRlckZpZWxkID0gJyc7XG4gICAgaGVhZGVyVmFsdWUgPSAnJztcbiAgfTtcblxuICBwYXJzZXIub25IZWFkZXJGaWVsZCA9IGZ1bmN0aW9uKGIsIHN0YXJ0LCBlbmQpIHtcbiAgICBoZWFkZXJGaWVsZCArPSBiLnRvU3RyaW5nKHNlbGYuZW5jb2RpbmcsIHN0YXJ0LCBlbmQpO1xuICB9O1xuXG4gIHBhcnNlci5vbkhlYWRlclZhbHVlID0gZnVuY3Rpb24oYiwgc3RhcnQsIGVuZCkge1xuICAgIGhlYWRlclZhbHVlICs9IGIudG9TdHJpbmcoc2VsZi5lbmNvZGluZywgc3RhcnQsIGVuZCk7XG4gIH07XG5cbiAgcGFyc2VyLm9uSGVhZGVyRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgaGVhZGVyRmllbGQgPSBoZWFkZXJGaWVsZC50b0xvd2VyQ2FzZSgpO1xuICAgIHBhcnQuaGVhZGVyc1toZWFkZXJGaWVsZF0gPSBoZWFkZXJWYWx1ZTtcblxuICAgIC8vIG1hdGNoZXMgZWl0aGVyIGEgcXVvdGVkLXN0cmluZyBvciBhIHRva2VuIChSRkMgMjYxNiBzZWN0aW9uIDE5LjUuMSlcbiAgICB2YXIgbSA9IGhlYWRlclZhbHVlLm1hdGNoKC9cXGJuYW1lPShcIihbXlwiXSopXCJ8KFteXFwoXFwpPD5ALDs6XFxcXFwiXFwvXFxbXFxdXFw/PVxce1xcfVxcc1xcdC9dKykpL2kpO1xuICAgIGlmIChoZWFkZXJGaWVsZCA9PSAnY29udGVudC1kaXNwb3NpdGlvbicpIHtcbiAgICAgIGlmIChtKSB7XG4gICAgICAgIHBhcnQubmFtZSA9IG1bMl0gfHwgbVszXSB8fCAnJztcbiAgICAgIH1cblxuICAgICAgcGFydC5maWxlbmFtZSA9IHNlbGYuX2ZpbGVOYW1lKGhlYWRlclZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGhlYWRlckZpZWxkID09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICBwYXJ0Lm1pbWUgPSBoZWFkZXJWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKGhlYWRlckZpZWxkID09ICdjb250ZW50LXRyYW5zZmVyLWVuY29kaW5nJykge1xuICAgICAgcGFydC50cmFuc2ZlckVuY29kaW5nID0gaGVhZGVyVmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBoZWFkZXJGaWVsZCA9ICcnO1xuICAgIGhlYWRlclZhbHVlID0gJyc7XG4gIH07XG5cbiAgcGFyc2VyLm9uSGVhZGVyc0VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaChwYXJ0LnRyYW5zZmVyRW5jb2Rpbmcpe1xuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIGNhc2UgJzdiaXQnOlxuICAgICAgY2FzZSAnOGJpdCc6XG4gICAgICBwYXJzZXIub25QYXJ0RGF0YSA9IGZ1bmN0aW9uKGIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgcGFydC5lbWl0KCdkYXRhJywgYi5zbGljZShzdGFydCwgZW5kKSk7XG4gICAgICB9O1xuXG4gICAgICBwYXJzZXIub25QYXJ0RW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhcnQuZW1pdCgnZW5kJyk7XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBwYXJzZXIub25QYXJ0RGF0YSA9IGZ1bmN0aW9uKGIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgcGFydC50cmFuc2ZlckJ1ZmZlciArPSBiLnNsaWNlKHN0YXJ0LCBlbmQpLnRvU3RyaW5nKCdhc2NpaScpO1xuXG4gICAgICAgIC8qXG4gICAgICAgIGZvdXIgYnl0ZXMgKGNoYXJzKSBpbiBiYXNlNjQgY29udmVydHMgdG8gdGhyZWUgYnl0ZXMgaW4gYmluYXJ5XG4gICAgICAgIGVuY29kaW5nLiBTbyB3ZSBzaG91bGQgYWx3YXlzIHdvcmsgd2l0aCBhIG51bWJlciBvZiBieXRlcyB0aGF0XG4gICAgICAgIGNhbiBiZSBkaXZpZGVkIGJ5IDQsIGl0IHdpbGwgcmVzdWx0IGluIGEgbnVtYmVyIG9mIGJ1eXRlcyB0aGF0XG4gICAgICAgIGNhbiBiZSBkaXZpZGVkIHZ5IDMuXG4gICAgICAgICovXG4gICAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChwYXJ0LnRyYW5zZmVyQnVmZmVyLmxlbmd0aCAvIDQsIDEwKSAqIDQ7XG4gICAgICAgIHBhcnQuZW1pdCgnZGF0YScsIG5ldyBCdWZmZXIocGFydC50cmFuc2ZlckJ1ZmZlci5zdWJzdHJpbmcoMCwgb2Zmc2V0KSwgJ2Jhc2U2NCcpKTtcbiAgICAgICAgcGFydC50cmFuc2ZlckJ1ZmZlciA9IHBhcnQudHJhbnNmZXJCdWZmZXIuc3Vic3RyaW5nKG9mZnNldCk7XG4gICAgICB9O1xuXG4gICAgICBwYXJzZXIub25QYXJ0RW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhcnQuZW1pdCgnZGF0YScsIG5ldyBCdWZmZXIocGFydC50cmFuc2ZlckJ1ZmZlciwgJ2Jhc2U2NCcpKTtcbiAgICAgICAgcGFydC5lbWl0KCdlbmQnKTtcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzZWxmLl9lcnJvcihuZXcgRXJyb3IoJ3Vua25vd24gdHJhbnNmZXItZW5jb2RpbmcnKSk7XG4gICAgfVxuXG4gICAgc2VsZi5vblBhcnQocGFydCk7XG4gIH07XG5cblxuICBwYXJzZXIub25FbmQgPSBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVuZGVkID0gdHJ1ZTtcbiAgICBzZWxmLl9tYXliZUVuZCgpO1xuICB9O1xuXG4gIHRoaXMuX3BhcnNlciA9IHBhcnNlcjtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX2ZpbGVOYW1lID0gZnVuY3Rpb24oaGVhZGVyVmFsdWUpIHtcbiAgLy8gbWF0Y2hlcyBlaXRoZXIgYSBxdW90ZWQtc3RyaW5nIG9yIGEgdG9rZW4gKFJGQyAyNjE2IHNlY3Rpb24gMTkuNS4xKVxuICB2YXIgbSA9IGhlYWRlclZhbHVlLm1hdGNoKC9cXGJmaWxlbmFtZT0oXCIoLio/KVwifChbXlxcKFxcKTw+QCw7OlxcXFxcIlxcL1xcW1xcXVxcPz1cXHtcXH1cXHNcXHQvXSspKSgkfDtcXHMpL2kpO1xuICBpZiAoIW0pIHJldHVybjtcblxuICB2YXIgbWF0Y2ggPSBtWzJdIHx8IG1bM10gfHwgJyc7XG4gIHZhciBmaWxlbmFtZSA9IG1hdGNoLnN1YnN0cihtYXRjaC5sYXN0SW5kZXhPZignXFxcXCcpICsgMSk7XG4gIGZpbGVuYW1lID0gZmlsZW5hbWUucmVwbGFjZSgvJTIyL2csICdcIicpO1xuICBmaWxlbmFtZSA9IGZpbGVuYW1lLnJlcGxhY2UoLyYjKFtcXGRdezR9KTsvZywgZnVuY3Rpb24obSwgY29kZSkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICB9KTtcbiAgcmV0dXJuIGZpbGVuYW1lO1xufTtcblxuSW5jb21pbmdGb3JtLnByb3RvdHlwZS5faW5pdFVybGVuY29kZWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50eXBlID0gJ3VybGVuY29kZWQnO1xuXG4gIHZhciBwYXJzZXIgPSBuZXcgUXVlcnlzdHJpbmdQYXJzZXIodGhpcy5tYXhGaWVsZHMpXG4gICAgLCBzZWxmID0gdGhpcztcblxuICBwYXJzZXIub25GaWVsZCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgc2VsZi5lbWl0KCdmaWVsZCcsIGtleSwgdmFsKTtcbiAgfTtcblxuICBwYXJzZXIub25FbmQgPSBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVuZGVkID0gdHJ1ZTtcbiAgICBzZWxmLl9tYXliZUVuZCgpO1xuICB9O1xuXG4gIHRoaXMuX3BhcnNlciA9IHBhcnNlcjtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX2luaXRPY3RldFN0cmVhbSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnR5cGUgPSAnb2N0ZXQtc3RyZWFtJztcbiAgdmFyIGZpbGVuYW1lID0gdGhpcy5oZWFkZXJzWyd4LWZpbGUtbmFtZSddO1xuICB2YXIgbWltZSA9IHRoaXMuaGVhZGVyc1snY29udGVudC10eXBlJ107XG5cbiAgdmFyIGZpbGUgPSBuZXcgRmlsZSh7XG4gICAgcGF0aDogdGhpcy5fdXBsb2FkUGF0aChmaWxlbmFtZSksXG4gICAgbmFtZTogZmlsZW5hbWUsXG4gICAgdHlwZTogbWltZVxuICB9KTtcblxuICB0aGlzLmVtaXQoJ2ZpbGVCZWdpbicsIGZpbGVuYW1lLCBmaWxlKTtcbiAgZmlsZS5vcGVuKCk7XG4gIHRoaXMub3BlbmVkRmlsZXMucHVzaChmaWxlKTtcbiAgdGhpcy5fZmx1c2hpbmcrKztcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgc2VsZi5fcGFyc2VyID0gbmV3IE9jdGV0UGFyc2VyKCk7XG5cbiAgLy9LZWVwIHRyYWNrIG9mIHdyaXRlcyB0aGF0IGhhdmVuJ3QgZmluaXNoZWQgc28gd2UgZG9uJ3QgZW1pdCB0aGUgZmlsZSBiZWZvcmUgaXQncyBkb25lIGJlaW5nIHdyaXR0ZW5cbiAgdmFyIG91dHN0YW5kaW5nV3JpdGVzID0gMDtcblxuICBzZWxmLl9wYXJzZXIub24oJ2RhdGEnLCBmdW5jdGlvbihidWZmZXIpe1xuICAgIHNlbGYucGF1c2UoKTtcbiAgICBvdXRzdGFuZGluZ1dyaXRlcysrO1xuXG4gICAgZmlsZS53cml0ZShidWZmZXIsIGZ1bmN0aW9uKCkge1xuICAgICAgb3V0c3RhbmRpbmdXcml0ZXMtLTtcbiAgICAgIHNlbGYucmVzdW1lKCk7XG5cbiAgICAgIGlmKHNlbGYuZW5kZWQpe1xuICAgICAgICBzZWxmLl9wYXJzZXIuZW1pdCgnZG9uZVdyaXRpbmdGaWxlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHNlbGYuX3BhcnNlci5vbignZW5kJywgZnVuY3Rpb24oKXtcbiAgICBzZWxmLl9mbHVzaGluZy0tO1xuICAgIHNlbGYuZW5kZWQgPSB0cnVlO1xuXG4gICAgdmFyIGRvbmUgPSBmdW5jdGlvbigpe1xuICAgICAgZmlsZS5lbmQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZmlsZScsICdmaWxlJywgZmlsZSk7XG4gICAgICAgIHNlbGYuX21heWJlRW5kKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYob3V0c3RhbmRpbmdXcml0ZXMgPT09IDApe1xuICAgICAgZG9uZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLl9wYXJzZXIub25jZSgnZG9uZVdyaXRpbmdGaWxlJywgZG9uZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX2luaXRKU09OZW5jb2RlZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnR5cGUgPSAnanNvbic7XG5cbiAgdmFyIHBhcnNlciA9IG5ldyBKU09OUGFyc2VyKHRoaXMpXG4gICAgLCBzZWxmID0gdGhpcztcblxuICBwYXJzZXIub25GaWVsZCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgc2VsZi5lbWl0KCdmaWVsZCcsIGtleSwgdmFsKTtcbiAgfTtcblxuICBwYXJzZXIub25FbmQgPSBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVuZGVkID0gdHJ1ZTtcbiAgICBzZWxmLl9tYXliZUVuZCgpO1xuICB9O1xuXG4gIHRoaXMuX3BhcnNlciA9IHBhcnNlcjtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX3VwbG9hZFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICB2YXIgYnVmID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTtcbiAgdmFyIG5hbWUgPSAndXBsb2FkXycgKyBidWYudG9TdHJpbmcoJ2hleCcpO1xuXG4gIGlmICh0aGlzLmtlZXBFeHRlbnNpb25zKSB7XG4gICAgdmFyIGV4dCA9IHBhdGguZXh0bmFtZShmaWxlbmFtZSk7XG4gICAgZXh0ICAgICA9IGV4dC5yZXBsYWNlKC8oXFwuW2EtejAtOV0rKS4qL2ksICckMScpO1xuXG4gICAgbmFtZSArPSBleHQ7XG4gIH1cblxuICByZXR1cm4gcGF0aC5qb2luKHRoaXMudXBsb2FkRGlyLCBuYW1lKTtcbn07XG5cbkluY29taW5nRm9ybS5wcm90b3R5cGUuX21heWJlRW5kID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5lbmRlZCB8fCB0aGlzLl9mbHVzaGluZyB8fCB0aGlzLmVycm9yKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbWl0KCdlbmQnKTtcbn07XG4iLCJpZiAoZ2xvYmFsLkdFTlRMWSkgcmVxdWlyZSA9IEdFTlRMWS5oaWphY2socmVxdWlyZSk7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXIsXG4gICAgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmZ1bmN0aW9uIEZpbGUocHJvcGVydGllcykge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLm5hbWUgPSBudWxsO1xuICB0aGlzLnR5cGUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLmxhc3RNb2RpZmllZERhdGUgPSBudWxsO1xuXG4gIHRoaXMuX3dyaXRlU3RyZWFtID0gbnVsbDtcbiAgXG4gIGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgdGhpc1trZXldID0gcHJvcGVydGllc1trZXldO1xuICB9XG5cbiAgaWYodHlwZW9mIHRoaXMuaGFzaCA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLmhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChwcm9wZXJ0aWVzLmhhc2gpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaGFzaCA9IG51bGw7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gRmlsZTtcbnV0aWwuaW5oZXJpdHMoRmlsZSwgRXZlbnRFbWl0dGVyKTtcblxuRmlsZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl93cml0ZVN0cmVhbSA9IG5ldyBmcy5Xcml0ZVN0cmVhbSh0aGlzLnBhdGgpO1xufTtcblxuRmlsZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gIHZhciBqc29uID0ge1xuICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgbmFtZTogdGhpcy5uYW1lLFxuICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICBtdGltZTogdGhpcy5sYXN0TW9kaWZpZWREYXRlLFxuICAgIGxlbmd0aDogdGhpcy5sZW5ndGgsXG4gICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWUsXG4gICAgbWltZTogdGhpcy5taW1lXG4gIH07XG4gIGlmICh0aGlzLmhhc2ggJiYgdGhpcy5oYXNoICE9IFwiXCIpIHtcbiAgICBqc29uLmhhc2ggPSB0aGlzLmhhc2g7XG4gIH1cbiAgcmV0dXJuIGpzb247XG59O1xuXG5GaWxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlciwgY2IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoc2VsZi5oYXNoKSB7XG4gICAgc2VsZi5oYXNoLnVwZGF0ZShidWZmZXIpO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRlU3RyZWFtLmNsb3NlZCkge1xuICAgIHJldHVybiBjYigpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGVTdHJlYW0ud3JpdGUoYnVmZmVyLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmxhc3RNb2RpZmllZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIHNlbGYuc2l6ZSArPSBidWZmZXIubGVuZ3RoO1xuICAgIHNlbGYuZW1pdCgncHJvZ3Jlc3MnLCBzZWxmLnNpemUpO1xuICAgIGNiKCk7XG4gIH0pO1xufTtcblxuRmlsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoc2VsZi5oYXNoKSB7XG4gICAgc2VsZi5oYXNoID0gc2VsZi5oYXNoLmRpZ2VzdCgnaGV4Jyk7XG4gIH1cbiAgdGhpcy5fd3JpdGVTdHJlYW0uZW5kKGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnZW5kJyk7XG4gICAgY2IoKTtcbiAgfSk7XG59O1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcixcbiAgICBzID0gMCxcbiAgICBTID1cbiAgICB7IFBBUlNFUl9VTklOSVRJQUxJWkVEOiBzKyssXG4gICAgICBTVEFSVDogcysrLFxuICAgICAgU1RBUlRfQk9VTkRBUlk6IHMrKyxcbiAgICAgIEhFQURFUl9GSUVMRF9TVEFSVDogcysrLFxuICAgICAgSEVBREVSX0ZJRUxEOiBzKyssXG4gICAgICBIRUFERVJfVkFMVUVfU1RBUlQ6IHMrKyxcbiAgICAgIEhFQURFUl9WQUxVRTogcysrLFxuICAgICAgSEVBREVSX1ZBTFVFX0FMTU9TVF9ET05FOiBzKyssXG4gICAgICBIRUFERVJTX0FMTU9TVF9ET05FOiBzKyssXG4gICAgICBQQVJUX0RBVEFfU1RBUlQ6IHMrKyxcbiAgICAgIFBBUlRfREFUQTogcysrLFxuICAgICAgUEFSVF9FTkQ6IHMrKyxcbiAgICAgIEVORDogcysrXG4gICAgfSxcblxuICAgIGYgPSAxLFxuICAgIEYgPVxuICAgIHsgUEFSVF9CT1VOREFSWTogZixcbiAgICAgIExBU1RfQk9VTkRBUlk6IGYgKj0gMlxuICAgIH0sXG5cbiAgICBMRiA9IDEwLFxuICAgIENSID0gMTMsXG4gICAgU1BBQ0UgPSAzMixcbiAgICBIWVBIRU4gPSA0NSxcbiAgICBDT0xPTiA9IDU4LFxuICAgIEEgPSA5NyxcbiAgICBaID0gMTIyLFxuXG4gICAgbG93ZXIgPSBmdW5jdGlvbihjKSB7XG4gICAgICByZXR1cm4gYyB8IDB4MjA7XG4gICAgfTtcblxuZm9yIChzIGluIFMpIHtcbiAgZXhwb3J0c1tzXSA9IFNbc107XG59XG5cbmZ1bmN0aW9uIE11bHRpcGFydFBhcnNlcigpIHtcbiAgdGhpcy5ib3VuZGFyeSA9IG51bGw7XG4gIHRoaXMuYm91bmRhcnlDaGFycyA9IG51bGw7XG4gIHRoaXMubG9va2JlaGluZCA9IG51bGw7XG4gIHRoaXMuc3RhdGUgPSBTLlBBUlNFUl9VTklOSVRJQUxJWkVEO1xuXG4gIHRoaXMuaW5kZXggPSBudWxsO1xuICB0aGlzLmZsYWdzID0gMDtcbn1cbmV4cG9ydHMuTXVsdGlwYXJ0UGFyc2VyID0gTXVsdGlwYXJ0UGFyc2VyO1xuXG5NdWx0aXBhcnRQYXJzZXIuc3RhdGVUb1N0cmluZyA9IGZ1bmN0aW9uKHN0YXRlTnVtYmVyKSB7XG4gIGZvciAodmFyIHN0YXRlIGluIFMpIHtcbiAgICB2YXIgbnVtYmVyID0gU1tzdGF0ZV07XG4gICAgaWYgKG51bWJlciA9PT0gc3RhdGVOdW1iZXIpIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuTXVsdGlwYXJ0UGFyc2VyLnByb3RvdHlwZS5pbml0V2l0aEJvdW5kYXJ5ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHRoaXMuYm91bmRhcnkgPSBuZXcgQnVmZmVyKHN0ci5sZW5ndGgrNCk7XG4gIHRoaXMuYm91bmRhcnkud3JpdGUoJ1xcclxcbi0tJywgMCk7XG4gIHRoaXMuYm91bmRhcnkud3JpdGUoc3RyLCA0KTtcbiAgdGhpcy5sb29rYmVoaW5kID0gbmV3IEJ1ZmZlcih0aGlzLmJvdW5kYXJ5Lmxlbmd0aCs4KTtcbiAgdGhpcy5zdGF0ZSA9IFMuU1RBUlQ7XG5cbiAgdGhpcy5ib3VuZGFyeUNoYXJzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib3VuZGFyeS5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuYm91bmRhcnlDaGFyc1t0aGlzLmJvdW5kYXJ5W2ldXSA9IHRydWU7XG4gIH1cbn07XG5cbk11bHRpcGFydFBhcnNlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcHJldkluZGV4ID0gdGhpcy5pbmRleCxcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleCxcbiAgICAgIHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgIGZsYWdzID0gdGhpcy5mbGFncyxcbiAgICAgIGxvb2tiZWhpbmQgPSB0aGlzLmxvb2tiZWhpbmQsXG4gICAgICBib3VuZGFyeSA9IHRoaXMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeUNoYXJzID0gdGhpcy5ib3VuZGFyeUNoYXJzLFxuICAgICAgYm91bmRhcnlMZW5ndGggPSB0aGlzLmJvdW5kYXJ5Lmxlbmd0aCxcbiAgICAgIGJvdW5kYXJ5RW5kID0gYm91bmRhcnlMZW5ndGggLSAxLFxuICAgICAgYnVmZmVyTGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIGMsXG4gICAgICBjbCxcblxuICAgICAgbWFyayA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgc2VsZltuYW1lKydNYXJrJ10gPSBpO1xuICAgICAgfSxcbiAgICAgIGNsZWFyID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBkZWxldGUgc2VsZltuYW1lKydNYXJrJ107XG4gICAgICB9LFxuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihuYW1lLCBidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKHN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgc3RhcnQgPT09IGVuZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWxsYmFja1N5bWJvbCA9ICdvbicrbmFtZS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKStuYW1lLnN1YnN0cigxKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrU3ltYm9sIGluIHNlbGYpIHtcbiAgICAgICAgICBzZWxmW2NhbGxiYWNrU3ltYm9sXShidWZmZXIsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGF0YUNhbGxiYWNrID0gZnVuY3Rpb24obmFtZSwgY2xlYXIpIHtcbiAgICAgICAgdmFyIG1hcmtTeW1ib2wgPSBuYW1lKydNYXJrJztcbiAgICAgICAgaWYgKCEobWFya1N5bWJvbCBpbiBzZWxmKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY2xlYXIpIHtcbiAgICAgICAgICBjYWxsYmFjayhuYW1lLCBidWZmZXIsIHNlbGZbbWFya1N5bWJvbF0sIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgIHNlbGZbbWFya1N5bWJvbF0gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKG5hbWUsIGJ1ZmZlciwgc2VsZlttYXJrU3ltYm9sXSwgaSk7XG4gICAgICAgICAgZGVsZXRlIHNlbGZbbWFya1N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYyA9IGJ1ZmZlcltpXTtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFMuUEFSU0VSX1VOSU5JVElBTElaRUQ6XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgY2FzZSBTLlNUQVJUOlxuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHN0YXRlID0gUy5TVEFSVF9CT1VOREFSWTtcbiAgICAgIGNhc2UgUy5TVEFSVF9CT1VOREFSWTpcbiAgICAgICAgaWYgKGluZGV4ID09IGJvdW5kYXJ5Lmxlbmd0aCAtIDIpIHtcbiAgICAgICAgICBpZiAoYyA9PSBIWVBIRU4pIHtcbiAgICAgICAgICAgIGZsYWdzIHw9IEYuTEFTVF9CT1VOREFSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgIT0gQ1IpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IC0gMSA9PSBib3VuZGFyeS5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgaWYgKGZsYWdzICYgRi5MQVNUX0JPVU5EQVJZICYmIGMgPT0gSFlQSEVOKXtcbiAgICAgICAgICAgIGNhbGxiYWNrKCdlbmQnKTtcbiAgICAgICAgICAgIHN0YXRlID0gUy5FTkQ7XG4gICAgICAgICAgICBmbGFncyA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmICghKGZsYWdzICYgRi5MQVNUX0JPVU5EQVJZKSAmJiBjID09IExGKSB7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICBjYWxsYmFjaygncGFydEJlZ2luJyk7XG4gICAgICAgICAgICBzdGF0ZSA9IFMuSEVBREVSX0ZJRUxEX1NUQVJUO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyAhPSBib3VuZGFyeVtpbmRleCsyXSkge1xuICAgICAgICAgIGluZGV4ID0gLTI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMgPT0gYm91bmRhcnlbaW5kZXgrMl0pIHtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTLkhFQURFUl9GSUVMRF9TVEFSVDpcbiAgICAgICAgc3RhdGUgPSBTLkhFQURFUl9GSUVMRDtcbiAgICAgICAgbWFyaygnaGVhZGVyRmllbGQnKTtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgY2FzZSBTLkhFQURFUl9GSUVMRDpcbiAgICAgICAgaWYgKGMgPT0gQ1IpIHtcbiAgICAgICAgICBjbGVhcignaGVhZGVyRmllbGQnKTtcbiAgICAgICAgICBzdGF0ZSA9IFMuSEVBREVSU19BTE1PU1RfRE9ORTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGlmIChjID09IEhZUEhFTikge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPT0gQ09MT04pIHtcbiAgICAgICAgICBpZiAoaW5kZXggPT0gMSkge1xuICAgICAgICAgICAgLy8gZW1wdHkgaGVhZGVyIGZpZWxkXG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YUNhbGxiYWNrKCdoZWFkZXJGaWVsZCcsIHRydWUpO1xuICAgICAgICAgIHN0YXRlID0gUy5IRUFERVJfVkFMVUVfU1RBUlQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjbCA9IGxvd2VyKGMpO1xuICAgICAgICBpZiAoY2wgPCBBIHx8IGNsID4gWikge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTLkhFQURFUl9WQUxVRV9TVEFSVDpcbiAgICAgICAgaWYgKGMgPT0gU1BBQ0UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmsoJ2hlYWRlclZhbHVlJyk7XG4gICAgICAgIHN0YXRlID0gUy5IRUFERVJfVkFMVUU7XG4gICAgICBjYXNlIFMuSEVBREVSX1ZBTFVFOlxuICAgICAgICBpZiAoYyA9PSBDUikge1xuICAgICAgICAgIGRhdGFDYWxsYmFjaygnaGVhZGVyVmFsdWUnLCB0cnVlKTtcbiAgICAgICAgICBjYWxsYmFjaygnaGVhZGVyRW5kJyk7XG4gICAgICAgICAgc3RhdGUgPSBTLkhFQURFUl9WQUxVRV9BTE1PU1RfRE9ORTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUy5IRUFERVJfVkFMVUVfQUxNT1NUX0RPTkU6XG4gICAgICAgIGlmIChjICE9IExGKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBTLkhFQURFUl9GSUVMRF9TVEFSVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFMuSEVBREVSU19BTE1PU1RfRE9ORTpcbiAgICAgICAgaWYgKGMgIT0gTEYpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKCdoZWFkZXJzRW5kJyk7XG4gICAgICAgIHN0YXRlID0gUy5QQVJUX0RBVEFfU1RBUlQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTLlBBUlRfREFUQV9TVEFSVDpcbiAgICAgICAgc3RhdGUgPSBTLlBBUlRfREFUQTtcbiAgICAgICAgbWFyaygncGFydERhdGEnKTtcbiAgICAgIGNhc2UgUy5QQVJUX0RBVEE6XG4gICAgICAgIHByZXZJbmRleCA9IGluZGV4O1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIGJveWVyLW1vb3JlIGRlcnJpdmVkIGFsZ29yaXRobSB0byBzYWZlbHkgc2tpcCBub24tYm91bmRhcnkgZGF0YVxuICAgICAgICAgIGkgKz0gYm91bmRhcnlFbmQ7XG4gICAgICAgICAgd2hpbGUgKGkgPCBidWZmZXJMZW5ndGggJiYgIShidWZmZXJbaV0gaW4gYm91bmRhcnlDaGFycykpIHtcbiAgICAgICAgICAgIGkgKz0gYm91bmRhcnlMZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkgLT0gYm91bmRhcnlFbmQ7XG4gICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA8IGJvdW5kYXJ5Lmxlbmd0aCkge1xuICAgICAgICAgIGlmIChib3VuZGFyeVtpbmRleF0gPT0gYykge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgIGRhdGFDYWxsYmFjaygncGFydERhdGEnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT0gYm91bmRhcnkubGVuZ3RoKSB7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBpZiAoYyA9PSBDUikge1xuICAgICAgICAgICAgLy8gQ1IgPSBwYXJ0IGJvdW5kYXJ5XG4gICAgICAgICAgICBmbGFncyB8PSBGLlBBUlRfQk9VTkRBUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09IEhZUEhFTikge1xuICAgICAgICAgICAgLy8gSFlQSEVOID0gZW5kIGJvdW5kYXJ5XG4gICAgICAgICAgICBmbGFncyB8PSBGLkxBU1RfQk9VTkRBUlk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggLSAxID09IGJvdW5kYXJ5Lmxlbmd0aCkgIHtcbiAgICAgICAgICBpZiAoZmxhZ3MgJiBGLlBBUlRfQk9VTkRBUlkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgIGlmIChjID09IExGKSB7XG4gICAgICAgICAgICAgIC8vIHVuc2V0IHRoZSBQQVJUX0JPVU5EQVJZIGZsYWdcbiAgICAgICAgICAgICAgZmxhZ3MgJj0gfkYuUEFSVF9CT1VOREFSWTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soJ3BhcnRFbmQnKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soJ3BhcnRCZWdpbicpO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFMuSEVBREVSX0ZJRUxEX1NUQVJUO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGZsYWdzICYgRi5MQVNUX0JPVU5EQVJZKSB7XG4gICAgICAgICAgICBpZiAoYyA9PSBIWVBIRU4pIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soJ3BhcnRFbmQnKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soJ2VuZCcpO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFMuRU5EO1xuICAgICAgICAgICAgICBmbGFncyA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgLy8gd2hlbiBtYXRjaGluZyBhIHBvc3NpYmxlIGJvdW5kYXJ5LCBrZWVwIGEgbG9va2JlaGluZCByZWZlcmVuY2VcbiAgICAgICAgICAvLyBpbiBjYXNlIGl0IHR1cm5zIG91dCB0byBiZSBhIGZhbHNlIGxlYWRcbiAgICAgICAgICBsb29rYmVoaW5kW2luZGV4LTFdID0gYztcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2SW5kZXggPiAwKSB7XG4gICAgICAgICAgLy8gaWYgb3VyIGJvdW5kYXJ5IHR1cm5lZCBvdXQgdG8gYmUgcnViYmlzaCwgdGhlIGNhcHR1cmVkIGxvb2tiZWhpbmRcbiAgICAgICAgICAvLyBiZWxvbmdzIHRvIHBhcnREYXRhXG4gICAgICAgICAgY2FsbGJhY2soJ3BhcnREYXRhJywgbG9va2JlaGluZCwgMCwgcHJldkluZGV4KTtcbiAgICAgICAgICBwcmV2SW5kZXggPSAwO1xuICAgICAgICAgIG1hcmsoJ3BhcnREYXRhJyk7XG5cbiAgICAgICAgICAvLyByZWNvbnNpZGVyIHRoZSBjdXJyZW50IGNoYXJhY3RlciBldmVuIHNvIGl0IGludGVycnVwdGVkIHRoZSBzZXF1ZW5jZVxuICAgICAgICAgIC8vIGl0IGNvdWxkIGJlIHRoZSBiZWdpbm5pbmcgb2YgYSBuZXcgc2VxdWVuY2VcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUy5FTkQ6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgZGF0YUNhbGxiYWNrKCdoZWFkZXJGaWVsZCcpO1xuICBkYXRhQ2FsbGJhY2soJ2hlYWRlclZhbHVlJyk7XG4gIGRhdGFDYWxsYmFjaygncGFydERhdGEnKTtcblxuICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgdGhpcy5mbGFncyA9IGZsYWdzO1xuXG4gIHJldHVybiBsZW47XG59O1xuXG5NdWx0aXBhcnRQYXJzZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihzZWxmLCBuYW1lKSB7XG4gICAgdmFyIGNhbGxiYWNrU3ltYm9sID0gJ29uJytuYW1lLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpK25hbWUuc3Vic3RyKDEpO1xuICAgIGlmIChjYWxsYmFja1N5bWJvbCBpbiBzZWxmKSB7XG4gICAgICBzZWxmW2NhbGxiYWNrU3ltYm9sXSgpO1xuICAgIH1cbiAgfTtcbiAgaWYgKCh0aGlzLnN0YXRlID09IFMuSEVBREVSX0ZJRUxEX1NUQVJUICYmIHRoaXMuaW5kZXggPT09IDApIHx8XG4gICAgICAodGhpcy5zdGF0ZSA9PSBTLlBBUlRfREFUQSAmJiB0aGlzLmluZGV4ID09IHRoaXMuYm91bmRhcnkubGVuZ3RoKSkge1xuICAgIGNhbGxiYWNrKHRoaXMsICdwYXJ0RW5kJyk7XG4gICAgY2FsbGJhY2sodGhpcywgJ2VuZCcpO1xuICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgIT0gUy5FTkQpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdNdWx0aXBhcnRQYXJzZXIuZW5kKCk6IHN0cmVhbSBlbmRlZCB1bmV4cGVjdGVkbHk6ICcgKyB0aGlzLmV4cGxhaW4oKSk7XG4gIH1cbn07XG5cbk11bHRpcGFydFBhcnNlci5wcm90b3R5cGUuZXhwbGFpbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ3N0YXRlID0gJyArIE11bHRpcGFydFBhcnNlci5zdGF0ZVRvU3RyaW5nKHRoaXMuc3RhdGUpO1xufTtcbiIsImlmIChnbG9iYWwuR0VOVExZKSByZXF1aXJlID0gR0VOVExZLmhpamFjayhyZXF1aXJlKTtcblxuLy8gVGhpcyBpcyBhIGJ1ZmZlcmluZyBwYXJzZXIsIG5vdCBxdWl0ZSBhcyBuaWNlIGFzIHRoZSBtdWx0aXBhcnQgb25lLlxuLy8gSWYgSSBmaW5kIHRpbWUgSSdsbCByZXdyaXRlIHRoaXMgdG8gYmUgZnVsbHkgc3RyZWFtaW5nIGFzIHdlbGxcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIFF1ZXJ5c3RyaW5nUGFyc2VyKG1heEtleXMpIHtcbiAgdGhpcy5tYXhLZXlzID0gbWF4S2V5cztcbiAgdGhpcy5idWZmZXIgPSAnJztcbn1cbmV4cG9ydHMuUXVlcnlzdHJpbmdQYXJzZXIgPSBRdWVyeXN0cmluZ1BhcnNlcjtcblxuUXVlcnlzdHJpbmdQYXJzZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHRoaXMuYnVmZmVyICs9IGJ1ZmZlci50b1N0cmluZygnYXNjaWknKTtcbiAgcmV0dXJuIGJ1ZmZlci5sZW5ndGg7XG59O1xuXG5RdWVyeXN0cmluZ1BhcnNlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmaWVsZHMgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLmJ1ZmZlciwgJyYnLCAnPScsIHsgbWF4S2V5czogdGhpcy5tYXhLZXlzIH0pO1xuICBmb3IgKHZhciBmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICB0aGlzLm9uRmllbGQoZmllbGQsIGZpZWxkc1tmaWVsZF0pO1xuICB9XG4gIHRoaXMuYnVmZmVyID0gJyc7XG5cbiAgdGhpcy5vbkVuZCgpO1xufTtcblxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7IiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuXHQsIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIE9jdGV0UGFyc2VyKG9wdGlvbnMpe1xuXHRpZighKHRoaXMgaW5zdGFuY2VvZiBPY3RldFBhcnNlcikpIHJldHVybiBuZXcgT2N0ZXRQYXJzZXIob3B0aW9ucyk7XG5cdEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xufVxuXG51dGlsLmluaGVyaXRzKE9jdGV0UGFyc2VyLCBFdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzLk9jdGV0UGFyc2VyID0gT2N0ZXRQYXJzZXI7XG5cbk9jdGV0UGFyc2VyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgIHRoaXMuZW1pdCgnZGF0YScsIGJ1ZmZlcik7XG5cdHJldHVybiBidWZmZXIubGVuZ3RoO1xufTtcblxuT2N0ZXRQYXJzZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuXHR0aGlzLmVtaXQoJ2VuZCcpO1xufTtcbiIsImlmIChnbG9iYWwuR0VOVExZKSByZXF1aXJlID0gR0VOVExZLmhpamFjayhyZXF1aXJlKTtcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gSlNPTlBhcnNlcihwYXJlbnQpIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuYnl0ZXNXcml0dGVuID0gMDtcbn1cbmV4cG9ydHMuSlNPTlBhcnNlciA9IEpTT05QYXJzZXI7XG5cbkpTT05QYXJzZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHRoaXMuYnl0ZXNXcml0dGVuICs9IGJ1ZmZlci5sZW5ndGg7XG4gIHRoaXMuY2h1bmtzLnB1c2goYnVmZmVyKTtcbiAgcmV0dXJuIGJ1ZmZlci5sZW5ndGg7XG59O1xuXG5KU09OUGFyc2VyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZmllbGRzID0gSlNPTi5wYXJzZShCdWZmZXIuY29uY2F0KHRoaXMuY2h1bmtzKSk7XG4gICAgZm9yICh2YXIgZmllbGQgaW4gZmllbGRzKSB7XG4gICAgICB0aGlzLm9uRmllbGQoZmllbGQsIGZpZWxkc1tmaWVsZF0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMucGFyZW50LmVtaXQoJ2Vycm9yJywgZSk7XG4gIH1cbiAgdGhpcy5kYXRhID0gbnVsbDtcblxuICB0aGlzLm9uRW5kKCk7XG59O1xuIiwidmFyIENvbWJpbmVkU3RyZWFtID0gcmVxdWlyZSgnY29tYmluZWQtc3RyZWFtJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xudmFyIHBhcnNlVXJsID0gcmVxdWlyZSgndXJsJykucGFyc2U7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIG1pbWUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJyk7XG52YXIgYXN5bmNraXQgPSByZXF1aXJlKCdhc3luY2tpdCcpO1xudmFyIHBvcHVsYXRlID0gcmVxdWlyZSgnLi9wb3B1bGF0ZS5qcycpO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1EYXRhO1xuXG4vLyBtYWtlIGl0IGEgU3RyZWFtXG51dGlsLmluaGVyaXRzKEZvcm1EYXRhLCBDb21iaW5lZFN0cmVhbSk7XG5cbi8qKlxuICogQ3JlYXRlIHJlYWRhYmxlIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIHN0cmVhbXMuXG4gKiBDYW4gYmUgdXNlZCB0byBzdWJtaXQgZm9ybXNcbiAqIGFuZCBmaWxlIHVwbG9hZHMgdG8gb3RoZXIgd2ViIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUHJvcGVydGllcyB0byBiZSBhZGRlZC9vdmVycmlkZW4gZm9yIEZvcm1EYXRhIGFuZCBDb21iaW5lZFN0cmVhbVxuICovXG5mdW5jdGlvbiBGb3JtRGF0YShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGb3JtRGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1EYXRhKCk7XG4gIH1cblxuICB0aGlzLl9vdmVyaGVhZExlbmd0aCA9IDA7XG4gIHRoaXMuX3ZhbHVlTGVuZ3RoID0gMDtcbiAgdGhpcy5fdmFsdWVzVG9NZWFzdXJlID0gW107XG5cbiAgQ29tYmluZWRTdHJlYW0uY2FsbCh0aGlzKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICB0aGlzW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gIH1cbn1cblxuRm9ybURhdGEuTElORV9CUkVBSyA9ICdcXHJcXG4nO1xuRm9ybURhdGEuREVGQVVMVF9DT05URU5UX1RZUEUgPSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcblxuRm9ybURhdGEucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucykge1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIGFsbG93IGZpbGVuYW1lIGFzIHNpbmdsZSBvcHRpb25cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHtmaWxlbmFtZTogb3B0aW9uc307XG4gIH1cblxuICB2YXIgYXBwZW5kID0gQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmFwcGVuZC5iaW5kKHRoaXMpO1xuXG4gIC8vIGFsbCB0aGF0IHN0cmVhbXkgYnVzaW5lc3MgY2FuJ3QgaGFuZGxlIG51bWJlcnNcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHZhbHVlID0gJycgKyB2YWx1ZTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxpeGdlL25vZGUtZm9ybS1kYXRhL2lzc3Vlcy8zOFxuICBpZiAodXRpbC5pc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFBsZWFzZSBjb252ZXJ0IHlvdXIgYXJyYXkgaW50byBzdHJpbmdcbiAgICAvLyB0aGUgd2F5IHdlYiBzZXJ2ZXIgZXhwZWN0cyBpdFxuICAgIHRoaXMuX2Vycm9yKG5ldyBFcnJvcignQXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkLicpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaGVhZGVyID0gdGhpcy5fbXVsdGlQYXJ0SGVhZGVyKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucyk7XG4gIHZhciBmb290ZXIgPSB0aGlzLl9tdWx0aVBhcnRGb290ZXIoKTtcblxuICBhcHBlbmQoaGVhZGVyKTtcbiAgYXBwZW5kKHZhbHVlKTtcbiAgYXBwZW5kKGZvb3Rlcik7XG5cbiAgLy8gcGFzcyBhbG9uZyBvcHRpb25zLmtub3duTGVuZ3RoXG4gIHRoaXMuX3RyYWNrTGVuZ3RoKGhlYWRlciwgdmFsdWUsIG9wdGlvbnMpO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl90cmFja0xlbmd0aCA9IGZ1bmN0aW9uKGhlYWRlciwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHZhbHVlTGVuZ3RoID0gMDtcblxuICAvLyB1c2VkIHcvIGdldExlbmd0aFN5bmMoKSwgd2hlbiBsZW5ndGggaXMga25vd24uXG4gIC8vIGUuZy4gZm9yIHN0cmVhbWluZyBkaXJlY3RseSBmcm9tIGEgcmVtb3RlIHNlcnZlcixcbiAgLy8gdy8gYSBrbm93biBmaWxlIGEgc2l6ZSwgYW5kIG5vdCB3YW50aW5nIHRvIHdhaXQgZm9yXG4gIC8vIGluY29taW5nIGZpbGUgdG8gZmluaXNoIHRvIGdldCBpdHMgc2l6ZS5cbiAgaWYgKG9wdGlvbnMua25vd25MZW5ndGggIT0gbnVsbCkge1xuICAgIHZhbHVlTGVuZ3RoICs9ICtvcHRpb25zLmtub3duTGVuZ3RoO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICB2YWx1ZUxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWVMZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7XG4gIH1cblxuICB0aGlzLl92YWx1ZUxlbmd0aCArPSB2YWx1ZUxlbmd0aDtcblxuICAvLyBAY2hlY2sgd2h5IGFkZCBDUkxGPyBkb2VzIHRoaXMgYWNjb3VudCBmb3IgY3VzdG9tL211bHRpcGxlIENSTEZzP1xuICB0aGlzLl9vdmVyaGVhZExlbmd0aCArPVxuICAgIEJ1ZmZlci5ieXRlTGVuZ3RoKGhlYWRlcikgK1xuICAgIEZvcm1EYXRhLkxJTkVfQlJFQUsubGVuZ3RoO1xuXG4gIC8vIGVtcHR5IG9yIGVpdGhlciBkb2Vzbid0IGhhdmUgcGF0aCBvciBub3QgYW4gaHR0cCByZXNwb25zZVxuICBpZiAoIXZhbHVlIHx8ICggIXZhbHVlLnBhdGggJiYgISh2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkgKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG5vIG5lZWQgdG8gYm90aGVyIHdpdGggdGhlIGxlbmd0aFxuICBpZiAoIW9wdGlvbnMua25vd25MZW5ndGgpIHtcbiAgICB0aGlzLl92YWx1ZXNUb01lYXN1cmUucHVzaCh2YWx1ZSk7XG4gIH1cbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbGVuZ3RoUmV0cmlldmVyID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrKSB7XG5cbiAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdmZCcpKSB7XG5cbiAgICAvLyB0YWtlIHJlYWQgcmFuZ2UgaW50byBhIGFjY291bnRcbiAgICAvLyBgZW5kYCA9IEluZmluaXR5IOKAkz4gcmVhZCBmaWxlIHRpbGwgdGhlIGVuZFxuICAgIC8vXG4gICAgLy8gVE9ETzogTG9va3MgbGlrZSB0aGVyZSBpcyBidWcgaW4gTm9kZSBmcy5jcmVhdGVSZWFkU3RyZWFtXG4gICAgLy8gaXQgZG9lc24ndCByZXNwZWN0IGBlbmRgIG9wdGlvbnMgd2l0aG91dCBgc3RhcnRgIG9wdGlvbnNcbiAgICAvLyBGaXggaXQgd2hlbiBub2RlIGZpeGVzIGl0LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvNzgxOVxuICAgIGlmICh2YWx1ZS5lbmQgIT0gdW5kZWZpbmVkICYmIHZhbHVlLmVuZCAhPSBJbmZpbml0eSAmJiB2YWx1ZS5zdGFydCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgLy8gd2hlbiBlbmQgc3BlY2lmaWVkXG4gICAgICAvLyBubyBuZWVkIHRvIGNhbGN1bGF0ZSByYW5nZVxuICAgICAgLy8gaW5jbHVzaXZlLCBzdGFydHMgd2l0aCAwXG4gICAgICBjYWxsYmFjayhudWxsLCB2YWx1ZS5lbmQgKyAxIC0gKHZhbHVlLnN0YXJ0ID8gdmFsdWUuc3RhcnQgOiAwKSk7XG5cbiAgICAvLyBub3QgdGhhdCBmYXN0IHNub29weVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdGlsbCBuZWVkIHRvIGZldGNoIGZpbGUgc2l6ZSBmcm9tIGZzXG4gICAgICBmcy5zdGF0KHZhbHVlLnBhdGgsIGZ1bmN0aW9uKGVyciwgc3RhdCkge1xuXG4gICAgICAgIHZhciBmaWxlU2l6ZTtcblxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgZmluYWwgc2l6ZSBiYXNlZCBvbiB0aGUgcmFuZ2Ugb3B0aW9uc1xuICAgICAgICBmaWxlU2l6ZSA9IHN0YXQuc2l6ZSAtICh2YWx1ZS5zdGFydCA/IHZhbHVlLnN0YXJ0IDogMCk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbGVTaXplKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAvLyBvciBodHRwIHJlc3BvbnNlXG4gIH0gZWxzZSBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBWZXJzaW9uJykpIHtcbiAgICBjYWxsYmFjayhudWxsLCArdmFsdWUuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSk7XG5cbiAgLy8gb3IgcmVxdWVzdCBzdHJlYW0gaHR0cDovL2dpdGh1Yi5jb20vbWlrZWFsL3JlcXVlc3RcbiAgfSBlbHNlIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cE1vZHVsZScpKSB7XG4gICAgLy8gd2FpdCB0aWxsIHJlc3BvbnNlIGNvbWUgYmFja1xuICAgIHZhbHVlLm9uKCdyZXNwb25zZScsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICB2YWx1ZS5wYXVzZSgpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgK3Jlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuICAgIH0pO1xuICAgIHZhbHVlLnJlc3VtZSgpO1xuXG4gIC8vIHNvbWV0aGluZyBlbHNlXG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soJ1Vua25vd24gc3RyZWFtJyk7XG4gIH1cbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbXVsdGlQYXJ0SGVhZGVyID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlLCBvcHRpb25zKSB7XG4gIC8vIGN1c3RvbSBoZWFkZXIgc3BlY2lmaWVkIChhcyBzdHJpbmcpP1xuICAvLyBpdCBiZWNvbWVzIHJlc3BvbnNpYmxlIGZvciBib3VuZGFyeVxuICAvLyAoZS5nLiB0byBoYW5kbGUgZXh0cmEgQ1JMRnMgb24gLk5FVCBzZXJ2ZXJzKVxuICBpZiAodHlwZW9mIG9wdGlvbnMuaGVhZGVyID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuaGVhZGVyO1xuICB9XG5cbiAgdmFyIGNvbnRlbnREaXNwb3NpdGlvbiA9IHRoaXMuX2dldENvbnRlbnREaXNwb3NpdGlvbih2YWx1ZSwgb3B0aW9ucyk7XG4gIHZhciBjb250ZW50VHlwZSA9IHRoaXMuX2dldENvbnRlbnRUeXBlKHZhbHVlLCBvcHRpb25zKTtcblxuICB2YXIgY29udGVudHMgPSAnJztcbiAgdmFyIGhlYWRlcnMgID0ge1xuICAgIC8vIGFkZCBjdXN0b20gZGlzcG9zaXRpb24gYXMgdGhpcmQgZWxlbWVudCBvciBrZWVwIGl0IHR3byBlbGVtZW50cyBpZiBub3RcbiAgICAnQ29udGVudC1EaXNwb3NpdGlvbic6IFsnZm9ybS1kYXRhJywgJ25hbWU9XCInICsgZmllbGQgKyAnXCInXS5jb25jYXQoY29udGVudERpc3Bvc2l0aW9uIHx8IFtdKSxcbiAgICAvLyBpZiBubyBjb250ZW50IHR5cGUuIGFsbG93IGl0IHRvIGJlIGVtcHR5IGFycmF5XG4gICAgJ0NvbnRlbnQtVHlwZSc6IFtdLmNvbmNhdChjb250ZW50VHlwZSB8fCBbXSlcbiAgfTtcblxuICAvLyBhbGxvdyBjdXN0b20gaGVhZGVycy5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlciA9PSAnb2JqZWN0Jykge1xuICAgIHBvcHVsYXRlKGhlYWRlcnMsIG9wdGlvbnMuaGVhZGVyKTtcbiAgfVxuXG4gIHZhciBoZWFkZXI7XG4gIGZvciAodmFyIHByb3AgaW4gaGVhZGVycykge1xuICAgIGlmICghaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgaGVhZGVyID0gaGVhZGVyc1twcm9wXTtcblxuICAgIC8vIHNraXAgbnVsbGlzaCBoZWFkZXJzLlxuICAgIGlmIChoZWFkZXIgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbGwgaGVhZGVycyB0byBhcnJheXMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlciA9IFtoZWFkZXJdO1xuICAgIH1cblxuICAgIC8vIGFkZCBub24tZW1wdHkgaGVhZGVycy5cbiAgICBpZiAoaGVhZGVyLmxlbmd0aCkge1xuICAgICAgY29udGVudHMgKz0gcHJvcCArICc6ICcgKyBoZWFkZXIuam9pbignOyAnKSArIEZvcm1EYXRhLkxJTkVfQlJFQUs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICctLScgKyB0aGlzLmdldEJvdW5kYXJ5KCkgKyBGb3JtRGF0YS5MSU5FX0JSRUFLICsgY29udGVudHMgKyBGb3JtRGF0YS5MSU5FX0JSRUFLO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9nZXRDb250ZW50RGlzcG9zaXRpb24gPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuXG4gIHZhciBmaWxlbmFtZVxuICAgICwgY29udGVudERpc3Bvc2l0aW9uXG4gICAgO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5maWxlcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBjdXN0b20gZmlsZXBhdGggZm9yIHJlbGF0aXZlIHBhdGhzXG4gICAgZmlsZW5hbWUgPSBwYXRoLm5vcm1hbGl6ZShvcHRpb25zLmZpbGVwYXRoKS5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5maWxlbmFtZSB8fCB2YWx1ZS5uYW1lIHx8IHZhbHVlLnBhdGgpIHtcbiAgICAvLyBjdXN0b20gZmlsZW5hbWUgdGFrZSBwcmVjZWRlbmNlXG4gICAgLy8gZm9ybWlkYWJsZSBhbmQgdGhlIGJyb3dzZXIgYWRkIGEgbmFtZSBwcm9wZXJ0eVxuICAgIC8vIGZzLSBhbmQgcmVxdWVzdC0gc3RyZWFtcyBoYXZlIHBhdGggcHJvcGVydHlcbiAgICBmaWxlbmFtZSA9IHBhdGguYmFzZW5hbWUob3B0aW9ucy5maWxlbmFtZSB8fCB2YWx1ZS5uYW1lIHx8IHZhbHVlLnBhdGgpO1xuICB9IGVsc2UgaWYgKHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgLy8gb3IgdHJ5IGh0dHAgcmVzcG9uc2VcbiAgICBmaWxlbmFtZSA9IHBhdGguYmFzZW5hbWUodmFsdWUuY2xpZW50Ll9odHRwTWVzc2FnZS5wYXRoKTtcbiAgfVxuXG4gIGlmIChmaWxlbmFtZSkge1xuICAgIGNvbnRlbnREaXNwb3NpdGlvbiA9ICdmaWxlbmFtZT1cIicgKyBmaWxlbmFtZSArICdcIic7XG4gIH1cblxuICByZXR1cm4gY29udGVudERpc3Bvc2l0aW9uO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9nZXRDb250ZW50VHlwZSA9IGZ1bmN0aW9uKHZhbHVlLCBvcHRpb25zKSB7XG5cbiAgLy8gdXNlIGN1c3RvbSBjb250ZW50LXR5cGUgYWJvdmUgYWxsXG4gIHZhciBjb250ZW50VHlwZSA9IG9wdGlvbnMuY29udGVudFR5cGU7XG5cbiAgLy8gb3IgdHJ5IGBuYW1lYCBmcm9tIGZvcm1pZGFibGUsIGJyb3dzZXJcbiAgaWYgKCFjb250ZW50VHlwZSAmJiB2YWx1ZS5uYW1lKSB7XG4gICAgY29udGVudFR5cGUgPSBtaW1lLmxvb2t1cCh2YWx1ZS5uYW1lKTtcbiAgfVxuXG4gIC8vIG9yIHRyeSBgcGF0aGAgZnJvbSBmcy0sIHJlcXVlc3QtIHN0cmVhbXNcbiAgaWYgKCFjb250ZW50VHlwZSAmJiB2YWx1ZS5wYXRoKSB7XG4gICAgY29udGVudFR5cGUgPSBtaW1lLmxvb2t1cCh2YWx1ZS5wYXRoKTtcbiAgfVxuXG4gIC8vIG9yIGlmIGl0J3MgaHR0cC1yZXBvbnNlXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUucmVhZGFibGUgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBWZXJzaW9uJykpIHtcbiAgICBjb250ZW50VHlwZSA9IHZhbHVlLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xuICB9XG5cbiAgLy8gb3IgZ3Vlc3MgaXQgZnJvbSB0aGUgZmlsZXBhdGggb3IgZmlsZW5hbWVcbiAgaWYgKCFjb250ZW50VHlwZSAmJiAob3B0aW9ucy5maWxlcGF0aCB8fCBvcHRpb25zLmZpbGVuYW1lKSkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAob3B0aW9ucy5maWxlcGF0aCB8fCBvcHRpb25zLmZpbGVuYW1lKTtcbiAgfVxuXG4gIC8vIGZhbGxiYWNrIHRvIHRoZSBkZWZhdWx0IGNvbnRlbnQgdHlwZSBpZiBgdmFsdWVgIGlzIG5vdCBzaW1wbGUgdmFsdWVcbiAgaWYgKCFjb250ZW50VHlwZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICBjb250ZW50VHlwZSA9IEZvcm1EYXRhLkRFRkFVTFRfQ09OVEVOVF9UWVBFO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnRUeXBlO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9tdWx0aVBhcnRGb290ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5leHQpIHtcbiAgICB2YXIgZm9vdGVyID0gRm9ybURhdGEuTElORV9CUkVBSztcblxuICAgIHZhciBsYXN0UGFydCA9ICh0aGlzLl9zdHJlYW1zLmxlbmd0aCA9PT0gMCk7XG4gICAgaWYgKGxhc3RQYXJ0KSB7XG4gICAgICBmb290ZXIgKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCk7XG4gICAgfVxuXG4gICAgbmV4dChmb290ZXIpO1xuICB9LmJpbmQodGhpcyk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2xhc3RCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJy0tJyArIHRoaXMuZ2V0Qm91bmRhcnkoKSArICctLScgKyBGb3JtRGF0YS5MSU5FX0JSRUFLO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldEhlYWRlcnMgPSBmdW5jdGlvbih1c2VySGVhZGVycykge1xuICB2YXIgaGVhZGVyO1xuICB2YXIgZm9ybUhlYWRlcnMgPSB7XG4gICAgJ2NvbnRlbnQtdHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0nICsgdGhpcy5nZXRCb3VuZGFyeSgpXG4gIH07XG5cbiAgZm9yIChoZWFkZXIgaW4gdXNlckhlYWRlcnMpIHtcbiAgICBpZiAodXNlckhlYWRlcnMuaGFzT3duUHJvcGVydHkoaGVhZGVyKSkge1xuICAgICAgZm9ybUhlYWRlcnNbaGVhZGVyLnRvTG93ZXJDYXNlKCldID0gdXNlckhlYWRlcnNbaGVhZGVyXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9ybUhlYWRlcnM7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0Qm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9ib3VuZGFyeSkge1xuICAgIHRoaXMuX2dlbmVyYXRlQm91bmRhcnkoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9ib3VuZGFyeTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2VuZXJhdGVCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICAvLyBUaGlzIGdlbmVyYXRlcyBhIDUwIGNoYXJhY3RlciBib3VuZGFyeSBzaW1pbGFyIHRvIHRob3NlIHVzZWQgYnkgRmlyZWZveC5cbiAgLy8gVGhleSBhcmUgb3B0aW1pemVkIGZvciBib3llci1tb29yZSBwYXJzaW5nLlxuICB2YXIgYm91bmRhcnkgPSAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICBib3VuZGFyeSArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkudG9TdHJpbmcoMTYpO1xuICB9XG5cbiAgdGhpcy5fYm91bmRhcnkgPSBib3VuZGFyeTtcbn07XG5cbi8vIE5vdGU6IGdldExlbmd0aFN5bmMgRE9FU04nVCBjYWxjdWxhdGUgc3RyZWFtcyBsZW5ndGhcbi8vIEFzIHdvcmthcm91bmQgb25lIGNhbiBjYWxjdWxhdGUgZmlsZSBzaXplIG1hbnVhbGx5XG4vLyBhbmQgYWRkIGl0IGFzIGtub3duTGVuZ3RoIG9wdGlvblxuRm9ybURhdGEucHJvdG90eXBlLmdldExlbmd0aFN5bmMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGtub3duTGVuZ3RoID0gdGhpcy5fb3ZlcmhlYWRMZW5ndGggKyB0aGlzLl92YWx1ZUxlbmd0aDtcblxuICAvLyBEb24ndCBnZXQgY29uZnVzZWQsIHRoZXJlIGFyZSAzIFwiaW50ZXJuYWxcIiBzdHJlYW1zIGZvciBlYWNoIGtleXZhbCBwYWlyXG4gIC8vIHNvIGl0IGJhc2ljYWxseSBjaGVja3MgaWYgdGhlcmUgaXMgYW55IHZhbHVlIGFkZGVkIHRvIHRoZSBmb3JtXG4gIGlmICh0aGlzLl9zdHJlYW1zLmxlbmd0aCkge1xuICAgIGtub3duTGVuZ3RoICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpLmxlbmd0aDtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtLWRhdGEvZm9ybS1kYXRhL2lzc3Vlcy80MFxuICBpZiAoIXRoaXMuaGFzS25vd25MZW5ndGgoKSkge1xuICAgIC8vIFNvbWUgYXN5bmMgbGVuZ3RoIHJldHJpZXZlcnMgYXJlIHByZXNlbnRcbiAgICAvLyB0aGVyZWZvcmUgc3luY2hyb25vdXMgbGVuZ3RoIGNhbGN1bGF0aW9uIGlzIGZhbHNlLlxuICAgIC8vIFBsZWFzZSB1c2UgZ2V0TGVuZ3RoKGNhbGxiYWNrKSB0byBnZXQgcHJvcGVyIGxlbmd0aFxuICAgIHRoaXMuX2Vycm9yKG5ldyBFcnJvcignQ2Fubm90IGNhbGN1bGF0ZSBwcm9wZXIgbGVuZ3RoIGluIHN5bmNocm9ub3VzIHdheS4nKSk7XG4gIH1cblxuICByZXR1cm4ga25vd25MZW5ndGg7XG59O1xuXG4vLyBQdWJsaWMgQVBJIHRvIGNoZWNrIGlmIGxlbmd0aCBvZiBhZGRlZCB2YWx1ZXMgaXMga25vd25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtLWRhdGEvZm9ybS1kYXRhL2lzc3Vlcy8xOTZcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JtLWRhdGEvZm9ybS1kYXRhL2lzc3Vlcy8yNjJcbkZvcm1EYXRhLnByb3RvdHlwZS5oYXNLbm93bkxlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaGFzS25vd25MZW5ndGggPSB0cnVlO1xuXG4gIGlmICh0aGlzLl92YWx1ZXNUb01lYXN1cmUubGVuZ3RoKSB7XG4gICAgaGFzS25vd25MZW5ndGggPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBoYXNLbm93bkxlbmd0aDtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbihjYikge1xuICB2YXIga25vd25MZW5ndGggPSB0aGlzLl9vdmVyaGVhZExlbmd0aCArIHRoaXMuX3ZhbHVlTGVuZ3RoO1xuXG4gIGlmICh0aGlzLl9zdHJlYW1zLmxlbmd0aCkge1xuICAgIGtub3duTGVuZ3RoICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpLmxlbmd0aDtcbiAgfVxuXG4gIGlmICghdGhpcy5fdmFsdWVzVG9NZWFzdXJlLmxlbmd0aCkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IuYmluZCh0aGlzLCBudWxsLCBrbm93bkxlbmd0aCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGFzeW5ja2l0LnBhcmFsbGVsKHRoaXMuX3ZhbHVlc1RvTWVhc3VyZSwgdGhpcy5fbGVuZ3RoUmV0cmlldmVyLCBmdW5jdGlvbihlcnIsIHZhbHVlcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNiKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgICBrbm93bkxlbmd0aCArPSBsZW5ndGg7XG4gICAgfSk7XG5cbiAgICBjYihudWxsLCBrbm93bkxlbmd0aCk7XG4gIH0pO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnN1Ym1pdCA9IGZ1bmN0aW9uKHBhcmFtcywgY2IpIHtcbiAgdmFyIHJlcXVlc3RcbiAgICAsIG9wdGlvbnNcbiAgICAsIGRlZmF1bHRzID0ge21ldGhvZDogJ3Bvc3QnfVxuICAgIDtcblxuICAvLyBwYXJzZSBwcm92aWRlZCB1cmwgaWYgaXQncyBzdHJpbmdcbiAgLy8gb3IgdHJlYXQgaXQgYXMgb3B0aW9ucyBvYmplY3RcbiAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gJ3N0cmluZycpIHtcblxuICAgIHBhcmFtcyA9IHBhcnNlVXJsKHBhcmFtcyk7XG4gICAgb3B0aW9ucyA9IHBvcHVsYXRlKHtcbiAgICAgIHBvcnQ6IHBhcmFtcy5wb3J0LFxuICAgICAgcGF0aDogcGFyYW1zLnBhdGhuYW1lLFxuICAgICAgaG9zdDogcGFyYW1zLmhvc3RuYW1lLFxuICAgICAgcHJvdG9jb2w6IHBhcmFtcy5wcm90b2NvbFxuICAgIH0sIGRlZmF1bHRzKTtcblxuICAvLyB1c2UgY3VzdG9tIHBhcmFtc1xuICB9IGVsc2Uge1xuXG4gICAgb3B0aW9ucyA9IHBvcHVsYXRlKHBhcmFtcywgZGVmYXVsdHMpO1xuICAgIC8vIGlmIG5vIHBvcnQgcHJvdmlkZWQgdXNlIGRlZmF1bHQgb25lXG4gICAgaWYgKCFvcHRpb25zLnBvcnQpIHtcbiAgICAgIG9wdGlvbnMucG9ydCA9IG9wdGlvbnMucHJvdG9jb2wgPT0gJ2h0dHBzOicgPyA0NDMgOiA4MDtcbiAgICB9XG4gIH1cblxuICAvLyBwdXQgdGhhdCBnb29kIGNvZGUgaW4gZ2V0SGVhZGVycyB0byBzb21lIHVzZVxuICBvcHRpb25zLmhlYWRlcnMgPSB0aGlzLmdldEhlYWRlcnMocGFyYW1zLmhlYWRlcnMpO1xuXG4gIC8vIGh0dHBzIGlmIHNwZWNpZmllZCwgZmFsbGJhY2sgdG8gaHR0cCBpbiBhbnkgb3RoZXIgY2FzZVxuICBpZiAob3B0aW9ucy5wcm90b2NvbCA9PSAnaHR0cHM6Jykge1xuICAgIHJlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJlcXVlc3QgPSBodHRwLnJlcXVlc3Qob3B0aW9ucyk7XG4gIH1cblxuICAvLyBnZXQgY29udGVudCBsZW5ndGggYW5kIGZpcmUgYXdheVxuICB0aGlzLmdldExlbmd0aChmdW5jdGlvbihlcnIsIGxlbmd0aCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWRkIGNvbnRlbnQgbGVuZ3RoXG4gICAgcmVxdWVzdC5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgbGVuZ3RoKTtcblxuICAgIHRoaXMucGlwZShyZXF1ZXN0KTtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHJlcXVlc3Qub24oJ2Vycm9yJywgY2IpO1xuICAgICAgcmVxdWVzdC5vbigncmVzcG9uc2UnLCBjYi5iaW5kKHRoaXMsIG51bGwpKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICghdGhpcy5lcnJvcikge1xuICAgIHRoaXMuZXJyb3IgPSBlcnI7XG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnW29iamVjdCBGb3JtRGF0YV0nO1xufTtcbiIsInZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbTtcbnZhciBEZWxheWVkU3RyZWFtID0gcmVxdWlyZSgnZGVsYXllZC1zdHJlYW0nKTtcbnZhciBkZWZlciA9IHJlcXVpcmUoJy4vZGVmZXIuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21iaW5lZFN0cmVhbTtcbmZ1bmN0aW9uIENvbWJpbmVkU3RyZWFtKCkge1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuICB0aGlzLmRhdGFTaXplID0gMDtcbiAgdGhpcy5tYXhEYXRhU2l6ZSA9IDIgKiAxMDI0ICogMTAyNDtcbiAgdGhpcy5wYXVzZVN0cmVhbXMgPSB0cnVlO1xuXG4gIHRoaXMuX3JlbGVhc2VkID0gZmFsc2U7XG4gIHRoaXMuX3N0cmVhbXMgPSBbXTtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG59XG51dGlsLmluaGVyaXRzKENvbWJpbmVkU3RyZWFtLCBTdHJlYW0pO1xuXG5Db21iaW5lZFN0cmVhbS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBjb21iaW5lZFN0cmVhbSA9IG5ldyB0aGlzKCk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgY29tYmluZWRTdHJlYW1bb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgfVxuXG4gIHJldHVybiBjb21iaW5lZFN0cmVhbTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICByZXR1cm4gKHR5cGVvZiBzdHJlYW0gIT09ICdmdW5jdGlvbicpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdzdHJpbmcnKVxuICAgICYmICh0eXBlb2Ygc3RyZWFtICE9PSAnYm9vbGVhbicpXG4gICAgJiYgKHR5cGVvZiBzdHJlYW0gIT09ICdudW1iZXInKVxuICAgICYmICghQnVmZmVyLmlzQnVmZmVyKHN0cmVhbSkpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgaXNTdHJlYW1MaWtlID0gQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlKHN0cmVhbSk7XG5cbiAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIERlbGF5ZWRTdHJlYW0pKSB7XG4gICAgICB2YXIgbmV3U3RyZWFtID0gRGVsYXllZFN0cmVhbS5jcmVhdGUoc3RyZWFtLCB7XG4gICAgICAgIG1heERhdGFTaXplOiBJbmZpbml0eSxcbiAgICAgICAgcGF1c2VTdHJlYW06IHRoaXMucGF1c2VTdHJlYW1zLFxuICAgICAgfSk7XG4gICAgICBzdHJlYW0ub24oJ2RhdGEnLCB0aGlzLl9jaGVja0RhdGFTaXplLmJpbmQodGhpcykpO1xuICAgICAgc3RyZWFtID0gbmV3U3RyZWFtO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbmRsZUVycm9ycyhzdHJlYW0pO1xuXG4gICAgaWYgKHRoaXMucGF1c2VTdHJlYW1zKSB7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9zdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgU3RyZWFtLnByb3RvdHlwZS5waXBlLmNhbGwodGhpcywgZGVzdCwgb3B0aW9ucyk7XG4gIHRoaXMucmVzdW1lKCk7XG4gIHJldHVybiBkZXN0O1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9nZXROZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBudWxsO1xuICB2YXIgc3RyZWFtID0gdGhpcy5fc3RyZWFtcy5zaGlmdCgpO1xuXG5cbiAgaWYgKHR5cGVvZiBzdHJlYW0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fcGlwZU5leHQoc3RyZWFtKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZ2V0U3RyZWFtID0gc3RyZWFtO1xuICBnZXRTdHJlYW0oZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGlzU3RyZWFtTGlrZSA9IENvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZShzdHJlYW0pO1xuICAgIGlmIChpc1N0cmVhbUxpa2UpIHtcbiAgICAgIHN0cmVhbS5vbignZGF0YScsIHRoaXMuX2NoZWNrRGF0YVNpemUuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLl9oYW5kbGVFcnJvcnMoc3RyZWFtKTtcbiAgICB9XG5cbiAgICBkZWZlcih0aGlzLl9waXBlTmV4dC5iaW5kKHRoaXMsIHN0cmVhbSkpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9waXBlTmV4dCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gc3RyZWFtO1xuXG4gIHZhciBpc1N0cmVhbUxpa2UgPSBDb21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2Uoc3RyZWFtKTtcbiAgaWYgKGlzU3RyZWFtTGlrZSkge1xuICAgIHN0cmVhbS5vbignZW5kJywgdGhpcy5fZ2V0TmV4dC5iaW5kKHRoaXMpKTtcbiAgICBzdHJlYW0ucGlwZSh0aGlzLCB7ZW5kOiBmYWxzZX0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHN0cmVhbTtcbiAgdGhpcy53cml0ZSh2YWx1ZSk7XG4gIHRoaXMuX2dldE5leHQoKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5faGFuZGxlRXJyb3JzID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuICAgIHNlbGYuX2VtaXRFcnJvcihlcnIpO1xuICB9KTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnBhdXNlU3RyZWFtcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmKHRoaXMucGF1c2VTdHJlYW1zICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdHlwZW9mKHRoaXMuX2N1cnJlbnRTdHJlYW0ucGF1c2UpID09ICdmdW5jdGlvbicpIHRoaXMuX2N1cnJlbnRTdHJlYW0ucGF1c2UoKTtcbiAgdGhpcy5lbWl0KCdwYXVzZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5fcmVsZWFzZWQgPSB0cnVlO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX2dldE5leHQoKTtcbiAgfVxuXG4gIGlmKHRoaXMucGF1c2VTdHJlYW1zICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0gJiYgdHlwZW9mKHRoaXMuX2N1cnJlbnRTdHJlYW0ucmVzdW1lKSA9PSAnZnVuY3Rpb24nKSB0aGlzLl9jdXJyZW50U3RyZWFtLnJlc3VtZSgpO1xuICB0aGlzLmVtaXQoJ3Jlc3VtZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLmVtaXQoJ2VuZCcpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHRoaXMuX3N0cmVhbXMgPSBbXTtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IG51bGw7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2NoZWNrRGF0YVNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fdXBkYXRlRGF0YVNpemUoKTtcbiAgaWYgKHRoaXMuZGF0YVNpemUgPD0gdGhpcy5tYXhEYXRhU2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtZXNzYWdlID1cbiAgICAnRGVsYXllZFN0cmVhbSNtYXhEYXRhU2l6ZSBvZiAnICsgdGhpcy5tYXhEYXRhU2l6ZSArICcgYnl0ZXMgZXhjZWVkZWQuJztcbiAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihtZXNzYWdlKSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX3VwZGF0ZURhdGFTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGF0YVNpemUgPSAwO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fc3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIGlmICghc3RyZWFtLmRhdGFTaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi5kYXRhU2l6ZSArPSBzdHJlYW0uZGF0YVNpemU7XG4gIH0pO1xuXG4gIGlmICh0aGlzLl9jdXJyZW50U3RyZWFtICYmIHRoaXMuX2N1cnJlbnRTdHJlYW0uZGF0YVNpemUpIHtcbiAgICB0aGlzLmRhdGFTaXplICs9IHRoaXMuX2N1cnJlbnRTdHJlYW0uZGF0YVNpemU7XG4gIH1cbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fZW1pdEVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xufTtcbiIsInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW07XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWxheWVkU3RyZWFtO1xuZnVuY3Rpb24gRGVsYXllZFN0cmVhbSgpIHtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLmRhdGFTaXplID0gMDtcbiAgdGhpcy5tYXhEYXRhU2l6ZSA9IDEwMjQgKiAxMDI0O1xuICB0aGlzLnBhdXNlU3RyZWFtID0gdHJ1ZTtcblxuICB0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkID0gZmFsc2U7XG4gIHRoaXMuX3JlbGVhc2VkID0gZmFsc2U7XG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzID0gW107XG59XG51dGlsLmluaGVyaXRzKERlbGF5ZWRTdHJlYW0sIFN0cmVhbSk7XG5cbkRlbGF5ZWRTdHJlYW0uY3JlYXRlID0gZnVuY3Rpb24oc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBkZWxheWVkU3RyZWFtID0gbmV3IHRoaXMoKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICBkZWxheWVkU3RyZWFtW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gIH1cblxuICBkZWxheWVkU3RyZWFtLnNvdXJjZSA9IHNvdXJjZTtcblxuICB2YXIgcmVhbEVtaXQgPSBzb3VyY2UuZW1pdDtcbiAgc291cmNlLmVtaXQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWxheWVkU3RyZWFtLl9oYW5kbGVFbWl0KGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHJlYWxFbWl0LmFwcGx5KHNvdXJjZSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBzb3VyY2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oKSB7fSk7XG4gIGlmIChkZWxheWVkU3RyZWFtLnBhdXNlU3RyZWFtKSB7XG4gICAgc291cmNlLnBhdXNlKCk7XG4gIH1cblxuICByZXR1cm4gZGVsYXllZFN0cmVhbTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWxheWVkU3RyZWFtLnByb3RvdHlwZSwgJ3JlYWRhYmxlJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLnJlYWRhYmxlO1xuICB9XG59KTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc291cmNlLnNldEVuY29kaW5nLmFwcGx5KHRoaXMuc291cmNlLCBhcmd1bWVudHMpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fcmVsZWFzZWQpIHtcbiAgICB0aGlzLnJlbGVhc2UoKTtcbiAgfVxuXG4gIHRoaXMuc291cmNlLnJlc3VtZSgpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zb3VyY2UucGF1c2UoKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVsZWFzZWQgPSB0cnVlO1xuXG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMgPSBbXTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHIgPSBTdHJlYW0ucHJvdG90eXBlLnBpcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhpcy5yZXN1bWUoKTtcbiAgcmV0dXJuIHI7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5faGFuZGxlRW1pdCA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgaWYgKHRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChhcmdzWzBdID09PSAnZGF0YScpIHtcbiAgICB0aGlzLmRhdGFTaXplICs9IGFyZ3NbMV0ubGVuZ3RoO1xuICAgIHRoaXMuX2NoZWNrSWZNYXhEYXRhU2l6ZUV4Y2VlZGVkKCk7XG4gIH1cblxuICB0aGlzLl9idWZmZXJlZEV2ZW50cy5wdXNoKGFyZ3MpO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuX2NoZWNrSWZNYXhEYXRhU2l6ZUV4Y2VlZGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuZGF0YVNpemUgPD0gdGhpcy5tYXhEYXRhU2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX21heERhdGFTaXplRXhjZWVkZWQgPSB0cnVlO1xuICB2YXIgbWVzc2FnZSA9XG4gICAgJ0RlbGF5ZWRTdHJlYW0jbWF4RGF0YVNpemUgb2YgJyArIHRoaXMubWF4RGF0YVNpemUgKyAnIGJ5dGVzIGV4Y2VlZGVkLidcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihtZXNzYWdlKSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBkZWZlcjtcblxuLyoqXG4gKiBSdW5zIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG5leHQgaXRlcmF0aW9uIG9mIHRoZSBldmVudCBsb29wXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBmdW5jdGlvbiB0byBydW5cbiAqL1xuZnVuY3Rpb24gZGVmZXIoZm4pXG57XG4gIHZhciBuZXh0VGljayA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2V0SW1tZWRpYXRlXG4gICAgOiAoXG4gICAgICB0eXBlb2YgcHJvY2VzcyA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgcHJvY2Vzcy5uZXh0VGljayA9PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb2Nlc3MubmV4dFRpY2tcbiAgICAgIDogbnVsbFxuICAgICk7XG5cbiAgaWYgKG5leHRUaWNrKVxuICB7XG4gICAgbmV4dFRpY2soZm4pO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICB9XG59XG4iLCIvKiFcbiAqIG1pbWUtdHlwZXNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkYiA9IHJlcXVpcmUoJ21pbWUtZGInKVxudmFyIGV4dG5hbWUgPSByZXF1aXJlKCdwYXRoJykuZXh0bmFtZVxuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBFWFRSQUNUX1RZUEVfUkVHRVhQID0gL15cXHMqKFteO1xcc10qKSg/Ojt8XFxzfCQpL1xudmFyIFRFWFRfVFlQRV9SRUdFWFAgPSAvXnRleHRcXC8vaVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY2hhcnNldCA9IGNoYXJzZXRcbmV4cG9ydHMuY2hhcnNldHMgPSB7IGxvb2t1cDogY2hhcnNldCB9XG5leHBvcnRzLmNvbnRlbnRUeXBlID0gY29udGVudFR5cGVcbmV4cG9ydHMuZXh0ZW5zaW9uID0gZXh0ZW5zaW9uXG5leHBvcnRzLmV4dGVuc2lvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5leHBvcnRzLmxvb2t1cCA9IGxvb2t1cFxuZXhwb3J0cy50eXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuLy8gUG9wdWxhdGUgdGhlIGV4dGVuc2lvbnMvdHlwZXMgbWFwc1xucG9wdWxhdGVNYXBzKGV4cG9ydHMuZXh0ZW5zaW9ucywgZXhwb3J0cy50eXBlcylcblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgY2hhcnNldCBmb3IgYSBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNoYXJzZXQgKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuICB2YXIgbWltZSA9IG1hdGNoICYmIGRiW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKG1pbWUgJiYgbWltZS5jaGFyc2V0KSB7XG4gICAgcmV0dXJuIG1pbWUuY2hhcnNldFxuICB9XG5cbiAgLy8gZGVmYXVsdCB0ZXh0LyogdG8gdXRmLThcbiAgaWYgKG1hdGNoICYmIFRFWFRfVFlQRV9SRUdFWFAudGVzdChtYXRjaFsxXSkpIHtcbiAgICByZXR1cm4gJ1VURi04J1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVsbCBDb250ZW50LVR5cGUgaGVhZGVyIGdpdmVuIGEgTUlNRSB0eXBlIG9yIGV4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBjb250ZW50VHlwZSAoc3RyKSB7XG4gIC8vIFRPRE86IHNob3VsZCB0aGlzIGV2ZW4gYmUgaW4gdGhpcyBtb2R1bGU/XG4gIGlmICghc3RyIHx8IHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgbWltZSA9IHN0ci5pbmRleE9mKCcvJykgPT09IC0xXG4gICAgPyBleHBvcnRzLmxvb2t1cChzdHIpXG4gICAgOiBzdHJcblxuICBpZiAoIW1pbWUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBjb250ZW50LXR5cGUgb3Igb3RoZXIgbW9kdWxlXG4gIGlmIChtaW1lLmluZGV4T2YoJ2NoYXJzZXQnKSA9PT0gLTEpIHtcbiAgICB2YXIgY2hhcnNldCA9IGV4cG9ydHMuY2hhcnNldChtaW1lKVxuICAgIGlmIChjaGFyc2V0KSBtaW1lICs9ICc7IGNoYXJzZXQ9JyArIGNoYXJzZXQudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgcmV0dXJuIG1pbWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgZXh0ZW5zaW9uIGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5zaW9uICh0eXBlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBtZWRpYS10eXBlclxuICB2YXIgbWF0Y2ggPSBFWFRSQUNUX1RZUEVfUkVHRVhQLmV4ZWModHlwZSlcblxuICAvLyBnZXQgZXh0ZW5zaW9uc1xuICB2YXIgZXh0cyA9IG1hdGNoICYmIGV4cG9ydHMuZXh0ZW5zaW9uc1ttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghZXh0cyB8fCAhZXh0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBleHRzWzBdXG59XG5cbi8qKlxuICogTG9va3VwIHRoZSBNSU1FIHR5cGUgZm9yIGEgZmlsZSBwYXRoL2V4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gbG9va3VwIChwYXRoKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGdldCB0aGUgZXh0ZW5zaW9uIChcImV4dFwiIG9yIFwiLmV4dFwiIG9yIGZ1bGwgcGF0aClcbiAgdmFyIGV4dGVuc2lvbiA9IGV4dG5hbWUoJ3guJyArIHBhdGgpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAuc3Vic3RyKDEpXG5cbiAgaWYgKCFleHRlbnNpb24pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLnR5cGVzW2V4dGVuc2lvbl0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucyBhbmQgdHlwZXMgbWFwcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9wdWxhdGVNYXBzIChleHRlbnNpb25zLCB0eXBlcykge1xuICAvLyBzb3VyY2UgcHJlZmVyZW5jZSAobGVhc3QgLT4gbW9zdClcbiAgdmFyIHByZWZlcmVuY2UgPSBbJ25naW54JywgJ2FwYWNoZScsIHVuZGVmaW5lZCwgJ2lhbmEnXVxuXG4gIE9iamVjdC5rZXlzKGRiKS5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hNaW1lVHlwZSAodHlwZSkge1xuICAgIHZhciBtaW1lID0gZGJbdHlwZV1cbiAgICB2YXIgZXh0cyA9IG1pbWUuZXh0ZW5zaW9uc1xuXG4gICAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gbWltZSAtPiBleHRlbnNpb25zXG4gICAgZXh0ZW5zaW9uc1t0eXBlXSA9IGV4dHNcblxuICAgIC8vIGV4dGVuc2lvbiAtPiBtaW1lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXh0ZW5zaW9uID0gZXh0c1tpXVxuXG4gICAgICBpZiAodHlwZXNbZXh0ZW5zaW9uXSkge1xuICAgICAgICB2YXIgZnJvbSA9IHByZWZlcmVuY2UuaW5kZXhPZihkYlt0eXBlc1tleHRlbnNpb25dXS5zb3VyY2UpXG4gICAgICAgIHZhciB0byA9IHByZWZlcmVuY2UuaW5kZXhPZihtaW1lLnNvdXJjZSlcblxuICAgICAgICBpZiAodHlwZXNbZXh0ZW5zaW9uXSAhPT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgJiZcbiAgICAgICAgICAoZnJvbSA+IHRvIHx8IChmcm9tID09PSB0byAmJiB0eXBlc1tleHRlbnNpb25dLnN1YnN0cigwLCAxMikgPT09ICdhcHBsaWNhdGlvbi8nKSkpIHtcbiAgICAgICAgICAvLyBza2lwIHRoZSByZW1hcHBpbmdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCB0aGUgZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICAgIHR5cGVzW2V4dGVuc2lvbl0gPSB0eXBlXG4gICAgfVxuICB9KVxufVxuIiwiLyohXG4gKiBtaW1lLWRiXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RiLmpzb24nKVxuIiwibW9kdWxlLmV4cG9ydHMgPVxue1xuICBwYXJhbGxlbCAgICAgIDogcmVxdWlyZSgnLi9wYXJhbGxlbC5qcycpLFxuICBzZXJpYWwgICAgICAgIDogcmVxdWlyZSgnLi9zZXJpYWwuanMnKSxcbiAgc2VyaWFsT3JkZXJlZCA6IHJlcXVpcmUoJy4vc2VyaWFsT3JkZXJlZC5qcycpXG59O1xuIiwidmFyIGl0ZXJhdGUgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRlLmpzJylcbiAgLCBpbml0U3RhdGUgID0gcmVxdWlyZSgnLi9saWIvc3RhdGUuanMnKVxuICAsIHRlcm1pbmF0b3IgPSByZXF1aXJlKCcuL2xpYi90ZXJtaW5hdG9yLmpzJylcbiAgO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmFsbGVsO1xuXG4vKipcbiAqIFJ1bnMgaXRlcmF0b3Igb3ZlciBwcm92aWRlZCBhcnJheSBlbGVtZW50cyBpbiBwYXJhbGxlbFxuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHBhcmFsbGVsKGxpc3QsIGl0ZXJhdG9yLCBjYWxsYmFjaylcbntcbiAgdmFyIHN0YXRlID0gaW5pdFN0YXRlKGxpc3QpO1xuXG4gIHdoaWxlIChzdGF0ZS5pbmRleCA8IChzdGF0ZVsna2V5ZWRMaXN0J10gfHwgbGlzdCkubGVuZ3RoKVxuICB7XG4gICAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpXG4gICAge1xuICAgICAgaWYgKGVycm9yKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29rcyBsaWtlIGl0J3MgdGhlIGxhc3Qgb25lXG4gICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuam9icykubGVuZ3RoID09PSAwKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5yZXN1bHRzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhdGUuaW5kZXgrKztcbiAgfVxuXG4gIHJldHVybiB0ZXJtaW5hdG9yLmJpbmQoc3RhdGUsIGNhbGxiYWNrKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZGVmZXI7XG5cbi8qKlxuICogUnVucyBwcm92aWRlZCBmdW5jdGlvbiBvbiBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgZXZlbnQgbG9vcFxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gZnVuY3Rpb24gdG8gcnVuXG4gKi9cbmZ1bmN0aW9uIGRlZmVyKGZuKVxue1xuICB2YXIgbmV4dFRpY2sgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09ICdmdW5jdGlvbidcbiAgICA/IHNldEltbWVkaWF0ZVxuICAgIDogKFxuICAgICAgdHlwZW9mIHByb2Nlc3MgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm9jZXNzLm5leHRUaWNrXG4gICAgICA6IG51bGxcbiAgICApO1xuXG4gIGlmIChuZXh0VGljaylcbiAge1xuICAgIG5leHRUaWNrKGZuKTtcbiAgfVxuICBlbHNlXG4gIHtcbiAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgfVxufVxuIiwidmFyIHNlcmlhbE9yZGVyZWQgPSByZXF1aXJlKCcuL3NlcmlhbE9yZGVyZWQuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWw7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGFycmF5IGVsZW1lbnRzIGluIHNlcmllc1xuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbChsaXN0LCBpdGVyYXRvciwgY2FsbGJhY2spXG57XG4gIHJldHVybiBzZXJpYWxPcmRlcmVkKGxpc3QsIGl0ZXJhdG9yLCBudWxsLCBjYWxsYmFjayk7XG59XG4iLCIvLyBwb3B1bGF0ZXMgbWlzc2luZyB2YWx1ZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZHN0LCBzcmMpIHtcblxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24ocHJvcClcbiAge1xuICAgIGRzdFtwcm9wXSA9IGRzdFtwcm9wXSB8fCBzcmNbcHJvcF07XG4gIH0pO1xuXG4gIHJldHVybiBkc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgUmVzcG9uc2VCYXNlID0gcmVxdWlyZSgnLi4vcmVzcG9uc2UtYmFzZScpO1xuXG4vKipcbiAqIEV4cG9zZSBgUmVzcG9uc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgUmVzcG9uc2VgIHdpdGggdGhlIGdpdmVuIGB4aHJgLlxuICpcbiAqICAtIHNldCBmbGFncyAoLm9rLCAuZXJyb3IsIGV0YylcbiAqICAtIHBhcnNlIGhlYWRlclxuICpcbiAqIEBwYXJhbSB7UmVxdWVzdH0gcmVxXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7U3RyZWFtfVxuICogQGltcGxlbWVudHMge1JlYWRhYmxlU3RyZWFtfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUmVzcG9uc2UocmVxKSB7XG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xuICBjb25zdCByZXMgPSAodGhpcy5yZXMgPSByZXEucmVzKTtcbiAgdGhpcy5yZXF1ZXN0ID0gcmVxO1xuICB0aGlzLnJlcSA9IHJlcS5yZXE7XG4gIHRoaXMudGV4dCA9IHJlcy50ZXh0O1xuICB0aGlzLmJvZHkgPSByZXMuYm9keSAhPT0gdW5kZWZpbmVkID8gcmVzLmJvZHkgOiB7fTtcbiAgdGhpcy5maWxlcyA9IHJlcy5maWxlcyB8fCB7fTtcbiAgdGhpcy5idWZmZXJlZCA9ICdzdHJpbmcnID09IHR5cGVvZiB0aGlzLnRleHQ7XG4gIHRoaXMuaGVhZGVyID0gdGhpcy5oZWFkZXJzID0gcmVzLmhlYWRlcnM7XG4gIHRoaXMuX3NldFN0YXR1c1Byb3BlcnRpZXMocmVzLnN0YXR1c0NvZGUpO1xuICB0aGlzLl9zZXRIZWFkZXJQcm9wZXJ0aWVzKHRoaXMuaGVhZGVyKTtcbiAgdGhpcy5zZXRFbmNvZGluZyA9IHJlcy5zZXRFbmNvZGluZy5iaW5kKHJlcyk7XG4gIHJlcy5vbignZGF0YScsIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdkYXRhJykpO1xuICByZXMub24oJ2VuZCcsIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlbmQnKSk7XG4gIHJlcy5vbignY2xvc2UnLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnY2xvc2UnKSk7XG4gIHJlcy5vbignZXJyb3InLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnZXJyb3InKSk7XG59XG5cbi8qKlxuICogSW5oZXJpdCBmcm9tIGBTdHJlYW1gLlxuICovXG5cbnV0aWwuaW5oZXJpdHMoUmVzcG9uc2UsIFN0cmVhbSk7XG5SZXNwb25zZUJhc2UoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIG1ldGhvZHMgb2YgYSBgUmVhZGFibGVTdHJlYW1gXG4gKi9cblxuUmVzcG9uc2UucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihlcnIpe1xuICB0aGlzLnJlcy5kZXN0cm95KGVycik7XG59O1xuXG4vKipcbiAqIFBhdXNlLlxuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMucmVzLnBhdXNlKCk7XG59O1xuXG4vKipcbiAqIFJlc3VtZS5cbiAqL1xuXG5SZXNwb25zZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5yZXMucmVzdW1lKCk7XG59O1xuXG4vKipcbiAqIFJldHVybiBhbiBgRXJyb3JgIHJlcHJlc2VudGF0aXZlIG9mIHRoaXMgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybiB7RXJyb3J9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS50b0Vycm9yID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJlcSA9IHRoaXMucmVxO1xuICBjb25zdCBtZXRob2QgPSByZXEubWV0aG9kO1xuICBjb25zdCBwYXRoID0gcmVxLnBhdGg7XG5cbiAgY29uc3QgbXNnID0gYGNhbm5vdCAke21ldGhvZH0gJHtwYXRofSAoJHt0aGlzLnN0YXR1c30pYDtcbiAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci5zdGF0dXMgPSB0aGlzLnN0YXR1cztcbiAgZXJyLnRleHQgPSB0aGlzLnRleHQ7XG4gIGVyci5tZXRob2QgPSBtZXRob2Q7XG4gIGVyci5wYXRoID0gcGF0aDtcblxuICByZXR1cm4gZXJyO1xufTtcblxuXG5SZXNwb25zZS5wcm90b3R5cGUuc2V0U3RhdHVzUHJvcGVydGllcyA9IGZ1bmN0aW9uKHN0YXR1cyl7XG4gIGNvbnNvbGUud2FybihcIkluIHN1cGVyYWdlbnQgMi54IHNldFN0YXR1c1Byb3BlcnRpZXMgaXMgYSBwcml2YXRlIG1ldGhvZFwiKTtcbiAgcmV0dXJuIHRoaXMuX3NldFN0YXR1c1Byb3BlcnRpZXMoc3RhdHVzKTtcbn07XG5cbi8qKlxuICogVG8ganNvbi5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXE6IHRoaXMucmVxdWVzdC50b0pTT04oKSxcbiAgICBoZWFkZXI6IHRoaXMuaGVhZGVyLFxuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgdGV4dDogdGhpcy50ZXh0LFxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlc3BvbnNlQmFzZWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zZUJhc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgUmVzcG9uc2VCYXNlYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlc3BvbnNlQmFzZShvYmopIHtcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG59XG5cbi8qKlxuICogTWl4aW4gdGhlIHByb3RvdHlwZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gUmVzcG9uc2VCYXNlLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gUmVzcG9uc2VCYXNlLnByb3RvdHlwZVtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogR2V0IGNhc2UtaW5zZW5zaXRpdmUgYGZpZWxkYCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVzcG9uc2VCYXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihmaWVsZCkge1xuICByZXR1cm4gdGhpcy5oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG59O1xuXG4vKipcbiAqIFNldCBoZWFkZXIgcmVsYXRlZCBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBgLnR5cGVgIHRoZSBjb250ZW50IHR5cGUgd2l0aG91dCBwYXJhbXNcbiAqXG4gKiBBIHJlc3BvbnNlIG9mIFwiQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04XCJcbiAqIHdpbGwgcHJvdmlkZSB5b3Ugd2l0aCBhIGAudHlwZWAgb2YgXCJ0ZXh0L3BsYWluXCIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhlYWRlclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVzcG9uc2VCYXNlLnByb3RvdHlwZS5fc2V0SGVhZGVyUHJvcGVydGllcyA9IGZ1bmN0aW9uKGhlYWRlcil7XG4gICAgLy8gVE9ETzogbW9hciFcbiAgICAvLyBUT0RPOiBtYWtlIHRoaXMgYSB1dGlsXG5cbiAgICAvLyBjb250ZW50LXR5cGVcbiAgICB2YXIgY3QgPSBoZWFkZXJbJ2NvbnRlbnQtdHlwZSddIHx8ICcnO1xuICAgIHRoaXMudHlwZSA9IHV0aWxzLnR5cGUoY3QpO1xuXG4gICAgLy8gcGFyYW1zXG4gICAgdmFyIHBhcmFtcyA9IHV0aWxzLnBhcmFtcyhjdCk7XG4gICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykgdGhpc1trZXldID0gcGFyYW1zW2tleV07XG5cbiAgICB0aGlzLmxpbmtzID0ge307XG5cbiAgICAvLyBsaW5rc1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChoZWFkZXIubGluaykge1xuICAgICAgICAgICAgdGhpcy5saW5rcyA9IHV0aWxzLnBhcnNlTGlua3MoaGVhZGVyLmxpbmspO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIGlnbm9yZVxuICAgIH1cbn07XG5cbi8qKlxuICogU2V0IGZsYWdzIHN1Y2ggYXMgYC5va2AgYmFzZWQgb24gYHN0YXR1c2AuXG4gKlxuICogRm9yIGV4YW1wbGUgYSAyeHggcmVzcG9uc2Ugd2lsbCBnaXZlIHlvdSBhIGAub2tgIG9mIF9fdHJ1ZV9fXG4gKiB3aGVyZWFzIDV4eCB3aWxsIGJlIF9fZmFsc2VfXyBhbmQgYC5lcnJvcmAgd2lsbCBiZSBfX3RydWVfXy4gVGhlXG4gKiBgLmNsaWVudEVycm9yYCBhbmQgYC5zZXJ2ZXJFcnJvcmAgYXJlIGFsc28gYXZhaWxhYmxlIHRvIGJlIG1vcmVcbiAqIHNwZWNpZmljLCBhbmQgYC5zdGF0dXNUeXBlYCBpcyB0aGUgY2xhc3Mgb2YgZXJyb3IgcmFuZ2luZyBmcm9tIDEuLjVcbiAqIHNvbWV0aW1lcyB1c2VmdWwgZm9yIG1hcHBpbmcgcmVzcG9uZCBjb2xvcnMgZXRjLlxuICpcbiAqIFwic3VnYXJcIiBwcm9wZXJ0aWVzIGFyZSBhbHNvIGRlZmluZWQgZm9yIGNvbW1vbiBjYXNlcy4gQ3VycmVudGx5IHByb3ZpZGluZzpcbiAqXG4gKiAgIC0gLm5vQ29udGVudFxuICogICAtIC5iYWRSZXF1ZXN0XG4gKiAgIC0gLnVuYXV0aG9yaXplZFxuICogICAtIC5ub3RBY2NlcHRhYmxlXG4gKiAgIC0gLm5vdEZvdW5kXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVzcG9uc2VCYXNlLnByb3RvdHlwZS5fc2V0U3RhdHVzUHJvcGVydGllcyA9IGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgdmFyIHR5cGUgPSBzdGF0dXMgLyAxMDAgfCAwO1xuXG4gICAgLy8gc3RhdHVzIC8gY2xhc3NcbiAgICB0aGlzLnN0YXR1cyA9IHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1R5cGUgPSB0eXBlO1xuXG4gICAgLy8gYmFzaWNzXG4gICAgdGhpcy5pbmZvID0gMSA9PSB0eXBlO1xuICAgIHRoaXMub2sgPSAyID09IHR5cGU7XG4gICAgdGhpcy5yZWRpcmVjdCA9IDMgPT0gdHlwZTtcbiAgICB0aGlzLmNsaWVudEVycm9yID0gNCA9PSB0eXBlO1xuICAgIHRoaXMuc2VydmVyRXJyb3IgPSA1ID09IHR5cGU7XG4gICAgdGhpcy5lcnJvciA9ICg0ID09IHR5cGUgfHwgNSA9PSB0eXBlKVxuICAgICAgICA/IHRoaXMudG9FcnJvcigpXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICAvLyBzdWdhclxuICAgIHRoaXMuY3JlYXRlZCA9IDIwMSA9PSBzdGF0dXM7XG4gICAgdGhpcy5hY2NlcHRlZCA9IDIwMiA9PSBzdGF0dXM7XG4gICAgdGhpcy5ub0NvbnRlbnQgPSAyMDQgPT0gc3RhdHVzO1xuICAgIHRoaXMuYmFkUmVxdWVzdCA9IDQwMCA9PSBzdGF0dXM7XG4gICAgdGhpcy51bmF1dGhvcml6ZWQgPSA0MDEgPT0gc3RhdHVzO1xuICAgIHRoaXMubm90QWNjZXB0YWJsZSA9IDQwNiA9PSBzdGF0dXM7XG4gICAgdGhpcy5mb3JiaWRkZW4gPSA0MDMgPT0gc3RhdHVzO1xuICAgIHRoaXMubm90Rm91bmQgPSA0MDQgPT0gc3RhdHVzO1xuICAgIHRoaXMudW5wcm9jZXNzYWJsZUVudGl0eSA9IDQyMiA9PSBzdGF0dXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlcjtcbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcblxuLyoqXG4gKiBCdWZmZXJzIHJlc3BvbnNlIGRhdGEgZXZlbnRzIGFuZCByZS1lbWl0cyB3aGVuIHRoZXkncmUgdW56aXBwZWQuXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXFcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy51bnppcCA9IChyZXEsIHJlcykgPT4ge1xuICBjb25zdCB1bnppcCA9IHpsaWIuY3JlYXRlVW56aXAoKTtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmVhbSgpO1xuICBsZXQgZGVjb2RlcjtcblxuICAvLyBtYWtlIG5vZGUgcmVzcG9uc2VPbkVuZCgpIGhhcHB5XG4gIHN0cmVhbS5yZXEgPSByZXE7XG5cbiAgdW56aXAub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7XG4gICAgICAvLyB1bmV4cGVjdGVkIGVuZCBvZiBmaWxlIGlzIGlnbm9yZWQgYnkgYnJvd3NlcnMgYW5kIGN1cmxcbiAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfSk7XG5cbiAgLy8gcGlwZSB0byB1bnppcFxuICByZXMucGlwZSh1bnppcCk7XG5cbiAgLy8gb3ZlcnJpZGUgYHNldEVuY29kaW5nYCB0byBjYXB0dXJlIGVuY29kaW5nXG4gIHJlcy5zZXRFbmNvZGluZyA9IHR5cGUgPT4ge1xuICAgIGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2Rlcih0eXBlKTtcbiAgfTtcblxuICAvLyBkZWNvZGUgdXBvbiBkZWNvbXByZXNzaW5nIHdpdGggY2FwdHVyZWQgZW5jb2RpbmdcbiAgdW56aXAub24oJ2RhdGEnLCBidWYgPT4ge1xuICAgIGlmIChkZWNvZGVyKSB7XG4gICAgICBjb25zdCBzdHIgPSBkZWNvZGVyLndyaXRlKGJ1Zik7XG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyZWFtLmVtaXQoJ2RhdGEnLCBzdHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGJ1Zik7XG4gICAgfVxuICB9KTtcblxuICB1bnppcC5vbignZW5kJywgKCkgPT4ge1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfSk7XG5cbiAgLy8gb3ZlcnJpZGUgYG9uYCB0byBjYXB0dXJlIGRhdGEgbGlzdGVuZXJzXG4gIGNvbnN0IF9vbiA9IHJlcy5vbjtcbiAgcmVzLm9uID0gZnVuY3Rpb24odHlwZSwgZm4pIHtcbiAgICBpZiAoJ2RhdGEnID09IHR5cGUgfHwgJ2VuZCcgPT0gdHlwZSkge1xuICAgICAgc3RyZWFtLm9uKHR5cGUsIGZuKTtcbiAgICB9IGVsc2UgaWYgKCdlcnJvcicgPT0gdHlwZSkge1xuICAgICAgc3RyZWFtLm9uKHR5cGUsIGZuKTtcbiAgICAgIF9vbi5jYWxsKHJlcywgdHlwZSwgZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb24uY2FsbChyZXMsIHR5cGUsIGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxuLy8gSWYgbmFtZSBpcyAnX19wcm90b19fJywgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBhdmFpbGFibGUsIGRlZmluZSBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5IG9uIHRhcmdldFxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkodGFyZ2V0LCBvcHRpb25zKSB7XG5cdGlmIChkZWZpbmVQcm9wZXJ0eSAmJiBvcHRpb25zLm5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBvcHRpb25zLm5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogb3B0aW9ucy5uZXdWYWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W29wdGlvbnMubmFtZV0gPSBvcHRpb25zLm5ld1ZhbHVlO1xuXHR9XG59O1xuXG4vLyBSZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQgb2YgX19wcm90b19fIGlmICdfX3Byb3RvX18nIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHRpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRpZiAoIWhhc093bi5jYWxsKG9iaiwgbmFtZSkpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fSBlbHNlIGlmIChnT1BEKSB7XG5cdFx0XHQvLyBJbiBlYXJseSB2ZXJzaW9ucyBvZiBub2RlLCBvYmpbJ19fcHJvdG9fXyddIGlzIGJ1Z2d5IHdoZW4gb2JqIGhhc1xuXHRcdFx0Ly8gX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eS4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHdvcmtzLlxuXHRcdFx0cmV0dXJuIGdPUEQob2JqLCBuYW1lKS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IGdldFByb3BlcnR5KHRhcmdldCwgbmFtZSk7XG5cdFx0XHRcdGNvcHkgPSBnZXRQcm9wZXJ0eShvcHRpb25zLCBuYW1lKTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpIH0pO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGNvcHkgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIE1pbWUoKSB7XG4gIC8vIE1hcCBvZiBleHRlbnNpb24gLT4gbWltZSB0eXBlXG4gIHRoaXMudHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vIE1hcCBvZiBtaW1lIHR5cGUgLT4gZXh0ZW5zaW9uXG4gIHRoaXMuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogRGVmaW5lIG1pbWV0eXBlIC0+IGV4dGVuc2lvbiBtYXBwaW5ncy4gIEVhY2gga2V5IGlzIGEgbWltZS10eXBlIHRoYXQgbWFwc1xuICogdG8gYW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIHR5cGUuICBUaGUgZmlyc3QgZXh0ZW5zaW9uIGlzXG4gKiB1c2VkIGFzIHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL29nZycsIFsnb2dhJywgJ29nZycsICdzcHgnXX0pO1xuICpcbiAqIEBwYXJhbSBtYXAgKE9iamVjdCkgdHlwZSBkZWZpbml0aW9uc1xuICovXG5NaW1lLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbiAobWFwKSB7XG4gIGZvciAodmFyIHR5cGUgaW4gbWFwKSB7XG4gICAgdmFyIGV4dHMgPSBtYXBbdHlwZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuREVCVUdfTUlNRSAmJiB0aGlzLnR5cGVzW2V4dHNbaV1dKSB7XG4gICAgICAgIGNvbnNvbGUud2FybigodGhpcy5fbG9hZGluZyB8fCBcImRlZmluZSgpXCIpLnJlcGxhY2UoLy4qXFwvLywgJycpLCAnY2hhbmdlcyBcIicgKyBleHRzW2ldICsgJ1wiIGV4dGVuc2lvbiB0eXBlIGZyb20gJyArXG4gICAgICAgICAgdGhpcy50eXBlc1tleHRzW2ldXSArICcgdG8gJyArIHR5cGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnR5cGVzW2V4dHNbaV1dID0gdHlwZTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IGV4dGVuc2lvbiBpcyB0aGUgZmlyc3Qgb25lIHdlIGVuY291bnRlclxuICAgIGlmICghdGhpcy5leHRlbnNpb25zW3R5cGVdKSB7XG4gICAgICB0aGlzLmV4dGVuc2lvbnNbdHlwZV0gPSBleHRzWzBdO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMb2FkIGFuIEFwYWNoZTItc3R5bGUgXCIudHlwZXNcIiBmaWxlXG4gKlxuICogVGhpcyBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIChpdCdzIGV4cGVjdGVkKS4gIFdoZXJlIGZpbGVzIGRlY2xhcmVcbiAqIG92ZXJsYXBwaW5nIHR5cGVzL2V4dGVuc2lvbnMsIHRoZSBsYXN0IGZpbGUgd2lucy5cbiAqXG4gKiBAcGFyYW0gZmlsZSAoU3RyaW5nKSBwYXRoIG9mIGZpbGUgdG8gbG9hZC5cbiAqL1xuTWltZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgdGhpcy5fbG9hZGluZyA9IGZpbGU7XG4gIC8vIFJlYWQgZmlsZSBhbmQgc3BsaXQgaW50byBsaW5lc1xuICB2YXIgbWFwID0ge30sXG4gICAgICBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUsICdhc2NpaScpLFxuICAgICAgbGluZXMgPSBjb250ZW50LnNwbGl0KC9bXFxyXFxuXSsvKTtcblxuICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAvLyBDbGVhbiB1cCB3aGl0ZXNwYWNlL2NvbW1lbnRzLCBhbmQgc3BsaXQgaW50byBmaWVsZHNcbiAgICB2YXIgZmllbGRzID0gbGluZS5yZXBsYWNlKC9cXHMqIy4qfF5cXHMqfFxccyokL2csICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgIG1hcFtmaWVsZHMuc2hpZnQoKV0gPSBmaWVsZHM7XG4gIH0pO1xuXG4gIHRoaXMuZGVmaW5lKG1hcCk7XG5cbiAgdGhpcy5fbG9hZGluZyA9IG51bGw7XG59O1xuXG4vKipcbiAqIExvb2t1cCBhIG1pbWUgdHlwZSBiYXNlZCBvbiBleHRlbnNpb25cbiAqL1xuTWltZS5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24ocGF0aCwgZmFsbGJhY2spIHtcbiAgdmFyIGV4dCA9IHBhdGgucmVwbGFjZSgvXi4qW1xcLlxcL1xcXFxdLywgJycpLnRvTG93ZXJDYXNlKCk7XG5cbiAgcmV0dXJuIHRoaXMudHlwZXNbZXh0XSB8fCBmYWxsYmFjayB8fCB0aGlzLmRlZmF1bHRfdHlwZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGZpbGUgZXh0ZW5zaW9uIGFzc29jaWF0ZWQgd2l0aCBhIG1pbWUgdHlwZVxuICovXG5NaW1lLnByb3RvdHlwZS5leHRlbnNpb24gPSBmdW5jdGlvbihtaW1lVHlwZSkge1xuICB2YXIgdHlwZSA9IG1pbWVUeXBlLm1hdGNoKC9eXFxzKihbXjtcXHNdKikoPzo7fFxcc3wkKS8pWzFdLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbdHlwZV07XG59O1xuXG4vLyBEZWZhdWx0IGluc3RhbmNlXG52YXIgbWltZSA9IG5ldyBNaW1lKCk7XG5cbi8vIERlZmluZSBidWlsdC1pbiB0eXBlc1xubWltZS5kZWZpbmUocmVxdWlyZSgnLi90eXBlcy5qc29uJykpO1xuXG4vLyBEZWZhdWx0IHR5cGVcbm1pbWUuZGVmYXVsdF90eXBlID0gbWltZS5sb29rdXAoJ2JpbicpO1xuXG4vL1xuLy8gQWRkaXRpb25hbCBBUEkgc3BlY2lmaWMgdG8gdGhlIGRlZmF1bHQgaW5zdGFuY2Vcbi8vXG5cbm1pbWUuTWltZSA9IE1pbWU7XG5cbi8qKlxuICogTG9va3VwIGEgY2hhcnNldCBiYXNlZCBvbiBtaW1lIHR5cGUuXG4gKi9cbm1pbWUuY2hhcnNldHMgPSB7XG4gIGxvb2t1cDogZnVuY3Rpb24obWltZVR5cGUsIGZhbGxiYWNrKSB7XG4gICAgLy8gQXNzdW1lIHRleHQgdHlwZXMgYXJlIHV0ZjhcbiAgICByZXR1cm4gKC9edGV4dFxcL3xeYXBwbGljYXRpb25cXC8oamF2YXNjcmlwdHxqc29uKS8pLnRlc3QobWltZVR5cGUpID8gJ1VURi04JyA6IGZhbGxiYWNrO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1pbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgaW5kaWNlczogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgIG9iamVjdCxcbiAgICBwcmVmaXgsXG4gICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgc2tpcE51bGxzLFxuICAgIGVuY29kZXIsXG4gICAgZmlsdGVyLFxuICAgIHNvcnQsXG4gICAgYWxsb3dEb3RzLFxuICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgZm9ybWF0dGVyLFxuICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgY2hhcnNldFxuKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmogPSBmaWx0ZXIocHJlZml4LCBvYmopO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBzZXJpYWxpemVEYXRlKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlciAmJiAhZW5jb2RlVmFsdWVzT25seSA/IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0KSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fCB0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0KTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgocHJlZml4LCBrZXkpLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgICAgICBlbmNvZGVyLFxuICAgICAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgICAgIGNoYXJzZXRcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHVzaFRvQXJyYXkodmFsdWVzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICAgICAgcHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGtleSA6ICdbJyArIGtleSArICddJyksXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgICAgIGVuY29kZXIsXG4gICAgICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICAgICAgY2hhcnNldFxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBvcHRzKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgPyB1dGlscy5hc3NpZ24oe30sIG9wdHMpIDoge307XG5cbiAgICBpZiAob3B0aW9ucy5lbmNvZGVyICE9PSBudWxsICYmIG9wdGlvbnMuZW5jb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmVuY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW5jb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgZGVsaW1pdGVyID0gdHlwZW9mIG9wdGlvbnMuZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmRlbGltaXRlciA6IG9wdGlvbnMuZGVsaW1pdGVyO1xuICAgIHZhciBzdHJpY3ROdWxsSGFuZGxpbmcgPSB0eXBlb2Ygb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nO1xuICAgIHZhciBza2lwTnVsbHMgPSB0eXBlb2Ygb3B0aW9ucy5za2lwTnVsbHMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc2tpcE51bGxzIDogZGVmYXVsdHMuc2tpcE51bGxzO1xuICAgIHZhciBlbmNvZGUgPSB0eXBlb2Ygb3B0aW9ucy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlO1xuICAgIHZhciBlbmNvZGVyID0gdHlwZW9mIG9wdGlvbnMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXI7XG4gICAgdmFyIHNvcnQgPSB0eXBlb2Ygb3B0aW9ucy5zb3J0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5zb3J0IDogbnVsbDtcbiAgICB2YXIgYWxsb3dEb3RzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0aW9ucy5hbGxvd0RvdHM7XG4gICAgdmFyIHNlcmlhbGl6ZURhdGUgPSB0eXBlb2Ygb3B0aW9ucy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMuc2VyaWFsaXplRGF0ZTtcbiAgICB2YXIgZW5jb2RlVmFsdWVzT25seSA9IHR5cGVvZiBvcHRpb25zLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHk7XG4gICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0aW9ucy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdGlvbnMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZm9ybWF0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zLmZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZm9ybWF0cy5mb3JtYXR0ZXJzLCBvcHRpb25zLmZvcm1hdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW29wdGlvbnMuZm9ybWF0XTtcbiAgICB2YXIgb2JqS2V5cztcbiAgICB2YXIgZmlsdGVyO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBhcnJheUZvcm1hdDtcbiAgICBpZiAob3B0aW9ucy5hcnJheUZvcm1hdCBpbiBhcnJheVByZWZpeEdlbmVyYXRvcnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRpb25zLmFycmF5Rm9ybWF0O1xuICAgIH0gZWxzZSBpZiAoJ2luZGljZXMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRpb25zLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1thcnJheUZvcm1hdF07XG5cbiAgICBpZiAoIW9iaktleXMpIHtcbiAgICAgICAgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKHNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KHNvcnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICBlbmNvZGUgPyBlbmNvZGVyIDogbnVsbCxcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIGNoYXJzZXRcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihkZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpLCB0aGUgXCJudW1lcmljIGVudGl0eVwiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0ImJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lRTIlOUMlOTMmJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgZGVjb2RlcjogdXRpbHMuZGVjb2RlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IGZhbHNlLFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwLFxuICAgIHBhcnNlQXJyYXlzOiB0cnVlLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGludGVycHJldE51bWVyaWNFbnRpdGllcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYjKFxcZCspOy9nLCBmdW5jdGlvbiAoJDAsIG51bWJlclN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChudW1iZXJTdHIsIDEwKSk7XG4gICAgfSk7XG59O1xuXG4vLyBUaGlzIGlzIHdoYXQgYnJvd3NlcnMgd2lsbCBzdWJtaXQgd2hlbiB0aGUg4pyTIGNoYXJhY3RlciBvY2N1cnMgaW4gYW5cbi8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBib2R5IGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBhZ2UgY29udGFpbmluZ1xuLy8gdGhlIGZvcm0gaXMgaXNvLTg4NTktMSwgb3Igd2hlbiB0aGUgc3VibWl0dGVkIGZvcm0gaGFzIGFuIGFjY2VwdC1jaGFyc2V0XG4vLyBhdHRyaWJ1dGUgb2YgaXNvLTg4NTktMS4gUHJlc3VtYWJseSBhbHNvIHdpdGggb3RoZXIgY2hhcnNldHMgdGhhdCBkbyBub3QgY29udGFpblxuLy8gdGhlIOKckyBjaGFyYWN0ZXIsIHN1Y2ggYXMgdXMtYXNjaWkuXG52YXIgaXNvU2VudGluZWwgPSAndXRmOD0lMjYlMjMxMDAwMyUzQic7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKVxuXG4vLyBUaGVzZSBhcmUgdGhlIHBlcmNlbnQtZW5jb2RlZCB1dGYtOCBvY3RldHMgcmVwcmVzZW50aW5nIGEgY2hlY2ttYXJrLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlcXVlc3QgYWN0dWFsbHkgaXMgdXRmLTggZW5jb2RlZC5cbnZhciBjaGFyc2V0U2VudGluZWwgPSAndXRmOD0lRTIlOUMlOTMnOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG5cbnZhciBwYXJzZVZhbHVlcyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdWYWx1ZXMoc3RyLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBjbGVhblN0ciA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPyBzdHIucmVwbGFjZSgvXlxcPy8sICcnKSA6IHN0cjtcbiAgICB2YXIgbGltaXQgPSBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMucGFyYW1ldGVyTGltaXQ7XG4gICAgdmFyIHBhcnRzID0gY2xlYW5TdHIuc3BsaXQob3B0aW9ucy5kZWxpbWl0ZXIsIGxpbWl0KTtcbiAgICB2YXIgc2tpcEluZGV4ID0gLTE7IC8vIEtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHV0Zjggc2VudGluZWwgd2FzIGZvdW5kXG4gICAgdmFyIGk7XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldDtcbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAocGFydHNbaV0uaW5kZXhPZigndXRmOD0nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV0gPT09IGlzb1NlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAnaXNvLTg4NTktMSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNraXBJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaSA9IHBhcnRzLmxlbmd0aDsgLy8gVGhlIGVzbGludCBzZXR0aW5ncyBkbyBub3QgYWxsb3cgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgPT09IHNraXBJbmRleCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcblxuICAgICAgICB2YXIgYnJhY2tldEVxdWFsc1BvcyA9IHBhcnQuaW5kZXhPZignXT0nKTtcbiAgICAgICAgdmFyIHBvcyA9IGJyYWNrZXRFcXVhbHNQb3MgPT09IC0xID8gcGFydC5pbmRleE9mKCc9JykgOiBicmFja2V0RXF1YWxzUG9zICsgMTtcblxuICAgICAgICB2YXIga2V5LCB2YWw7XG4gICAgICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA/IG51bGwgOiAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKDAsIHBvcyksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UocG9zICsgMSksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCAmJiBvcHRpb25zLmludGVycHJldE51bWVyaWNFbnRpdGllcyAmJiBjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIHZhbCA9IGludGVycHJldE51bWVyaWNFbnRpdGllcyh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zKSB7XG4gICAgdmFyIGxlYWYgPSB2YWw7XG5cbiAgICBmb3IgKHZhciBpID0gY2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIG9iajtcbiAgICAgICAgdmFyIHJvb3QgPSBjaGFpbltpXTtcblxuICAgICAgICBpZiAocm9vdCA9PT0gJ1tdJyAmJiBvcHRpb25zLnBhcnNlQXJyYXlzKSB7XG4gICAgICAgICAgICBvYmogPSBbXS5jb25jYXQobGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBhcnNlQXJyYXlzICYmIGNsZWFuUm9vdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmogPSB7IDA6IGxlYWYgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlICgoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgPyB1dGlscy5hc3NpZ24oe30sIG9wdHMpIDoge307XG5cbiAgICBpZiAob3B0aW9ucy5kZWNvZGVyICE9PSBudWxsICYmIG9wdGlvbnMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZTtcbiAgICBvcHRpb25zLmRlbGltaXRlciA9IHR5cGVvZiBvcHRpb25zLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0aW9ucy5kZWxpbWl0ZXIpID8gb3B0aW9ucy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXI7XG4gICAgb3B0aW9ucy5kZXB0aCA9IHR5cGVvZiBvcHRpb25zLmRlcHRoID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuZGVwdGggOiBkZWZhdWx0cy5kZXB0aDtcbiAgICBvcHRpb25zLmFycmF5TGltaXQgPSB0eXBlb2Ygb3B0aW9ucy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQ7XG4gICAgb3B0aW9ucy5wYXJzZUFycmF5cyA9IG9wdGlvbnMucGFyc2VBcnJheXMgIT09IGZhbHNlO1xuICAgIG9wdGlvbnMuZGVjb2RlciA9IHR5cGVvZiBvcHRpb25zLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyO1xuICAgIG9wdGlvbnMuYWxsb3dEb3RzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0aW9ucy5hbGxvd0RvdHM7XG4gICAgb3B0aW9ucy5wbGFpbk9iamVjdHMgPSB0eXBlb2Ygb3B0aW9ucy5wbGFpbk9iamVjdHMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMucGxhaW5PYmplY3RzIDogZGVmYXVsdHMucGxhaW5PYmplY3RzO1xuICAgIG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcztcbiAgICBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID0gdHlwZW9mIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0O1xuICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID0gdHlwZW9mIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRpb25zLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0aW9ucy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFyc2V0ID0gZGVmYXVsdHMuY2hhcnNldDtcbiAgICB9XG5cbiAgICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIH1cblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBwYXJzZVZhbHVlcyhzdHIsIG9wdGlvbnMpIDogc3RyO1xuICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5cyBhbmQgc2V0dXAgdGhlIG5ldyBvYmplY3RcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGVtcE9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgbmV3T2JqID0gcGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zKTtcbiAgICAgICAgb2JqID0gdXRpbHMubWVyZ2Uob2JqLCBuZXdPYmosIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5jb21wYWN0KG9iaik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBvZiBtaXhlZC1pbiBmdW5jdGlvbnMgc2hhcmVkIGJldHdlZW4gbm9kZSBhbmQgY2xpZW50IGNvZGVcbiAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pcy1vYmplY3QnKTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlcXVlc3RCYXNlYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlcXVlc3RCYXNlYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3RCYXNlKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGUgcHJvdG90eXBlIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBSZXF1ZXN0QmFzZS5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IFJlcXVlc3RCYXNlLnByb3RvdHlwZVtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQ2xlYXIgcHJldmlvdXMgdGltZW91dC5cbiAqXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLmNsZWFyVGltZW91dCA9IGZ1bmN0aW9uIF9jbGVhclRpbWVvdXQoKXtcbiAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyKTtcbiAgZGVsZXRlIHRoaXMuX3RpbWVyO1xuICBkZWxldGUgdGhpcy5fcmVzcG9uc2VUaW1lb3V0VGltZXI7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBkZWZhdWx0IHJlc3BvbnNlIGJvZHkgcGFyc2VyXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byBjb252ZXJ0IGluY29taW5nIGRhdGEgaW50byByZXF1ZXN0LmJvZHlcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZShmbil7XG4gIHRoaXMuX3BhcnNlciA9IGZuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IGZvcm1hdCBvZiBiaW5hcnkgcmVzcG9uc2UgYm9keS5cbiAqIEluIGJyb3dzZXIgdmFsaWQgZm9ybWF0cyBhcmUgJ2Jsb2InIGFuZCAnYXJyYXlidWZmZXInLFxuICogd2hpY2ggcmV0dXJuIEJsb2IgYW5kIEFycmF5QnVmZmVyLCByZXNwZWN0aXZlbHkuXG4gKlxuICogSW4gTm9kZSBhbGwgdmFsdWVzIHJlc3VsdCBpbiBCdWZmZXIuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAucmVzcG9uc2VUeXBlKCdibG9iJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnJlc3BvbnNlVHlwZSA9IGZ1bmN0aW9uKHZhbCl7XG4gIHRoaXMuX3Jlc3BvbnNlVHlwZSA9IHZhbDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGRlZmF1bHQgcmVxdWVzdCBib2R5IHNlcmlhbGl6ZXJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHRvIGNvbnZlcnQgZGF0YSBzZXQgdmlhIC5zZW5kIG9yIC5hdHRhY2ggaW50byBwYXlsb2FkIHRvIHNlbmRcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gc2VyaWFsaXplKGZuKXtcbiAgdGhpcy5fc2VyaWFsaXplciA9IGZuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRpbWVvdXRzLlxuICpcbiAqIC0gcmVzcG9uc2UgdGltZW91dCBpcyB0aW1lIGJldHdlZW4gc2VuZGluZyByZXF1ZXN0IGFuZCByZWNlaXZpbmcgdGhlIGZpcnN0IGJ5dGUgb2YgdGhlIHJlc3BvbnNlLiBJbmNsdWRlcyBETlMgYW5kIGNvbm5lY3Rpb24gdGltZS5cbiAqIC0gZGVhZGxpbmUgaXMgdGhlIHRpbWUgZnJvbSBzdGFydCBvZiB0aGUgcmVxdWVzdCB0byByZWNlaXZpbmcgcmVzcG9uc2UgYm9keSBpbiBmdWxsLiBJZiB0aGUgZGVhZGxpbmUgaXMgdG9vIHNob3J0IGxhcmdlIGZpbGVzIG1heSBub3QgbG9hZCBhdCBhbGwgb24gc2xvdyBjb25uZWN0aW9ucy5cbiAqXG4gKiBWYWx1ZSBvZiAwIG9yIGZhbHNlIG1lYW5zIG5vIHRpbWVvdXQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSBtcyBvciB7cmVzcG9uc2UsIGRlYWRsaW5lfVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gdGltZW91dChvcHRpb25zKXtcbiAgaWYgKCFvcHRpb25zIHx8ICdvYmplY3QnICE9PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIHRoaXMuX3RpbWVvdXQgPSBvcHRpb25zO1xuICAgIHRoaXMuX3Jlc3BvbnNlVGltZW91dCA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmb3IodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgc3dpdGNoKG9wdGlvbikge1xuICAgICAgY2FzZSAnZGVhZGxpbmUnOlxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucy5kZWFkbGluZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXNwb25zZSc6XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlVGltZW91dCA9IG9wdGlvbnMucmVzcG9uc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uc29sZS53YXJuKFwiVW5rbm93biB0aW1lb3V0IG9wdGlvblwiLCBvcHRpb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IG51bWJlciBvZiByZXRyeSBhdHRlbXB0cyBvbiBlcnJvci5cbiAqXG4gKiBGYWlsZWQgcmVxdWVzdHMgd2lsbCBiZSByZXRyaWVkICdjb3VudCcgdGltZXMgaWYgdGltZW91dCBvciBlcnIuY29kZSA+PSA1MDAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnJldHJ5ID0gZnVuY3Rpb24gcmV0cnkoY291bnQsIGZuKXtcbiAgLy8gRGVmYXVsdCB0byAxIGlmIG5vIGNvdW50IHBhc3NlZCBvciB0cnVlXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IGNvdW50ID09PSB0cnVlKSBjb3VudCA9IDE7XG4gIGlmIChjb3VudCA8PSAwKSBjb3VudCA9IDA7XG4gIHRoaXMuX21heFJldHJpZXMgPSBjb3VudDtcbiAgdGhpcy5fcmV0cmllcyA9IDA7XG4gIHRoaXMuX3JldHJ5Q2FsbGJhY2sgPSBmbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG52YXIgRVJST1JfQ09ERVMgPSBbXG4gICdFQ09OTlJFU0VUJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFQUREUklORk8nLFxuICAnRVNPQ0tFVFRJTUVET1VUJ1xuXTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSByZXF1ZXN0IHNob3VsZCBiZSByZXRyaWVkLlxuICogKEJvcnJvd2VkIGZyb20gc2VnbWVudGlvL3N1cGVyYWdlbnQtcmV0cnkpXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyXG4gKiBAcGFyYW0ge1Jlc3BvbnNlfSBbcmVzXVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fc2hvdWxkUmV0cnkgPSBmdW5jdGlvbihlcnIsIHJlcykge1xuICBpZiAoIXRoaXMuX21heFJldHJpZXMgfHwgdGhpcy5fcmV0cmllcysrID49IHRoaXMuX21heFJldHJpZXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMuX3JldHJ5Q2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG92ZXJyaWRlID0gdGhpcy5fcmV0cnlDYWxsYmFjayhlcnIsIHJlcyk7XG4gICAgICBpZiAob3ZlcnJpZGUgPT09IHRydWUpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKG92ZXJyaWRlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gdW5kZWZpbmVkIGZhbGxzIGJhY2sgdG8gZGVmYXVsdHNcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG4gIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAmJiByZXMuc3RhdHVzID49IDUwMCAmJiByZXMuc3RhdHVzICE9IDUwMSkgcmV0dXJuIHRydWU7XG4gIGlmIChlcnIpIHtcbiAgICBpZiAoZXJyLmNvZGUgJiYgfkVSUk9SX0NPREVTLmluZGV4T2YoZXJyLmNvZGUpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBTdXBlcmFnZW50IHRpbWVvdXRcbiAgICBpZiAoZXJyLnRpbWVvdXQgJiYgZXJyLmNvZGUgPT0gJ0VDT05OQUJPUlRFRCcpIHJldHVybiB0cnVlO1xuICAgIGlmIChlcnIuY3Jvc3NEb21haW4pIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUmV0cnkgcmVxdWVzdFxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9yZXRyeSA9IGZ1bmN0aW9uKCkge1xuXG4gIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG5cbiAgLy8gbm9kZVxuICBpZiAodGhpcy5yZXEpIHtcbiAgICB0aGlzLnJlcSA9IG51bGw7XG4gICAgdGhpcy5yZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgfVxuXG4gIHRoaXMuX2Fib3J0ZWQgPSBmYWxzZTtcbiAgdGhpcy50aW1lZG91dCA9IGZhbHNlO1xuXG4gIHJldHVybiB0aGlzLl9lbmQoKTtcbn07XG5cbi8qKlxuICogUHJvbWlzZSBzdXBwb3J0XG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JlamVjdF1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiB0aGVuKHJlc29sdmUsIHJlamVjdCkge1xuICBpZiAoIXRoaXMuX2Z1bGxmaWxsZWRQcm9taXNlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0aGlzLl9lbmRDYWxsZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IHN1cGVyYWdlbnQgcmVxdWVzdCB3YXMgc2VudCB0d2ljZSwgYmVjYXVzZSBib3RoIC5lbmQoKSBhbmQgLnRoZW4oKSB3ZXJlIGNhbGxlZC4gTmV2ZXIgY2FsbCAuZW5kKCkgaWYgeW91IHVzZSBwcm9taXNlc1wiKTtcbiAgICB9XG4gICAgdGhpcy5fZnVsbGZpbGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihpbm5lclJlc29sdmUsIGlubmVyUmVqZWN0KSB7XG4gICAgICBzZWxmLmVuZChmdW5jdGlvbihlcnIsIHJlcykge1xuICAgICAgICBpZiAoZXJyKSBpbm5lclJlamVjdChlcnIpO1xuICAgICAgICBlbHNlIGlubmVyUmVzb2x2ZShyZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2Z1bGxmaWxsZWRQcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uKGNiKSB7XG4gIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBjYik7XG59O1xuXG4vKipcbiAqIEFsbG93IGZvciBleHRlbnNpb25cbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZuKSB7XG4gIGZuKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5vayA9IGZ1bmN0aW9uKGNiKSB7XG4gIGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2YgY2IpIHRocm93IEVycm9yKFwiQ2FsbGJhY2sgcmVxdWlyZWRcIik7XG4gIHRoaXMuX29rQ2FsbGJhY2sgPSBjYjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX2lzUmVzcG9uc2VPSyA9IGZ1bmN0aW9uKHJlcykge1xuICBpZiAoIXJlcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl9va0NhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX29rQ2FsbGJhY2socmVzKTtcbiAgfVxuXG4gIHJldHVybiByZXMuc3RhdHVzID49IDIwMCAmJiByZXMuc3RhdHVzIDwgMzAwO1xufTtcblxuLyoqXG4gKiBHZXQgcmVxdWVzdCBoZWFkZXIgYGZpZWxkYC5cbiAqIENhc2UtaW5zZW5zaXRpdmUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihmaWVsZCl7XG4gIHJldHVybiB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG59O1xuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGhlYWRlciBgZmllbGRgIHZhbHVlLlxuICogVGhpcyBpcyBhIGRlcHJlY2F0ZWQgaW50ZXJuYWwgQVBJLiBVc2UgYC5nZXQoZmllbGQpYCBpbnN0ZWFkLlxuICpcbiAqIChnZXRIZWFkZXIgaXMgbm8gbG9uZ2VyIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgc3VwZXJhZ2VudCBjb2RlIGJhc2UpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqIEBkZXByZWNhdGVkXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLmdldEhlYWRlciA9IFJlcXVlc3RCYXNlLnByb3RvdHlwZS5nZXQ7XG5cbi8qKlxuICogU2V0IGhlYWRlciBgZmllbGRgIHRvIGB2YWxgLCBvciBtdWx0aXBsZSBmaWVsZHMgd2l0aCBvbmUgb2JqZWN0LlxuICogQ2FzZS1pbnNlbnNpdGl2ZS5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuc2V0KCdYLUFQSS1LZXknLCAnZm9vYmFyJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC5zZXQoeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgJ1gtQVBJLUtleSc6ICdmb29iYXInIH0pXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBmaWVsZFxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihmaWVsZCwgdmFsKXtcbiAgaWYgKGlzT2JqZWN0KGZpZWxkKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBmaWVsZCkge1xuICAgICAgdGhpcy5zZXQoa2V5LCBmaWVsZFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdGhpcy5faGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldID0gdmFsO1xuICB0aGlzLmhlYWRlcltmaWVsZF0gPSB2YWw7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgaGVhZGVyIGBmaWVsZGAuXG4gKiBDYXNlLWluc2Vuc2l0aXZlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAudW5zZXQoJ1VzZXItQWdlbnQnKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICovXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbihmaWVsZCl7XG4gIGRlbGV0ZSB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG4gIGRlbGV0ZSB0aGlzLmhlYWRlcltmaWVsZF07XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXcml0ZSB0aGUgZmllbGQgYG5hbWVgIGFuZCBgdmFsYCwgb3IgbXVsdGlwbGUgZmllbGRzIHdpdGggb25lIG9iamVjdFxuICogZm9yIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIHJlcXVlc3QgYm9kaWVzLlxuICpcbiAqIGBgYCBqc1xuICogcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAqICAgLmZpZWxkKCdmb28nLCAnYmFyJylcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAqICAgLmZpZWxkKHsgZm9vOiAnYmFyJywgYmF6OiAncXV4JyB9KVxuICogICAuZW5kKGNhbGxiYWNrKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd8QmxvYnxGaWxlfEJ1ZmZlcnxmcy5SZWFkU3RyZWFtfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLmZpZWxkID0gZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gIC8vIG5hbWUgc2hvdWxkIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiBvYmplY3QuXG4gIGlmIChudWxsID09PSBuYW1lIHx8IHVuZGVmaW5lZCA9PT0gbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignLmZpZWxkKG5hbWUsIHZhbCkgbmFtZSBjYW4gbm90IGJlIGVtcHR5Jyk7XG4gIH1cblxuICBpZiAodGhpcy5fZGF0YSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCIuZmllbGQoKSBjYW4ndCBiZSB1c2VkIGlmIC5zZW5kKCkgaXMgdXNlZC4gUGxlYXNlIHVzZSBvbmx5IC5zZW5kKCkgb3Igb25seSAuZmllbGQoKSAmIC5hdHRhY2goKVwiKTtcbiAgfVxuXG4gIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICB0aGlzLmZpZWxkKGtleSwgbmFtZVtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgZm9yICh2YXIgaSBpbiB2YWwpIHtcbiAgICAgIHRoaXMuZmllbGQobmFtZSwgdmFsW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB2YWwgc2hvdWxkIGJlIGRlZmluZWQgbm93XG4gIGlmIChudWxsID09PSB2YWwgfHwgdW5kZWZpbmVkID09PSB2YWwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJy5maWVsZChuYW1lLCB2YWwpIHZhbCBjYW4gbm90IGJlIGVtcHR5Jyk7XG4gIH1cbiAgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbCkge1xuICAgIHZhbCA9ICcnICsgdmFsO1xuICB9XG4gIHRoaXMuX2dldEZvcm1EYXRhKCkuYXBwZW5kKG5hbWUsIHZhbCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBYm9ydCB0aGUgcmVxdWVzdCwgYW5kIGNsZWFyIHBvdGVudGlhbCB0aW1lb3V0LlxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpe1xuICBpZiAodGhpcy5fYWJvcnRlZCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRoaXMuX2Fib3J0ZWQgPSB0cnVlO1xuICB0aGlzLnhociAmJiB0aGlzLnhoci5hYm9ydCgpOyAvLyBicm93c2VyXG4gIHRoaXMucmVxICYmIHRoaXMucmVxLmFib3J0KCk7IC8vIG5vZGVcbiAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgdGhpcy5lbWl0KCdhYm9ydCcpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fYXV0aCA9IGZ1bmN0aW9uKHVzZXIsIHBhc3MsIG9wdGlvbnMsIGJhc2U2NEVuY29kZXIpIHtcbiAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICBjYXNlICdiYXNpYyc6XG4gICAgICB0aGlzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYmFzZTY0RW5jb2Rlcih1c2VyICsgJzonICsgcGFzcykpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdhdXRvJzpcbiAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VyO1xuICAgICAgdGhpcy5wYXNzd29yZCA9IHBhc3M7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2JlYXJlcic6IC8vIHVzYWdlIHdvdWxkIGJlIC5hdXRoKGFjY2Vzc1Rva2VuLCB7IHR5cGU6ICdiZWFyZXInIH0pXG4gICAgICB0aGlzLnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHVzZXIpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVuYWJsZSB0cmFuc21pc3Npb24gb2YgY29va2llcyB3aXRoIHgtZG9tYWluIHJlcXVlc3RzLlxuICpcbiAqIE5vdGUgdGhhdCBmb3IgdGhpcyB0byB3b3JrIHRoZSBvcmlnaW4gbXVzdCBub3QgYmVcbiAqIHVzaW5nIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIgd2l0aCBhIHdpbGRjYXJkLFxuICogYW5kIGFsc28gbXVzdCBzZXQgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc1wiXG4gKiB0byBcInRydWVcIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS53aXRoQ3JlZGVudGlhbHMgPSBmdW5jdGlvbihvbikge1xuICAvLyBUaGlzIGlzIGJyb3dzZXItb25seSBmdW5jdGlvbmFsaXR5LiBOb2RlIHNpZGUgaXMgbm8tb3AuXG4gIGlmIChvbiA9PSB1bmRlZmluZWQpIG9uID0gdHJ1ZTtcbiAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gb247XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heCByZWRpcmVjdHMgdG8gYG5gLiBEb2VzIG5vdGluZyBpbiBicm93c2VyIFhIUiBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5yZWRpcmVjdHMgPSBmdW5jdGlvbihuKXtcbiAgdGhpcy5fbWF4UmVkaXJlY3RzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE1heGltdW0gc2l6ZSBvZiBidWZmZXJlZCByZXNwb25zZSBib2R5LCBpbiBieXRlcy4gQ291bnRzIHVuY29tcHJlc3NlZCBzaXplLlxuICogRGVmYXVsdCAyMDBNQi5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5tYXhSZXNwb25zZVNpemUgPSBmdW5jdGlvbihuKXtcbiAgaWYgKCdudW1iZXInICE9PSB0eXBlb2Ygbikge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkludmFsaWQgYXJndW1lbnRcIik7XG4gIH1cbiAgdGhpcy5fbWF4UmVzcG9uc2VTaXplID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdG8gYSBwbGFpbiBqYXZhc2NyaXB0IG9iamVjdCAobm90IEpTT04gc3RyaW5nKSBvZiBzY2FsYXIgcHJvcGVydGllcy5cbiAqIE5vdGUgYXMgdGhpcyBtZXRob2QgaXMgZGVzaWduZWQgdG8gcmV0dXJuIGEgdXNlZnVsIG5vbi10aGlzIHZhbHVlLFxuICogaXQgY2Fubm90IGJlIGNoYWluZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZXNjcmliaW5nIG1ldGhvZCwgdXJsLCBhbmQgZGF0YSBvZiB0aGlzIHJlcXVlc3RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgdXJsOiB0aGlzLnVybCxcbiAgICBkYXRhOiB0aGlzLl9kYXRhLFxuICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcixcbiAgfTtcbn07XG5cbi8qKlxuICogU2VuZCBgZGF0YWAgYXMgdGhlIHJlcXVlc3QgYm9keSwgZGVmYXVsdGluZyB0aGUgYC50eXBlKClgIHRvIFwianNvblwiIHdoZW5cbiAqIGFuIG9iamVjdCBpcyBnaXZlbi5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgICAvLyBtYW51YWwganNvblxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdqc29uJylcbiAqICAgICAgICAgLnNlbmQoJ3tcIm5hbWVcIjpcInRqXCJ9JylcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBhdXRvIGpzb25cbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBtYW51YWwgeC13d3ctZm9ybS11cmxlbmNvZGVkXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnR5cGUoJ2Zvcm0nKVxuICogICAgICAgICAuc2VuZCgnbmFtZT10aicpXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gYXV0byB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAudHlwZSgnZm9ybScpXG4gKiAgICAgICAgIC5zZW5kKHsgbmFtZTogJ3RqJyB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGRlZmF1bHRzIHRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICogICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAuc2VuZCgnbmFtZT10b2JpJylcbiAqICAgICAgICAuc2VuZCgnc3BlY2llcz1mZXJyZXQnKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBkYXRhXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKXtcbiAgdmFyIGlzT2JqID0gaXNPYmplY3QoZGF0YSk7XG4gIHZhciB0eXBlID0gdGhpcy5faGVhZGVyWydjb250ZW50LXR5cGUnXTtcblxuICBpZiAodGhpcy5fZm9ybURhdGEpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiLnNlbmQoKSBjYW4ndCBiZSB1c2VkIGlmIC5hdHRhY2goKSBvciAuZmllbGQoKSBpcyB1c2VkLiBQbGVhc2UgdXNlIG9ubHkgLnNlbmQoKSBvciBvbmx5IC5maWVsZCgpICYgLmF0dGFjaCgpXCIpO1xuICB9XG5cbiAgaWYgKGlzT2JqICYmICF0aGlzLl9kYXRhKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBbXTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc0hvc3QoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGF0YSAmJiB0aGlzLl9kYXRhICYmIHRoaXMuX2lzSG9zdCh0aGlzLl9kYXRhKSkge1xuICAgIHRocm93IEVycm9yKFwiQ2FuJ3QgbWVyZ2UgdGhlc2Ugc2VuZCBjYWxsc1wiKTtcbiAgfVxuXG4gIC8vIG1lcmdlXG4gIGlmIChpc09iaiAmJiBpc09iamVjdCh0aGlzLl9kYXRhKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICB0aGlzLl9kYXRhW2tleV0gPSBkYXRhW2tleV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBkYXRhKSB7XG4gICAgLy8gZGVmYXVsdCB0byB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAgICBpZiAoIXR5cGUpIHRoaXMudHlwZSgnZm9ybScpO1xuICAgIHR5cGUgPSB0aGlzLl9oZWFkZXJbJ2NvbnRlbnQtdHlwZSddO1xuICAgIGlmICgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyA9PSB0eXBlKSB7XG4gICAgICB0aGlzLl9kYXRhID0gdGhpcy5fZGF0YVxuICAgICAgICA/IHRoaXMuX2RhdGEgKyAnJicgKyBkYXRhXG4gICAgICAgIDogZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGF0YSA9ICh0aGlzLl9kYXRhIHx8ICcnKSArIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB9XG5cbiAgaWYgKCFpc09iaiB8fCB0aGlzLl9pc0hvc3QoZGF0YSkpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdG8ganNvblxuICBpZiAoIXR5cGUpIHRoaXMudHlwZSgnanNvbicpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU29ydCBgcXVlcnlzdHJpbmdgIGJ5IHRoZSBzb3J0IGZ1bmN0aW9uXG4gKlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgIC8vIGRlZmF1bHQgb3JkZXJcbiAqICAgICAgIHJlcXVlc3QuZ2V0KCcvdXNlcicpXG4gKiAgICAgICAgIC5xdWVyeSgnbmFtZT1OaWNrJylcbiAqICAgICAgICAgLnF1ZXJ5KCdzZWFyY2g9TWFubnknKVxuICogICAgICAgICAuc29ydFF1ZXJ5KClcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBjdXN0b21pemVkIHNvcnQgZnVuY3Rpb25cbiAqICAgICAgIHJlcXVlc3QuZ2V0KCcvdXNlcicpXG4gKiAgICAgICAgIC5xdWVyeSgnbmFtZT1OaWNrJylcbiAqICAgICAgICAgLnF1ZXJ5KCdzZWFyY2g9TWFubnknKVxuICogICAgICAgICAuc29ydFF1ZXJ5KGZ1bmN0aW9uKGEsIGIpe1xuICogICAgICAgICAgIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICogICAgICAgICB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzb3J0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnNvcnRRdWVyeSA9IGZ1bmN0aW9uKHNvcnQpIHtcbiAgLy8gX3NvcnQgZGVmYXVsdCB0byB0cnVlIGJ1dCBvdGhlcndpc2UgY2FuIGJlIGEgZnVuY3Rpb24gb3IgYm9vbGVhblxuICB0aGlzLl9zb3J0ID0gdHlwZW9mIHNvcnQgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IHNvcnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb21wb3NlIHF1ZXJ5c3RyaW5nIHRvIGFwcGVuZCB0byByZXEudXJsXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fZmluYWxpemVRdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBxdWVyeSA9IHRoaXMuX3F1ZXJ5LmpvaW4oJyYnKTtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdGhpcy51cmwgKz0gKHRoaXMudXJsLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nKSArIHF1ZXJ5O1xuICB9XG4gIHRoaXMuX3F1ZXJ5Lmxlbmd0aCA9IDA7IC8vIE1ha2VzIHRoZSBjYWxsIGlkZW1wb3RlbnRcblxuICBpZiAodGhpcy5fc29ydCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMudXJsLmluZGV4T2YoJz8nKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIHF1ZXJ5QXJyID0gdGhpcy51cmwuc3Vic3RyaW5nKGluZGV4ICsgMSkuc3BsaXQoJyYnKTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgdGhpcy5fc29ydCkge1xuICAgICAgICBxdWVyeUFyci5zb3J0KHRoaXMuX3NvcnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlBcnIuc29ydCgpO1xuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5zdWJzdHJpbmcoMCwgaW5kZXgpICsgJz8nICsgcXVlcnlBcnIuam9pbignJicpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRm9yIGJhY2t3YXJkcyBjb21wYXQgb25seVxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9hcHBlbmRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCkge2NvbnNvbGUudHJhY2UoXCJVbnN1cHBvcnRlZFwiKTt9XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggdGltZW91dCBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX3RpbWVvdXRFcnJvciA9IGZ1bmN0aW9uKHJlYXNvbiwgdGltZW91dCwgZXJybm8pe1xuICBpZiAodGhpcy5fYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZXJyID0gbmV3IEVycm9yKHJlYXNvbiArIHRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnKTtcbiAgZXJyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICBlcnIuY29kZSA9ICdFQ09OTkFCT1JURUQnO1xuICBlcnIuZXJybm8gPSBlcnJubztcbiAgdGhpcy50aW1lZG91dCA9IHRydWU7XG4gIHRoaXMuYWJvcnQoKTtcbiAgdGhpcy5jYWxsYmFjayhlcnIpO1xufTtcblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9zZXRUaW1lb3V0cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gZGVhZGxpbmVcbiAgaWYgKHRoaXMuX3RpbWVvdXQgJiYgIXRoaXMuX3RpbWVyKSB7XG4gICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBzZWxmLl90aW1lb3V0RXJyb3IoJ1RpbWVvdXQgb2YgJywgc2VsZi5fdGltZW91dCwgJ0VUSU1FJyk7XG4gICAgfSwgdGhpcy5fdGltZW91dCk7XG4gIH1cbiAgLy8gcmVzcG9uc2UgdGltZW91dFxuICBpZiAodGhpcy5fcmVzcG9uc2VUaW1lb3V0ICYmICF0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lcikge1xuICAgIHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgc2VsZi5fdGltZW91dEVycm9yKCdSZXNwb25zZSB0aW1lb3V0IG9mICcsIHNlbGYuX3Jlc3BvbnNlVGltZW91dCwgJ0VUSU1FRE9VVCcpO1xuICAgIH0sIHRoaXMuX3Jlc3BvbnNlVGltZW91dCk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG51bGwgIT09IG9iaiAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbmNvbnN0IENvb2tpZUphciA9IHJlcXVpcmUoJ2Nvb2tpZWphcicpLkNvb2tpZUphcjtcbmNvbnN0IENvb2tpZUFjY2VzcyA9IHJlcXVpcmUoJ2Nvb2tpZWphcicpLkNvb2tpZUFjY2Vzc0luZm87XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJy4uLy4uJyk7XG5jb25zdCBBZ2VudEJhc2UgPSByZXF1aXJlKCcuLi9hZ2VudC1iYXNlJyk7XG5sZXQgbWV0aG9kcyA9IHJlcXVpcmUoJ21ldGhvZHMnKTtcblxuLyoqXG4gKiBFeHBvc2UgYEFnZW50YC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZW50O1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYEFnZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEFnZW50KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFnZW50KSkge1xuICAgIHJldHVybiBuZXcgQWdlbnQob3B0aW9ucyk7XG4gIH1cbiAgQWdlbnRCYXNlLmNhbGwodGhpcyk7XG4gIHRoaXMuamFyID0gbmV3IENvb2tpZUphcigpO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuY2EpIHt0aGlzLmNhKG9wdGlvbnMuY2EpO31cbiAgICBpZiAob3B0aW9ucy5rZXkpIHt0aGlzLmtleShvcHRpb25zLmtleSk7fVxuICAgIGlmIChvcHRpb25zLnBmeCkge3RoaXMucGZ4KG9wdGlvbnMucGZ4KTt9XG4gICAgaWYgKG9wdGlvbnMuY2VydCkge3RoaXMuY2VydChvcHRpb25zLmNlcnQpO31cbiAgfVxufVxuXG5BZ2VudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEFnZW50QmFzZS5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFNhdmUgdGhlIGNvb2tpZXMgaW4gdGhlIGdpdmVuIGByZXNgIHRvXG4gKiB0aGUgYWdlbnQncyBjb29raWUgamFyIGZvciBwZXJzaXN0ZW5jZS5cbiAqXG4gKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkFnZW50LnByb3RvdHlwZS5fc2F2ZUNvb2tpZXMgPSBmdW5jdGlvbihyZXMpIHtcbiAgY29uc3QgY29va2llcyA9IHJlcy5oZWFkZXJzWydzZXQtY29va2llJ107XG4gIGlmIChjb29raWVzKSB0aGlzLmphci5zZXRDb29raWVzKGNvb2tpZXMpO1xufTtcblxuLyoqXG4gKiBBdHRhY2ggY29va2llcyB3aGVuIGF2YWlsYWJsZSB0byB0aGUgZ2l2ZW4gYHJlcWAuXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkFnZW50LnByb3RvdHlwZS5fYXR0YWNoQ29va2llcyA9IGZ1bmN0aW9uKHJlcSkge1xuICBjb25zdCB1cmwgPSBwYXJzZShyZXEudXJsKTtcbiAgY29uc3QgYWNjZXNzID0gQ29va2llQWNjZXNzKFxuICAgIHVybC5ob3N0bmFtZSxcbiAgICB1cmwucGF0aG5hbWUsXG4gICAgJ2h0dHBzOicgPT0gdXJsLnByb3RvY29sXG4gICk7XG4gIGNvbnN0IGNvb2tpZXMgPSB0aGlzLmphci5nZXRDb29raWVzKGFjY2VzcykudG9WYWx1ZVN0cmluZygpO1xuICByZXEuY29va2llcyA9IGNvb2tpZXM7XG59O1xuXG5tZXRob2RzLmZvckVhY2gobmFtZSA9PiB7XG4gIGNvbnN0IG1ldGhvZCA9IG5hbWUudG9VcHBlckNhc2UoKTtcbiAgQWdlbnQucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24odXJsLCBmbikge1xuICAgIGNvbnN0IHJlcSA9IG5ldyByZXF1ZXN0LlJlcXVlc3QobWV0aG9kLCB1cmwpO1xuXG4gICAgcmVxLm9uKCdyZXNwb25zZScsIHRoaXMuX3NhdmVDb29raWVzLmJpbmQodGhpcykpO1xuICAgIHJlcS5vbigncmVkaXJlY3QnLCB0aGlzLl9zYXZlQ29va2llcy5iaW5kKHRoaXMpKTtcbiAgICByZXEub24oJ3JlZGlyZWN0JywgdGhpcy5fYXR0YWNoQ29va2llcy5iaW5kKHRoaXMsIHJlcSkpO1xuICAgIHRoaXMuX2F0dGFjaENvb2tpZXMocmVxKTtcbiAgICB0aGlzLl9zZXREZWZhdWx0cyhyZXEpO1xuXG4gICAgaWYgKGZuKSB7XG4gICAgICByZXEuZW5kKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcTtcbiAgfTtcbn0pO1xuXG5BZ2VudC5wcm90b3R5cGUuZGVsID0gQWdlbnQucHJvdG90eXBlWydkZWxldGUnXTtcbiIsImZ1bmN0aW9uIEFnZW50KCkge1xuICB0aGlzLl9kZWZhdWx0cyA9IFtdO1xufVxuXG5bXCJ1c2VcIiwgXCJvblwiLCBcIm9uY2VcIiwgXCJzZXRcIiwgXCJxdWVyeVwiLCBcInR5cGVcIiwgXCJhY2NlcHRcIiwgXCJhdXRoXCIsIFwid2l0aENyZWRlbnRpYWxzXCIsIFwic29ydFF1ZXJ5XCIsIFwicmV0cnlcIiwgXCJva1wiLCBcInJlZGlyZWN0c1wiLFxuIFwidGltZW91dFwiLCBcImJ1ZmZlclwiLCBcInNlcmlhbGl6ZVwiLCBcInBhcnNlXCIsIFwiY2FcIiwgXCJrZXlcIiwgXCJwZnhcIiwgXCJjZXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oZm4pIHtcbiAgLyoqIERlZmF1bHQgc2V0dGluZyBmb3IgYWxsIHJlcXVlc3RzIGZyb20gdGhpcyBhZ2VudCAqL1xuICBBZ2VudC5wcm90b3R5cGVbZm5dID0gZnVuY3Rpb24oLyp2YXJhcmdzKi8pIHtcbiAgICB0aGlzLl9kZWZhdWx0cy5wdXNoKHtmbjpmbiwgYXJndW1lbnRzOmFyZ3VtZW50c30pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59KTtcblxuQWdlbnQucHJvdG90eXBlLl9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKHJlcSkge1xuICAgIHRoaXMuX2RlZmF1bHRzLmZvckVhY2goZnVuY3Rpb24oZGVmKSB7XG4gICAgICByZXFbZGVmLmZuXS5hcHBseShyZXEsIGRlZi5hcmd1bWVudHMpO1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZ2VudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0c1snYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ10gPSByZXF1aXJlKCcuL3VybGVuY29kZWQnKTtcbmV4cG9ydHNbJ2FwcGxpY2F0aW9uL2pzb24nXSA9IHJlcXVpcmUoJy4vanNvbicpO1xuZXhwb3J0cy50ZXh0ID0gcmVxdWlyZSgnLi90ZXh0Jyk7XG5cbmNvbnN0IGJpbmFyeSA9IHJlcXVpcmUoJy4vaW1hZ2UnKTtcbmV4cG9ydHNbJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddID0gYmluYXJ5O1xuZXhwb3J0c1snYXBwbGljYXRpb24vcGRmJ10gPSBiaW5hcnk7XG5leHBvcnRzLmltYWdlID0gYmluYXJ5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgcXMgPSByZXF1aXJlKCdxcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlcywgZm4pe1xuICByZXMudGV4dCA9ICcnO1xuICByZXMuc2V0RW5jb2RpbmcoJ2FzY2lpJyk7XG4gIHJlcy5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICByZXMudGV4dCArPSBjaHVuaztcbiAgfSk7XG4gIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBmbihudWxsLCBxcy5wYXJzZShyZXMudGV4dCkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZm4oZXJyKTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUpTT04ocmVzLCBmbil7XG4gIHJlcy50ZXh0ID0gJyc7XG4gIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICByZXMub24oJ2RhdGEnLCBjaHVuayA9PiB7XG4gICAgcmVzLnRleHQgKz0gY2h1bms7XG4gIH0pO1xuICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgdmFyIGJvZHkgPSByZXMudGV4dCAmJiBKU09OLnBhcnNlKHJlcy50ZXh0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB2YXIgZXJyID0gZTtcbiAgICAgIC8vIGlzc3VlICM2NzU6IHJldHVybiB0aGUgcmF3IHJlc3BvbnNlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICBlcnIucmF3UmVzcG9uc2UgPSByZXMudGV4dCB8fCBudWxsO1xuICAgICAgLy8gaXNzdWUgIzg3NjogcmV0dXJuIHRoZSBodHRwIHN0YXR1cyBjb2RlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICBlcnIuc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBmbihlcnIsIGJvZHkpO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlcywgZm4pe1xuICByZXMudGV4dCA9ICcnO1xuICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgcmVzLm9uKCdkYXRhJywgY2h1bmsgPT4ge1xuICAgIHJlcy50ZXh0ICs9IGNodW5rO1xuICB9KTtcbiAgcmVzLm9uKCdlbmQnLCBmbik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChyZXMsIGZuKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBbXTsgLy8gQmluYXJ5IGRhdGEgbmVlZHMgYmluYXJ5IHN0b3JhZ2VcblxuICByZXMub24oJ2RhdGEnLCBjaHVuayA9PiB7XG4gICAgZGF0YS5wdXNoKGNodW5rKTtcbiAgfSk7XG4gIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgIGZuKG51bGwsIEJ1ZmZlci5jb25jYXQoZGF0YSkpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZW1vdmVDYWxsYmFjayA9IGZ1bmN0aW9uIHJlbW92ZUNhbGxiYWNrKF9yZWYpIHtcbiAgdmFyIHNjcmlwdCA9IF9yZWYuc2NyaXB0LFxuICAgICAgY2FsbGJhY2tOYW1lID0gX3JlZi5jYWxsYmFja05hbWUsXG4gICAgICB0aW1lb3V0ID0gX3JlZi50aW1lb3V0O1xuXG4gIGlmIChzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUpIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cbiAgZGVsZXRlIHdpbmRvd1tjYWxsYmFja05hbWVdO1xuXG4gIGNsZWFyVGltZW91dCh0aW1lb3V0KTsgLy8gY2xlYXIgdGltZW91dCAoZm9yIG9uZXJyb3IgZXZlbnQgbGlzdGVuZXIpXG59O1xuXG52YXIganNvbnAgPSBmdW5jdGlvbiBqc29ucChyZXF1ZXN0T3JDb25maWcpIHtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgY2FsbGJhY2tQYXJhbSA9IGNvbmZpZy5jYWxsYmFja1BhcmFtIHx8ICdjYWxsYmFjayc7XG4gICAgICB2YXIgY2FsbGJhY2tOYW1lID0gY29uZmlnLmNhbGxiYWNrTmFtZSB8fCAnc3VwZXJhZ2VudENhbGxiYWNrJyArIChuZXcgRGF0ZSgpLnZhbHVlT2YoKSArIHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiAxMDAwLCAxMCkpO1xuICAgICAgdmFyIHRpbWVvdXRMaW1pdCA9IGNvbmZpZy50aW1lb3V0IHx8IDEwMDA7XG5cbiAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChqc29ucC5lcnJvcldyYXBwZXIuYmluZCh0aGlzKSwgdGltZW91dExpbWl0KTtcblxuICAgICAgdGhpcy5fanNvbnAgPSB7XG4gICAgICAgIGNhbGxiYWNrTmFtZTogY2FsbGJhY2tOYW1lLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICAgIH07XG5cbiAgICAgIHdpbmRvd1tjYWxsYmFja05hbWVdID0ganNvbnAuY2FsbGJhY2tXcmFwcGVyLmJpbmQodGhpcyk7XG5cbiAgICAgIHRoaXMuX3F1ZXJ5LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGNhbGxiYWNrUGFyYW0pICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGNhbGxiYWNrTmFtZSkpO1xuICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gdGhpcy5fcXVlcnkuam9pbignJicpO1xuXG4gICAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gdGhpcy51cmwuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPyc7XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLnVybCArIHNlcGFyYXRvciArIHF1ZXJ5U3RyaW5nO1xuXG4gICAgICAgIHMuc3JjID0gdXJsO1xuXG4gICAgICAgIC8vIEhhbmRsZSBzY3JpcHQgbG9hZCBlcnJvciAjMjdcbiAgICAgICAgcy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBqc29ucC5lcnJvcldyYXBwZXIuY2FsbChfdGhpcywgZSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocyk7XG4gICAgICB0aGlzLl9qc29ucC5zY3JpcHQgPSBzO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICB9O1xuXG4gIHZhciByZXFGdW5jID0gZnVuY3Rpb24gcmVxRnVuYyhyZXF1ZXN0KSB7XG4gICAgLy8gSW4gY2FzZSB0aGlzIGlzIGluIG5vZGVqcywgcnVuIHdpdGhvdXQgbW9kaWZ5aW5nIHJlcXVlc3RcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZXF1ZXN0O1xuXG4gICAgcmVxdWVzdC5lbmQgPSBlbmQuY2FsbChyZXF1ZXN0LCByZXF1ZXN0T3JDb25maWcpO1xuICAgIHJldHVybiByZXF1ZXN0O1xuICB9O1xuXG4gIC8vIGlmIHJlcXVlc3RPckNvbmZpZyBpcyByZXF1ZXN0XG4gIGlmICh0eXBlb2YgcmVxdWVzdE9yQ29uZmlnLmVuZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiByZXFGdW5jKHJlcXVlc3RPckNvbmZpZyk7XG4gIH1cblxuICByZXR1cm4gcmVxRnVuYztcbn07XG5cbmpzb25wLmNhbGxiYWNrV3JhcHBlciA9IGZ1bmN0aW9uIGNhbGxiYWNrV3JhcHBlcihib2R5KSB7XG4gIHZhciBlcnIgPSBudWxsO1xuICB2YXIgcmVzID0geyBib2R5OiBib2R5IH07XG5cbiAgcmVtb3ZlQ2FsbGJhY2sodGhpcy5fanNvbnApO1xuXG4gIHRoaXMuX2pzb25wLmNhbGxiYWNrLmNhbGwodGhpcywgZXJyLCByZXMpO1xufTtcblxuanNvbnAuZXJyb3JXcmFwcGVyID0gZnVuY3Rpb24gZXJyb3JXcmFwcGVyKGVycm9yKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoJzQwNCBOb3QgZm91bmQnKTtcbiAgaWYgKGVycm9yICYmIGVycm9yIGluc3RhbmNlb2YgRXZlbnQgJiYgZXJyb3IudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBpc3N1ZScpO1xuICB9XG5cbiAgcmVtb3ZlQ2FsbGJhY2sodGhpcy5fanNvbnApO1xuXG4gIHRoaXMuX2pzb25wLmNhbGxiYWNrLmNhbGwodGhpcywgZXJyLCBudWxsKTtcbn07XG5cbi8vIFByZWZlciBub2RlL2Jyb3dzZXJpZnkgc3R5bGUgcmVxdWlyZXNcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ganNvbnA7XG59IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4geyBqc29ucDoganNvbnAgfTtcbiAgfSk7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdpbmRvdy5zdXBlcmFnZW50SlNPTlAgPSBqc29ucDtcbn0iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL2hlIHYxLjIuMCBieSBAbWF0aGlhcyB8IE1JVCBsaWNlbnNlICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgLlxuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLlxuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0bW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMgJiYgbW9kdWxlO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgLCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUsXG5cdC8vIGFuZCB1c2UgaXQgYXMgYHJvb3RgLlxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8vIEFsbCBhc3RyYWwgc3ltYm9scy5cblx0dmFyIHJlZ2V4QXN0cmFsU3ltYm9scyA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2c7XG5cdC8vIEFsbCBBU0NJSSBzeW1ib2xzIChub3QganVzdCBwcmludGFibGUgQVNDSUkpIGV4Y2VwdCB0aG9zZSBsaXN0ZWQgaW4gdGhlXG5cdC8vIGZpcnN0IGNvbHVtbiBvZiB0aGUgb3ZlcnJpZGVzIHRhYmxlLlxuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCN0YWJsZS1jaGFycmVmLW92ZXJyaWRlc1xuXHR2YXIgcmVnZXhBc2NpaVdoaXRlbGlzdCA9IC9bXFx4MDEtXFx4N0ZdL2c7XG5cdC8vIEFsbCBCTVAgc3ltYm9scyB0aGF0IGFyZSBub3QgQVNDSUkgbmV3bGluZXMsIHByaW50YWJsZSBBU0NJSSBzeW1ib2xzLCBvclxuXHQvLyBjb2RlIHBvaW50cyBsaXN0ZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBvZiB0aGUgb3ZlcnJpZGVzIHRhYmxlIG9uXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3RhYmxlLWNoYXJyZWYtb3ZlcnJpZGVzLlxuXHR2YXIgcmVnZXhCbXBXaGl0ZWxpc3QgPSAvW1xceDAxLVxcdFxceDBCXFxmXFx4MEUtXFx4MUZcXHg3RlxceDgxXFx4OERcXHg4RlxceDkwXFx4OURcXHhBMC1cXHVGRkZGXS9nO1xuXG5cdHZhciByZWdleEVuY29kZU5vbkFzY2lpID0gLzxcXHUyMEQyfD1cXHUyMEU1fD5cXHUyMEQyfFxcdTIwNUZcXHUyMDBBfFxcdTIxOURcXHUwMzM4fFxcdTIyMDJcXHUwMzM4fFxcdTIyMjBcXHUyMEQyfFxcdTIyMjlcXHVGRTAwfFxcdTIyMkFcXHVGRTAwfFxcdTIyM0NcXHUyMEQyfFxcdTIyM0RcXHUwMzMxfFxcdTIyM0VcXHUwMzMzfFxcdTIyNDJcXHUwMzM4fFxcdTIyNEJcXHUwMzM4fFxcdTIyNERcXHUyMEQyfFxcdTIyNEVcXHUwMzM4fFxcdTIyNEZcXHUwMzM4fFxcdTIyNTBcXHUwMzM4fFxcdTIyNjFcXHUyMEU1fFxcdTIyNjRcXHUyMEQyfFxcdTIyNjVcXHUyMEQyfFxcdTIyNjZcXHUwMzM4fFxcdTIyNjdcXHUwMzM4fFxcdTIyNjhcXHVGRTAwfFxcdTIyNjlcXHVGRTAwfFxcdTIyNkFcXHUwMzM4fFxcdTIyNkFcXHUyMEQyfFxcdTIyNkJcXHUwMzM4fFxcdTIyNkJcXHUyMEQyfFxcdTIyN0ZcXHUwMzM4fFxcdTIyODJcXHUyMEQyfFxcdTIyODNcXHUyMEQyfFxcdTIyOEFcXHVGRTAwfFxcdTIyOEJcXHVGRTAwfFxcdTIyOEZcXHUwMzM4fFxcdTIyOTBcXHUwMzM4fFxcdTIyOTNcXHVGRTAwfFxcdTIyOTRcXHVGRTAwfFxcdTIyQjRcXHUyMEQyfFxcdTIyQjVcXHUyMEQyfFxcdTIyRDhcXHUwMzM4fFxcdTIyRDlcXHUwMzM4fFxcdTIyREFcXHVGRTAwfFxcdTIyREJcXHVGRTAwfFxcdTIyRjVcXHUwMzM4fFxcdTIyRjlcXHUwMzM4fFxcdTI5MzNcXHUwMzM4fFxcdTI5Q0ZcXHUwMzM4fFxcdTI5RDBcXHUwMzM4fFxcdTJBNkRcXHUwMzM4fFxcdTJBNzBcXHUwMzM4fFxcdTJBN0RcXHUwMzM4fFxcdTJBN0VcXHUwMzM4fFxcdTJBQTFcXHUwMzM4fFxcdTJBQTJcXHUwMzM4fFxcdTJBQUNcXHVGRTAwfFxcdTJBQURcXHVGRTAwfFxcdTJBQUZcXHUwMzM4fFxcdTJBQjBcXHUwMzM4fFxcdTJBQzVcXHUwMzM4fFxcdTJBQzZcXHUwMzM4fFxcdTJBQ0JcXHVGRTAwfFxcdTJBQ0NcXHVGRTAwfFxcdTJBRkRcXHUyMEU1fFtcXHhBMC1cXHUwMTEzXFx1MDExNi1cXHUwMTIyXFx1MDEyNC1cXHUwMTJCXFx1MDEyRS1cXHUwMTREXFx1MDE1MC1cXHUwMTdFXFx1MDE5MlxcdTAxQjVcXHUwMUY1XFx1MDIzN1xcdTAyQzZcXHUwMkM3XFx1MDJEOC1cXHUwMkREXFx1MDMxMVxcdTAzOTEtXFx1MDNBMVxcdTAzQTMtXFx1MDNBOVxcdTAzQjEtXFx1MDNDOVxcdTAzRDFcXHUwM0QyXFx1MDNENVxcdTAzRDZcXHUwM0RDXFx1MDNERFxcdTAzRjBcXHUwM0YxXFx1MDNGNVxcdTAzRjZcXHUwNDAxLVxcdTA0MENcXHUwNDBFLVxcdTA0NEZcXHUwNDUxLVxcdTA0NUNcXHUwNDVFXFx1MDQ1RlxcdTIwMDItXFx1MjAwNVxcdTIwMDctXFx1MjAxMFxcdTIwMTMtXFx1MjAxNlxcdTIwMTgtXFx1MjAxQVxcdTIwMUMtXFx1MjAxRVxcdTIwMjAtXFx1MjAyMlxcdTIwMjVcXHUyMDI2XFx1MjAzMC1cXHUyMDM1XFx1MjAzOVxcdTIwM0FcXHUyMDNFXFx1MjA0MVxcdTIwNDNcXHUyMDQ0XFx1MjA0RlxcdTIwNTdcXHUyMDVGLVxcdTIwNjNcXHUyMEFDXFx1MjBEQlxcdTIwRENcXHUyMTAyXFx1MjEwNVxcdTIxMEEtXFx1MjExM1xcdTIxMTUtXFx1MjExRVxcdTIxMjJcXHUyMTI0XFx1MjEyNy1cXHUyMTI5XFx1MjEyQ1xcdTIxMkRcXHUyMTJGLVxcdTIxMzFcXHUyMTMzLVxcdTIxMzhcXHUyMTQ1LVxcdTIxNDhcXHUyMTUzLVxcdTIxNUVcXHUyMTkwLVxcdTIxOUJcXHUyMTlELVxcdTIxQTdcXHUyMUE5LVxcdTIxQUVcXHUyMUIwLVxcdTIxQjNcXHUyMUI1LVxcdTIxQjdcXHUyMUJBLVxcdTIxREJcXHUyMUREXFx1MjFFNFxcdTIxRTVcXHUyMUY1XFx1MjFGRC1cXHUyMjA1XFx1MjIwNy1cXHUyMjA5XFx1MjIwQlxcdTIyMENcXHUyMjBGLVxcdTIyMTRcXHUyMjE2LVxcdTIyMThcXHUyMjFBXFx1MjIxRC1cXHUyMjM4XFx1MjIzQS1cXHUyMjU3XFx1MjI1OVxcdTIyNUFcXHUyMjVDXFx1MjI1Ri1cXHUyMjYyXFx1MjI2NC1cXHUyMjhCXFx1MjI4RC1cXHUyMjlCXFx1MjI5RC1cXHUyMkE1XFx1MjJBNy1cXHUyMkIwXFx1MjJCMi1cXHUyMkJCXFx1MjJCRC1cXHUyMkRCXFx1MjJERS1cXHUyMkUzXFx1MjJFNi1cXHUyMkY3XFx1MjJGOS1cXHUyMkZFXFx1MjMwNVxcdTIzMDZcXHUyMzA4LVxcdTIzMTBcXHUyMzEyXFx1MjMxM1xcdTIzMTVcXHUyMzE2XFx1MjMxQy1cXHUyMzFGXFx1MjMyMlxcdTIzMjNcXHUyMzJEXFx1MjMyRVxcdTIzMzZcXHUyMzNEXFx1MjMzRlxcdTIzN0NcXHUyM0IwXFx1MjNCMVxcdTIzQjQtXFx1MjNCNlxcdTIzREMtXFx1MjNERlxcdTIzRTJcXHUyM0U3XFx1MjQyM1xcdTI0QzhcXHUyNTAwXFx1MjUwMlxcdTI1MENcXHUyNTEwXFx1MjUxNFxcdTI1MThcXHUyNTFDXFx1MjUyNFxcdTI1MkNcXHUyNTM0XFx1MjUzQ1xcdTI1NTAtXFx1MjU2Q1xcdTI1ODBcXHUyNTg0XFx1MjU4OFxcdTI1OTEtXFx1MjU5M1xcdTI1QTFcXHUyNUFBXFx1MjVBQlxcdTI1QURcXHUyNUFFXFx1MjVCMVxcdTI1QjMtXFx1MjVCNVxcdTI1QjhcXHUyNUI5XFx1MjVCRC1cXHUyNUJGXFx1MjVDMlxcdTI1QzNcXHUyNUNBXFx1MjVDQlxcdTI1RUNcXHUyNUVGXFx1MjVGOC1cXHUyNUZDXFx1MjYwNVxcdTI2MDZcXHUyNjBFXFx1MjY0MFxcdTI2NDJcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2QVxcdTI2NkQtXFx1MjY2RlxcdTI3MTNcXHUyNzE3XFx1MjcyMFxcdTI3MzZcXHUyNzU4XFx1Mjc3MlxcdTI3NzNcXHUyN0M4XFx1MjdDOVxcdTI3RTYtXFx1MjdFRFxcdTI3RjUtXFx1MjdGQVxcdTI3RkNcXHUyN0ZGXFx1MjkwMi1cXHUyOTA1XFx1MjkwQy1cXHUyOTEzXFx1MjkxNlxcdTI5MTktXFx1MjkyMFxcdTI5MjMtXFx1MjkyQVxcdTI5MzNcXHUyOTM1LVxcdTI5MzlcXHUyOTNDXFx1MjkzRFxcdTI5NDVcXHUyOTQ4LVxcdTI5NEJcXHUyOTRFLVxcdTI5NzZcXHUyOTc4XFx1Mjk3OVxcdTI5N0ItXFx1Mjk3RlxcdTI5ODVcXHUyOTg2XFx1Mjk4Qi1cXHUyOTk2XFx1Mjk5QVxcdTI5OUNcXHUyOTlEXFx1MjlBNC1cXHUyOUI3XFx1MjlCOVxcdTI5QkJcXHUyOUJDXFx1MjlCRS1cXHUyOUM1XFx1MjlDOVxcdTI5Q0QtXFx1MjlEMFxcdTI5REMtXFx1MjlERVxcdTI5RTMtXFx1MjlFNVxcdTI5RUJcXHUyOUY0XFx1MjlGNlxcdTJBMDAtXFx1MkEwMlxcdTJBMDRcXHUyQTA2XFx1MkEwQ1xcdTJBMERcXHUyQTEwLVxcdTJBMTdcXHUyQTIyLVxcdTJBMjdcXHUyQTI5XFx1MkEyQVxcdTJBMkQtXFx1MkEzMVxcdTJBMzMtXFx1MkEzQ1xcdTJBM0ZcXHUyQTQwXFx1MkE0Mi1cXHUyQTREXFx1MkE1MFxcdTJBNTMtXFx1MkE1OFxcdTJBNUEtXFx1MkE1RFxcdTJBNUZcXHUyQTY2XFx1MkE2QVxcdTJBNkQtXFx1MkE3NVxcdTJBNzctXFx1MkE5QVxcdTJBOUQtXFx1MkFBMlxcdTJBQTQtXFx1MkFCMFxcdTJBQjMtXFx1MkFDOFxcdTJBQ0JcXHUyQUNDXFx1MkFDRi1cXHUyQURCXFx1MkFFNFxcdTJBRTYtXFx1MkFFOVxcdTJBRUItXFx1MkFGM1xcdTJBRkRcXHVGQjAwLVxcdUZCMDRdfFxcdUQ4MzVbXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1RENDRlxcdUREMDRcXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REQ2Ql0vZztcblx0dmFyIGVuY29kZU1hcCA9IHsnXFx4QUQnOidzaHknLCdcXHUyMDBDJzonenduaicsJ1xcdTIwMEQnOid6d2onLCdcXHUyMDBFJzonbHJtJywnXFx1MjA2Myc6J2ljJywnXFx1MjA2Mic6J2l0JywnXFx1MjA2MSc6J2FmJywnXFx1MjAwRic6J3JsbScsJ1xcdTIwMEInOidaZXJvV2lkdGhTcGFjZScsJ1xcdTIwNjAnOidOb0JyZWFrJywnXFx1MDMxMSc6J0Rvd25CcmV2ZScsJ1xcdTIwREInOid0ZG90JywnXFx1MjBEQyc6J0RvdERvdCcsJ1xcdCc6J1RhYicsJ1xcbic6J05ld0xpbmUnLCdcXHUyMDA4JzoncHVuY3NwJywnXFx1MjA1Ric6J01lZGl1bVNwYWNlJywnXFx1MjAwOSc6J3RoaW5zcCcsJ1xcdTIwMEEnOidoYWlyc3AnLCdcXHUyMDA0JzonZW1zcDEzJywnXFx1MjAwMic6J2Vuc3AnLCdcXHUyMDA1JzonZW1zcDE0JywnXFx1MjAwMyc6J2Vtc3AnLCdcXHUyMDA3JzonbnVtc3AnLCdcXHhBMCc6J25ic3AnLCdcXHUyMDVGXFx1MjAwQSc6J1RoaWNrU3BhY2UnLCdcXHUyMDNFJzonb2xpbmUnLCdfJzonbG93YmFyJywnXFx1MjAxMCc6J2Rhc2gnLCdcXHUyMDEzJzonbmRhc2gnLCdcXHUyMDE0JzonbWRhc2gnLCdcXHUyMDE1JzonaG9yYmFyJywnLCc6J2NvbW1hJywnOyc6J3NlbWknLCdcXHUyMDRGJzonYnNlbWknLCc6JzonY29sb24nLCdcXHUyQTc0JzonQ29sb25lJywnISc6J2V4Y2wnLCdcXHhBMSc6J2lleGNsJywnPyc6J3F1ZXN0JywnXFx4QkYnOidpcXVlc3QnLCcuJzoncGVyaW9kJywnXFx1MjAyNSc6J25sZHInLCdcXHUyMDI2JzonbWxkcicsJ1xceEI3JzonbWlkZG90JywnXFwnJzonYXBvcycsJ1xcdTIwMTgnOidsc3F1bycsJ1xcdTIwMTknOidyc3F1bycsJ1xcdTIwMUEnOidzYnF1bycsJ1xcdTIwMzknOidsc2FxdW8nLCdcXHUyMDNBJzoncnNhcXVvJywnXCInOidxdW90JywnXFx1MjAxQyc6J2xkcXVvJywnXFx1MjAxRCc6J3JkcXVvJywnXFx1MjAxRSc6J2JkcXVvJywnXFx4QUInOidsYXF1bycsJ1xceEJCJzoncmFxdW8nLCcoJzonbHBhcicsJyknOidycGFyJywnWyc6J2xzcWInLCddJzoncnNxYicsJ3snOidsY3ViJywnfSc6J3JjdWInLCdcXHUyMzA4JzonbGNlaWwnLCdcXHUyMzA5JzoncmNlaWwnLCdcXHUyMzBBJzonbGZsb29yJywnXFx1MjMwQic6J3JmbG9vcicsJ1xcdTI5ODUnOidsb3BhcicsJ1xcdTI5ODYnOidyb3BhcicsJ1xcdTI5OEInOidsYnJrZScsJ1xcdTI5OEMnOidyYnJrZScsJ1xcdTI5OEQnOidsYnJrc2x1JywnXFx1Mjk4RSc6J3JicmtzbGQnLCdcXHUyOThGJzonbGJya3NsZCcsJ1xcdTI5OTAnOidyYnJrc2x1JywnXFx1Mjk5MSc6J2xhbmdkJywnXFx1Mjk5Mic6J3JhbmdkJywnXFx1Mjk5Myc6J2xwYXJsdCcsJ1xcdTI5OTQnOidycGFyZ3QnLCdcXHUyOTk1JzonZ3RsUGFyJywnXFx1Mjk5Nic6J2x0clBhcicsJ1xcdTI3RTYnOidsb2JyaycsJ1xcdTI3RTcnOidyb2JyaycsJ1xcdTI3RTgnOidsYW5nJywnXFx1MjdFOSc6J3JhbmcnLCdcXHUyN0VBJzonTGFuZycsJ1xcdTI3RUInOidSYW5nJywnXFx1MjdFQyc6J2xvYW5nJywnXFx1MjdFRCc6J3JvYW5nJywnXFx1Mjc3Mic6J2xiYnJrJywnXFx1Mjc3Myc6J3JiYnJrJywnXFx1MjAxNic6J1ZlcnQnLCdcXHhBNyc6J3NlY3QnLCdcXHhCNic6J3BhcmEnLCdAJzonY29tbWF0JywnKic6J2FzdCcsJy8nOidzb2wnLCd1bmRlZmluZWQnOm51bGwsJyYnOidhbXAnLCcjJzonbnVtJywnJSc6J3BlcmNudCcsJ1xcdTIwMzAnOidwZXJtaWwnLCdcXHUyMDMxJzoncGVydGVuaycsJ1xcdTIwMjAnOidkYWdnZXInLCdcXHUyMDIxJzonRGFnZ2VyJywnXFx1MjAyMic6J2J1bGwnLCdcXHUyMDQzJzonaHlidWxsJywnXFx1MjAzMic6J3ByaW1lJywnXFx1MjAzMyc6J1ByaW1lJywnXFx1MjAzNCc6J3RwcmltZScsJ1xcdTIwNTcnOidxcHJpbWUnLCdcXHUyMDM1JzonYnByaW1lJywnXFx1MjA0MSc6J2NhcmV0JywnYCc6J2dyYXZlJywnXFx4QjQnOidhY3V0ZScsJ1xcdTAyREMnOid0aWxkZScsJ14nOidIYXQnLCdcXHhBRic6J21hY3InLCdcXHUwMkQ4JzonYnJldmUnLCdcXHUwMkQ5JzonZG90JywnXFx4QTgnOidkaWUnLCdcXHUwMkRBJzoncmluZycsJ1xcdTAyREQnOidkYmxhYycsJ1xceEI4JzonY2VkaWwnLCdcXHUwMkRCJzonb2dvbicsJ1xcdTAyQzYnOidjaXJjJywnXFx1MDJDNyc6J2Nhcm9uJywnXFx4QjAnOidkZWcnLCdcXHhBOSc6J2NvcHknLCdcXHhBRSc6J3JlZycsJ1xcdTIxMTcnOidjb3B5c3InLCdcXHUyMTE4Jzond3AnLCdcXHUyMTFFJzoncngnLCdcXHUyMTI3JzonbWhvJywnXFx1MjEyOSc6J2lpb3RhJywnXFx1MjE5MCc6J2xhcnInLCdcXHUyMTlBJzonbmxhcnInLCdcXHUyMTkyJzoncmFycicsJ1xcdTIxOUInOiducmFycicsJ1xcdTIxOTEnOid1YXJyJywnXFx1MjE5Myc6J2RhcnInLCdcXHUyMTk0JzonaGFycicsJ1xcdTIxQUUnOiduaGFycicsJ1xcdTIxOTUnOid2YXJyJywnXFx1MjE5Nic6J253YXJyJywnXFx1MjE5Nyc6J25lYXJyJywnXFx1MjE5OCc6J3NlYXJyJywnXFx1MjE5OSc6J3N3YXJyJywnXFx1MjE5RCc6J3JhcnJ3JywnXFx1MjE5RFxcdTAzMzgnOiducmFycncnLCdcXHUyMTlFJzonTGFycicsJ1xcdTIxOUYnOidVYXJyJywnXFx1MjFBMCc6J1JhcnInLCdcXHUyMUExJzonRGFycicsJ1xcdTIxQTInOidsYXJydGwnLCdcXHUyMUEzJzoncmFycnRsJywnXFx1MjFBNCc6J21hcHN0b2xlZnQnLCdcXHUyMUE1JzonbWFwc3RvdXAnLCdcXHUyMUE2JzonbWFwJywnXFx1MjFBNyc6J21hcHN0b2Rvd24nLCdcXHUyMUE5JzonbGFycmhrJywnXFx1MjFBQSc6J3JhcnJoaycsJ1xcdTIxQUInOidsYXJybHAnLCdcXHUyMUFDJzoncmFycmxwJywnXFx1MjFBRCc6J2hhcnJ3JywnXFx1MjFCMCc6J2xzaCcsJ1xcdTIxQjEnOidyc2gnLCdcXHUyMUIyJzonbGRzaCcsJ1xcdTIxQjMnOidyZHNoJywnXFx1MjFCNSc6J2NyYXJyJywnXFx1MjFCNic6J2N1bGFycicsJ1xcdTIxQjcnOidjdXJhcnInLCdcXHUyMUJBJzonb2xhcnInLCdcXHUyMUJCJzonb3JhcnInLCdcXHUyMUJDJzonbGhhcnUnLCdcXHUyMUJEJzonbGhhcmQnLCdcXHUyMUJFJzondWhhcnInLCdcXHUyMUJGJzondWhhcmwnLCdcXHUyMUMwJzoncmhhcnUnLCdcXHUyMUMxJzoncmhhcmQnLCdcXHUyMUMyJzonZGhhcnInLCdcXHUyMUMzJzonZGhhcmwnLCdcXHUyMUM0JzoncmxhcnInLCdcXHUyMUM1JzondWRhcnInLCdcXHUyMUM2JzonbHJhcnInLCdcXHUyMUM3JzonbGxhcnInLCdcXHUyMUM4JzondXVhcnInLCdcXHUyMUM5JzoncnJhcnInLCdcXHUyMUNBJzonZGRhcnInLCdcXHUyMUNCJzonbHJoYXInLCdcXHUyMUNDJzoncmxoYXInLCdcXHUyMUQwJzonbEFycicsJ1xcdTIxQ0QnOidubEFycicsJ1xcdTIxRDEnOid1QXJyJywnXFx1MjFEMic6J3JBcnInLCdcXHUyMUNGJzonbnJBcnInLCdcXHUyMUQzJzonZEFycicsJ1xcdTIxRDQnOidpZmYnLCdcXHUyMUNFJzonbmhBcnInLCdcXHUyMUQ1JzondkFycicsJ1xcdTIxRDYnOidud0FycicsJ1xcdTIxRDcnOiduZUFycicsJ1xcdTIxRDgnOidzZUFycicsJ1xcdTIxRDknOidzd0FycicsJ1xcdTIxREEnOidsQWFycicsJ1xcdTIxREInOidyQWFycicsJ1xcdTIxREQnOid6aWdyYXJyJywnXFx1MjFFNCc6J2xhcnJiJywnXFx1MjFFNSc6J3JhcnJiJywnXFx1MjFGNSc6J2R1YXJyJywnXFx1MjFGRCc6J2xvYXJyJywnXFx1MjFGRSc6J3JvYXJyJywnXFx1MjFGRic6J2hvYXJyJywnXFx1MjIwMCc6J2ZvcmFsbCcsJ1xcdTIyMDEnOidjb21wJywnXFx1MjIwMic6J3BhcnQnLCdcXHUyMjAyXFx1MDMzOCc6J25wYXJ0JywnXFx1MjIwMyc6J2V4aXN0JywnXFx1MjIwNCc6J25leGlzdCcsJ1xcdTIyMDUnOidlbXB0eScsJ1xcdTIyMDcnOidEZWwnLCdcXHUyMjA4JzonaW4nLCdcXHUyMjA5Jzonbm90aW4nLCdcXHUyMjBCJzonbmknLCdcXHUyMjBDJzonbm90bmknLCdcXHUwM0Y2JzonYmVwc2knLCdcXHUyMjBGJzoncHJvZCcsJ1xcdTIyMTAnOidjb3Byb2QnLCdcXHUyMjExJzonc3VtJywnKyc6J3BsdXMnLCdcXHhCMSc6J3BtJywnXFx4RjcnOidkaXYnLCdcXHhENyc6J3RpbWVzJywnPCc6J2x0JywnXFx1MjI2RSc6J25sdCcsJzxcXHUyMEQyJzonbnZsdCcsJz0nOidlcXVhbHMnLCdcXHUyMjYwJzonbmUnLCc9XFx1MjBFNSc6J2JuZScsJ1xcdTJBNzUnOidFcXVhbCcsJz4nOidndCcsJ1xcdTIyNkYnOiduZ3QnLCc+XFx1MjBEMic6J252Z3QnLCdcXHhBQyc6J25vdCcsJ3wnOid2ZXJ0JywnXFx4QTYnOidicnZiYXInLCdcXHUyMjEyJzonbWludXMnLCdcXHUyMjEzJzonbXAnLCdcXHUyMjE0JzoncGx1c2RvJywnXFx1MjA0NCc6J2ZyYXNsJywnXFx1MjIxNic6J3NldG1uJywnXFx1MjIxNyc6J2xvd2FzdCcsJ1xcdTIyMTgnOidjb21wZm4nLCdcXHUyMjFBJzonU3FydCcsJ1xcdTIyMUQnOidwcm9wJywnXFx1MjIxRSc6J2luZmluJywnXFx1MjIxRic6J2FuZ3J0JywnXFx1MjIyMCc6J2FuZycsJ1xcdTIyMjBcXHUyMEQyJzonbmFuZycsJ1xcdTIyMjEnOidhbmdtc2QnLCdcXHUyMjIyJzonYW5nc3BoJywnXFx1MjIyMyc6J21pZCcsJ1xcdTIyMjQnOidubWlkJywnXFx1MjIyNSc6J3BhcicsJ1xcdTIyMjYnOiducGFyJywnXFx1MjIyNyc6J2FuZCcsJ1xcdTIyMjgnOidvcicsJ1xcdTIyMjknOidjYXAnLCdcXHUyMjI5XFx1RkUwMCc6J2NhcHMnLCdcXHUyMjJBJzonY3VwJywnXFx1MjIyQVxcdUZFMDAnOidjdXBzJywnXFx1MjIyQic6J2ludCcsJ1xcdTIyMkMnOidJbnQnLCdcXHUyMjJEJzondGludCcsJ1xcdTJBMEMnOidxaW50JywnXFx1MjIyRSc6J29pbnQnLCdcXHUyMjJGJzonQ29uaW50JywnXFx1MjIzMCc6J0Njb25pbnQnLCdcXHUyMjMxJzonY3dpbnQnLCdcXHUyMjMyJzonY3djb25pbnQnLCdcXHUyMjMzJzonYXdjb25pbnQnLCdcXHUyMjM0JzondGhlcmU0JywnXFx1MjIzNSc6J2JlY2F1cycsJ1xcdTIyMzYnOidyYXRpbycsJ1xcdTIyMzcnOidDb2xvbicsJ1xcdTIyMzgnOidtaW51c2QnLCdcXHUyMjNBJzonbUREb3QnLCdcXHUyMjNCJzonaG9tdGh0JywnXFx1MjIzQyc6J3NpbScsJ1xcdTIyNDEnOiduc2ltJywnXFx1MjIzQ1xcdTIwRDInOidudnNpbScsJ1xcdTIyM0QnOidic2ltJywnXFx1MjIzRFxcdTAzMzEnOidyYWNlJywnXFx1MjIzRSc6J2FjJywnXFx1MjIzRVxcdTAzMzMnOidhY0UnLCdcXHUyMjNGJzonYWNkJywnXFx1MjI0MCc6J3dyJywnXFx1MjI0Mic6J2VzaW0nLCdcXHUyMjQyXFx1MDMzOCc6J25lc2ltJywnXFx1MjI0Myc6J3NpbWUnLCdcXHUyMjQ0JzonbnNpbWUnLCdcXHUyMjQ1JzonY29uZycsJ1xcdTIyNDcnOiduY29uZycsJ1xcdTIyNDYnOidzaW1uZScsJ1xcdTIyNDgnOidhcCcsJ1xcdTIyNDknOiduYXAnLCdcXHUyMjRBJzonYXBlJywnXFx1MjI0Qic6J2FwaWQnLCdcXHUyMjRCXFx1MDMzOCc6J25hcGlkJywnXFx1MjI0Qyc6J2Jjb25nJywnXFx1MjI0RCc6J0N1cENhcCcsJ1xcdTIyNkQnOidOb3RDdXBDYXAnLCdcXHUyMjREXFx1MjBEMic6J252YXAnLCdcXHUyMjRFJzonYnVtcCcsJ1xcdTIyNEVcXHUwMzM4JzonbmJ1bXAnLCdcXHUyMjRGJzonYnVtcGUnLCdcXHUyMjRGXFx1MDMzOCc6J25idW1wZScsJ1xcdTIyNTAnOidkb3RlcScsJ1xcdTIyNTBcXHUwMzM4JzonbmVkb3QnLCdcXHUyMjUxJzonZURvdCcsJ1xcdTIyNTInOidlZkRvdCcsJ1xcdTIyNTMnOidlckRvdCcsJ1xcdTIyNTQnOidjb2xvbmUnLCdcXHUyMjU1JzonZWNvbG9uJywnXFx1MjI1Nic6J2VjaXInLCdcXHUyMjU3JzonY2lyZScsJ1xcdTIyNTknOid3ZWRnZXEnLCdcXHUyMjVBJzondmVlZXEnLCdcXHUyMjVDJzondHJpZScsJ1xcdTIyNUYnOidlcXVlc3QnLCdcXHUyMjYxJzonZXF1aXYnLCdcXHUyMjYyJzonbmVxdWl2JywnXFx1MjI2MVxcdTIwRTUnOidibmVxdWl2JywnXFx1MjI2NCc6J2xlJywnXFx1MjI3MCc6J25sZScsJ1xcdTIyNjRcXHUyMEQyJzonbnZsZScsJ1xcdTIyNjUnOidnZScsJ1xcdTIyNzEnOiduZ2UnLCdcXHUyMjY1XFx1MjBEMic6J252Z2UnLCdcXHUyMjY2JzonbEUnLCdcXHUyMjY2XFx1MDMzOCc6J25sRScsJ1xcdTIyNjcnOidnRScsJ1xcdTIyNjdcXHUwMzM4JzonbmdFJywnXFx1MjI2OFxcdUZFMDAnOidsdm5FJywnXFx1MjI2OCc6J2xuRScsJ1xcdTIyNjknOidnbkUnLCdcXHUyMjY5XFx1RkUwMCc6J2d2bkUnLCdcXHUyMjZBJzonbGwnLCdcXHUyMjZBXFx1MDMzOCc6J25MdHYnLCdcXHUyMjZBXFx1MjBEMic6J25MdCcsJ1xcdTIyNkInOidnZycsJ1xcdTIyNkJcXHUwMzM4Jzonbkd0dicsJ1xcdTIyNkJcXHUyMEQyJzonbkd0JywnXFx1MjI2Qyc6J3R3aXh0JywnXFx1MjI3Mic6J2xzaW0nLCdcXHUyMjc0JzonbmxzaW0nLCdcXHUyMjczJzonZ3NpbScsJ1xcdTIyNzUnOiduZ3NpbScsJ1xcdTIyNzYnOidsZycsJ1xcdTIyNzgnOidudGxnJywnXFx1MjI3Nyc6J2dsJywnXFx1MjI3OSc6J250Z2wnLCdcXHUyMjdBJzoncHInLCdcXHUyMjgwJzonbnByJywnXFx1MjI3Qic6J3NjJywnXFx1MjI4MSc6J25zYycsJ1xcdTIyN0MnOidwcmN1ZScsJ1xcdTIyRTAnOiducHJjdWUnLCdcXHUyMjdEJzonc2NjdWUnLCdcXHUyMkUxJzonbnNjY3VlJywnXFx1MjI3RSc6J3Byc2ltJywnXFx1MjI3Ric6J3Njc2ltJywnXFx1MjI3RlxcdTAzMzgnOidOb3RTdWNjZWVkc1RpbGRlJywnXFx1MjI4Mic6J3N1YicsJ1xcdTIyODQnOiduc3ViJywnXFx1MjI4MlxcdTIwRDInOid2bnN1YicsJ1xcdTIyODMnOidzdXAnLCdcXHUyMjg1JzonbnN1cCcsJ1xcdTIyODNcXHUyMEQyJzondm5zdXAnLCdcXHUyMjg2Jzonc3ViZScsJ1xcdTIyODgnOiduc3ViZScsJ1xcdTIyODcnOidzdXBlJywnXFx1MjI4OSc6J25zdXBlJywnXFx1MjI4QVxcdUZFMDAnOid2c3VibmUnLCdcXHUyMjhBJzonc3VibmUnLCdcXHUyMjhCXFx1RkUwMCc6J3ZzdXBuZScsJ1xcdTIyOEInOidzdXBuZScsJ1xcdTIyOEQnOidjdXBkb3QnLCdcXHUyMjhFJzondXBsdXMnLCdcXHUyMjhGJzonc3FzdWInLCdcXHUyMjhGXFx1MDMzOCc6J05vdFNxdWFyZVN1YnNldCcsJ1xcdTIyOTAnOidzcXN1cCcsJ1xcdTIyOTBcXHUwMzM4JzonTm90U3F1YXJlU3VwZXJzZXQnLCdcXHUyMjkxJzonc3FzdWJlJywnXFx1MjJFMic6J25zcXN1YmUnLCdcXHUyMjkyJzonc3FzdXBlJywnXFx1MjJFMyc6J25zcXN1cGUnLCdcXHUyMjkzJzonc3FjYXAnLCdcXHUyMjkzXFx1RkUwMCc6J3NxY2FwcycsJ1xcdTIyOTQnOidzcWN1cCcsJ1xcdTIyOTRcXHVGRTAwJzonc3FjdXBzJywnXFx1MjI5NSc6J29wbHVzJywnXFx1MjI5Nic6J29taW51cycsJ1xcdTIyOTcnOidvdGltZXMnLCdcXHUyMjk4Jzonb3NvbCcsJ1xcdTIyOTknOidvZG90JywnXFx1MjI5QSc6J29jaXInLCdcXHUyMjlCJzonb2FzdCcsJ1xcdTIyOUQnOidvZGFzaCcsJ1xcdTIyOUUnOidwbHVzYicsJ1xcdTIyOUYnOidtaW51c2InLCdcXHUyMkEwJzondGltZXNiJywnXFx1MjJBMSc6J3Nkb3RiJywnXFx1MjJBMic6J3ZkYXNoJywnXFx1MjJBQyc6J252ZGFzaCcsJ1xcdTIyQTMnOidkYXNodicsJ1xcdTIyQTQnOid0b3AnLCdcXHUyMkE1JzonYm90JywnXFx1MjJBNyc6J21vZGVscycsJ1xcdTIyQTgnOid2RGFzaCcsJ1xcdTIyQUQnOidudkRhc2gnLCdcXHUyMkE5JzonVmRhc2gnLCdcXHUyMkFFJzonblZkYXNoJywnXFx1MjJBQSc6J1Z2ZGFzaCcsJ1xcdTIyQUInOidWRGFzaCcsJ1xcdTIyQUYnOiduVkRhc2gnLCdcXHUyMkIwJzoncHJ1cmVsJywnXFx1MjJCMic6J3ZsdHJpJywnXFx1MjJFQSc6J25sdHJpJywnXFx1MjJCMyc6J3ZydHJpJywnXFx1MjJFQic6J25ydHJpJywnXFx1MjJCNCc6J2x0cmllJywnXFx1MjJFQyc6J25sdHJpZScsJ1xcdTIyQjRcXHUyMEQyJzonbnZsdHJpZScsJ1xcdTIyQjUnOidydHJpZScsJ1xcdTIyRUQnOiducnRyaWUnLCdcXHUyMkI1XFx1MjBEMic6J252cnRyaWUnLCdcXHUyMkI2Jzonb3JpZ29mJywnXFx1MjJCNyc6J2ltb2YnLCdcXHUyMkI4JzonbXVtYXAnLCdcXHUyMkI5JzonaGVyY29uJywnXFx1MjJCQSc6J2ludGNhbCcsJ1xcdTIyQkInOid2ZWViYXInLCdcXHUyMkJEJzonYmFydmVlJywnXFx1MjJCRSc6J2FuZ3J0dmInLCdcXHUyMkJGJzonbHJ0cmknLCdcXHUyMkMwJzonV2VkZ2UnLCdcXHUyMkMxJzonVmVlJywnXFx1MjJDMic6J3hjYXAnLCdcXHUyMkMzJzoneGN1cCcsJ1xcdTIyQzQnOidkaWFtJywnXFx1MjJDNSc6J3Nkb3QnLCdcXHUyMkM2JzonU3RhcicsJ1xcdTIyQzcnOidkaXZvbngnLCdcXHUyMkM4JzonYm93dGllJywnXFx1MjJDOSc6J2x0aW1lcycsJ1xcdTIyQ0EnOidydGltZXMnLCdcXHUyMkNCJzonbHRocmVlJywnXFx1MjJDQyc6J3J0aHJlZScsJ1xcdTIyQ0QnOidic2ltZScsJ1xcdTIyQ0UnOidjdXZlZScsJ1xcdTIyQ0YnOidjdXdlZCcsJ1xcdTIyRDAnOidTdWInLCdcXHUyMkQxJzonU3VwJywnXFx1MjJEMic6J0NhcCcsJ1xcdTIyRDMnOidDdXAnLCdcXHUyMkQ0JzonZm9yaycsJ1xcdTIyRDUnOidlcGFyJywnXFx1MjJENic6J2x0ZG90JywnXFx1MjJENyc6J2d0ZG90JywnXFx1MjJEOCc6J0xsJywnXFx1MjJEOFxcdTAzMzgnOiduTGwnLCdcXHUyMkQ5JzonR2cnLCdcXHUyMkQ5XFx1MDMzOCc6J25HZycsJ1xcdTIyREFcXHVGRTAwJzonbGVzZycsJ1xcdTIyREEnOidsZWcnLCdcXHUyMkRCJzonZ2VsJywnXFx1MjJEQlxcdUZFMDAnOidnZXNsJywnXFx1MjJERSc6J2N1ZXByJywnXFx1MjJERic6J2N1ZXNjJywnXFx1MjJFNic6J2xuc2ltJywnXFx1MjJFNyc6J2duc2ltJywnXFx1MjJFOCc6J3BybnNpbScsJ1xcdTIyRTknOidzY25zaW0nLCdcXHUyMkVFJzondmVsbGlwJywnXFx1MjJFRic6J2N0ZG90JywnXFx1MjJGMCc6J3V0ZG90JywnXFx1MjJGMSc6J2R0ZG90JywnXFx1MjJGMic6J2Rpc2luJywnXFx1MjJGMyc6J2lzaW5zdicsJ1xcdTIyRjQnOidpc2lucycsJ1xcdTIyRjUnOidpc2luZG90JywnXFx1MjJGNVxcdTAzMzgnOidub3RpbmRvdCcsJ1xcdTIyRjYnOidub3RpbnZjJywnXFx1MjJGNyc6J25vdGludmInLCdcXHUyMkY5JzonaXNpbkUnLCdcXHUyMkY5XFx1MDMzOCc6J25vdGluRScsJ1xcdTIyRkEnOiduaXNkJywnXFx1MjJGQic6J3huaXMnLCdcXHUyMkZDJzonbmlzJywnXFx1MjJGRCc6J25vdG5pdmMnLCdcXHUyMkZFJzonbm90bml2YicsJ1xcdTIzMDUnOidiYXJ3ZWQnLCdcXHUyMzA2JzonQmFyd2VkJywnXFx1MjMwQyc6J2RyY3JvcCcsJ1xcdTIzMEQnOidkbGNyb3AnLCdcXHUyMzBFJzondXJjcm9wJywnXFx1MjMwRic6J3VsY3JvcCcsJ1xcdTIzMTAnOidibm90JywnXFx1MjMxMic6J3Byb2ZsaW5lJywnXFx1MjMxMyc6J3Byb2ZzdXJmJywnXFx1MjMxNSc6J3RlbHJlYycsJ1xcdTIzMTYnOid0YXJnZXQnLCdcXHUyMzFDJzondWxjb3JuJywnXFx1MjMxRCc6J3VyY29ybicsJ1xcdTIzMUUnOidkbGNvcm4nLCdcXHUyMzFGJzonZHJjb3JuJywnXFx1MjMyMic6J2Zyb3duJywnXFx1MjMyMyc6J3NtaWxlJywnXFx1MjMyRCc6J2N5bGN0eScsJ1xcdTIzMkUnOidwcm9mYWxhcicsJ1xcdTIzMzYnOid0b3Bib3QnLCdcXHUyMzNEJzonb3ZiYXInLCdcXHUyMzNGJzonc29sYmFyJywnXFx1MjM3Qyc6J2FuZ3phcnInLCdcXHUyM0IwJzonbG1vdXN0JywnXFx1MjNCMSc6J3Jtb3VzdCcsJ1xcdTIzQjQnOid0YnJrJywnXFx1MjNCNSc6J2JicmsnLCdcXHUyM0I2JzonYmJya3RicmsnLCdcXHUyM0RDJzonT3ZlclBhcmVudGhlc2lzJywnXFx1MjNERCc6J1VuZGVyUGFyZW50aGVzaXMnLCdcXHUyM0RFJzonT3ZlckJyYWNlJywnXFx1MjNERic6J1VuZGVyQnJhY2UnLCdcXHUyM0UyJzondHJwZXppdW0nLCdcXHUyM0U3JzonZWxpbnRlcnMnLCdcXHUyNDIzJzonYmxhbmsnLCdcXHUyNTAwJzonYm94aCcsJ1xcdTI1MDInOidib3h2JywnXFx1MjUwQyc6J2JveGRyJywnXFx1MjUxMCc6J2JveGRsJywnXFx1MjUxNCc6J2JveHVyJywnXFx1MjUxOCc6J2JveHVsJywnXFx1MjUxQyc6J2JveHZyJywnXFx1MjUyNCc6J2JveHZsJywnXFx1MjUyQyc6J2JveGhkJywnXFx1MjUzNCc6J2JveGh1JywnXFx1MjUzQyc6J2JveHZoJywnXFx1MjU1MCc6J2JveEgnLCdcXHUyNTUxJzonYm94VicsJ1xcdTI1NTInOidib3hkUicsJ1xcdTI1NTMnOidib3hEcicsJ1xcdTI1NTQnOidib3hEUicsJ1xcdTI1NTUnOidib3hkTCcsJ1xcdTI1NTYnOidib3hEbCcsJ1xcdTI1NTcnOidib3hETCcsJ1xcdTI1NTgnOidib3h1UicsJ1xcdTI1NTknOidib3hVcicsJ1xcdTI1NUEnOidib3hVUicsJ1xcdTI1NUInOidib3h1TCcsJ1xcdTI1NUMnOidib3hVbCcsJ1xcdTI1NUQnOidib3hVTCcsJ1xcdTI1NUUnOidib3h2UicsJ1xcdTI1NUYnOidib3hWcicsJ1xcdTI1NjAnOidib3hWUicsJ1xcdTI1NjEnOidib3h2TCcsJ1xcdTI1NjInOidib3hWbCcsJ1xcdTI1NjMnOidib3hWTCcsJ1xcdTI1NjQnOidib3hIZCcsJ1xcdTI1NjUnOidib3hoRCcsJ1xcdTI1NjYnOidib3hIRCcsJ1xcdTI1NjcnOidib3hIdScsJ1xcdTI1NjgnOidib3hoVScsJ1xcdTI1NjknOidib3hIVScsJ1xcdTI1NkEnOidib3h2SCcsJ1xcdTI1NkInOidib3hWaCcsJ1xcdTI1NkMnOidib3hWSCcsJ1xcdTI1ODAnOid1aGJsaycsJ1xcdTI1ODQnOidsaGJsaycsJ1xcdTI1ODgnOidibG9jaycsJ1xcdTI1OTEnOidibGsxNCcsJ1xcdTI1OTInOidibGsxMicsJ1xcdTI1OTMnOidibGszNCcsJ1xcdTI1QTEnOidzcXUnLCdcXHUyNUFBJzonc3F1ZicsJ1xcdTI1QUInOidFbXB0eVZlcnlTbWFsbFNxdWFyZScsJ1xcdTI1QUQnOidyZWN0JywnXFx1MjVBRSc6J21hcmtlcicsJ1xcdTI1QjEnOidmbHRucycsJ1xcdTI1QjMnOid4dXRyaScsJ1xcdTI1QjQnOid1dHJpZicsJ1xcdTI1QjUnOid1dHJpJywnXFx1MjVCOCc6J3J0cmlmJywnXFx1MjVCOSc6J3J0cmknLCdcXHUyNUJEJzoneGR0cmknLCdcXHUyNUJFJzonZHRyaWYnLCdcXHUyNUJGJzonZHRyaScsJ1xcdTI1QzInOidsdHJpZicsJ1xcdTI1QzMnOidsdHJpJywnXFx1MjVDQSc6J2xveicsJ1xcdTI1Q0InOidjaXInLCdcXHUyNUVDJzondHJpZG90JywnXFx1MjVFRic6J3hjaXJjJywnXFx1MjVGOCc6J3VsdHJpJywnXFx1MjVGOSc6J3VydHJpJywnXFx1MjVGQSc6J2xsdHJpJywnXFx1MjVGQic6J0VtcHR5U21hbGxTcXVhcmUnLCdcXHUyNUZDJzonRmlsbGVkU21hbGxTcXVhcmUnLCdcXHUyNjA1Jzonc3RhcmYnLCdcXHUyNjA2Jzonc3RhcicsJ1xcdTI2MEUnOidwaG9uZScsJ1xcdTI2NDAnOidmZW1hbGUnLCdcXHUyNjQyJzonbWFsZScsJ1xcdTI2NjAnOidzcGFkZXMnLCdcXHUyNjYzJzonY2x1YnMnLCdcXHUyNjY1JzonaGVhcnRzJywnXFx1MjY2Nic6J2RpYW1zJywnXFx1MjY2QSc6J3N1bmcnLCdcXHUyNzEzJzonY2hlY2snLCdcXHUyNzE3JzonY3Jvc3MnLCdcXHUyNzIwJzonbWFsdCcsJ1xcdTI3MzYnOidzZXh0JywnXFx1Mjc1OCc6J1ZlcnRpY2FsU2VwYXJhdG9yJywnXFx1MjdDOCc6J2Jzb2xoc3ViJywnXFx1MjdDOSc6J3N1cGhzb2wnLCdcXHUyN0Y1JzoneGxhcnInLCdcXHUyN0Y2JzoneHJhcnInLCdcXHUyN0Y3JzoneGhhcnInLCdcXHUyN0Y4JzoneGxBcnInLCdcXHUyN0Y5JzoneHJBcnInLCdcXHUyN0ZBJzoneGhBcnInLCdcXHUyN0ZDJzoneG1hcCcsJ1xcdTI3RkYnOidkemlncmFycicsJ1xcdTI5MDInOidudmxBcnInLCdcXHUyOTAzJzonbnZyQXJyJywnXFx1MjkwNCc6J252SGFycicsJ1xcdTI5MDUnOidNYXAnLCdcXHUyOTBDJzonbGJhcnInLCdcXHUyOTBEJzoncmJhcnInLCdcXHUyOTBFJzonbEJhcnInLCdcXHUyOTBGJzonckJhcnInLCdcXHUyOTEwJzonUkJhcnInLCdcXHUyOTExJzonRERvdHJhaGQnLCdcXHUyOTEyJzonVXBBcnJvd0JhcicsJ1xcdTI5MTMnOidEb3duQXJyb3dCYXInLCdcXHUyOTE2JzonUmFycnRsJywnXFx1MjkxOSc6J2xhdGFpbCcsJ1xcdTI5MUEnOidyYXRhaWwnLCdcXHUyOTFCJzonbEF0YWlsJywnXFx1MjkxQyc6J3JBdGFpbCcsJ1xcdTI5MUQnOidsYXJyZnMnLCdcXHUyOTFFJzoncmFycmZzJywnXFx1MjkxRic6J2xhcnJiZnMnLCdcXHUyOTIwJzoncmFycmJmcycsJ1xcdTI5MjMnOidud2FyaGsnLCdcXHUyOTI0JzonbmVhcmhrJywnXFx1MjkyNSc6J3NlYXJoaycsJ1xcdTI5MjYnOidzd2FyaGsnLCdcXHUyOTI3JzonbnduZWFyJywnXFx1MjkyOCc6J3RvZWEnLCdcXHUyOTI5JzondG9zYScsJ1xcdTI5MkEnOidzd253YXInLCdcXHUyOTMzJzoncmFycmMnLCdcXHUyOTMzXFx1MDMzOCc6J25yYXJyYycsJ1xcdTI5MzUnOidjdWRhcnJyJywnXFx1MjkzNic6J2xkY2EnLCdcXHUyOTM3JzoncmRjYScsJ1xcdTI5MzgnOidjdWRhcnJsJywnXFx1MjkzOSc6J2xhcnJwbCcsJ1xcdTI5M0MnOidjdXJhcnJtJywnXFx1MjkzRCc6J2N1bGFycnAnLCdcXHUyOTQ1JzoncmFycnBsJywnXFx1Mjk0OCc6J2hhcnJjaXInLCdcXHUyOTQ5JzonVWFycm9jaXInLCdcXHUyOTRBJzonbHVyZHNoYXInLCdcXHUyOTRCJzonbGRydXNoYXInLCdcXHUyOTRFJzonTGVmdFJpZ2h0VmVjdG9yJywnXFx1Mjk0Ric6J1JpZ2h0VXBEb3duVmVjdG9yJywnXFx1Mjk1MCc6J0Rvd25MZWZ0UmlnaHRWZWN0b3InLCdcXHUyOTUxJzonTGVmdFVwRG93blZlY3RvcicsJ1xcdTI5NTInOidMZWZ0VmVjdG9yQmFyJywnXFx1Mjk1Myc6J1JpZ2h0VmVjdG9yQmFyJywnXFx1Mjk1NCc6J1JpZ2h0VXBWZWN0b3JCYXInLCdcXHUyOTU1JzonUmlnaHREb3duVmVjdG9yQmFyJywnXFx1Mjk1Nic6J0Rvd25MZWZ0VmVjdG9yQmFyJywnXFx1Mjk1Nyc6J0Rvd25SaWdodFZlY3RvckJhcicsJ1xcdTI5NTgnOidMZWZ0VXBWZWN0b3JCYXInLCdcXHUyOTU5JzonTGVmdERvd25WZWN0b3JCYXInLCdcXHUyOTVBJzonTGVmdFRlZVZlY3RvcicsJ1xcdTI5NUInOidSaWdodFRlZVZlY3RvcicsJ1xcdTI5NUMnOidSaWdodFVwVGVlVmVjdG9yJywnXFx1Mjk1RCc6J1JpZ2h0RG93blRlZVZlY3RvcicsJ1xcdTI5NUUnOidEb3duTGVmdFRlZVZlY3RvcicsJ1xcdTI5NUYnOidEb3duUmlnaHRUZWVWZWN0b3InLCdcXHUyOTYwJzonTGVmdFVwVGVlVmVjdG9yJywnXFx1Mjk2MSc6J0xlZnREb3duVGVlVmVjdG9yJywnXFx1Mjk2Mic6J2xIYXInLCdcXHUyOTYzJzondUhhcicsJ1xcdTI5NjQnOidySGFyJywnXFx1Mjk2NSc6J2RIYXInLCdcXHUyOTY2JzonbHVydWhhcicsJ1xcdTI5NjcnOidsZHJkaGFyJywnXFx1Mjk2OCc6J3J1bHVoYXInLCdcXHUyOTY5JzoncmRsZGhhcicsJ1xcdTI5NkEnOidsaGFydWwnLCdcXHUyOTZCJzonbGxoYXJkJywnXFx1Mjk2Qyc6J3JoYXJ1bCcsJ1xcdTI5NkQnOidscmhhcmQnLCdcXHUyOTZFJzondWRoYXInLCdcXHUyOTZGJzonZHVoYXInLCdcXHUyOTcwJzonUm91bmRJbXBsaWVzJywnXFx1Mjk3MSc6J2VyYXJyJywnXFx1Mjk3Mic6J3NpbXJhcnInLCdcXHUyOTczJzonbGFycnNpbScsJ1xcdTI5NzQnOidyYXJyc2ltJywnXFx1Mjk3NSc6J3JhcnJhcCcsJ1xcdTI5NzYnOidsdGxhcnInLCdcXHUyOTc4JzonZ3RyYXJyJywnXFx1Mjk3OSc6J3N1YnJhcnInLCdcXHUyOTdCJzonc3VwbGFycicsJ1xcdTI5N0MnOidsZmlzaHQnLCdcXHUyOTdEJzoncmZpc2h0JywnXFx1Mjk3RSc6J3VmaXNodCcsJ1xcdTI5N0YnOidkZmlzaHQnLCdcXHUyOTlBJzondnppZ3phZycsJ1xcdTI5OUMnOid2YW5ncnQnLCdcXHUyOTlEJzonYW5ncnR2YmQnLCdcXHUyOUE0JzonYW5nZScsJ1xcdTI5QTUnOidyYW5nZScsJ1xcdTI5QTYnOidkd2FuZ2xlJywnXFx1MjlBNyc6J3V3YW5nbGUnLCdcXHUyOUE4JzonYW5nbXNkYWEnLCdcXHUyOUE5JzonYW5nbXNkYWInLCdcXHUyOUFBJzonYW5nbXNkYWMnLCdcXHUyOUFCJzonYW5nbXNkYWQnLCdcXHUyOUFDJzonYW5nbXNkYWUnLCdcXHUyOUFEJzonYW5nbXNkYWYnLCdcXHUyOUFFJzonYW5nbXNkYWcnLCdcXHUyOUFGJzonYW5nbXNkYWgnLCdcXHUyOUIwJzonYmVtcHR5dicsJ1xcdTI5QjEnOidkZW1wdHl2JywnXFx1MjlCMic6J2NlbXB0eXYnLCdcXHUyOUIzJzoncmFlbXB0eXYnLCdcXHUyOUI0JzonbGFlbXB0eXYnLCdcXHUyOUI1Jzonb2hiYXInLCdcXHUyOUI2Jzonb21pZCcsJ1xcdTI5QjcnOidvcGFyJywnXFx1MjlCOSc6J29wZXJwJywnXFx1MjlCQic6J29sY3Jvc3MnLCdcXHUyOUJDJzonb2Rzb2xkJywnXFx1MjlCRSc6J29sY2lyJywnXFx1MjlCRic6J29mY2lyJywnXFx1MjlDMCc6J29sdCcsJ1xcdTI5QzEnOidvZ3QnLCdcXHUyOUMyJzonY2lyc2NpcicsJ1xcdTI5QzMnOidjaXJFJywnXFx1MjlDNCc6J3NvbGInLCdcXHUyOUM1JzonYnNvbGInLCdcXHUyOUM5JzonYm94Ym94JywnXFx1MjlDRCc6J3RyaXNiJywnXFx1MjlDRSc6J3J0cmlsdHJpJywnXFx1MjlDRic6J0xlZnRUcmlhbmdsZUJhcicsJ1xcdTI5Q0ZcXHUwMzM4JzonTm90TGVmdFRyaWFuZ2xlQmFyJywnXFx1MjlEMCc6J1JpZ2h0VHJpYW5nbGVCYXInLCdcXHUyOUQwXFx1MDMzOCc6J05vdFJpZ2h0VHJpYW5nbGVCYXInLCdcXHUyOURDJzonaWluZmluJywnXFx1MjlERCc6J2luZmludGllJywnXFx1MjlERSc6J252aW5maW4nLCdcXHUyOUUzJzonZXBhcnNsJywnXFx1MjlFNCc6J3NtZXBhcnNsJywnXFx1MjlFNSc6J2VxdnBhcnNsJywnXFx1MjlFQic6J2xvemYnLCdcXHUyOUY0JzonUnVsZURlbGF5ZWQnLCdcXHUyOUY2JzonZHNvbCcsJ1xcdTJBMDAnOid4b2RvdCcsJ1xcdTJBMDEnOid4b3BsdXMnLCdcXHUyQTAyJzoneG90aW1lJywnXFx1MkEwNCc6J3h1cGx1cycsJ1xcdTJBMDYnOid4c3FjdXAnLCdcXHUyQTBEJzonZnBhcnRpbnQnLCdcXHUyQTEwJzonY2lyZm5pbnQnLCdcXHUyQTExJzonYXdpbnQnLCdcXHUyQTEyJzoncnBwb2xpbnQnLCdcXHUyQTEzJzonc2Nwb2xpbnQnLCdcXHUyQTE0JzonbnBvbGludCcsJ1xcdTJBMTUnOidwb2ludGludCcsJ1xcdTJBMTYnOidxdWF0aW50JywnXFx1MkExNyc6J2ludGxhcmhrJywnXFx1MkEyMic6J3BsdXNjaXInLCdcXHUyQTIzJzoncGx1c2FjaXInLCdcXHUyQTI0Jzonc2ltcGx1cycsJ1xcdTJBMjUnOidwbHVzZHUnLCdcXHUyQTI2JzoncGx1c3NpbScsJ1xcdTJBMjcnOidwbHVzdHdvJywnXFx1MkEyOSc6J21jb21tYScsJ1xcdTJBMkEnOidtaW51c2R1JywnXFx1MkEyRCc6J2xvcGx1cycsJ1xcdTJBMkUnOidyb3BsdXMnLCdcXHUyQTJGJzonQ3Jvc3MnLCdcXHUyQTMwJzondGltZXNkJywnXFx1MkEzMSc6J3RpbWVzYmFyJywnXFx1MkEzMyc6J3NtYXNocCcsJ1xcdTJBMzQnOidsb3RpbWVzJywnXFx1MkEzNSc6J3JvdGltZXMnLCdcXHUyQTM2Jzonb3RpbWVzYXMnLCdcXHUyQTM3JzonT3RpbWVzJywnXFx1MkEzOCc6J29kaXYnLCdcXHUyQTM5JzondHJpcGx1cycsJ1xcdTJBM0EnOid0cmltaW51cycsJ1xcdTJBM0InOid0cml0aW1lJywnXFx1MkEzQyc6J2lwcm9kJywnXFx1MkEzRic6J2FtYWxnJywnXFx1MkE0MCc6J2NhcGRvdCcsJ1xcdTJBNDInOiduY3VwJywnXFx1MkE0Myc6J25jYXAnLCdcXHUyQTQ0JzonY2FwYW5kJywnXFx1MkE0NSc6J2N1cG9yJywnXFx1MkE0Nic6J2N1cGNhcCcsJ1xcdTJBNDcnOidjYXBjdXAnLCdcXHUyQTQ4JzonY3VwYnJjYXAnLCdcXHUyQTQ5JzonY2FwYnJjdXAnLCdcXHUyQTRBJzonY3VwY3VwJywnXFx1MkE0Qic6J2NhcGNhcCcsJ1xcdTJBNEMnOidjY3VwcycsJ1xcdTJBNEQnOidjY2FwcycsJ1xcdTJBNTAnOidjY3Vwc3NtJywnXFx1MkE1Myc6J0FuZCcsJ1xcdTJBNTQnOidPcicsJ1xcdTJBNTUnOidhbmRhbmQnLCdcXHUyQTU2Jzonb3JvcicsJ1xcdTJBNTcnOidvcnNsb3BlJywnXFx1MkE1OCc6J2FuZHNsb3BlJywnXFx1MkE1QSc6J2FuZHYnLCdcXHUyQTVCJzonb3J2JywnXFx1MkE1Qyc6J2FuZGQnLCdcXHUyQTVEJzonb3JkJywnXFx1MkE1Ric6J3dlZGJhcicsJ1xcdTJBNjYnOidzZG90ZScsJ1xcdTJBNkEnOidzaW1kb3QnLCdcXHUyQTZEJzonY29uZ2RvdCcsJ1xcdTJBNkRcXHUwMzM4JzonbmNvbmdkb3QnLCdcXHUyQTZFJzonZWFzdGVyJywnXFx1MkE2Ric6J2FwYWNpcicsJ1xcdTJBNzAnOidhcEUnLCdcXHUyQTcwXFx1MDMzOCc6J25hcEUnLCdcXHUyQTcxJzonZXBsdXMnLCdcXHUyQTcyJzoncGx1c2UnLCdcXHUyQTczJzonRXNpbScsJ1xcdTJBNzcnOidlRERvdCcsJ1xcdTJBNzgnOidlcXVpdkREJywnXFx1MkE3OSc6J2x0Y2lyJywnXFx1MkE3QSc6J2d0Y2lyJywnXFx1MkE3Qic6J2x0cXVlc3QnLCdcXHUyQTdDJzonZ3RxdWVzdCcsJ1xcdTJBN0QnOidsZXMnLCdcXHUyQTdEXFx1MDMzOCc6J25sZXMnLCdcXHUyQTdFJzonZ2VzJywnXFx1MkE3RVxcdTAzMzgnOiduZ2VzJywnXFx1MkE3Ric6J2xlc2RvdCcsJ1xcdTJBODAnOidnZXNkb3QnLCdcXHUyQTgxJzonbGVzZG90bycsJ1xcdTJBODInOidnZXNkb3RvJywnXFx1MkE4Myc6J2xlc2RvdG9yJywnXFx1MkE4NCc6J2dlc2RvdG9sJywnXFx1MkE4NSc6J2xhcCcsJ1xcdTJBODYnOidnYXAnLCdcXHUyQTg3JzonbG5lJywnXFx1MkE4OCc6J2duZScsJ1xcdTJBODknOidsbmFwJywnXFx1MkE4QSc6J2duYXAnLCdcXHUyQThCJzonbEVnJywnXFx1MkE4Qyc6J2dFbCcsJ1xcdTJBOEQnOidsc2ltZScsJ1xcdTJBOEUnOidnc2ltZScsJ1xcdTJBOEYnOidsc2ltZycsJ1xcdTJBOTAnOidnc2ltbCcsJ1xcdTJBOTEnOidsZ0UnLCdcXHUyQTkyJzonZ2xFJywnXFx1MkE5Myc6J2xlc2dlcycsJ1xcdTJBOTQnOidnZXNsZXMnLCdcXHUyQTk1JzonZWxzJywnXFx1MkE5Nic6J2VncycsJ1xcdTJBOTcnOidlbHNkb3QnLCdcXHUyQTk4JzonZWdzZG90JywnXFx1MkE5OSc6J2VsJywnXFx1MkE5QSc6J2VnJywnXFx1MkE5RCc6J3NpbWwnLCdcXHUyQTlFJzonc2ltZycsJ1xcdTJBOUYnOidzaW1sRScsJ1xcdTJBQTAnOidzaW1nRScsJ1xcdTJBQTEnOidMZXNzTGVzcycsJ1xcdTJBQTFcXHUwMzM4JzonTm90TmVzdGVkTGVzc0xlc3MnLCdcXHUyQUEyJzonR3JlYXRlckdyZWF0ZXInLCdcXHUyQUEyXFx1MDMzOCc6J05vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyJywnXFx1MkFBNCc6J2dsaicsJ1xcdTJBQTUnOidnbGEnLCdcXHUyQUE2JzonbHRjYycsJ1xcdTJBQTcnOidndGNjJywnXFx1MkFBOCc6J2xlc2NjJywnXFx1MkFBOSc6J2dlc2NjJywnXFx1MkFBQSc6J3NtdCcsJ1xcdTJBQUInOidsYXQnLCdcXHUyQUFDJzonc210ZScsJ1xcdTJBQUNcXHVGRTAwJzonc210ZXMnLCdcXHUyQUFEJzonbGF0ZScsJ1xcdTJBQURcXHVGRTAwJzonbGF0ZXMnLCdcXHUyQUFFJzonYnVtcEUnLCdcXHUyQUFGJzoncHJlJywnXFx1MkFBRlxcdTAzMzgnOiducHJlJywnXFx1MkFCMCc6J3NjZScsJ1xcdTJBQjBcXHUwMzM4JzonbnNjZScsJ1xcdTJBQjMnOidwckUnLCdcXHUyQUI0Jzonc2NFJywnXFx1MkFCNSc6J3BybkUnLCdcXHUyQUI2Jzonc2NuRScsJ1xcdTJBQjcnOidwcmFwJywnXFx1MkFCOCc6J3NjYXAnLCdcXHUyQUI5JzoncHJuYXAnLCdcXHUyQUJBJzonc2NuYXAnLCdcXHUyQUJCJzonUHInLCdcXHUyQUJDJzonU2MnLCdcXHUyQUJEJzonc3ViZG90JywnXFx1MkFCRSc6J3N1cGRvdCcsJ1xcdTJBQkYnOidzdWJwbHVzJywnXFx1MkFDMCc6J3N1cHBsdXMnLCdcXHUyQUMxJzonc3VibXVsdCcsJ1xcdTJBQzInOidzdXBtdWx0JywnXFx1MkFDMyc6J3N1YmVkb3QnLCdcXHUyQUM0Jzonc3VwZWRvdCcsJ1xcdTJBQzUnOidzdWJFJywnXFx1MkFDNVxcdTAzMzgnOiduc3ViRScsJ1xcdTJBQzYnOidzdXBFJywnXFx1MkFDNlxcdTAzMzgnOiduc3VwRScsJ1xcdTJBQzcnOidzdWJzaW0nLCdcXHUyQUM4Jzonc3Vwc2ltJywnXFx1MkFDQlxcdUZFMDAnOid2c3VibkUnLCdcXHUyQUNCJzonc3VibkUnLCdcXHUyQUNDXFx1RkUwMCc6J3ZzdXBuRScsJ1xcdTJBQ0MnOidzdXBuRScsJ1xcdTJBQ0YnOidjc3ViJywnXFx1MkFEMCc6J2NzdXAnLCdcXHUyQUQxJzonY3N1YmUnLCdcXHUyQUQyJzonY3N1cGUnLCdcXHUyQUQzJzonc3Vic3VwJywnXFx1MkFENCc6J3N1cHN1YicsJ1xcdTJBRDUnOidzdWJzdWInLCdcXHUyQUQ2Jzonc3Vwc3VwJywnXFx1MkFENyc6J3N1cGhzdWInLCdcXHUyQUQ4Jzonc3VwZHN1YicsJ1xcdTJBRDknOidmb3JrdicsJ1xcdTJBREEnOid0b3Bmb3JrJywnXFx1MkFEQic6J21sY3AnLCdcXHUyQUU0JzonRGFzaHYnLCdcXHUyQUU2JzonVmRhc2hsJywnXFx1MkFFNyc6J0JhcnYnLCdcXHUyQUU4JzondkJhcicsJ1xcdTJBRTknOid2QmFydicsJ1xcdTJBRUInOidWYmFyJywnXFx1MkFFQyc6J05vdCcsJ1xcdTJBRUQnOidiTm90JywnXFx1MkFFRSc6J3JubWlkJywnXFx1MkFFRic6J2Npcm1pZCcsJ1xcdTJBRjAnOidtaWRjaXInLCdcXHUyQUYxJzondG9wY2lyJywnXFx1MkFGMic6J25ocGFyJywnXFx1MkFGMyc6J3BhcnNpbScsJ1xcdTJBRkQnOidwYXJzbCcsJ1xcdTJBRkRcXHUyMEU1JzonbnBhcnNsJywnXFx1MjY2RCc6J2ZsYXQnLCdcXHUyNjZFJzonbmF0dXInLCdcXHUyNjZGJzonc2hhcnAnLCdcXHhBNCc6J2N1cnJlbicsJ1xceEEyJzonY2VudCcsJyQnOidkb2xsYXInLCdcXHhBMyc6J3BvdW5kJywnXFx4QTUnOid5ZW4nLCdcXHUyMEFDJzonZXVybycsJ1xceEI5Jzonc3VwMScsJ1xceEJEJzonaGFsZicsJ1xcdTIxNTMnOidmcmFjMTMnLCdcXHhCQyc6J2ZyYWMxNCcsJ1xcdTIxNTUnOidmcmFjMTUnLCdcXHUyMTU5JzonZnJhYzE2JywnXFx1MjE1Qic6J2ZyYWMxOCcsJ1xceEIyJzonc3VwMicsJ1xcdTIxNTQnOidmcmFjMjMnLCdcXHUyMTU2JzonZnJhYzI1JywnXFx4QjMnOidzdXAzJywnXFx4QkUnOidmcmFjMzQnLCdcXHUyMTU3JzonZnJhYzM1JywnXFx1MjE1Qyc6J2ZyYWMzOCcsJ1xcdTIxNTgnOidmcmFjNDUnLCdcXHUyMTVBJzonZnJhYzU2JywnXFx1MjE1RCc6J2ZyYWM1OCcsJ1xcdTIxNUUnOidmcmFjNzgnLCdcXHVEODM1XFx1RENCNic6J2FzY3InLCdcXHVEODM1XFx1REQ1Mic6J2FvcGYnLCdcXHVEODM1XFx1REQxRSc6J2FmcicsJ1xcdUQ4MzVcXHVERDM4JzonQW9wZicsJ1xcdUQ4MzVcXHVERDA0JzonQWZyJywnXFx1RDgzNVxcdURDOUMnOidBc2NyJywnXFx4QUEnOidvcmRmJywnXFx4RTEnOidhYWN1dGUnLCdcXHhDMSc6J0FhY3V0ZScsJ1xceEUwJzonYWdyYXZlJywnXFx4QzAnOidBZ3JhdmUnLCdcXHUwMTAzJzonYWJyZXZlJywnXFx1MDEwMic6J0FicmV2ZScsJ1xceEUyJzonYWNpcmMnLCdcXHhDMic6J0FjaXJjJywnXFx4RTUnOidhcmluZycsJ1xceEM1JzonYW5nc3QnLCdcXHhFNCc6J2F1bWwnLCdcXHhDNCc6J0F1bWwnLCdcXHhFMyc6J2F0aWxkZScsJ1xceEMzJzonQXRpbGRlJywnXFx1MDEwNSc6J2FvZ29uJywnXFx1MDEwNCc6J0FvZ29uJywnXFx1MDEwMSc6J2FtYWNyJywnXFx1MDEwMCc6J0FtYWNyJywnXFx4RTYnOidhZWxpZycsJ1xceEM2JzonQUVsaWcnLCdcXHVEODM1XFx1RENCNyc6J2JzY3InLCdcXHVEODM1XFx1REQ1Myc6J2JvcGYnLCdcXHVEODM1XFx1REQxRic6J2JmcicsJ1xcdUQ4MzVcXHVERDM5JzonQm9wZicsJ1xcdTIxMkMnOidCc2NyJywnXFx1RDgzNVxcdUREMDUnOidCZnInLCdcXHVEODM1XFx1REQyMCc6J2NmcicsJ1xcdUQ4MzVcXHVEQ0I4JzonY3NjcicsJ1xcdUQ4MzVcXHVERDU0JzonY29wZicsJ1xcdTIxMkQnOidDZnInLCdcXHVEODM1XFx1REM5RSc6J0NzY3InLCdcXHUyMTAyJzonQ29wZicsJ1xcdTAxMDcnOidjYWN1dGUnLCdcXHUwMTA2JzonQ2FjdXRlJywnXFx1MDEwOSc6J2NjaXJjJywnXFx1MDEwOCc6J0NjaXJjJywnXFx1MDEwRCc6J2NjYXJvbicsJ1xcdTAxMEMnOidDY2Fyb24nLCdcXHUwMTBCJzonY2RvdCcsJ1xcdTAxMEEnOidDZG90JywnXFx4RTcnOidjY2VkaWwnLCdcXHhDNyc6J0NjZWRpbCcsJ1xcdTIxMDUnOidpbmNhcmUnLCdcXHVEODM1XFx1REQyMSc6J2RmcicsJ1xcdTIxNDYnOidkZCcsJ1xcdUQ4MzVcXHVERDU1JzonZG9wZicsJ1xcdUQ4MzVcXHVEQ0I5JzonZHNjcicsJ1xcdUQ4MzVcXHVEQzlGJzonRHNjcicsJ1xcdUQ4MzVcXHVERDA3JzonRGZyJywnXFx1MjE0NSc6J0REJywnXFx1RDgzNVxcdUREM0InOidEb3BmJywnXFx1MDEwRic6J2RjYXJvbicsJ1xcdTAxMEUnOidEY2Fyb24nLCdcXHUwMTExJzonZHN0cm9rJywnXFx1MDExMCc6J0RzdHJvaycsJ1xceEYwJzonZXRoJywnXFx4RDAnOidFVEgnLCdcXHUyMTQ3JzonZWUnLCdcXHUyMTJGJzonZXNjcicsJ1xcdUQ4MzVcXHVERDIyJzonZWZyJywnXFx1RDgzNVxcdURENTYnOidlb3BmJywnXFx1MjEzMCc6J0VzY3InLCdcXHVEODM1XFx1REQwOCc6J0VmcicsJ1xcdUQ4MzVcXHVERDNDJzonRW9wZicsJ1xceEU5JzonZWFjdXRlJywnXFx4QzknOidFYWN1dGUnLCdcXHhFOCc6J2VncmF2ZScsJ1xceEM4JzonRWdyYXZlJywnXFx4RUEnOidlY2lyYycsJ1xceENBJzonRWNpcmMnLCdcXHUwMTFCJzonZWNhcm9uJywnXFx1MDExQSc6J0VjYXJvbicsJ1xceEVCJzonZXVtbCcsJ1xceENCJzonRXVtbCcsJ1xcdTAxMTcnOidlZG90JywnXFx1MDExNic6J0Vkb3QnLCdcXHUwMTE5JzonZW9nb24nLCdcXHUwMTE4JzonRW9nb24nLCdcXHUwMTEzJzonZW1hY3InLCdcXHUwMTEyJzonRW1hY3InLCdcXHVEODM1XFx1REQyMyc6J2ZmcicsJ1xcdUQ4MzVcXHVERDU3JzonZm9wZicsJ1xcdUQ4MzVcXHVEQ0JCJzonZnNjcicsJ1xcdUQ4MzVcXHVERDA5JzonRmZyJywnXFx1RDgzNVxcdUREM0QnOidGb3BmJywnXFx1MjEzMSc6J0ZzY3InLCdcXHVGQjAwJzonZmZsaWcnLCdcXHVGQjAzJzonZmZpbGlnJywnXFx1RkIwNCc6J2ZmbGxpZycsJ1xcdUZCMDEnOidmaWxpZycsJ2ZqJzonZmpsaWcnLCdcXHVGQjAyJzonZmxsaWcnLCdcXHUwMTkyJzonZm5vZicsJ1xcdTIxMEEnOidnc2NyJywnXFx1RDgzNVxcdURENTgnOidnb3BmJywnXFx1RDgzNVxcdUREMjQnOidnZnInLCdcXHVEODM1XFx1RENBMic6J0dzY3InLCdcXHVEODM1XFx1REQzRSc6J0dvcGYnLCdcXHVEODM1XFx1REQwQSc6J0dmcicsJ1xcdTAxRjUnOidnYWN1dGUnLCdcXHUwMTFGJzonZ2JyZXZlJywnXFx1MDExRSc6J0dicmV2ZScsJ1xcdTAxMUQnOidnY2lyYycsJ1xcdTAxMUMnOidHY2lyYycsJ1xcdTAxMjEnOidnZG90JywnXFx1MDEyMCc6J0dkb3QnLCdcXHUwMTIyJzonR2NlZGlsJywnXFx1RDgzNVxcdUREMjUnOidoZnInLCdcXHUyMTBFJzoncGxhbmNraCcsJ1xcdUQ4MzVcXHVEQ0JEJzonaHNjcicsJ1xcdUQ4MzVcXHVERDU5JzonaG9wZicsJ1xcdTIxMEInOidIc2NyJywnXFx1MjEwQyc6J0hmcicsJ1xcdTIxMEQnOidIb3BmJywnXFx1MDEyNSc6J2hjaXJjJywnXFx1MDEyNCc6J0hjaXJjJywnXFx1MjEwRic6J2hiYXInLCdcXHUwMTI3JzonaHN0cm9rJywnXFx1MDEyNic6J0hzdHJvaycsJ1xcdUQ4MzVcXHVERDVBJzonaW9wZicsJ1xcdUQ4MzVcXHVERDI2JzonaWZyJywnXFx1RDgzNVxcdURDQkUnOidpc2NyJywnXFx1MjE0OCc6J2lpJywnXFx1RDgzNVxcdURENDAnOidJb3BmJywnXFx1MjExMCc6J0lzY3InLCdcXHUyMTExJzonSW0nLCdcXHhFRCc6J2lhY3V0ZScsJ1xceENEJzonSWFjdXRlJywnXFx4RUMnOidpZ3JhdmUnLCdcXHhDQyc6J0lncmF2ZScsJ1xceEVFJzonaWNpcmMnLCdcXHhDRSc6J0ljaXJjJywnXFx4RUYnOidpdW1sJywnXFx4Q0YnOidJdW1sJywnXFx1MDEyOSc6J2l0aWxkZScsJ1xcdTAxMjgnOidJdGlsZGUnLCdcXHUwMTMwJzonSWRvdCcsJ1xcdTAxMkYnOidpb2dvbicsJ1xcdTAxMkUnOidJb2dvbicsJ1xcdTAxMkInOidpbWFjcicsJ1xcdTAxMkEnOidJbWFjcicsJ1xcdTAxMzMnOidpamxpZycsJ1xcdTAxMzInOidJSmxpZycsJ1xcdTAxMzEnOidpbWF0aCcsJ1xcdUQ4MzVcXHVEQ0JGJzonanNjcicsJ1xcdUQ4MzVcXHVERDVCJzonam9wZicsJ1xcdUQ4MzVcXHVERDI3JzonamZyJywnXFx1RDgzNVxcdURDQTUnOidKc2NyJywnXFx1RDgzNVxcdUREMEQnOidKZnInLCdcXHVEODM1XFx1REQ0MSc6J0pvcGYnLCdcXHUwMTM1JzonamNpcmMnLCdcXHUwMTM0JzonSmNpcmMnLCdcXHUwMjM3Jzonam1hdGgnLCdcXHVEODM1XFx1REQ1Qyc6J2tvcGYnLCdcXHVEODM1XFx1RENDMCc6J2tzY3InLCdcXHVEODM1XFx1REQyOCc6J2tmcicsJ1xcdUQ4MzVcXHVEQ0E2JzonS3NjcicsJ1xcdUQ4MzVcXHVERDQyJzonS29wZicsJ1xcdUQ4MzVcXHVERDBFJzonS2ZyJywnXFx1MDEzNyc6J2tjZWRpbCcsJ1xcdTAxMzYnOidLY2VkaWwnLCdcXHVEODM1XFx1REQyOSc6J2xmcicsJ1xcdUQ4MzVcXHVEQ0MxJzonbHNjcicsJ1xcdTIxMTMnOidlbGwnLCdcXHVEODM1XFx1REQ1RCc6J2xvcGYnLCdcXHUyMTEyJzonTHNjcicsJ1xcdUQ4MzVcXHVERDBGJzonTGZyJywnXFx1RDgzNVxcdURENDMnOidMb3BmJywnXFx1MDEzQSc6J2xhY3V0ZScsJ1xcdTAxMzknOidMYWN1dGUnLCdcXHUwMTNFJzonbGNhcm9uJywnXFx1MDEzRCc6J0xjYXJvbicsJ1xcdTAxM0MnOidsY2VkaWwnLCdcXHUwMTNCJzonTGNlZGlsJywnXFx1MDE0Mic6J2xzdHJvaycsJ1xcdTAxNDEnOidMc3Ryb2snLCdcXHUwMTQwJzonbG1pZG90JywnXFx1MDEzRic6J0xtaWRvdCcsJ1xcdUQ4MzVcXHVERDJBJzonbWZyJywnXFx1RDgzNVxcdURENUUnOidtb3BmJywnXFx1RDgzNVxcdURDQzInOidtc2NyJywnXFx1RDgzNVxcdUREMTAnOidNZnInLCdcXHVEODM1XFx1REQ0NCc6J01vcGYnLCdcXHUyMTMzJzonTXNjcicsJ1xcdUQ4MzVcXHVERDJCJzonbmZyJywnXFx1RDgzNVxcdURENUYnOidub3BmJywnXFx1RDgzNVxcdURDQzMnOiduc2NyJywnXFx1MjExNSc6J05vcGYnLCdcXHVEODM1XFx1RENBOSc6J05zY3InLCdcXHVEODM1XFx1REQxMSc6J05mcicsJ1xcdTAxNDQnOiduYWN1dGUnLCdcXHUwMTQzJzonTmFjdXRlJywnXFx1MDE0OCc6J25jYXJvbicsJ1xcdTAxNDcnOidOY2Fyb24nLCdcXHhGMSc6J250aWxkZScsJ1xceEQxJzonTnRpbGRlJywnXFx1MDE0Nic6J25jZWRpbCcsJ1xcdTAxNDUnOidOY2VkaWwnLCdcXHUyMTE2JzonbnVtZXJvJywnXFx1MDE0Qic6J2VuZycsJ1xcdTAxNEEnOidFTkcnLCdcXHVEODM1XFx1REQ2MCc6J29vcGYnLCdcXHVEODM1XFx1REQyQyc6J29mcicsJ1xcdTIxMzQnOidvc2NyJywnXFx1RDgzNVxcdURDQUEnOidPc2NyJywnXFx1RDgzNVxcdUREMTInOidPZnInLCdcXHVEODM1XFx1REQ0Nic6J09vcGYnLCdcXHhCQSc6J29yZG0nLCdcXHhGMyc6J29hY3V0ZScsJ1xceEQzJzonT2FjdXRlJywnXFx4RjInOidvZ3JhdmUnLCdcXHhEMic6J09ncmF2ZScsJ1xceEY0Jzonb2NpcmMnLCdcXHhENCc6J09jaXJjJywnXFx4RjYnOidvdW1sJywnXFx4RDYnOidPdW1sJywnXFx1MDE1MSc6J29kYmxhYycsJ1xcdTAxNTAnOidPZGJsYWMnLCdcXHhGNSc6J290aWxkZScsJ1xceEQ1JzonT3RpbGRlJywnXFx4RjgnOidvc2xhc2gnLCdcXHhEOCc6J09zbGFzaCcsJ1xcdTAxNEQnOidvbWFjcicsJ1xcdTAxNEMnOidPbWFjcicsJ1xcdTAxNTMnOidvZWxpZycsJ1xcdTAxNTInOidPRWxpZycsJ1xcdUQ4MzVcXHVERDJEJzoncGZyJywnXFx1RDgzNVxcdURDQzUnOidwc2NyJywnXFx1RDgzNVxcdURENjEnOidwb3BmJywnXFx1MjExOSc6J1BvcGYnLCdcXHVEODM1XFx1REQxMyc6J1BmcicsJ1xcdUQ4MzVcXHVEQ0FCJzonUHNjcicsJ1xcdUQ4MzVcXHVERDYyJzoncW9wZicsJ1xcdUQ4MzVcXHVERDJFJzoncWZyJywnXFx1RDgzNVxcdURDQzYnOidxc2NyJywnXFx1RDgzNVxcdURDQUMnOidRc2NyJywnXFx1RDgzNVxcdUREMTQnOidRZnInLCdcXHUyMTFBJzonUW9wZicsJ1xcdTAxMzgnOidrZ3JlZW4nLCdcXHVEODM1XFx1REQyRic6J3JmcicsJ1xcdUQ4MzVcXHVERDYzJzoncm9wZicsJ1xcdUQ4MzVcXHVEQ0M3JzoncnNjcicsJ1xcdTIxMUInOidSc2NyJywnXFx1MjExQyc6J1JlJywnXFx1MjExRCc6J1JvcGYnLCdcXHUwMTU1JzoncmFjdXRlJywnXFx1MDE1NCc6J1JhY3V0ZScsJ1xcdTAxNTknOidyY2Fyb24nLCdcXHUwMTU4JzonUmNhcm9uJywnXFx1MDE1Nyc6J3JjZWRpbCcsJ1xcdTAxNTYnOidSY2VkaWwnLCdcXHVEODM1XFx1REQ2NCc6J3NvcGYnLCdcXHVEODM1XFx1RENDOCc6J3NzY3InLCdcXHVEODM1XFx1REQzMCc6J3NmcicsJ1xcdUQ4MzVcXHVERDRBJzonU29wZicsJ1xcdUQ4MzVcXHVERDE2JzonU2ZyJywnXFx1RDgzNVxcdURDQUUnOidTc2NyJywnXFx1MjRDOCc6J29TJywnXFx1MDE1Qic6J3NhY3V0ZScsJ1xcdTAxNUEnOidTYWN1dGUnLCdcXHUwMTVEJzonc2NpcmMnLCdcXHUwMTVDJzonU2NpcmMnLCdcXHUwMTYxJzonc2Nhcm9uJywnXFx1MDE2MCc6J1NjYXJvbicsJ1xcdTAxNUYnOidzY2VkaWwnLCdcXHUwMTVFJzonU2NlZGlsJywnXFx4REYnOidzemxpZycsJ1xcdUQ4MzVcXHVERDMxJzondGZyJywnXFx1RDgzNVxcdURDQzknOid0c2NyJywnXFx1RDgzNVxcdURENjUnOid0b3BmJywnXFx1RDgzNVxcdURDQUYnOidUc2NyJywnXFx1RDgzNVxcdUREMTcnOidUZnInLCdcXHVEODM1XFx1REQ0Qic6J1RvcGYnLCdcXHUwMTY1JzondGNhcm9uJywnXFx1MDE2NCc6J1RjYXJvbicsJ1xcdTAxNjMnOid0Y2VkaWwnLCdcXHUwMTYyJzonVGNlZGlsJywnXFx1MjEyMic6J3RyYWRlJywnXFx1MDE2Nyc6J3RzdHJvaycsJ1xcdTAxNjYnOidUc3Ryb2snLCdcXHVEODM1XFx1RENDQSc6J3VzY3InLCdcXHVEODM1XFx1REQ2Nic6J3VvcGYnLCdcXHVEODM1XFx1REQzMic6J3VmcicsJ1xcdUQ4MzVcXHVERDRDJzonVW9wZicsJ1xcdUQ4MzVcXHVERDE4JzonVWZyJywnXFx1RDgzNVxcdURDQjAnOidVc2NyJywnXFx4RkEnOid1YWN1dGUnLCdcXHhEQSc6J1VhY3V0ZScsJ1xceEY5JzondWdyYXZlJywnXFx4RDknOidVZ3JhdmUnLCdcXHUwMTZEJzondWJyZXZlJywnXFx1MDE2Qyc6J1VicmV2ZScsJ1xceEZCJzondWNpcmMnLCdcXHhEQic6J1VjaXJjJywnXFx1MDE2Ric6J3VyaW5nJywnXFx1MDE2RSc6J1VyaW5nJywnXFx4RkMnOid1dW1sJywnXFx4REMnOidVdW1sJywnXFx1MDE3MSc6J3VkYmxhYycsJ1xcdTAxNzAnOidVZGJsYWMnLCdcXHUwMTY5JzondXRpbGRlJywnXFx1MDE2OCc6J1V0aWxkZScsJ1xcdTAxNzMnOid1b2dvbicsJ1xcdTAxNzInOidVb2dvbicsJ1xcdTAxNkInOid1bWFjcicsJ1xcdTAxNkEnOidVbWFjcicsJ1xcdUQ4MzVcXHVERDMzJzondmZyJywnXFx1RDgzNVxcdURENjcnOid2b3BmJywnXFx1RDgzNVxcdURDQ0InOid2c2NyJywnXFx1RDgzNVxcdUREMTknOidWZnInLCdcXHVEODM1XFx1REQ0RCc6J1ZvcGYnLCdcXHVEODM1XFx1RENCMSc6J1ZzY3InLCdcXHVEODM1XFx1REQ2OCc6J3dvcGYnLCdcXHVEODM1XFx1RENDQyc6J3dzY3InLCdcXHVEODM1XFx1REQzNCc6J3dmcicsJ1xcdUQ4MzVcXHVEQ0IyJzonV3NjcicsJ1xcdUQ4MzVcXHVERDRFJzonV29wZicsJ1xcdUQ4MzVcXHVERDFBJzonV2ZyJywnXFx1MDE3NSc6J3djaXJjJywnXFx1MDE3NCc6J1djaXJjJywnXFx1RDgzNVxcdUREMzUnOid4ZnInLCdcXHVEODM1XFx1RENDRCc6J3hzY3InLCdcXHVEODM1XFx1REQ2OSc6J3hvcGYnLCdcXHVEODM1XFx1REQ0Ric6J1hvcGYnLCdcXHVEODM1XFx1REQxQic6J1hmcicsJ1xcdUQ4MzVcXHVEQ0IzJzonWHNjcicsJ1xcdUQ4MzVcXHVERDM2JzoneWZyJywnXFx1RDgzNVxcdURDQ0UnOid5c2NyJywnXFx1RDgzNVxcdURENkEnOid5b3BmJywnXFx1RDgzNVxcdURDQjQnOidZc2NyJywnXFx1RDgzNVxcdUREMUMnOidZZnInLCdcXHVEODM1XFx1REQ1MCc6J1lvcGYnLCdcXHhGRCc6J3lhY3V0ZScsJ1xceEREJzonWWFjdXRlJywnXFx1MDE3Nyc6J3ljaXJjJywnXFx1MDE3Nic6J1ljaXJjJywnXFx4RkYnOid5dW1sJywnXFx1MDE3OCc6J1l1bWwnLCdcXHVEODM1XFx1RENDRic6J3pzY3InLCdcXHVEODM1XFx1REQzNyc6J3pmcicsJ1xcdUQ4MzVcXHVERDZCJzonem9wZicsJ1xcdTIxMjgnOidaZnInLCdcXHUyMTI0JzonWm9wZicsJ1xcdUQ4MzVcXHVEQ0I1JzonWnNjcicsJ1xcdTAxN0EnOid6YWN1dGUnLCdcXHUwMTc5JzonWmFjdXRlJywnXFx1MDE3RSc6J3pjYXJvbicsJ1xcdTAxN0QnOidaY2Fyb24nLCdcXHUwMTdDJzonemRvdCcsJ1xcdTAxN0InOidaZG90JywnXFx1MDFCNSc6J2ltcGVkJywnXFx4RkUnOid0aG9ybicsJ1xceERFJzonVEhPUk4nLCdcXHUwMTQ5JzonbmFwb3MnLCdcXHUwM0IxJzonYWxwaGEnLCdcXHUwMzkxJzonQWxwaGEnLCdcXHUwM0IyJzonYmV0YScsJ1xcdTAzOTInOidCZXRhJywnXFx1MDNCMyc6J2dhbW1hJywnXFx1MDM5Myc6J0dhbW1hJywnXFx1MDNCNCc6J2RlbHRhJywnXFx1MDM5NCc6J0RlbHRhJywnXFx1MDNCNSc6J2Vwc2knLCdcXHUwM0Y1JzonZXBzaXYnLCdcXHUwMzk1JzonRXBzaWxvbicsJ1xcdTAzREQnOidnYW1tYWQnLCdcXHUwM0RDJzonR2FtbWFkJywnXFx1MDNCNic6J3pldGEnLCdcXHUwMzk2JzonWmV0YScsJ1xcdTAzQjcnOidldGEnLCdcXHUwMzk3JzonRXRhJywnXFx1MDNCOCc6J3RoZXRhJywnXFx1MDNEMSc6J3RoZXRhdicsJ1xcdTAzOTgnOidUaGV0YScsJ1xcdTAzQjknOidpb3RhJywnXFx1MDM5OSc6J0lvdGEnLCdcXHUwM0JBJzona2FwcGEnLCdcXHUwM0YwJzona2FwcGF2JywnXFx1MDM5QSc6J0thcHBhJywnXFx1MDNCQic6J2xhbWJkYScsJ1xcdTAzOUInOidMYW1iZGEnLCdcXHUwM0JDJzonbXUnLCdcXHhCNSc6J21pY3JvJywnXFx1MDM5Qyc6J011JywnXFx1MDNCRCc6J251JywnXFx1MDM5RCc6J051JywnXFx1MDNCRSc6J3hpJywnXFx1MDM5RSc6J1hpJywnXFx1MDNCRic6J29taWNyb24nLCdcXHUwMzlGJzonT21pY3JvbicsJ1xcdTAzQzAnOidwaScsJ1xcdTAzRDYnOidwaXYnLCdcXHUwM0EwJzonUGknLCdcXHUwM0MxJzoncmhvJywnXFx1MDNGMSc6J3Job3YnLCdcXHUwM0ExJzonUmhvJywnXFx1MDNDMyc6J3NpZ21hJywnXFx1MDNBMyc6J1NpZ21hJywnXFx1MDNDMic6J3NpZ21hZicsJ1xcdTAzQzQnOid0YXUnLCdcXHUwM0E0JzonVGF1JywnXFx1MDNDNSc6J3Vwc2knLCdcXHUwM0E1JzonVXBzaWxvbicsJ1xcdTAzRDInOidVcHNpJywnXFx1MDNDNic6J3BoaScsJ1xcdTAzRDUnOidwaGl2JywnXFx1MDNBNic6J1BoaScsJ1xcdTAzQzcnOidjaGknLCdcXHUwM0E3JzonQ2hpJywnXFx1MDNDOCc6J3BzaScsJ1xcdTAzQTgnOidQc2knLCdcXHUwM0M5Jzonb21lZ2EnLCdcXHUwM0E5Jzonb2htJywnXFx1MDQzMCc6J2FjeScsJ1xcdTA0MTAnOidBY3knLCdcXHUwNDMxJzonYmN5JywnXFx1MDQxMSc6J0JjeScsJ1xcdTA0MzInOid2Y3knLCdcXHUwNDEyJzonVmN5JywnXFx1MDQzMyc6J2djeScsJ1xcdTA0MTMnOidHY3knLCdcXHUwNDUzJzonZ2pjeScsJ1xcdTA0MDMnOidHSmN5JywnXFx1MDQzNCc6J2RjeScsJ1xcdTA0MTQnOidEY3knLCdcXHUwNDUyJzonZGpjeScsJ1xcdTA0MDInOidESmN5JywnXFx1MDQzNSc6J2llY3knLCdcXHUwNDE1JzonSUVjeScsJ1xcdTA0NTEnOidpb2N5JywnXFx1MDQwMSc6J0lPY3knLCdcXHUwNDU0JzonanVrY3knLCdcXHUwNDA0JzonSnVrY3knLCdcXHUwNDM2JzonemhjeScsJ1xcdTA0MTYnOidaSGN5JywnXFx1MDQzNyc6J3pjeScsJ1xcdTA0MTcnOidaY3knLCdcXHUwNDU1JzonZHNjeScsJ1xcdTA0MDUnOidEU2N5JywnXFx1MDQzOCc6J2ljeScsJ1xcdTA0MTgnOidJY3knLCdcXHUwNDU2JzonaXVrY3knLCdcXHUwNDA2JzonSXVrY3knLCdcXHUwNDU3JzoneWljeScsJ1xcdTA0MDcnOidZSWN5JywnXFx1MDQzOSc6J2pjeScsJ1xcdTA0MTknOidKY3knLCdcXHUwNDU4JzonanNlcmN5JywnXFx1MDQwOCc6J0pzZXJjeScsJ1xcdTA0M0EnOidrY3knLCdcXHUwNDFBJzonS2N5JywnXFx1MDQ1Qyc6J2tqY3knLCdcXHUwNDBDJzonS0pjeScsJ1xcdTA0M0InOidsY3knLCdcXHUwNDFCJzonTGN5JywnXFx1MDQ1OSc6J2xqY3knLCdcXHUwNDA5JzonTEpjeScsJ1xcdTA0M0MnOidtY3knLCdcXHUwNDFDJzonTWN5JywnXFx1MDQzRCc6J25jeScsJ1xcdTA0MUQnOidOY3knLCdcXHUwNDVBJzonbmpjeScsJ1xcdTA0MEEnOidOSmN5JywnXFx1MDQzRSc6J29jeScsJ1xcdTA0MUUnOidPY3knLCdcXHUwNDNGJzoncGN5JywnXFx1MDQxRic6J1BjeScsJ1xcdTA0NDAnOidyY3knLCdcXHUwNDIwJzonUmN5JywnXFx1MDQ0MSc6J3NjeScsJ1xcdTA0MjEnOidTY3knLCdcXHUwNDQyJzondGN5JywnXFx1MDQyMic6J1RjeScsJ1xcdTA0NUInOid0c2hjeScsJ1xcdTA0MEInOidUU0hjeScsJ1xcdTA0NDMnOid1Y3knLCdcXHUwNDIzJzonVWN5JywnXFx1MDQ1RSc6J3VicmN5JywnXFx1MDQwRSc6J1VicmN5JywnXFx1MDQ0NCc6J2ZjeScsJ1xcdTA0MjQnOidGY3knLCdcXHUwNDQ1Jzona2hjeScsJ1xcdTA0MjUnOidLSGN5JywnXFx1MDQ0Nic6J3RzY3knLCdcXHUwNDI2JzonVFNjeScsJ1xcdTA0NDcnOidjaGN5JywnXFx1MDQyNyc6J0NIY3knLCdcXHUwNDVGJzonZHpjeScsJ1xcdTA0MEYnOidEWmN5JywnXFx1MDQ0OCc6J3NoY3knLCdcXHUwNDI4JzonU0hjeScsJ1xcdTA0NDknOidzaGNoY3knLCdcXHUwNDI5JzonU0hDSGN5JywnXFx1MDQ0QSc6J2hhcmRjeScsJ1xcdTA0MkEnOidIQVJEY3knLCdcXHUwNDRCJzoneWN5JywnXFx1MDQyQic6J1ljeScsJ1xcdTA0NEMnOidzb2Z0Y3knLCdcXHUwNDJDJzonU09GVGN5JywnXFx1MDQ0RCc6J2VjeScsJ1xcdTA0MkQnOidFY3knLCdcXHUwNDRFJzoneXVjeScsJ1xcdTA0MkUnOidZVWN5JywnXFx1MDQ0Ric6J3lhY3knLCdcXHUwNDJGJzonWUFjeScsJ1xcdTIxMzUnOidhbGVwaCcsJ1xcdTIxMzYnOidiZXRoJywnXFx1MjEzNyc6J2dpbWVsJywnXFx1MjEzOCc6J2RhbGV0aCd9O1xuXG5cdHZhciByZWdleEVzY2FwZSA9IC9bXCImJzw+YF0vZztcblx0dmFyIGVzY2FwZU1hcCA9IHtcblx0XHQnXCInOiAnJnF1b3Q7Jyxcblx0XHQnJic6ICcmYW1wOycsXG5cdFx0J1xcJyc6ICcmI3gyNzsnLFxuXHRcdCc8JzogJyZsdDsnLFxuXHRcdC8vIFNlZSBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHM6IGluIEhUTUwsIHRoZVxuXHRcdC8vIGZvbGxvd2luZyBpcyBub3Qgc3RyaWN0bHkgbmVjZXNzYXJ5IHVubGVzcyBpdOKAmXMgcGFydCBvZiBhIHRhZyBvciBhblxuXHRcdC8vIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gV2XigJlyZSBvbmx5IGVzY2FwaW5nIGl0IHRvIHN1cHBvcnQgdGhvc2Vcblx0XHQvLyBzaXR1YXRpb25zLCBhbmQgZm9yIFhNTCBzdXBwb3J0LlxuXHRcdCc+JzogJyZndDsnLFxuXHRcdC8vIEluIEludGVybmV0IEV4cGxvcmVyIOKJpCA4LCB0aGUgYmFja3RpY2sgY2hhcmFjdGVyIGNhbiBiZSB1c2VkXG5cdFx0Ly8gdG8gYnJlYWsgb3V0IG9mICh1bilxdW90ZWQgYXR0cmlidXRlIHZhbHVlcyBvciBIVE1MIGNvbW1lbnRzLlxuXHRcdC8vIFNlZSBodHRwOi8vaHRtbDVzZWMub3JnLyMxMDIsIGh0dHA6Ly9odG1sNXNlYy5vcmcvIzEwOCwgYW5kXG5cdFx0Ly8gaHR0cDovL2h0bWw1c2VjLm9yZy8jMTMzLlxuXHRcdCdgJzogJyYjeDYwOydcblx0fTtcblxuXHR2YXIgcmVnZXhJbnZhbGlkRW50aXR5ID0gLyYjKD86W3hYXVteYS1mQS1GMC05XXxbXjAtOXhYXSkvO1xuXHR2YXIgcmVnZXhJbnZhbGlkUmF3Q29kZVBvaW50ID0gL1tcXDAtXFx4MDhcXHgwQlxceDBFLVxceDFGXFx4N0YtXFx4OUZcXHVGREQwLVxcdUZERUZcXHVGRkZFXFx1RkZGRl18W1xcdUQ4M0ZcXHVEODdGXFx1RDhCRlxcdUQ4RkZcXHVEOTNGXFx1RDk3RlxcdUQ5QkZcXHVEOUZGXFx1REEzRlxcdURBN0ZcXHVEQUJGXFx1REFGRlxcdURCM0ZcXHVEQjdGXFx1REJCRlxcdURCRkZdW1xcdURGRkVcXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS87XG5cdHZhciByZWdleERlY29kZSA9IC8mKENvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWx8RG91YmxlTG9uZ0xlZnRSaWdodEFycm93fENsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbHxOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcnxOb3RTcXVhcmVTdXBlcnNldEVxdWFsfERpYWNyaXRpY2FsRG91YmxlQWN1dGV8Tm90UmlnaHRUcmlhbmdsZUVxdWFsfE5vdFN1Y2NlZWRzU2xhbnRFcXVhbHxOb3RQcmVjZWRlc1NsYW50RXF1YWx8Q2xvc2VDdXJseURvdWJsZVF1b3RlfE5lZ2F0aXZlVmVyeVRoaW5TcGFjZXxEb3VibGVDb250b3VySW50ZWdyYWx8RmlsbGVkVmVyeVNtYWxsU3F1YXJlfENhcGl0YWxEaWZmZXJlbnRpYWxEfE9wZW5DdXJseURvdWJsZVF1b3RlfEVtcHR5VmVyeVNtYWxsU3F1YXJlfE5lc3RlZEdyZWF0ZXJHcmVhdGVyfERvdWJsZUxvbmdSaWdodEFycm93fE5vdExlZnRUcmlhbmdsZUVxdWFsfE5vdEdyZWF0ZXJTbGFudEVxdWFsfFJldmVyc2VVcEVxdWlsaWJyaXVtfERvdWJsZUxlZnRSaWdodEFycm93fE5vdFNxdWFyZVN1YnNldEVxdWFsfE5vdERvdWJsZVZlcnRpY2FsQmFyfFJpZ2h0QXJyb3dMZWZ0QXJyb3d8Tm90R3JlYXRlckZ1bGxFcXVhbHxOb3RSaWdodFRyaWFuZ2xlQmFyfFNxdWFyZVN1cGVyc2V0RXF1YWx8RG93bkxlZnRSaWdodFZlY3RvcnxEb3VibGVMb25nTGVmdEFycm93fGxlZnRyaWdodHNxdWlnYXJyb3d8TGVmdEFycm93UmlnaHRBcnJvd3xOZWdhdGl2ZU1lZGl1bVNwYWNlfGJsYWNrdHJpYW5nbGVyaWdodHxSaWdodERvd25WZWN0b3JCYXJ8UHJlY2VkZXNTbGFudEVxdWFsfFJpZ2h0RG91YmxlQnJhY2tldHxTdWNjZWVkc1NsYW50RXF1YWx8Tm90TGVmdFRyaWFuZ2xlQmFyfFJpZ2h0VHJpYW5nbGVFcXVhbHxTcXVhcmVJbnRlcnNlY3Rpb258UmlnaHREb3duVGVlVmVjdG9yfFJldmVyc2VFcXVpbGlicml1bXxOZWdhdGl2ZVRoaWNrU3BhY2V8bG9uZ2xlZnRyaWdodGFycm93fExvbmdsZWZ0cmlnaHRhcnJvd3xMb25nTGVmdFJpZ2h0QXJyb3d8RG93blJpZ2h0VGVlVmVjdG9yfERvd25SaWdodFZlY3RvckJhcnxHcmVhdGVyU2xhbnRFcXVhbHxTcXVhcmVTdWJzZXRFcXVhbHxMZWZ0RG93blZlY3RvckJhcnxMZWZ0RG91YmxlQnJhY2tldHxWZXJ0aWNhbFNlcGFyYXRvcnxyaWdodGxlZnRoYXJwb29uc3xOb3RHcmVhdGVyR3JlYXRlcnxOb3RTcXVhcmVTdXBlcnNldHxibGFja3RyaWFuZ2xlbGVmdHxibGFja3RyaWFuZ2xlZG93bnxOZWdhdGl2ZVRoaW5TcGFjZXxMZWZ0RG93blRlZVZlY3RvcnxOb3RMZXNzU2xhbnRFcXVhbHxsZWZ0cmlnaHRoYXJwb29uc3xEb3VibGVVcERvd25BcnJvd3xEb3VibGVWZXJ0aWNhbEJhcnxMZWZ0VHJpYW5nbGVFcXVhbHxGaWxsZWRTbWFsbFNxdWFyZXx0d29oZWFkcmlnaHRhcnJvd3xOb3ROZXN0ZWRMZXNzTGVzc3xEb3duTGVmdFRlZVZlY3RvcnxEb3duTGVmdFZlY3RvckJhcnxSaWdodEFuZ2xlQnJhY2tldHxOb3RUaWxkZUZ1bGxFcXVhbHxOb3RSZXZlcnNlRWxlbWVudHxSaWdodFVwRG93blZlY3RvcnxEaWFjcml0aWNhbFRpbGRlfE5vdFN1Y2NlZWRzVGlsZGV8Y2lyY2xlYXJyb3dyaWdodHxOb3RQcmVjZWRlc0VxdWFsfHJpZ2h0aGFycG9vbmRvd258RG91YmxlUmlnaHRBcnJvd3xOb3RTdWNjZWVkc0VxdWFsfE5vbkJyZWFraW5nU3BhY2V8Tm90UmlnaHRUcmlhbmdsZXxMZXNzRXF1YWxHcmVhdGVyfFJpZ2h0VXBUZWVWZWN0b3J8TGVmdEFuZ2xlQnJhY2tldHxHcmVhdGVyRnVsbEVxdWFsfERvd25BcnJvd1VwQXJyb3d8UmlnaHRVcFZlY3RvckJhcnx0d29oZWFkbGVmdGFycm93fEdyZWF0ZXJFcXVhbExlc3N8ZG93bmhhcnBvb25yaWdodHxSaWdodFRyaWFuZ2xlQmFyfG50cmlhbmdsZXJpZ2h0ZXF8Tm90U3VwZXJzZXRFcXVhbHxMZWZ0VXBEb3duVmVjdG9yfERpYWNyaXRpY2FsQWN1dGV8cmlnaHRyaWdodGFycm93c3x2YXJ0cmlhbmdsZXJpZ2h0fFVwQXJyb3dEb3duQXJyb3d8RGlhY3JpdGljYWxHcmF2ZXxVbmRlclBhcmVudGhlc2lzfEVtcHR5U21hbGxTcXVhcmV8TGVmdFVwVmVjdG9yQmFyfGxlZnRyaWdodGFycm93c3xEb3duUmlnaHRWZWN0b3J8ZG93bmhhcnBvb25sZWZ0fHRyaWFuZ2xlcmlnaHRlcXxTaG9ydFJpZ2h0QXJyb3d8T3ZlclBhcmVudGhlc2lzfERvdWJsZUxlZnRBcnJvd3xEb3VibGVEb3duQXJyb3d8Tm90U3F1YXJlU3Vic2V0fGJpZ3RyaWFuZ2xlZG93bnxudHJpYW5nbGVsZWZ0ZXF8VXBwZXJSaWdodEFycm93fGN1cnZlYXJyb3dyaWdodHx2YXJ0cmlhbmdsZWxlZnR8Tm90TGVmdFRyaWFuZ2xlfG5sZWZ0cmlnaHRhcnJvd3xMb3dlclJpZ2h0QXJyb3d8Tm90SHVtcERvd25IdW1wfE5vdEdyZWF0ZXJUaWxkZXxyaWdodHRocmVldGltZXN8TGVmdFVwVGVlVmVjdG9yfE5vdEdyZWF0ZXJFcXVhbHxzdHJhaWdodGVwc2lsb258TGVmdFRyaWFuZ2xlQmFyfHJpZ2h0c3F1aWdhcnJvd3xDb250b3VySW50ZWdyYWx8cmlnaHRsZWZ0YXJyb3dzfENsb3NlQ3VybHlRdW90ZXxSaWdodERvd25WZWN0b3J8TGVmdFJpZ2h0VmVjdG9yfG5MZWZ0cmlnaHRhcnJvd3xsZWZ0aGFycG9vbmRvd258Y2lyY2xlYXJyb3dsZWZ0fFNxdWFyZVN1cGVyc2V0fE9wZW5DdXJseVF1b3RlfGhvb2tyaWdodGFycm93fEhvcml6b250YWxMaW5lfERpYWNyaXRpY2FsRG90fE5vdExlc3NHcmVhdGVyfG50cmlhbmdsZXJpZ2h0fERvdWJsZVJpZ2h0VGVlfEludmlzaWJsZUNvbW1hfEludmlzaWJsZVRpbWVzfExvd2VyTGVmdEFycm93fERvd25MZWZ0VmVjdG9yfE5vdFN1YnNldEVxdWFsfGN1cnZlYXJyb3dsZWZ0fHRyaWFuZ2xlbGVmdGVxfE5vdFZlcnRpY2FsQmFyfFRpbGRlRnVsbEVxdWFsfGRvd25kb3duYXJyb3dzfE5vdEdyZWF0ZXJMZXNzfFJpZ2h0VGVlVmVjdG9yfFplcm9XaWR0aFNwYWNlfGxvb3BhcnJvd3JpZ2h0fExvbmdSaWdodEFycm93fGRvdWJsZWJhcndlZGdlfFNob3J0TGVmdEFycm93fFNob3J0RG93bkFycm93fFJpZ2h0VmVjdG9yQmFyfEdyZWF0ZXJHcmVhdGVyfFJldmVyc2VFbGVtZW50fHJpZ2h0aGFycG9vbnVwfExlc3NTbGFudEVxdWFsfGxlZnR0aHJlZXRpbWVzfHVwaGFycG9vbnJpZ2h0fHJpZ2h0YXJyb3d0YWlsfExlZnREb3duVmVjdG9yfExvbmdyaWdodGFycm93fE5lc3RlZExlc3NMZXNzfFVwcGVyTGVmdEFycm93fG5zaG9ydHBhcmFsbGVsfGxlZnRsZWZ0YXJyb3dzfGxlZnRyaWdodGFycm93fExlZnRyaWdodGFycm93fExlZnRSaWdodEFycm93fGxvbmdyaWdodGFycm93fHVwaGFycG9vbmxlZnR8UmlnaHRBcnJvd0JhcnxBcHBseUZ1bmN0aW9ufExlZnRUZWVWZWN0b3J8bGVmdGFycm93dGFpbHxOb3RFcXVhbFRpbGRlfHZhcnN1YnNldG5lcXF8dmFyc3Vwc2V0bmVxcXxSaWdodFRlZUFycm93fFN1Y2NlZWRzRXF1YWx8U3VjY2VlZHNUaWxkZXxMZWZ0VmVjdG9yQmFyfFN1cGVyc2V0RXF1YWx8aG9va2xlZnRhcnJvd3xEaWZmZXJlbnRpYWxEfFZlcnRpY2FsVGlsZGV8VmVyeVRoaW5TcGFjZXxibGFja3RyaWFuZ2xlfGJpZ3RyaWFuZ2xldXB8TGVzc0Z1bGxFcXVhbHxkaXZpZGVvbnRpbWVzfGxlZnRoYXJwb29udXB8VXBFcXVpbGlicml1bXxudHJpYW5nbGVsZWZ0fFJpZ2h0VHJpYW5nbGV8bWVhc3VyZWRhbmdsZXxzaG9ydHBhcmFsbGVsfGxvbmdsZWZ0YXJyb3d8TG9uZ2xlZnRhcnJvd3xMb25nTGVmdEFycm93fERvdWJsZUxlZnRUZWV8UG9pbmNhcmVwbGFuZXxQcmVjZWRlc0VxdWFsfHRyaWFuZ2xlcmlnaHR8RG91YmxlVXBBcnJvd3xSaWdodFVwVmVjdG9yfGZhbGxpbmdkb3RzZXF8bG9vcGFycm93bGVmdHxQcmVjZWRlc1RpbGRlfE5vdFRpbGRlRXF1YWx8Tm90VGlsZGVUaWxkZXxzbWFsbHNldG1pbnVzfFByb3BvcnRpb25hbHx0cmlhbmdsZWxlZnR8dHJpYW5nbGVkb3dufFVuZGVyQnJhY2tldHxOb3RIdW1wRXF1YWx8ZXhwb25lbnRpYWxlfEV4cG9uZW50aWFsRXxOb3RMZXNzVGlsZGV8SGlsYmVydFNwYWNlfFJpZ2h0Q2VpbGluZ3xibGFja2xvemVuZ2V8dmFyc3Vwc2V0bmVxfEh1bXBEb3duSHVtcHxHcmVhdGVyRXF1YWx8VmVydGljYWxMaW5lfExlZnRUZWVBcnJvd3xOb3RMZXNzRXF1YWx8RG93blRlZUFycm93fExlZnRUcmlhbmdsZXx2YXJzdWJzZXRuZXF8SW50ZXJzZWN0aW9ufE5vdENvbmdydWVudHxEb3duQXJyb3dCYXJ8TGVmdFVwVmVjdG9yfExlZnRBcnJvd0JhcnxyaXNpbmdkb3RzZXF8R3JlYXRlclRpbGRlfFJvdW5kSW1wbGllc3xTcXVhcmVTdWJzZXR8U2hvcnRVcEFycm93fE5vdFN1cGVyc2V0fHF1YXRlcm5pb25zfHByZWNuYXBwcm94fGJhY2tlcHNpbG9ufHByZWNjdXJseWVxfE92ZXJCcmFja2V0fGJsYWNrc3F1YXJlfE1lZGl1bVNwYWNlfFZlcnRpY2FsQmFyfGNpcmNsZWRjaXJjfGNpcmNsZWRkYXNofENpcmNsZU1pbnVzfENpcmNsZVRpbWVzfExlc3NHcmVhdGVyfGN1cmx5ZXFwcmVjfGN1cmx5ZXFzdWNjfGRpYW1vbmRzdWl0fFVwRG93bkFycm93fFVwZG93bmFycm93fFJ1bGVEZWxheWVkfFJyaWdodGFycm93fHVwZG93bmFycm93fFJpZ2h0VmVjdG9yfG5SaWdodGFycm93fG5yaWdodGFycm93fGVxc2xhbnRsZXNzfExlZnRDZWlsaW5nfEVxdWlsaWJyaXVtfFNtYWxsQ2lyY2xlfGV4cGVjdGF0aW9ufE5vdFN1Y2NlZWRzfHRoaWNrYXBwcm94fEdyZWF0ZXJMZXNzfFNxdWFyZVVuaW9ufE5vdFByZWNlZGVzfE5vdExlc3NMZXNzfHN0cmFpZ2h0cGhpfHN1Y2NuYXBwcm94fHN1Y2NjdXJseWVxfFN1YnNldEVxdWFsfHNxc3Vwc2V0ZXF8UHJvcG9ydGlvbnxMYXBsYWNldHJmfEltYWdpbmFyeUl8c3Vwc2V0bmVxcXxOb3RHcmVhdGVyfGd0cmVxcWxlc3N8Tm90RWxlbWVudHxUaGlja1NwYWNlfFRpbGRlRXF1YWx8VGlsZGVUaWxkZXxGb3VyaWVydHJmfHJtb3VzdGFjaGV8RXF1YWxUaWxkZXxlcXNsYW50Z3RyfFVuZGVyQnJhY2V8TGVmdFZlY3RvcnxVcEFycm93QmFyfG5MZWZ0YXJyb3d8bnN1YnNldGVxcXxzdWJzZXRuZXFxfG5zdXBzZXRlcXF8bmxlZnRhcnJvd3xzdWNjYXBwcm94fGxlc3NhcHByb3h8VXBUZWVBcnJvd3x1cHVwYXJyb3dzfGN1cmx5d2VkZ2V8bGVzc2VxcWd0cnx2YXJlcHNpbG9ufHZhcm5vdGhpbmd8UmlnaHRGbG9vcnxjb21wbGVtZW50fENpcmNsZVBsdXN8c3FzdWJzZXRlcXxMbGVmdGFycm93fGNpcmNsZWRhc3R8UmlnaHRBcnJvd3xSaWdodGFycm93fHJpZ2h0YXJyb3d8bG1vdXN0YWNoZXxCZXJub3VsbGlzfHByZWNhcHByb3h8bWFwc3RvbGVmdHxtYXBzdG9kb3dufGxvbmdtYXBzdG98ZG90c3F1YXJlfGRvd25hcnJvd3xEb3VibGVEb3R8bnN1YnNldGVxfHN1cHNldG5lcXxsZWZ0YXJyb3d8bnN1cHNldGVxfHN1YnNldG5lcXxUaGluU3BhY2V8bmdlcXNsYW50fHN1YnNldGVxcXxIdW1wRXF1YWx8Tm90U3Vic2V0fHRyaWFuZ2xlcXxOb3RDdXBDYXB8bGVzc2VxZ3RyfGhlYXJ0c3VpdHxUcmlwbGVEb3R8TGVmdGFycm93fENvcHJvZHVjdHxDb25ncnVlbnR8dmFycHJvcHRvfGNvbXBsZXhlc3xndmVydG5lcXF8TGVmdEFycm93fExlc3NUaWxkZXxzdXBzZXRlcXF8TWludXNQbHVzfENpcmNsZURvdHxubGVxc2xhbnR8Tm90RXhpc3RzfGd0cmVxbGVzc3xucGFyYWxsZWx8VW5pb25QbHVzfExlZnRGbG9vcnxjaGVja21hcmt8Q2VudGVyRG90fGNlbnRlcmRvdHxNZWxsaW50cmZ8Z3RyYXBwcm94fGJpZ290aW1lc3xPdmVyQnJhY2V8c3BhZGVzdWl0fHRoZXJlZm9yZXxwaXRjaGZvcmt8cmF0aW9uYWxzfFBsdXNNaW51c3xCYWNrc2xhc2h8VGhlcmVmb3JlfERvd25CcmV2ZXxiYWNrc2ltZXF8YmFja3ByaW1lfERvd25BcnJvd3xuc2hvcnRtaWR8RG93bmFycm93fGx2ZXJ0bmVxcXxlcXZwYXJzbHxpbWFnbGluZXxpbWFncGFydHxpbmZpbnRpZXxpbnRlZ2Vyc3xJbnRlZ3JhbHxpbnRlcmNhbHxMZXNzTGVzc3xVYXJyb2NpcnxpbnRsYXJoa3xzcXN1cHNldHxhbmdtc2RhZnxzcXN1YnNldHxsbGNvcm5lcnx2YXJ0aGV0YXxjdXBicmNhcHxsbmFwcHJveHxTdXBlcnNldHxTdWNoVGhhdHxzdWNjbnNpbXxzdWNjbmVxcXxhbmdtc2RhZ3xiaWd1cGx1c3xjdXJseXZlZXx0cnBleml1bXxTdWNjZWVkc3xOb3RUaWxkZXxiaWd3ZWRnZXxhbmdtc2RhaHxhbmdydHZiZHx0cmltaW51c3xjd2NvbmludHxmcGFydGludHxscmNvcm5lcnxzbWVwYXJzbHxzdWJzZXRlcXx1cmNvcm5lcnxsdXJkc2hhcnxsYWVtcHR5dnxERG90cmFoZHxhcHByb3hlcXxsZHJ1c2hhcnxhd2NvbmludHxtYXBzdG91cHxiYWNrY29uZ3xzaG9ydG1pZHx0cmlhbmdsZXxnZXFzbGFudHxnZXNkb3RvbHx0aW1lc2JhcnxjaXJjbGVkUnxjaXJjbGVkU3xzZXRtaW51c3xtdWx0aW1hcHxuYXR1cmFsc3xzY3BvbGludHxuY29uZ2RvdHxSaWdodFRlZXxib3htaW51c3xnbmFwcHJveHxib3h0aW1lc3xhbmRzbG9wZXx0aGlja3NpbXxhbmdtc2RhYXx2YXJzaWdtYXxjaXJmbmludHxydHJpbHRyaXxhbmdtc2RhYnxycHBvbGludHxhbmdtc2RhY3xiYXJ3ZWRnZXxkcmJrYXJvd3xjbHVic3VpdHx0aGV0YXN5bXxic29saHN1YnxjYXBicmN1cHxkemlncmFycnxkb3RlcWRvdHxEb3RFcXVhbHxkb3RtaW51c3xVbmRlckJhcnxOb3RFcXVhbHxyZWFscGFydHxvdGltZXNhc3x1bGNvcm5lcnxoa3NlYXJvd3xoa3N3YXJvd3xwYXJhbGxlbHxQYXJ0aWFsRHxlbGludGVyc3xlbXB0eXNldHxwbHVzYWNpcnxiYnJrdGJya3xhbmdtc2RhZHxwb2ludGludHxiaWdvcGx1c3xhbmdtc2RhZXxQcmVjZWRlc3xiaWdzcWN1cHx2YXJrYXBwYXxub3RpbmRvdHxzdXBzZXRlcXxwcmVjbmVxcXxwcmVjbnNpbXxwcm9mYWxhcnxwcm9mbGluZXxwcm9mc3VyZnxsZXFzbGFudHxsZXNkb3RvcnxyYWVtcHR5dnxzdWJwbHVzfG5vdG5pdmJ8bm90bml2Y3xzdWJyYXJyfHppZ3JhcnJ8dnppZ3phZ3xzdWJtdWx0fHN1YmVkb3R8RWxlbWVudHxiZXR3ZWVufGNpcnNjaXJ8bGFycmJmc3xsYXJyc2ltfGxvdGltZXN8bGJya3NsZHxsYnJrc2x1fGxvemVuZ2V8bGRyZGhhcnxkYmthcm93fGJpZ2NpcmN8ZXBzaWxvbnxzaW1yYXJyfHNpbXBsdXN8bHRxdWVzdHxFcHNpbG9ufGx1cnVoYXJ8Z3RxdWVzdHxtYWx0ZXNlfG5wb2xpbnR8ZXFjb2xvbnxucHJlY2VxfGJpZ29kb3R8ZGRhZ2dlcnxndHJsZXNzfGJuZXF1aXZ8aGFycmNpcnxkZG90c2VxfGVxdWl2RER8YmFja3NpbXxkZW1wdHl2fG5zcXN1YmV8bnNxc3VwZXxVcHNpbG9ufG5zdWJzZXR8dXBzaWxvbnxtaW51c2R1fG5zdWNjZXF8c3dhcnJvd3xuc3Vwc2V0fGNvbG9uZXF8c2VhcnJvd3xib3hwbHVzfG5hcHByb3h8bmF0dXJhbHxhc3ltcGVxfGFsZWZzeW18Y29uZ2RvdHxuZWFycm93fGJpZ3N0YXJ8ZGlhbW9uZHxzdXBwbHVzfHRyaXRpbWV8TGVmdFRlZXxudmluZmlufHRyaXBsdXN8TmV3TGluZXxudmx0cmllfG52cnRyaWV8bndhcnJvd3xuZXhpc3RzfERpYW1vbmR8cnVsdWhhcnxJbXBsaWVzfHN1cG11bHR8YW5nemFycnxzdXBsYXJyfHN1cGhzdWJ8cXVlc3RlcXxiZWNhdXNlfGRpZ2FtbWF8QmVjYXVzZXxvbGNyb3NzfGJlbXB0eXZ8b21pY3JvbnxPbWljcm9ufHJvdGltZXN8Tm9CcmVha3xpbnRwcm9kfGFuZ3J0dmJ8b3JkZXJvZnx1d2FuZ2xlfHN1cGhzb2x8bGVzZG90b3xvcnNsb3BlfERvd25UZWV8cmVhbGluZXxjdWRhcnJsfHJkbGRoYXJ8T3ZlckJhcnxzdXBlZG90fGxlc3Nkb3R8c3VwZHN1Ynx0b3Bmb3JrfHN1Y2NzaW18cmJya3NsdXxyYnJrc2xkfHBlcnRlbmt8Y3VkYXJycnxpc2luZG90fHBsYW5ja2h8bGVzc2d0cnxwbHVzY2lyfGdlc2RvdG98cGx1c3NpbXxwbHVzdHdvfGxlc3NzaW18Y3VsYXJycHxyYXJyc2ltfENheWxleXN8bm90aW52YXxub3RpbnZifG5vdGludmN8VXBBcnJvd3xVcGFycm93fHVwYXJyb3d8Tm90TGVzc3xkd2FuZ2xlfHByZWNzaW18UHJvZHVjdHxjdXJhcnJtfENjb25pbnR8ZG90cGx1c3xyYXJyYmZzfGNjdXBzc218Q2VkaWxsYXxjZW1wdHl2fG5vdG5pdmF8cXVhdGludHxmcmFjMzV8ZnJhYzM4fGZyYWM0NXxmcmFjNTZ8ZnJhYzU4fGZyYWM3OHx0cmlkb3R8eG9wbHVzfGdhY3V0ZXxnYW1tYWR8R2FtbWFkfGxmaXNodHxsZmxvb3J8YmlnY3VwfHNxc3VwZXxnYnJldmV8R2JyZXZlfGxoYXJ1bHxzcXN1YmV8c3FjdXBzfEdjZWRpbHxhcGFjaXJ8bGxoYXJkfGxtaWRvdHxMbWlkb3R8bG1vdXN0fGFuZGFuZHxzcWNhcHN8YXBwcm94fEFicmV2ZXxzcGFkZXN8Y2lyY2VxfHRwcmltZXxkaXZpZGV8dG9wY2lyfEFzc2lnbnx0b3Bib3R8Z2VzZG90fGRpdm9ueHx4dXBsdXN8dGltZXNkfGdlc2xlc3xhdGlsZGV8c29sYmFyfFNPRlRjeXxsb3BsdXN8dGltZXNifGxvd2FzdHxsb3diYXJ8ZGxjb3JufGRsY3JvcHxzb2Z0Y3l8ZG9sbGFyfGxwYXJsdHx0aGtzaW18bHJoYXJkfEF0aWxkZXxsc2FxdW98c21hc2hwfGJpZ3ZlZXx0aGluc3B8d3JlYXRofGJrYXJvd3xsc3F1b3J8bHN0cm9rfExzdHJva3xsdGhyZWV8bHRpbWVzfGx0bGFycnxEb3REb3R8c2ltZG90fGx0clBhcnx3ZWllcnB8eHNxY3VwfGFuZ21zZHxzaWdtYXZ8c2lnbWFmfHplZXRyZnxaY2Fyb258emNhcm9ufG1hcHN0b3x2c3VwbmV8dGhldGF2fGNpcm1pZHxtYXJrZXJ8bWNvbW1hfFphY3V0ZXx2c3VibkV8dGhlcmU0fGd0bFBhcnx2c3VibmV8Ym90dG9tfGd0cmFycnxTSENIY3l8c2hjaGN5fG1pZGFzdHxtaWRjaXJ8bWlkZG90fG1pbnVzYnxtaW51c2R8Z3RyZG90fGJvd3RpZXxzZnJvd258bW5wbHVzfG1vZGVsc3xjb2xvbmV8c2Vzd2FyfENvbG9uZXxtc3Rwb3N8c2VhcmhrfGd0cnNpbXxuYWN1dGV8TmFjdXRlfGJveGJveHx0ZWxyZWN8aGFpcnNwfFRjZWRpbHxuYnVtcGV8c2Nuc2ltfG5jYXJvbnxOY2Fyb258bmNlZGlsfE5jZWRpbHxoYW1pbHR8U2NlZGlsfG5lYXJoa3xoYXJkY3l8SEFSRGN5fHRjZWRpbHxUY2Fyb258Y29tbWF0fG5lcXVpdnxuZXNlYXJ8dGNhcm9ufHRhcmdldHxoZWFydHN8bmV4aXN0fHZhcnJob3xzY2VkaWx8U2Nhcm9ufHNjYXJvbnxoZWxsaXB8U2FjdXRlfHNhY3V0ZXxoZXJjb258c3dud2FyfGNvbXBmbnxydGltZXN8cnRocmVlfHJzcXVvcnxyc2FxdW98emFjdXRlfHdlZGdlcXxob210aHR8YmFydmVlfGJhcndlZHxCYXJ3ZWR8cnBhcmd0fGhvcmJhcnxjb25pbnR8c3dhcmhrfHJvcGx1c3xubHRyaWV8aHNsYXNofGhzdHJva3xIc3Ryb2t8cm1vdXN0fENvbmludHxicHJpbWV8aHlidWxsfGh5cGhlbnxpYWN1dGV8SWFjdXRlfHN1cHN1cHxzdXBzdWJ8c3Vwc2ltfHZhcnBoaXxjb3Byb2R8YnJ2YmFyfGFncmF2ZXxTdXBzZXR8c3Vwc2V0fGlncmF2ZXxJZ3JhdmV8bm90aW5FfEFncmF2ZXxpaWlpbnR8aWluZmlufGNvcHlzcnx3ZWRiYXJ8VmVyYmFyfHZhbmdydHxiZWNhdXN8aW5jYXJlfHZlcmJhcnxpbm9kb3R8YnVsbGV0fGRyY29ybnxpbnRjYWx8ZHJjcm9wfGN1bGFycnx2ZWxsaXB8VXRpbGRlfGJ1bXBlcXxjdXBjYXB8ZHN0cm9rfERzdHJva3xDdXBDYXB8Y3VwY3VwfGN1cGRvdHxlYWN1dGV8RWFjdXRlfHN1cGRvdHxpcXVlc3R8ZWFzdGVyfGVjYXJvbnxFY2Fyb258ZWNvbG9ufGlzaW5zdnx1dGlsZGV8aXRpbGRlfEl0aWxkZXxjdXJhcnJ8c3VjY2VxfEJ1bXBlcXxjYWN1dGV8dWxjcm9wfG5wYXJzbHxDYWN1dGV8bnByY3VlfGVncmF2ZXxFZ3JhdmV8bnJhcnJjfG5yYXJyd3xzdWJzdXB8c3Vic3VifG5ydHJpZXxqc2VyY3l8bnNjY3VlfEpzZXJjeXxrYXBwYXZ8a2NlZGlsfEtjZWRpbHxzdWJzaW18dWxjb3JufG5zaW1lcXxlZ3Nkb3R8dmVlYmFyfGtncmVlbnxjYXBhbmR8ZWxzZG90fFN1YnNldHxzdWJzZXR8Y3VycmVufGFhY3V0ZXxsYWN1dGV8TGFjdXRlfGVtcHR5dnxudGlsZGV8TnRpbGRlfGxhZ3JhbnxsYW1iZGF8TGFtYmRhfGNhcGNhcHxVZ3JhdmV8bGFuZ2xlfHN1YmRvdHxlbXNwMTN8bnVtZXJvfGVtc3AxNHxudmRhc2h8bnZEYXNofG5WZGFzaHxuVkRhc2h8dWdyYXZlfHVmaXNodHxudkhhcnJ8bGFycmZzfG52bEFycnxsYXJyaGt8bGFycmxwfGxhcnJwbHxudnJBcnJ8VWRibGFjfG53YXJoa3xsYXJydGx8bnduZWFyfG9hY3V0ZXxPYWN1dGV8bGF0YWlsfGxBdGFpbHxzc3RhcmZ8bGJyYWNlfG9kYmxhY3xPZGJsYWN8bGJyYWNrfHVkYmxhY3xvZHNvbGR8ZXBhcnNsfGxjYXJvbnxMY2Fyb258b2dyYXZlfE9ncmF2ZXxsY2VkaWx8TGNlZGlsfEFhY3V0ZXxzc21pbGV8c3NldG1ufHNxdWFyZnxsZHF1b3J8Y2FwY3VwfG9taW51c3xjeWxjdHl8cmhhcnVsfGVxY2lyY3xkYWdnZXJ8cmZsb29yfHJmaXNodHxEYWdnZXJ8ZGFsZXRofGVxdWFsc3xvcmlnb2Z8Y2FwZG90fGVxdWVzdHxkY2Fyb258RGNhcm9ufHJkcXVvcnxvc2xhc2h8T3NsYXNofG90aWxkZXxPdGlsZGV8b3RpbWVzfE90aW1lc3x1cmNyb3B8VWJyZXZlfHVicmV2ZXxZYWN1dGV8VWFjdXRlfHVhY3V0ZXxSY2VkaWx8cmNlZGlsfHVyY29ybnxwYXJzaW18UmNhcm9ufFZkYXNobHxyY2Fyb258VHN0cm9rfHBlcmNudHxwZXJpb2R8cGVybWlsfEV4aXN0c3x5YWN1dGV8cmJyYWNrfHJicmFjZXxwaG1tYXR8Y2Nhcm9ufENjYXJvbnxwbGFuY2t8Y2NlZGlsfHBsYW5rdnx0c3Ryb2t8ZmVtYWxlfHBsdXNkb3xwbHVzZHV8ZmZpbGlnfHBsdXNtbnxmZmxsaWd8Q2NlZGlsfHJBdGFpbHxkZmlzaHR8YmVybm91fHJhdGFpbHxSYXJydGx8cmFycnRsfGFuZ3NwaHxyYXJycGx8cmFycmxwfHJhcnJoa3x4d2VkZ2V8eG90aW1lfGZvcmFsbHxGb3JBbGx8VnZkYXNofHZzdXBuRXxwcmVjZXF8YmlnY2FwfGZyYWMxMnxmcmFjMTN8ZnJhYzE0fHByaW1lc3xyYXJyZnN8cHJuc2ltfGZyYWMxNXxTcXVhcmV8ZnJhYzE2fHNxdWFyZXxsZXNkb3R8ZnJhYzE4fGZyYWMyM3xwcm9wdG98cHJ1cmVsfHJhcnJhcHxyYW5nbGV8cHVuY3NwfGZyYWMyNXxSYWN1dGV8cXByaW1lfHJhY3V0ZXxsZXNnZXN8ZnJhYzM0fGFicmV2ZXxBRWxpZ3xlcXNpbXx1dGRvdHxzZXRtbnx1cnRyaXxFcXVhbHxVcmluZ3xzZUFycnx1cmluZ3xzZWFycnxkYXNodnxEYXNodnxtdW1hcHxuYWJsYXxpb2dvbnxJb2dvbnxzZG90ZXxzZG90YnxzY3NpbXxuYXBpZHxuYXBvc3xlcXVpdnxuYXR1cnxBY2lyY3xkYmxhY3xlcmFycnxuYnVtcHxpcHJvZHxlckRvdHx1Y2lyY3xhd2ludHxlc2RvdHxhbmdydHxuY29uZ3xpc2luRXxzY25hcHxTY2lyY3xzY2lyY3xuZGFzaHxpc2luc3xVYnJjeXxuZWFycnxuZUFycnxpc2ludnxuZWRvdHx1YnJjeXxhY3V0ZXxZY2lyY3xpdWtjeXxJdWtjeXx4dXRyaXxuZXNpbXxjYXJldHxqY2lyY3xKY2lyY3xjYXJvbnx0d2l4dHxkZGFycnxzY2N1ZXxleGlzdHxqbWF0aHxzYnF1b3xuZ2VxcXxhbmdzdHxjY2Fwc3xsY2VpbHxuZ3NpbXxVcFRlZXxkZWx0YXxEZWx0YXxydHJpZnxuaGFycnxuaEFycnxuaHBhcnxydHJpZXxqdWtjeXxKdWtjeXxrYXBwYXxyc3F1b3xLYXBwYXxubGFycnxubEFycnxUU0hjeXxycmFycnxhb2dvbnxBb2dvbnxmZmxpZ3x4cmFycnx0c2hjeXxjY2lyY3xubGVxcXxmaWxpZ3x1cHNpaHxubGVzc3xkaGFybHxubHNpbXxmamxpZ3xyb3BhcnxubHRyaXxkaGFycnxyb2Jya3xyb2FycnxmbGxpZ3xmbHRuc3xyb2FuZ3xybm1pZHxzdWJuRXxzdWJuZXxsQWFycnx0cmlzYnxDY2lyY3xhY2lyY3xjY3Vwc3xibGFua3xWRGFzaHxmb3JrdnxWZGFzaHxsYW5nZHxjZWRpbHxibGsxMnxibGsxNHxsYXF1b3xzdHJuc3xkaWFtc3xub3Rpbnx2RGFzaHxsYXJyYnxibGszNHxibG9ja3xkaXNpbnx1cGx1c3x2ZGFzaHx2QmFydnxhZWxpZ3xzdGFyZnxXZWRnZXxjaGVja3x4ckFycnxsYXRlc3xsYmFycnxsQmFycnxub3RuaXxsYmJya3xiY29uZ3xmcmFzbHxsYnJrZXxmcm93bnx2cnRyaXx2cHJvcHx2bnN1cHxnYW1tYXxHYW1tYXx3ZWRnZXx4b2RvdHxiZHF1b3xzcmFycnxkb3RlcXxsZHF1b3xib3hkbHxib3hkTHxnY2lyY3xHY2lyY3xib3hEbHxib3hETHxib3hkcnxib3hkUnxib3hEcnxUUkFERXx0cmFkZXxybGhhcnxib3hEUnx2bnN1YnxucGFydHx2bHRyaXxybGFycnxib3hoZHxib3hoRHxucHJlY3xnZXNjY3xucmFycnxuckFycnxib3hIZHxib3hIRHxib3hodXxib3hoVXxucnRyaXxib3hIdXxjbHVic3xib3hIVXx0aW1lc3xjb2xvbnxDb2xvbnxnaW1lbHx4bEFycnxUaWxkZXxuc2ltZXx0aWxkZXxuc21pZHxuc3BhcnxUSE9STnx0aG9ybnx4bGFycnxuc3ViZXxuc3ViRXx0aGthcHx4aEFycnxjb21tYXxuc3VjY3xib3h1bHxib3h1THxuc3VwZXxuc3VwRXxnbmVxcXxnbnNpbXxib3hVbHxib3hVTHxncmF2ZXxib3h1cnxib3h1Unxib3hVcnxib3hVUnxsZXNjY3xhbmdsZXxiZXBzaXxib3h2aHx2YXJwaXxib3h2SHxudW1zcHxUaGV0YXxnc2ltZXxnc2ltbHx0aGV0YXxib3hWaHxib3hWSHxib3h2bHxndGNpcnxndGRvdHxib3h2THxib3hWbHxib3hWTHxjcmFycnxjcm9zc3xDcm9zc3xudnNpbXxib3h2cnxud2Fycnxud0FycnxzcXN1cHxkdGRvdHxVb2dvbnxsaGFyZHxsaGFydXxkdHJpZnxvY2lyY3xPY2lyY3xsaGJsa3xkdWFycnxvZGFzaHxzcXN1YnxIYWNla3xzcWN1cHxsbGFycnxkdWhhcnxvZWxpZ3xPRWxpZ3xvZmNpcnxib3h2Unx1b2dvbnxsbHRyaXxib3hWcnxjc3ViZXx1dWFycnxvaGJhcnxjc3VwZXxjdGRvdHxvbGFycnxvbGNpcnxoYXJyd3xvbGluZXxzcWNhcHxvbWFjcnxPbWFjcnxvbWVnYXxPbWVnYXxib3hWUnxhbGVwaHxsbmVxcXxsbnNpbXxsb2FuZ3xsb2FycnxyaGFydXxsb2Jya3xoY2lyY3xvcGVycHxvcGx1c3xyaGFyZHxIY2lyY3xvcmFycnxVbmlvbnxvcmRlcnxlY2lyY3xFY2lyY3xjdWVwcnxzemxpZ3xjdWVzY3xicmV2ZXxyZWFsc3xlRERvdHxCcmV2ZXxob2Fycnxsb3Bhcnx1dHJpZnxyZHF1b3xVbWFjcnx1bWFjcnxlZkRvdHxzd0Fycnx1bHRyaXxhbHBoYXxyY2VpbHxvdmJhcnxzd2FycnxXY2lyY3x3Y2lyY3xzbXRlc3xzbWlsZXxic2VtaXxscmFycnxhcmluZ3xwYXJzbHxscmhhcnxic2ltZXx1aGJsa3xscnRyaXxjdXBvcnxBcmluZ3x1aGFycnx1aGFybHxzbGFycnxyYnJrZXxic29sYnxsc2ltZXxyYmJya3xSQmFycnxsc2ltZ3xwaG9uZXxyQmFycnxyYmFycnxpY2lyY3xsc3F1b3xJY2lyY3xlbWFjcnxFbWFjcnxyYXRpb3xzaW1uZXxwbHVzYnxzaW1sRXxzaW1nRXxzaW1lcXxwbHVzZXxsdGNpcnxsdGRvdHxlbXB0eXx4aGFycnx4ZHRyaXxpZXhjbHxBbHBoYXxsdHJpZXxyYXJyd3xwb3VuZHxsdHJpZnx4Y2lyY3xidW1wZXxwcmN1ZXxidW1wRXxhc3ltcHxhbWFjcnxjdXZlZXxTaWdtYXxzaWdtYXxpaWludHx1ZGhhcnxpaW90YXxpamxpZ3xJSmxpZ3xzdXBuRXxpbWFjcnxJbWFjcnxwcmltZXxQcmltZXxpbWFnZXxwcm5hcHxlb2dvbnxFb2dvbnxyYXJyY3xtZGFzaHxtRERvdHxjdXdlZHxpbWF0aHxzdXBuZXxpbXBlZHxBbWFjcnx1ZGFycnxwcnNpbXxtaWNyb3xyYXJyYnxjd2ludHxyYXF1b3xpbmZpbnxlcGx1c3xyYW5nZXxyYW5nZHxVY2lyY3xyYWRpY3xtaW51c3xhbWFsZ3x2ZWVlcXxyQWFycnxlcHNpdnx5Y2lyY3xxdWVzdHxzaGFycHxxdW90fHp3bmp8UXNjcnxyYWNlfHFzY3J8UW9wZnxxb3BmfHFpbnR8cmFuZ3xSYW5nfFpzY3J8enNjcnxab3BmfHpvcGZ8cmFycnxyQXJyfFJhcnJ8UHNjcnxwc2NyfHByb3B8cHJvZHxwcm5FfHByZWN8WkhjeXx6aGN5fHByYXB8WmV0YXx6ZXRhfFBvcGZ8cG9wZnxaZG90fHBsdXN8emRvdHxZdW1sfHl1bWx8cGhpdnxZVWN5fHl1Y3l8WXNjcnx5c2NyfHBlcnB8WW9wZnx5b3BmfHBhcnR8cGFyYXxZSWN5fE91bWx8cmN1Ynx5aWN5fFlBY3l8cmRjYXxvdW1sfG9zb2x8T3NjcnxyZHNofHlhY3l8cmVhbHxvc2NyfHh2ZWV8YW5kZHxyZWN0fGFuZHZ8WHNjcnxvcm9yfG9yZG18b3JkZnx4c2NyfGFuZ2V8YW9wZnxBb3BmfHJIYXJ8WG9wZnxvcGFyfE9vcGZ8eG9wZnx4bmlzfHJob3Z8b29wZnxvbWlkfHhtYXB8b2ludHxhcGlkfGFwb3N8b2dvbnxhc2NyfEFzY3J8b2RvdHxvZGl2fHhjdXB8eGNhcHxvY2lyfG9hc3R8bnZsdHxudmxlfG52Z3R8bnZnZXxudmFwfFdzY3J8d3NjcnxhdW1sfG50bGd8bnRnbHxuc3VwfG5zdWJ8bnNpbXxOc2NyfG5zY3J8bnNjZXxXb3BmfHJpbmd8bnByZXx3b3BmfG5wYXJ8QXVtbHxCYXJ2fGJicmt8Tm9wZnxub3BmfG5taWR8bkx0dnxiZXRhfHJvcGZ8Um9wZnxCZXRhfGJldGh8bmxlc3xycGFyfG5sZXF8Ym5vdHxiTm90fG5sZHJ8TkpjeXxyc2NyfFJzY3J8VnNjcnx2c2NyfHJzcWJ8bmpjeXxib3BmfG5pc2R8Qm9wZnxydHJpfFZvcGZ8bkd0dnxuZ3RyfHZvcGZ8Ym94aHxib3hIfGJveHZ8bmdlc3xuZ2VxfGJveFZ8YnNjcnxzY2FwfEJzY3J8YnNpbXxWZXJ0fHZlcnR8YnNvbHxidWxsfGJ1bXB8Y2Fwc3xjZG90fG5jdXB8c2NuRXxuY2FwfG5ic3B8bmFwRXxDZG90fGNlbnR8c2RvdHxWYmFyfG5hbmd8dkJhcnxjaGN5fE1zY3J8bXNjcnxzZWN0fHNlbWl8Q0hjeXxNb3BmfG1vcGZ8c2V4dHxjaXJjfGNpcmV8bWxkcnxtbGNwfGNpckV8Y29tcHxzaGN5fFNIY3l8dkFycnx2YXJyfGNvbmd8Y29wZnxDb3BmfGNvcHl8Q09QWXxtYWx0fG1hbGV8bWFjcnxsdm5FfGNzY3J8bHRyaXxzaW1lfGx0Y2N8c2ltZ3xDc2NyfHNpbWx8Y3N1YnxVdW1sfGxzcWJ8bHNpbXx1dW1sfGNzdXB8THNjcnxsc2NyfHV0cml8c21pZHxscGFyfGN1cHN8c210ZXxsb3pmfGRhcnJ8TG9wZnxVc2NyfHNvbGJ8bG9wZnxzb3BmfFNvcGZ8bG5lcXx1c2NyfHNwYXJ8ZEFycnxsbmFwfERhcnJ8ZGFzaHxTcXJ0fExKY3l8bGpjeXxsSGFyfGRIYXJ8VXBzaXx1cHNpfGRpYW18bGVzZ3xkamN5fERKY3l8bGVxcXxkb3BmfERvcGZ8ZHNjcnxEc2NyfGRzY3l8bGRzaHxsZGNhfHNxdWZ8RFNjeXxzc2NyfFNzY3J8ZHNvbHxsY3VifGxhdGV8c3RhcnxTdGFyfFVvcGZ8TGFycnxsQXJyfGxhcnJ8dW9wZnxkdHJpfGR6Y3l8c3ViZXxzdWJFfExhbmd8bGFuZ3xLc2NyfGtzY3J8S29wZnxrb3BmfEtKY3l8a2pjeXxLSGN5fGtoY3l8RFpjeXxlY2lyfGVkb3R8ZURvdHxKc2NyfGpzY3J8c3VjY3xKb3BmfGpvcGZ8RWRvdHx1SGFyfGVtc3B8ZW5zcHxJdW1sfGl1bWx8ZW9wZnxpc2lufElzY3J8aXNjcnxFb3BmfGVwYXJ8c3VuZ3xlcHNpfGVzY3J8c3VwMXxzdXAyfHN1cDN8SW90YXxpb3RhfHN1cGV8c3VwRXxJb3BmfGlvcGZ8SU9jeXxpb2N5fEVzY3J8ZXNpbXxFc2ltfGltb2Z8VWFycnxRVU9UfHVBcnJ8dWFycnxldW1sfElFY3l8aWVjeXxJZG90fEV1bWx8ZXVyb3xleGNsfEhzY3J8aHNjcnxIb3BmfGhvcGZ8VFNjeXx0c2N5fFRzY3J8aGJhcnx0c2NyfGZsYXR8dGJya3xmbm9mfGhBcnJ8aGFycnxoYWxmfGZvcGZ8Rm9wZnx0ZG90fGd2bkV8Zm9ya3x0cmllfGd0Y2N8ZnNjcnxGc2NyfGdkb3R8Z3NpbXxHc2NyfGdzY3J8R29wZnxnb3BmfGduZXF8R2RvdHx0b3NhfGduYXB8VG9wZnx0b3BmfGdlcXF8dG9lYXxHSmN5fGdqY3l8dGludHxnZXNsfG1pZHxTZnJ8Z2dnfHRvcHxnZXN8Z2xhfGdsRXxnbGp8Z2VxfGduZXxnRWx8Z2VsfGduRXxHY3l8Z2N5fGdhcHxUZnJ8dGZyfFRjeXx0Y3l8SGF0fFRhdXxGZnJ8dGF1fFRhYnxoZnJ8SGZyfGZmcnxGY3l8ZmN5fGljeXxJY3l8aWZmfEVUSHxldGh8aWZyfElmcnxFdGF8ZXRhfGludHxJbnR8U3VwfHN1cHx1Y3l8VWN5fFN1bXxzdW18amN5fEVOR3x1ZnJ8VWZyfGVuZ3xKY3l8amZyfGVsc3xlbGx8ZWdzfEVmcnxlZnJ8SmZyfHVtbHxrY3l8S2N5fEVjeXxlY3l8a2ZyfEtmcnxsYXB8U3VifHN1YnxsYXR8bGN5fExjeXxsZWd8RG90fGRvdHxsRWd8bGVxfGxlc3xzcXV8ZGl2fGRpZXxsZnJ8TGZyfGxnRXxEZnJ8ZGZyfERlbHxkZWd8RGN5fGRjeXxsbmV8bG5FfHNvbHxsb3p8c210fEN1cHxscm18Y3VwfGxzaHxMc2h8c2ltfHNoeXxtYXB8TWFwfG1jeXxNY3l8bWZyfE1mcnxtaG98Z2ZyfEdmcnxzZnJ8Y2lyfENoaXxjaGl8bmFwfENmcnx2Y3l8VmN5fGNmcnxTY3l8c2N5fG5jeXxOY3l8dmVlfFZlZXxDYXB8Y2FwfG5mcnxzY0V8c2NlfE5mcnxuZ2V8bmdFfG5HZ3x2ZnJ8VmZyfG5ndHxib3R8bkd0fG5pc3xuaXZ8UnNofHJzaHxubGV8bmxFfGJuZXxCZnJ8YmZyfG5MbHxubHR8bkx0fEJjeXxiY3l8bm90fE5vdHxybG18d2ZyfFdmcnxucHJ8bnNjfG51bXxvY3l8YXN0fE9jeXxvZnJ8eGZyfFhmcnxPZnJ8b2d0fG9obXxhcEV8b2x0fFJob3xhcGV8cmhvfFJmcnxyZnJ8b3JkfFJFR3xhbmd8cmVnfG9ydnxBbmR8YW5kfEFNUHxSY3l8YW1wfEFmcnx5Y3l8WWN5fHllbnx5ZnJ8WWZyfHJjeXxwYXJ8cGN5fFBjeXxwZnJ8UGZyfHBoaXxQaGl8YWZyfEFjeXxhY3l8emN5fFpjeXxwaXZ8YWNFfGFjZHx6ZnJ8WmZyfHByZXxwckV8cHNpfFBzaXxxZnJ8UWZyfHp3anxPcnxnZXxHZ3xndHxnZ3xlbHxvU3xsdHxMdHxMVHxSZXxsZ3xnbHxlZ3xuZXxJbXxpdHxsZXxERHx3cHx3cnxudXxOdXxkZHxsRXxTY3xzY3xwaXxQaXxlZXxhZnxsbHxMbHxyeHxnRXx4aXxwbXxYaXxpY3xwcnxQcnxpbnxuaXxtcHxtdXxhY3xNdXxvcnxhcHxHdHxHVHxpaSk7fCYoQWFjdXRlfEFncmF2ZXxBdGlsZGV8Q2NlZGlsfEVhY3V0ZXxFZ3JhdmV8SWFjdXRlfElncmF2ZXxOdGlsZGV8T2FjdXRlfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfFVhY3V0ZXxVZ3JhdmV8WWFjdXRlfGFhY3V0ZXxhZ3JhdmV8YXRpbGRlfGJydmJhcnxjY2VkaWx8Y3VycmVufGRpdmlkZXxlYWN1dGV8ZWdyYXZlfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGlhY3V0ZXxpZ3JhdmV8aXF1ZXN0fG1pZGRvdHxudGlsZGV8b2FjdXRlfG9ncmF2ZXxvc2xhc2h8b3RpbGRlfHBsdXNtbnx1YWN1dGV8dWdyYXZlfHlhY3V0ZXxBRWxpZ3xBY2lyY3xBcmluZ3xFY2lyY3xJY2lyY3xPY2lyY3xUSE9STnxVY2lyY3xhY2lyY3xhY3V0ZXxhZWxpZ3xhcmluZ3xjZWRpbHxlY2lyY3xpY2lyY3xpZXhjbHxsYXF1b3xtaWNyb3xvY2lyY3xwb3VuZHxyYXF1b3xzemxpZ3x0aG9ybnx0aW1lc3x1Y2lyY3xBdW1sfENPUFl8RXVtbHxJdW1sfE91bWx8UVVPVHxVdW1sfGF1bWx8Y2VudHxjb3B5fGV1bWx8aXVtbHxtYWNyfG5ic3B8b3JkZnxvcmRtfG91bWx8cGFyYXxxdW90fHNlY3R8c3VwMXxzdXAyfHN1cDN8dXVtbHx5dW1sfEFNUHxFVEh8UkVHfGFtcHxkZWd8ZXRofG5vdHxyZWd8c2h5fHVtbHx5ZW58R1R8TFR8Z3R8bHQpKD8hOykoWz1hLXpBLVowLTldPyl8JiMoWzAtOV0rKSg7Pyl8JiNbeFhdKFthLWZBLUYwLTldKykoOz8pfCYoWzAtOWEtekEtWl0rKS9nO1xuXHR2YXIgZGVjb2RlTWFwID0geydhYWN1dGUnOidcXHhFMScsJ0FhY3V0ZSc6J1xceEMxJywnYWJyZXZlJzonXFx1MDEwMycsJ0FicmV2ZSc6J1xcdTAxMDInLCdhYyc6J1xcdTIyM0UnLCdhY2QnOidcXHUyMjNGJywnYWNFJzonXFx1MjIzRVxcdTAzMzMnLCdhY2lyYyc6J1xceEUyJywnQWNpcmMnOidcXHhDMicsJ2FjdXRlJzonXFx4QjQnLCdhY3knOidcXHUwNDMwJywnQWN5JzonXFx1MDQxMCcsJ2FlbGlnJzonXFx4RTYnLCdBRWxpZyc6J1xceEM2JywnYWYnOidcXHUyMDYxJywnYWZyJzonXFx1RDgzNVxcdUREMUUnLCdBZnInOidcXHVEODM1XFx1REQwNCcsJ2FncmF2ZSc6J1xceEUwJywnQWdyYXZlJzonXFx4QzAnLCdhbGVmc3ltJzonXFx1MjEzNScsJ2FsZXBoJzonXFx1MjEzNScsJ2FscGhhJzonXFx1MDNCMScsJ0FscGhhJzonXFx1MDM5MScsJ2FtYWNyJzonXFx1MDEwMScsJ0FtYWNyJzonXFx1MDEwMCcsJ2FtYWxnJzonXFx1MkEzRicsJ2FtcCc6JyYnLCdBTVAnOicmJywnYW5kJzonXFx1MjIyNycsJ0FuZCc6J1xcdTJBNTMnLCdhbmRhbmQnOidcXHUyQTU1JywnYW5kZCc6J1xcdTJBNUMnLCdhbmRzbG9wZSc6J1xcdTJBNTgnLCdhbmR2JzonXFx1MkE1QScsJ2FuZyc6J1xcdTIyMjAnLCdhbmdlJzonXFx1MjlBNCcsJ2FuZ2xlJzonXFx1MjIyMCcsJ2FuZ21zZCc6J1xcdTIyMjEnLCdhbmdtc2RhYSc6J1xcdTI5QTgnLCdhbmdtc2RhYic6J1xcdTI5QTknLCdhbmdtc2RhYyc6J1xcdTI5QUEnLCdhbmdtc2RhZCc6J1xcdTI5QUInLCdhbmdtc2RhZSc6J1xcdTI5QUMnLCdhbmdtc2RhZic6J1xcdTI5QUQnLCdhbmdtc2RhZyc6J1xcdTI5QUUnLCdhbmdtc2RhaCc6J1xcdTI5QUYnLCdhbmdydCc6J1xcdTIyMUYnLCdhbmdydHZiJzonXFx1MjJCRScsJ2FuZ3J0dmJkJzonXFx1Mjk5RCcsJ2FuZ3NwaCc6J1xcdTIyMjInLCdhbmdzdCc6J1xceEM1JywnYW5nemFycic6J1xcdTIzN0MnLCdhb2dvbic6J1xcdTAxMDUnLCdBb2dvbic6J1xcdTAxMDQnLCdhb3BmJzonXFx1RDgzNVxcdURENTInLCdBb3BmJzonXFx1RDgzNVxcdUREMzgnLCdhcCc6J1xcdTIyNDgnLCdhcGFjaXInOidcXHUyQTZGJywnYXBlJzonXFx1MjI0QScsJ2FwRSc6J1xcdTJBNzAnLCdhcGlkJzonXFx1MjI0QicsJ2Fwb3MnOidcXCcnLCdBcHBseUZ1bmN0aW9uJzonXFx1MjA2MScsJ2FwcHJveCc6J1xcdTIyNDgnLCdhcHByb3hlcSc6J1xcdTIyNEEnLCdhcmluZyc6J1xceEU1JywnQXJpbmcnOidcXHhDNScsJ2FzY3InOidcXHVEODM1XFx1RENCNicsJ0FzY3InOidcXHVEODM1XFx1REM5QycsJ0Fzc2lnbic6J1xcdTIyNTQnLCdhc3QnOicqJywnYXN5bXAnOidcXHUyMjQ4JywnYXN5bXBlcSc6J1xcdTIyNEQnLCdhdGlsZGUnOidcXHhFMycsJ0F0aWxkZSc6J1xceEMzJywnYXVtbCc6J1xceEU0JywnQXVtbCc6J1xceEM0JywnYXdjb25pbnQnOidcXHUyMjMzJywnYXdpbnQnOidcXHUyQTExJywnYmFja2NvbmcnOidcXHUyMjRDJywnYmFja2Vwc2lsb24nOidcXHUwM0Y2JywnYmFja3ByaW1lJzonXFx1MjAzNScsJ2JhY2tzaW0nOidcXHUyMjNEJywnYmFja3NpbWVxJzonXFx1MjJDRCcsJ0JhY2tzbGFzaCc6J1xcdTIyMTYnLCdCYXJ2JzonXFx1MkFFNycsJ2JhcnZlZSc6J1xcdTIyQkQnLCdiYXJ3ZWQnOidcXHUyMzA1JywnQmFyd2VkJzonXFx1MjMwNicsJ2JhcndlZGdlJzonXFx1MjMwNScsJ2JicmsnOidcXHUyM0I1JywnYmJya3RicmsnOidcXHUyM0I2JywnYmNvbmcnOidcXHUyMjRDJywnYmN5JzonXFx1MDQzMScsJ0JjeSc6J1xcdTA0MTEnLCdiZHF1byc6J1xcdTIwMUUnLCdiZWNhdXMnOidcXHUyMjM1JywnYmVjYXVzZSc6J1xcdTIyMzUnLCdCZWNhdXNlJzonXFx1MjIzNScsJ2JlbXB0eXYnOidcXHUyOUIwJywnYmVwc2knOidcXHUwM0Y2JywnYmVybm91JzonXFx1MjEyQycsJ0Jlcm5vdWxsaXMnOidcXHUyMTJDJywnYmV0YSc6J1xcdTAzQjInLCdCZXRhJzonXFx1MDM5MicsJ2JldGgnOidcXHUyMTM2JywnYmV0d2Vlbic6J1xcdTIyNkMnLCdiZnInOidcXHVEODM1XFx1REQxRicsJ0Jmcic6J1xcdUQ4MzVcXHVERDA1JywnYmlnY2FwJzonXFx1MjJDMicsJ2JpZ2NpcmMnOidcXHUyNUVGJywnYmlnY3VwJzonXFx1MjJDMycsJ2JpZ29kb3QnOidcXHUyQTAwJywnYmlnb3BsdXMnOidcXHUyQTAxJywnYmlnb3RpbWVzJzonXFx1MkEwMicsJ2JpZ3NxY3VwJzonXFx1MkEwNicsJ2JpZ3N0YXInOidcXHUyNjA1JywnYmlndHJpYW5nbGVkb3duJzonXFx1MjVCRCcsJ2JpZ3RyaWFuZ2xldXAnOidcXHUyNUIzJywnYmlndXBsdXMnOidcXHUyQTA0JywnYmlndmVlJzonXFx1MjJDMScsJ2JpZ3dlZGdlJzonXFx1MjJDMCcsJ2JrYXJvdyc6J1xcdTI5MEQnLCdibGFja2xvemVuZ2UnOidcXHUyOUVCJywnYmxhY2tzcXVhcmUnOidcXHUyNUFBJywnYmxhY2t0cmlhbmdsZSc6J1xcdTI1QjQnLCdibGFja3RyaWFuZ2xlZG93bic6J1xcdTI1QkUnLCdibGFja3RyaWFuZ2xlbGVmdCc6J1xcdTI1QzInLCdibGFja3RyaWFuZ2xlcmlnaHQnOidcXHUyNUI4JywnYmxhbmsnOidcXHUyNDIzJywnYmxrMTInOidcXHUyNTkyJywnYmxrMTQnOidcXHUyNTkxJywnYmxrMzQnOidcXHUyNTkzJywnYmxvY2snOidcXHUyNTg4JywnYm5lJzonPVxcdTIwRTUnLCdibmVxdWl2JzonXFx1MjI2MVxcdTIwRTUnLCdibm90JzonXFx1MjMxMCcsJ2JOb3QnOidcXHUyQUVEJywnYm9wZic6J1xcdUQ4MzVcXHVERDUzJywnQm9wZic6J1xcdUQ4MzVcXHVERDM5JywnYm90JzonXFx1MjJBNScsJ2JvdHRvbSc6J1xcdTIyQTUnLCdib3d0aWUnOidcXHUyMkM4JywnYm94Ym94JzonXFx1MjlDOScsJ2JveGRsJzonXFx1MjUxMCcsJ2JveGRMJzonXFx1MjU1NScsJ2JveERsJzonXFx1MjU1NicsJ2JveERMJzonXFx1MjU1NycsJ2JveGRyJzonXFx1MjUwQycsJ2JveGRSJzonXFx1MjU1MicsJ2JveERyJzonXFx1MjU1MycsJ2JveERSJzonXFx1MjU1NCcsJ2JveGgnOidcXHUyNTAwJywnYm94SCc6J1xcdTI1NTAnLCdib3hoZCc6J1xcdTI1MkMnLCdib3hoRCc6J1xcdTI1NjUnLCdib3hIZCc6J1xcdTI1NjQnLCdib3hIRCc6J1xcdTI1NjYnLCdib3hodSc6J1xcdTI1MzQnLCdib3hoVSc6J1xcdTI1NjgnLCdib3hIdSc6J1xcdTI1NjcnLCdib3hIVSc6J1xcdTI1NjknLCdib3htaW51cyc6J1xcdTIyOUYnLCdib3hwbHVzJzonXFx1MjI5RScsJ2JveHRpbWVzJzonXFx1MjJBMCcsJ2JveHVsJzonXFx1MjUxOCcsJ2JveHVMJzonXFx1MjU1QicsJ2JveFVsJzonXFx1MjU1QycsJ2JveFVMJzonXFx1MjU1RCcsJ2JveHVyJzonXFx1MjUxNCcsJ2JveHVSJzonXFx1MjU1OCcsJ2JveFVyJzonXFx1MjU1OScsJ2JveFVSJzonXFx1MjU1QScsJ2JveHYnOidcXHUyNTAyJywnYm94Vic6J1xcdTI1NTEnLCdib3h2aCc6J1xcdTI1M0MnLCdib3h2SCc6J1xcdTI1NkEnLCdib3hWaCc6J1xcdTI1NkInLCdib3hWSCc6J1xcdTI1NkMnLCdib3h2bCc6J1xcdTI1MjQnLCdib3h2TCc6J1xcdTI1NjEnLCdib3hWbCc6J1xcdTI1NjInLCdib3hWTCc6J1xcdTI1NjMnLCdib3h2cic6J1xcdTI1MUMnLCdib3h2Uic6J1xcdTI1NUUnLCdib3hWcic6J1xcdTI1NUYnLCdib3hWUic6J1xcdTI1NjAnLCdicHJpbWUnOidcXHUyMDM1JywnYnJldmUnOidcXHUwMkQ4JywnQnJldmUnOidcXHUwMkQ4JywnYnJ2YmFyJzonXFx4QTYnLCdic2NyJzonXFx1RDgzNVxcdURDQjcnLCdCc2NyJzonXFx1MjEyQycsJ2JzZW1pJzonXFx1MjA0RicsJ2JzaW0nOidcXHUyMjNEJywnYnNpbWUnOidcXHUyMkNEJywnYnNvbCc6J1xcXFwnLCdic29sYic6J1xcdTI5QzUnLCdic29saHN1Yic6J1xcdTI3QzgnLCdidWxsJzonXFx1MjAyMicsJ2J1bGxldCc6J1xcdTIwMjInLCdidW1wJzonXFx1MjI0RScsJ2J1bXBlJzonXFx1MjI0RicsJ2J1bXBFJzonXFx1MkFBRScsJ2J1bXBlcSc6J1xcdTIyNEYnLCdCdW1wZXEnOidcXHUyMjRFJywnY2FjdXRlJzonXFx1MDEwNycsJ0NhY3V0ZSc6J1xcdTAxMDYnLCdjYXAnOidcXHUyMjI5JywnQ2FwJzonXFx1MjJEMicsJ2NhcGFuZCc6J1xcdTJBNDQnLCdjYXBicmN1cCc6J1xcdTJBNDknLCdjYXBjYXAnOidcXHUyQTRCJywnY2FwY3VwJzonXFx1MkE0NycsJ2NhcGRvdCc6J1xcdTJBNDAnLCdDYXBpdGFsRGlmZmVyZW50aWFsRCc6J1xcdTIxNDUnLCdjYXBzJzonXFx1MjIyOVxcdUZFMDAnLCdjYXJldCc6J1xcdTIwNDEnLCdjYXJvbic6J1xcdTAyQzcnLCdDYXlsZXlzJzonXFx1MjEyRCcsJ2NjYXBzJzonXFx1MkE0RCcsJ2NjYXJvbic6J1xcdTAxMEQnLCdDY2Fyb24nOidcXHUwMTBDJywnY2NlZGlsJzonXFx4RTcnLCdDY2VkaWwnOidcXHhDNycsJ2NjaXJjJzonXFx1MDEwOScsJ0NjaXJjJzonXFx1MDEwOCcsJ0Njb25pbnQnOidcXHUyMjMwJywnY2N1cHMnOidcXHUyQTRDJywnY2N1cHNzbSc6J1xcdTJBNTAnLCdjZG90JzonXFx1MDEwQicsJ0Nkb3QnOidcXHUwMTBBJywnY2VkaWwnOidcXHhCOCcsJ0NlZGlsbGEnOidcXHhCOCcsJ2NlbXB0eXYnOidcXHUyOUIyJywnY2VudCc6J1xceEEyJywnY2VudGVyZG90JzonXFx4QjcnLCdDZW50ZXJEb3QnOidcXHhCNycsJ2Nmcic6J1xcdUQ4MzVcXHVERDIwJywnQ2ZyJzonXFx1MjEyRCcsJ2NoY3knOidcXHUwNDQ3JywnQ0hjeSc6J1xcdTA0MjcnLCdjaGVjayc6J1xcdTI3MTMnLCdjaGVja21hcmsnOidcXHUyNzEzJywnY2hpJzonXFx1MDNDNycsJ0NoaSc6J1xcdTAzQTcnLCdjaXInOidcXHUyNUNCJywnY2lyYyc6J1xcdTAyQzYnLCdjaXJjZXEnOidcXHUyMjU3JywnY2lyY2xlYXJyb3dsZWZ0JzonXFx1MjFCQScsJ2NpcmNsZWFycm93cmlnaHQnOidcXHUyMUJCJywnY2lyY2xlZGFzdCc6J1xcdTIyOUInLCdjaXJjbGVkY2lyYyc6J1xcdTIyOUEnLCdjaXJjbGVkZGFzaCc6J1xcdTIyOUQnLCdDaXJjbGVEb3QnOidcXHUyMjk5JywnY2lyY2xlZFInOidcXHhBRScsJ2NpcmNsZWRTJzonXFx1MjRDOCcsJ0NpcmNsZU1pbnVzJzonXFx1MjI5NicsJ0NpcmNsZVBsdXMnOidcXHUyMjk1JywnQ2lyY2xlVGltZXMnOidcXHUyMjk3JywnY2lyZSc6J1xcdTIyNTcnLCdjaXJFJzonXFx1MjlDMycsJ2NpcmZuaW50JzonXFx1MkExMCcsJ2Npcm1pZCc6J1xcdTJBRUYnLCdjaXJzY2lyJzonXFx1MjlDMicsJ0Nsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbCc6J1xcdTIyMzInLCdDbG9zZUN1cmx5RG91YmxlUXVvdGUnOidcXHUyMDFEJywnQ2xvc2VDdXJseVF1b3RlJzonXFx1MjAxOScsJ2NsdWJzJzonXFx1MjY2MycsJ2NsdWJzdWl0JzonXFx1MjY2MycsJ2NvbG9uJzonOicsJ0NvbG9uJzonXFx1MjIzNycsJ2NvbG9uZSc6J1xcdTIyNTQnLCdDb2xvbmUnOidcXHUyQTc0JywnY29sb25lcSc6J1xcdTIyNTQnLCdjb21tYSc6JywnLCdjb21tYXQnOidAJywnY29tcCc6J1xcdTIyMDEnLCdjb21wZm4nOidcXHUyMjE4JywnY29tcGxlbWVudCc6J1xcdTIyMDEnLCdjb21wbGV4ZXMnOidcXHUyMTAyJywnY29uZyc6J1xcdTIyNDUnLCdjb25nZG90JzonXFx1MkE2RCcsJ0NvbmdydWVudCc6J1xcdTIyNjEnLCdjb25pbnQnOidcXHUyMjJFJywnQ29uaW50JzonXFx1MjIyRicsJ0NvbnRvdXJJbnRlZ3JhbCc6J1xcdTIyMkUnLCdjb3BmJzonXFx1RDgzNVxcdURENTQnLCdDb3BmJzonXFx1MjEwMicsJ2NvcHJvZCc6J1xcdTIyMTAnLCdDb3Byb2R1Y3QnOidcXHUyMjEwJywnY29weSc6J1xceEE5JywnQ09QWSc6J1xceEE5JywnY29weXNyJzonXFx1MjExNycsJ0NvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnOidcXHUyMjMzJywnY3JhcnInOidcXHUyMUI1JywnY3Jvc3MnOidcXHUyNzE3JywnQ3Jvc3MnOidcXHUyQTJGJywnY3Njcic6J1xcdUQ4MzVcXHVEQ0I4JywnQ3Njcic6J1xcdUQ4MzVcXHVEQzlFJywnY3N1Yic6J1xcdTJBQ0YnLCdjc3ViZSc6J1xcdTJBRDEnLCdjc3VwJzonXFx1MkFEMCcsJ2NzdXBlJzonXFx1MkFEMicsJ2N0ZG90JzonXFx1MjJFRicsJ2N1ZGFycmwnOidcXHUyOTM4JywnY3VkYXJycic6J1xcdTI5MzUnLCdjdWVwcic6J1xcdTIyREUnLCdjdWVzYyc6J1xcdTIyREYnLCdjdWxhcnInOidcXHUyMUI2JywnY3VsYXJycCc6J1xcdTI5M0QnLCdjdXAnOidcXHUyMjJBJywnQ3VwJzonXFx1MjJEMycsJ2N1cGJyY2FwJzonXFx1MkE0OCcsJ2N1cGNhcCc6J1xcdTJBNDYnLCdDdXBDYXAnOidcXHUyMjREJywnY3VwY3VwJzonXFx1MkE0QScsJ2N1cGRvdCc6J1xcdTIyOEQnLCdjdXBvcic6J1xcdTJBNDUnLCdjdXBzJzonXFx1MjIyQVxcdUZFMDAnLCdjdXJhcnInOidcXHUyMUI3JywnY3VyYXJybSc6J1xcdTI5M0MnLCdjdXJseWVxcHJlYyc6J1xcdTIyREUnLCdjdXJseWVxc3VjYyc6J1xcdTIyREYnLCdjdXJseXZlZSc6J1xcdTIyQ0UnLCdjdXJseXdlZGdlJzonXFx1MjJDRicsJ2N1cnJlbic6J1xceEE0JywnY3VydmVhcnJvd2xlZnQnOidcXHUyMUI2JywnY3VydmVhcnJvd3JpZ2h0JzonXFx1MjFCNycsJ2N1dmVlJzonXFx1MjJDRScsJ2N1d2VkJzonXFx1MjJDRicsJ2N3Y29uaW50JzonXFx1MjIzMicsJ2N3aW50JzonXFx1MjIzMScsJ2N5bGN0eSc6J1xcdTIzMkQnLCdkYWdnZXInOidcXHUyMDIwJywnRGFnZ2VyJzonXFx1MjAyMScsJ2RhbGV0aCc6J1xcdTIxMzgnLCdkYXJyJzonXFx1MjE5MycsJ2RBcnInOidcXHUyMUQzJywnRGFycic6J1xcdTIxQTEnLCdkYXNoJzonXFx1MjAxMCcsJ2Rhc2h2JzonXFx1MjJBMycsJ0Rhc2h2JzonXFx1MkFFNCcsJ2Ria2Fyb3cnOidcXHUyOTBGJywnZGJsYWMnOidcXHUwMkREJywnZGNhcm9uJzonXFx1MDEwRicsJ0RjYXJvbic6J1xcdTAxMEUnLCdkY3knOidcXHUwNDM0JywnRGN5JzonXFx1MDQxNCcsJ2RkJzonXFx1MjE0NicsJ0REJzonXFx1MjE0NScsJ2RkYWdnZXInOidcXHUyMDIxJywnZGRhcnInOidcXHUyMUNBJywnRERvdHJhaGQnOidcXHUyOTExJywnZGRvdHNlcSc6J1xcdTJBNzcnLCdkZWcnOidcXHhCMCcsJ0RlbCc6J1xcdTIyMDcnLCdkZWx0YSc6J1xcdTAzQjQnLCdEZWx0YSc6J1xcdTAzOTQnLCdkZW1wdHl2JzonXFx1MjlCMScsJ2RmaXNodCc6J1xcdTI5N0YnLCdkZnInOidcXHVEODM1XFx1REQyMScsJ0Rmcic6J1xcdUQ4MzVcXHVERDA3JywnZEhhcic6J1xcdTI5NjUnLCdkaGFybCc6J1xcdTIxQzMnLCdkaGFycic6J1xcdTIxQzInLCdEaWFjcml0aWNhbEFjdXRlJzonXFx4QjQnLCdEaWFjcml0aWNhbERvdCc6J1xcdTAyRDknLCdEaWFjcml0aWNhbERvdWJsZUFjdXRlJzonXFx1MDJERCcsJ0RpYWNyaXRpY2FsR3JhdmUnOidgJywnRGlhY3JpdGljYWxUaWxkZSc6J1xcdTAyREMnLCdkaWFtJzonXFx1MjJDNCcsJ2RpYW1vbmQnOidcXHUyMkM0JywnRGlhbW9uZCc6J1xcdTIyQzQnLCdkaWFtb25kc3VpdCc6J1xcdTI2NjYnLCdkaWFtcyc6J1xcdTI2NjYnLCdkaWUnOidcXHhBOCcsJ0RpZmZlcmVudGlhbEQnOidcXHUyMTQ2JywnZGlnYW1tYSc6J1xcdTAzREQnLCdkaXNpbic6J1xcdTIyRjInLCdkaXYnOidcXHhGNycsJ2RpdmlkZSc6J1xceEY3JywnZGl2aWRlb250aW1lcyc6J1xcdTIyQzcnLCdkaXZvbngnOidcXHUyMkM3JywnZGpjeSc6J1xcdTA0NTInLCdESmN5JzonXFx1MDQwMicsJ2RsY29ybic6J1xcdTIzMUUnLCdkbGNyb3AnOidcXHUyMzBEJywnZG9sbGFyJzonJCcsJ2RvcGYnOidcXHVEODM1XFx1REQ1NScsJ0RvcGYnOidcXHVEODM1XFx1REQzQicsJ2RvdCc6J1xcdTAyRDknLCdEb3QnOidcXHhBOCcsJ0RvdERvdCc6J1xcdTIwREMnLCdkb3RlcSc6J1xcdTIyNTAnLCdkb3RlcWRvdCc6J1xcdTIyNTEnLCdEb3RFcXVhbCc6J1xcdTIyNTAnLCdkb3RtaW51cyc6J1xcdTIyMzgnLCdkb3RwbHVzJzonXFx1MjIxNCcsJ2RvdHNxdWFyZSc6J1xcdTIyQTEnLCdkb3VibGViYXJ3ZWRnZSc6J1xcdTIzMDYnLCdEb3VibGVDb250b3VySW50ZWdyYWwnOidcXHUyMjJGJywnRG91YmxlRG90JzonXFx4QTgnLCdEb3VibGVEb3duQXJyb3cnOidcXHUyMUQzJywnRG91YmxlTGVmdEFycm93JzonXFx1MjFEMCcsJ0RvdWJsZUxlZnRSaWdodEFycm93JzonXFx1MjFENCcsJ0RvdWJsZUxlZnRUZWUnOidcXHUyQUU0JywnRG91YmxlTG9uZ0xlZnRBcnJvdyc6J1xcdTI3RjgnLCdEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3cnOidcXHUyN0ZBJywnRG91YmxlTG9uZ1JpZ2h0QXJyb3cnOidcXHUyN0Y5JywnRG91YmxlUmlnaHRBcnJvdyc6J1xcdTIxRDInLCdEb3VibGVSaWdodFRlZSc6J1xcdTIyQTgnLCdEb3VibGVVcEFycm93JzonXFx1MjFEMScsJ0RvdWJsZVVwRG93bkFycm93JzonXFx1MjFENScsJ0RvdWJsZVZlcnRpY2FsQmFyJzonXFx1MjIyNScsJ2Rvd25hcnJvdyc6J1xcdTIxOTMnLCdEb3duYXJyb3cnOidcXHUyMUQzJywnRG93bkFycm93JzonXFx1MjE5MycsJ0Rvd25BcnJvd0Jhcic6J1xcdTI5MTMnLCdEb3duQXJyb3dVcEFycm93JzonXFx1MjFGNScsJ0Rvd25CcmV2ZSc6J1xcdTAzMTEnLCdkb3duZG93bmFycm93cyc6J1xcdTIxQ0EnLCdkb3duaGFycG9vbmxlZnQnOidcXHUyMUMzJywnZG93bmhhcnBvb25yaWdodCc6J1xcdTIxQzInLCdEb3duTGVmdFJpZ2h0VmVjdG9yJzonXFx1Mjk1MCcsJ0Rvd25MZWZ0VGVlVmVjdG9yJzonXFx1Mjk1RScsJ0Rvd25MZWZ0VmVjdG9yJzonXFx1MjFCRCcsJ0Rvd25MZWZ0VmVjdG9yQmFyJzonXFx1Mjk1NicsJ0Rvd25SaWdodFRlZVZlY3Rvcic6J1xcdTI5NUYnLCdEb3duUmlnaHRWZWN0b3InOidcXHUyMUMxJywnRG93blJpZ2h0VmVjdG9yQmFyJzonXFx1Mjk1NycsJ0Rvd25UZWUnOidcXHUyMkE0JywnRG93blRlZUFycm93JzonXFx1MjFBNycsJ2RyYmthcm93JzonXFx1MjkxMCcsJ2RyY29ybic6J1xcdTIzMUYnLCdkcmNyb3AnOidcXHUyMzBDJywnZHNjcic6J1xcdUQ4MzVcXHVEQ0I5JywnRHNjcic6J1xcdUQ4MzVcXHVEQzlGJywnZHNjeSc6J1xcdTA0NTUnLCdEU2N5JzonXFx1MDQwNScsJ2Rzb2wnOidcXHUyOUY2JywnZHN0cm9rJzonXFx1MDExMScsJ0RzdHJvayc6J1xcdTAxMTAnLCdkdGRvdCc6J1xcdTIyRjEnLCdkdHJpJzonXFx1MjVCRicsJ2R0cmlmJzonXFx1MjVCRScsJ2R1YXJyJzonXFx1MjFGNScsJ2R1aGFyJzonXFx1Mjk2RicsJ2R3YW5nbGUnOidcXHUyOUE2JywnZHpjeSc6J1xcdTA0NUYnLCdEWmN5JzonXFx1MDQwRicsJ2R6aWdyYXJyJzonXFx1MjdGRicsJ2VhY3V0ZSc6J1xceEU5JywnRWFjdXRlJzonXFx4QzknLCdlYXN0ZXInOidcXHUyQTZFJywnZWNhcm9uJzonXFx1MDExQicsJ0VjYXJvbic6J1xcdTAxMUEnLCdlY2lyJzonXFx1MjI1NicsJ2VjaXJjJzonXFx4RUEnLCdFY2lyYyc6J1xceENBJywnZWNvbG9uJzonXFx1MjI1NScsJ2VjeSc6J1xcdTA0NEQnLCdFY3knOidcXHUwNDJEJywnZUREb3QnOidcXHUyQTc3JywnZWRvdCc6J1xcdTAxMTcnLCdlRG90JzonXFx1MjI1MScsJ0Vkb3QnOidcXHUwMTE2JywnZWUnOidcXHUyMTQ3JywnZWZEb3QnOidcXHUyMjUyJywnZWZyJzonXFx1RDgzNVxcdUREMjInLCdFZnInOidcXHVEODM1XFx1REQwOCcsJ2VnJzonXFx1MkE5QScsJ2VncmF2ZSc6J1xceEU4JywnRWdyYXZlJzonXFx4QzgnLCdlZ3MnOidcXHUyQTk2JywnZWdzZG90JzonXFx1MkE5OCcsJ2VsJzonXFx1MkE5OScsJ0VsZW1lbnQnOidcXHUyMjA4JywnZWxpbnRlcnMnOidcXHUyM0U3JywnZWxsJzonXFx1MjExMycsJ2Vscyc6J1xcdTJBOTUnLCdlbHNkb3QnOidcXHUyQTk3JywnZW1hY3InOidcXHUwMTEzJywnRW1hY3InOidcXHUwMTEyJywnZW1wdHknOidcXHUyMjA1JywnZW1wdHlzZXQnOidcXHUyMjA1JywnRW1wdHlTbWFsbFNxdWFyZSc6J1xcdTI1RkInLCdlbXB0eXYnOidcXHUyMjA1JywnRW1wdHlWZXJ5U21hbGxTcXVhcmUnOidcXHUyNUFCJywnZW1zcCc6J1xcdTIwMDMnLCdlbXNwMTMnOidcXHUyMDA0JywnZW1zcDE0JzonXFx1MjAwNScsJ2VuZyc6J1xcdTAxNEInLCdFTkcnOidcXHUwMTRBJywnZW5zcCc6J1xcdTIwMDInLCdlb2dvbic6J1xcdTAxMTknLCdFb2dvbic6J1xcdTAxMTgnLCdlb3BmJzonXFx1RDgzNVxcdURENTYnLCdFb3BmJzonXFx1RDgzNVxcdUREM0MnLCdlcGFyJzonXFx1MjJENScsJ2VwYXJzbCc6J1xcdTI5RTMnLCdlcGx1cyc6J1xcdTJBNzEnLCdlcHNpJzonXFx1MDNCNScsJ2Vwc2lsb24nOidcXHUwM0I1JywnRXBzaWxvbic6J1xcdTAzOTUnLCdlcHNpdic6J1xcdTAzRjUnLCdlcWNpcmMnOidcXHUyMjU2JywnZXFjb2xvbic6J1xcdTIyNTUnLCdlcXNpbSc6J1xcdTIyNDInLCdlcXNsYW50Z3RyJzonXFx1MkE5NicsJ2Vxc2xhbnRsZXNzJzonXFx1MkE5NScsJ0VxdWFsJzonXFx1MkE3NScsJ2VxdWFscyc6Jz0nLCdFcXVhbFRpbGRlJzonXFx1MjI0MicsJ2VxdWVzdCc6J1xcdTIyNUYnLCdFcXVpbGlicml1bSc6J1xcdTIxQ0MnLCdlcXVpdic6J1xcdTIyNjEnLCdlcXVpdkREJzonXFx1MkE3OCcsJ2VxdnBhcnNsJzonXFx1MjlFNScsJ2VyYXJyJzonXFx1Mjk3MScsJ2VyRG90JzonXFx1MjI1MycsJ2VzY3InOidcXHUyMTJGJywnRXNjcic6J1xcdTIxMzAnLCdlc2RvdCc6J1xcdTIyNTAnLCdlc2ltJzonXFx1MjI0MicsJ0VzaW0nOidcXHUyQTczJywnZXRhJzonXFx1MDNCNycsJ0V0YSc6J1xcdTAzOTcnLCdldGgnOidcXHhGMCcsJ0VUSCc6J1xceEQwJywnZXVtbCc6J1xceEVCJywnRXVtbCc6J1xceENCJywnZXVybyc6J1xcdTIwQUMnLCdleGNsJzonIScsJ2V4aXN0JzonXFx1MjIwMycsJ0V4aXN0cyc6J1xcdTIyMDMnLCdleHBlY3RhdGlvbic6J1xcdTIxMzAnLCdleHBvbmVudGlhbGUnOidcXHUyMTQ3JywnRXhwb25lbnRpYWxFJzonXFx1MjE0NycsJ2ZhbGxpbmdkb3RzZXEnOidcXHUyMjUyJywnZmN5JzonXFx1MDQ0NCcsJ0ZjeSc6J1xcdTA0MjQnLCdmZW1hbGUnOidcXHUyNjQwJywnZmZpbGlnJzonXFx1RkIwMycsJ2ZmbGlnJzonXFx1RkIwMCcsJ2ZmbGxpZyc6J1xcdUZCMDQnLCdmZnInOidcXHVEODM1XFx1REQyMycsJ0Zmcic6J1xcdUQ4MzVcXHVERDA5JywnZmlsaWcnOidcXHVGQjAxJywnRmlsbGVkU21hbGxTcXVhcmUnOidcXHUyNUZDJywnRmlsbGVkVmVyeVNtYWxsU3F1YXJlJzonXFx1MjVBQScsJ2ZqbGlnJzonZmonLCdmbGF0JzonXFx1MjY2RCcsJ2ZsbGlnJzonXFx1RkIwMicsJ2ZsdG5zJzonXFx1MjVCMScsJ2Zub2YnOidcXHUwMTkyJywnZm9wZic6J1xcdUQ4MzVcXHVERDU3JywnRm9wZic6J1xcdUQ4MzVcXHVERDNEJywnZm9yYWxsJzonXFx1MjIwMCcsJ0ZvckFsbCc6J1xcdTIyMDAnLCdmb3JrJzonXFx1MjJENCcsJ2Zvcmt2JzonXFx1MkFEOScsJ0ZvdXJpZXJ0cmYnOidcXHUyMTMxJywnZnBhcnRpbnQnOidcXHUyQTBEJywnZnJhYzEyJzonXFx4QkQnLCdmcmFjMTMnOidcXHUyMTUzJywnZnJhYzE0JzonXFx4QkMnLCdmcmFjMTUnOidcXHUyMTU1JywnZnJhYzE2JzonXFx1MjE1OScsJ2ZyYWMxOCc6J1xcdTIxNUInLCdmcmFjMjMnOidcXHUyMTU0JywnZnJhYzI1JzonXFx1MjE1NicsJ2ZyYWMzNCc6J1xceEJFJywnZnJhYzM1JzonXFx1MjE1NycsJ2ZyYWMzOCc6J1xcdTIxNUMnLCdmcmFjNDUnOidcXHUyMTU4JywnZnJhYzU2JzonXFx1MjE1QScsJ2ZyYWM1OCc6J1xcdTIxNUQnLCdmcmFjNzgnOidcXHUyMTVFJywnZnJhc2wnOidcXHUyMDQ0JywnZnJvd24nOidcXHUyMzIyJywnZnNjcic6J1xcdUQ4MzVcXHVEQ0JCJywnRnNjcic6J1xcdTIxMzEnLCdnYWN1dGUnOidcXHUwMUY1JywnZ2FtbWEnOidcXHUwM0IzJywnR2FtbWEnOidcXHUwMzkzJywnZ2FtbWFkJzonXFx1MDNERCcsJ0dhbW1hZCc6J1xcdTAzREMnLCdnYXAnOidcXHUyQTg2JywnZ2JyZXZlJzonXFx1MDExRicsJ0dicmV2ZSc6J1xcdTAxMUUnLCdHY2VkaWwnOidcXHUwMTIyJywnZ2NpcmMnOidcXHUwMTFEJywnR2NpcmMnOidcXHUwMTFDJywnZ2N5JzonXFx1MDQzMycsJ0djeSc6J1xcdTA0MTMnLCdnZG90JzonXFx1MDEyMScsJ0dkb3QnOidcXHUwMTIwJywnZ2UnOidcXHUyMjY1JywnZ0UnOidcXHUyMjY3JywnZ2VsJzonXFx1MjJEQicsJ2dFbCc6J1xcdTJBOEMnLCdnZXEnOidcXHUyMjY1JywnZ2VxcSc6J1xcdTIyNjcnLCdnZXFzbGFudCc6J1xcdTJBN0UnLCdnZXMnOidcXHUyQTdFJywnZ2VzY2MnOidcXHUyQUE5JywnZ2VzZG90JzonXFx1MkE4MCcsJ2dlc2RvdG8nOidcXHUyQTgyJywnZ2VzZG90b2wnOidcXHUyQTg0JywnZ2VzbCc6J1xcdTIyREJcXHVGRTAwJywnZ2VzbGVzJzonXFx1MkE5NCcsJ2dmcic6J1xcdUQ4MzVcXHVERDI0JywnR2ZyJzonXFx1RDgzNVxcdUREMEEnLCdnZyc6J1xcdTIyNkInLCdHZyc6J1xcdTIyRDknLCdnZ2cnOidcXHUyMkQ5JywnZ2ltZWwnOidcXHUyMTM3JywnZ2pjeSc6J1xcdTA0NTMnLCdHSmN5JzonXFx1MDQwMycsJ2dsJzonXFx1MjI3NycsJ2dsYSc6J1xcdTJBQTUnLCdnbEUnOidcXHUyQTkyJywnZ2xqJzonXFx1MkFBNCcsJ2duYXAnOidcXHUyQThBJywnZ25hcHByb3gnOidcXHUyQThBJywnZ25lJzonXFx1MkE4OCcsJ2duRSc6J1xcdTIyNjknLCdnbmVxJzonXFx1MkE4OCcsJ2duZXFxJzonXFx1MjI2OScsJ2duc2ltJzonXFx1MjJFNycsJ2dvcGYnOidcXHVEODM1XFx1REQ1OCcsJ0dvcGYnOidcXHVEODM1XFx1REQzRScsJ2dyYXZlJzonYCcsJ0dyZWF0ZXJFcXVhbCc6J1xcdTIyNjUnLCdHcmVhdGVyRXF1YWxMZXNzJzonXFx1MjJEQicsJ0dyZWF0ZXJGdWxsRXF1YWwnOidcXHUyMjY3JywnR3JlYXRlckdyZWF0ZXInOidcXHUyQUEyJywnR3JlYXRlckxlc3MnOidcXHUyMjc3JywnR3JlYXRlclNsYW50RXF1YWwnOidcXHUyQTdFJywnR3JlYXRlclRpbGRlJzonXFx1MjI3MycsJ2dzY3InOidcXHUyMTBBJywnR3Njcic6J1xcdUQ4MzVcXHVEQ0EyJywnZ3NpbSc6J1xcdTIyNzMnLCdnc2ltZSc6J1xcdTJBOEUnLCdnc2ltbCc6J1xcdTJBOTAnLCdndCc6Jz4nLCdHdCc6J1xcdTIyNkInLCdHVCc6Jz4nLCdndGNjJzonXFx1MkFBNycsJ2d0Y2lyJzonXFx1MkE3QScsJ2d0ZG90JzonXFx1MjJENycsJ2d0bFBhcic6J1xcdTI5OTUnLCdndHF1ZXN0JzonXFx1MkE3QycsJ2d0cmFwcHJveCc6J1xcdTJBODYnLCdndHJhcnInOidcXHUyOTc4JywnZ3RyZG90JzonXFx1MjJENycsJ2d0cmVxbGVzcyc6J1xcdTIyREInLCdndHJlcXFsZXNzJzonXFx1MkE4QycsJ2d0cmxlc3MnOidcXHUyMjc3JywnZ3Ryc2ltJzonXFx1MjI3MycsJ2d2ZXJ0bmVxcSc6J1xcdTIyNjlcXHVGRTAwJywnZ3ZuRSc6J1xcdTIyNjlcXHVGRTAwJywnSGFjZWsnOidcXHUwMkM3JywnaGFpcnNwJzonXFx1MjAwQScsJ2hhbGYnOidcXHhCRCcsJ2hhbWlsdCc6J1xcdTIxMEInLCdoYXJkY3knOidcXHUwNDRBJywnSEFSRGN5JzonXFx1MDQyQScsJ2hhcnInOidcXHUyMTk0JywnaEFycic6J1xcdTIxRDQnLCdoYXJyY2lyJzonXFx1Mjk0OCcsJ2hhcnJ3JzonXFx1MjFBRCcsJ0hhdCc6J14nLCdoYmFyJzonXFx1MjEwRicsJ2hjaXJjJzonXFx1MDEyNScsJ0hjaXJjJzonXFx1MDEyNCcsJ2hlYXJ0cyc6J1xcdTI2NjUnLCdoZWFydHN1aXQnOidcXHUyNjY1JywnaGVsbGlwJzonXFx1MjAyNicsJ2hlcmNvbic6J1xcdTIyQjknLCdoZnInOidcXHVEODM1XFx1REQyNScsJ0hmcic6J1xcdTIxMEMnLCdIaWxiZXJ0U3BhY2UnOidcXHUyMTBCJywnaGtzZWFyb3cnOidcXHUyOTI1JywnaGtzd2Fyb3cnOidcXHUyOTI2JywnaG9hcnInOidcXHUyMUZGJywnaG9tdGh0JzonXFx1MjIzQicsJ2hvb2tsZWZ0YXJyb3cnOidcXHUyMUE5JywnaG9va3JpZ2h0YXJyb3cnOidcXHUyMUFBJywnaG9wZic6J1xcdUQ4MzVcXHVERDU5JywnSG9wZic6J1xcdTIxMEQnLCdob3JiYXInOidcXHUyMDE1JywnSG9yaXpvbnRhbExpbmUnOidcXHUyNTAwJywnaHNjcic6J1xcdUQ4MzVcXHVEQ0JEJywnSHNjcic6J1xcdTIxMEInLCdoc2xhc2gnOidcXHUyMTBGJywnaHN0cm9rJzonXFx1MDEyNycsJ0hzdHJvayc6J1xcdTAxMjYnLCdIdW1wRG93bkh1bXAnOidcXHUyMjRFJywnSHVtcEVxdWFsJzonXFx1MjI0RicsJ2h5YnVsbCc6J1xcdTIwNDMnLCdoeXBoZW4nOidcXHUyMDEwJywnaWFjdXRlJzonXFx4RUQnLCdJYWN1dGUnOidcXHhDRCcsJ2ljJzonXFx1MjA2MycsJ2ljaXJjJzonXFx4RUUnLCdJY2lyYyc6J1xceENFJywnaWN5JzonXFx1MDQzOCcsJ0ljeSc6J1xcdTA0MTgnLCdJZG90JzonXFx1MDEzMCcsJ2llY3knOidcXHUwNDM1JywnSUVjeSc6J1xcdTA0MTUnLCdpZXhjbCc6J1xceEExJywnaWZmJzonXFx1MjFENCcsJ2lmcic6J1xcdUQ4MzVcXHVERDI2JywnSWZyJzonXFx1MjExMScsJ2lncmF2ZSc6J1xceEVDJywnSWdyYXZlJzonXFx4Q0MnLCdpaSc6J1xcdTIxNDgnLCdpaWlpbnQnOidcXHUyQTBDJywnaWlpbnQnOidcXHUyMjJEJywnaWluZmluJzonXFx1MjlEQycsJ2lpb3RhJzonXFx1MjEyOScsJ2lqbGlnJzonXFx1MDEzMycsJ0lKbGlnJzonXFx1MDEzMicsJ0ltJzonXFx1MjExMScsJ2ltYWNyJzonXFx1MDEyQicsJ0ltYWNyJzonXFx1MDEyQScsJ2ltYWdlJzonXFx1MjExMScsJ0ltYWdpbmFyeUknOidcXHUyMTQ4JywnaW1hZ2xpbmUnOidcXHUyMTEwJywnaW1hZ3BhcnQnOidcXHUyMTExJywnaW1hdGgnOidcXHUwMTMxJywnaW1vZic6J1xcdTIyQjcnLCdpbXBlZCc6J1xcdTAxQjUnLCdJbXBsaWVzJzonXFx1MjFEMicsJ2luJzonXFx1MjIwOCcsJ2luY2FyZSc6J1xcdTIxMDUnLCdpbmZpbic6J1xcdTIyMUUnLCdpbmZpbnRpZSc6J1xcdTI5REQnLCdpbm9kb3QnOidcXHUwMTMxJywnaW50JzonXFx1MjIyQicsJ0ludCc6J1xcdTIyMkMnLCdpbnRjYWwnOidcXHUyMkJBJywnaW50ZWdlcnMnOidcXHUyMTI0JywnSW50ZWdyYWwnOidcXHUyMjJCJywnaW50ZXJjYWwnOidcXHUyMkJBJywnSW50ZXJzZWN0aW9uJzonXFx1MjJDMicsJ2ludGxhcmhrJzonXFx1MkExNycsJ2ludHByb2QnOidcXHUyQTNDJywnSW52aXNpYmxlQ29tbWEnOidcXHUyMDYzJywnSW52aXNpYmxlVGltZXMnOidcXHUyMDYyJywnaW9jeSc6J1xcdTA0NTEnLCdJT2N5JzonXFx1MDQwMScsJ2lvZ29uJzonXFx1MDEyRicsJ0lvZ29uJzonXFx1MDEyRScsJ2lvcGYnOidcXHVEODM1XFx1REQ1QScsJ0lvcGYnOidcXHVEODM1XFx1REQ0MCcsJ2lvdGEnOidcXHUwM0I5JywnSW90YSc6J1xcdTAzOTknLCdpcHJvZCc6J1xcdTJBM0MnLCdpcXVlc3QnOidcXHhCRicsJ2lzY3InOidcXHVEODM1XFx1RENCRScsJ0lzY3InOidcXHUyMTEwJywnaXNpbic6J1xcdTIyMDgnLCdpc2luZG90JzonXFx1MjJGNScsJ2lzaW5FJzonXFx1MjJGOScsJ2lzaW5zJzonXFx1MjJGNCcsJ2lzaW5zdic6J1xcdTIyRjMnLCdpc2ludic6J1xcdTIyMDgnLCdpdCc6J1xcdTIwNjInLCdpdGlsZGUnOidcXHUwMTI5JywnSXRpbGRlJzonXFx1MDEyOCcsJ2l1a2N5JzonXFx1MDQ1NicsJ0l1a2N5JzonXFx1MDQwNicsJ2l1bWwnOidcXHhFRicsJ0l1bWwnOidcXHhDRicsJ2pjaXJjJzonXFx1MDEzNScsJ0pjaXJjJzonXFx1MDEzNCcsJ2pjeSc6J1xcdTA0MzknLCdKY3knOidcXHUwNDE5JywnamZyJzonXFx1RDgzNVxcdUREMjcnLCdKZnInOidcXHVEODM1XFx1REQwRCcsJ2ptYXRoJzonXFx1MDIzNycsJ2pvcGYnOidcXHVEODM1XFx1REQ1QicsJ0pvcGYnOidcXHVEODM1XFx1REQ0MScsJ2pzY3InOidcXHVEODM1XFx1RENCRicsJ0pzY3InOidcXHVEODM1XFx1RENBNScsJ2pzZXJjeSc6J1xcdTA0NTgnLCdKc2VyY3knOidcXHUwNDA4JywnanVrY3knOidcXHUwNDU0JywnSnVrY3knOidcXHUwNDA0Jywna2FwcGEnOidcXHUwM0JBJywnS2FwcGEnOidcXHUwMzlBJywna2FwcGF2JzonXFx1MDNGMCcsJ2tjZWRpbCc6J1xcdTAxMzcnLCdLY2VkaWwnOidcXHUwMTM2Jywna2N5JzonXFx1MDQzQScsJ0tjeSc6J1xcdTA0MUEnLCdrZnInOidcXHVEODM1XFx1REQyOCcsJ0tmcic6J1xcdUQ4MzVcXHVERDBFJywna2dyZWVuJzonXFx1MDEzOCcsJ2toY3knOidcXHUwNDQ1JywnS0hjeSc6J1xcdTA0MjUnLCdramN5JzonXFx1MDQ1QycsJ0tKY3knOidcXHUwNDBDJywna29wZic6J1xcdUQ4MzVcXHVERDVDJywnS29wZic6J1xcdUQ4MzVcXHVERDQyJywna3Njcic6J1xcdUQ4MzVcXHVEQ0MwJywnS3Njcic6J1xcdUQ4MzVcXHVEQ0E2JywnbEFhcnInOidcXHUyMURBJywnbGFjdXRlJzonXFx1MDEzQScsJ0xhY3V0ZSc6J1xcdTAxMzknLCdsYWVtcHR5dic6J1xcdTI5QjQnLCdsYWdyYW4nOidcXHUyMTEyJywnbGFtYmRhJzonXFx1MDNCQicsJ0xhbWJkYSc6J1xcdTAzOUInLCdsYW5nJzonXFx1MjdFOCcsJ0xhbmcnOidcXHUyN0VBJywnbGFuZ2QnOidcXHUyOTkxJywnbGFuZ2xlJzonXFx1MjdFOCcsJ2xhcCc6J1xcdTJBODUnLCdMYXBsYWNldHJmJzonXFx1MjExMicsJ2xhcXVvJzonXFx4QUInLCdsYXJyJzonXFx1MjE5MCcsJ2xBcnInOidcXHUyMUQwJywnTGFycic6J1xcdTIxOUUnLCdsYXJyYic6J1xcdTIxRTQnLCdsYXJyYmZzJzonXFx1MjkxRicsJ2xhcnJmcyc6J1xcdTI5MUQnLCdsYXJyaGsnOidcXHUyMUE5JywnbGFycmxwJzonXFx1MjFBQicsJ2xhcnJwbCc6J1xcdTI5MzknLCdsYXJyc2ltJzonXFx1Mjk3MycsJ2xhcnJ0bCc6J1xcdTIxQTInLCdsYXQnOidcXHUyQUFCJywnbGF0YWlsJzonXFx1MjkxOScsJ2xBdGFpbCc6J1xcdTI5MUInLCdsYXRlJzonXFx1MkFBRCcsJ2xhdGVzJzonXFx1MkFBRFxcdUZFMDAnLCdsYmFycic6J1xcdTI5MEMnLCdsQmFycic6J1xcdTI5MEUnLCdsYmJyayc6J1xcdTI3NzInLCdsYnJhY2UnOid7JywnbGJyYWNrJzonWycsJ2xicmtlJzonXFx1Mjk4QicsJ2xicmtzbGQnOidcXHUyOThGJywnbGJya3NsdSc6J1xcdTI5OEQnLCdsY2Fyb24nOidcXHUwMTNFJywnTGNhcm9uJzonXFx1MDEzRCcsJ2xjZWRpbCc6J1xcdTAxM0MnLCdMY2VkaWwnOidcXHUwMTNCJywnbGNlaWwnOidcXHUyMzA4JywnbGN1Yic6J3snLCdsY3knOidcXHUwNDNCJywnTGN5JzonXFx1MDQxQicsJ2xkY2EnOidcXHUyOTM2JywnbGRxdW8nOidcXHUyMDFDJywnbGRxdW9yJzonXFx1MjAxRScsJ2xkcmRoYXInOidcXHUyOTY3JywnbGRydXNoYXInOidcXHUyOTRCJywnbGRzaCc6J1xcdTIxQjInLCdsZSc6J1xcdTIyNjQnLCdsRSc6J1xcdTIyNjYnLCdMZWZ0QW5nbGVCcmFja2V0JzonXFx1MjdFOCcsJ2xlZnRhcnJvdyc6J1xcdTIxOTAnLCdMZWZ0YXJyb3cnOidcXHUyMUQwJywnTGVmdEFycm93JzonXFx1MjE5MCcsJ0xlZnRBcnJvd0Jhcic6J1xcdTIxRTQnLCdMZWZ0QXJyb3dSaWdodEFycm93JzonXFx1MjFDNicsJ2xlZnRhcnJvd3RhaWwnOidcXHUyMUEyJywnTGVmdENlaWxpbmcnOidcXHUyMzA4JywnTGVmdERvdWJsZUJyYWNrZXQnOidcXHUyN0U2JywnTGVmdERvd25UZWVWZWN0b3InOidcXHUyOTYxJywnTGVmdERvd25WZWN0b3InOidcXHUyMUMzJywnTGVmdERvd25WZWN0b3JCYXInOidcXHUyOTU5JywnTGVmdEZsb29yJzonXFx1MjMwQScsJ2xlZnRoYXJwb29uZG93bic6J1xcdTIxQkQnLCdsZWZ0aGFycG9vbnVwJzonXFx1MjFCQycsJ2xlZnRsZWZ0YXJyb3dzJzonXFx1MjFDNycsJ2xlZnRyaWdodGFycm93JzonXFx1MjE5NCcsJ0xlZnRyaWdodGFycm93JzonXFx1MjFENCcsJ0xlZnRSaWdodEFycm93JzonXFx1MjE5NCcsJ2xlZnRyaWdodGFycm93cyc6J1xcdTIxQzYnLCdsZWZ0cmlnaHRoYXJwb29ucyc6J1xcdTIxQ0InLCdsZWZ0cmlnaHRzcXVpZ2Fycm93JzonXFx1MjFBRCcsJ0xlZnRSaWdodFZlY3Rvcic6J1xcdTI5NEUnLCdMZWZ0VGVlJzonXFx1MjJBMycsJ0xlZnRUZWVBcnJvdyc6J1xcdTIxQTQnLCdMZWZ0VGVlVmVjdG9yJzonXFx1Mjk1QScsJ2xlZnR0aHJlZXRpbWVzJzonXFx1MjJDQicsJ0xlZnRUcmlhbmdsZSc6J1xcdTIyQjInLCdMZWZ0VHJpYW5nbGVCYXInOidcXHUyOUNGJywnTGVmdFRyaWFuZ2xlRXF1YWwnOidcXHUyMkI0JywnTGVmdFVwRG93blZlY3Rvcic6J1xcdTI5NTEnLCdMZWZ0VXBUZWVWZWN0b3InOidcXHUyOTYwJywnTGVmdFVwVmVjdG9yJzonXFx1MjFCRicsJ0xlZnRVcFZlY3RvckJhcic6J1xcdTI5NTgnLCdMZWZ0VmVjdG9yJzonXFx1MjFCQycsJ0xlZnRWZWN0b3JCYXInOidcXHUyOTUyJywnbGVnJzonXFx1MjJEQScsJ2xFZyc6J1xcdTJBOEInLCdsZXEnOidcXHUyMjY0JywnbGVxcSc6J1xcdTIyNjYnLCdsZXFzbGFudCc6J1xcdTJBN0QnLCdsZXMnOidcXHUyQTdEJywnbGVzY2MnOidcXHUyQUE4JywnbGVzZG90JzonXFx1MkE3RicsJ2xlc2RvdG8nOidcXHUyQTgxJywnbGVzZG90b3InOidcXHUyQTgzJywnbGVzZyc6J1xcdTIyREFcXHVGRTAwJywnbGVzZ2VzJzonXFx1MkE5MycsJ2xlc3NhcHByb3gnOidcXHUyQTg1JywnbGVzc2RvdCc6J1xcdTIyRDYnLCdsZXNzZXFndHInOidcXHUyMkRBJywnbGVzc2VxcWd0cic6J1xcdTJBOEInLCdMZXNzRXF1YWxHcmVhdGVyJzonXFx1MjJEQScsJ0xlc3NGdWxsRXF1YWwnOidcXHUyMjY2JywnTGVzc0dyZWF0ZXInOidcXHUyMjc2JywnbGVzc2d0cic6J1xcdTIyNzYnLCdMZXNzTGVzcyc6J1xcdTJBQTEnLCdsZXNzc2ltJzonXFx1MjI3MicsJ0xlc3NTbGFudEVxdWFsJzonXFx1MkE3RCcsJ0xlc3NUaWxkZSc6J1xcdTIyNzInLCdsZmlzaHQnOidcXHUyOTdDJywnbGZsb29yJzonXFx1MjMwQScsJ2xmcic6J1xcdUQ4MzVcXHVERDI5JywnTGZyJzonXFx1RDgzNVxcdUREMEYnLCdsZyc6J1xcdTIyNzYnLCdsZ0UnOidcXHUyQTkxJywnbEhhcic6J1xcdTI5NjInLCdsaGFyZCc6J1xcdTIxQkQnLCdsaGFydSc6J1xcdTIxQkMnLCdsaGFydWwnOidcXHUyOTZBJywnbGhibGsnOidcXHUyNTg0JywnbGpjeSc6J1xcdTA0NTknLCdMSmN5JzonXFx1MDQwOScsJ2xsJzonXFx1MjI2QScsJ0xsJzonXFx1MjJEOCcsJ2xsYXJyJzonXFx1MjFDNycsJ2xsY29ybmVyJzonXFx1MjMxRScsJ0xsZWZ0YXJyb3cnOidcXHUyMURBJywnbGxoYXJkJzonXFx1Mjk2QicsJ2xsdHJpJzonXFx1MjVGQScsJ2xtaWRvdCc6J1xcdTAxNDAnLCdMbWlkb3QnOidcXHUwMTNGJywnbG1vdXN0JzonXFx1MjNCMCcsJ2xtb3VzdGFjaGUnOidcXHUyM0IwJywnbG5hcCc6J1xcdTJBODknLCdsbmFwcHJveCc6J1xcdTJBODknLCdsbmUnOidcXHUyQTg3JywnbG5FJzonXFx1MjI2OCcsJ2xuZXEnOidcXHUyQTg3JywnbG5lcXEnOidcXHUyMjY4JywnbG5zaW0nOidcXHUyMkU2JywnbG9hbmcnOidcXHUyN0VDJywnbG9hcnInOidcXHUyMUZEJywnbG9icmsnOidcXHUyN0U2JywnbG9uZ2xlZnRhcnJvdyc6J1xcdTI3RjUnLCdMb25nbGVmdGFycm93JzonXFx1MjdGOCcsJ0xvbmdMZWZ0QXJyb3cnOidcXHUyN0Y1JywnbG9uZ2xlZnRyaWdodGFycm93JzonXFx1MjdGNycsJ0xvbmdsZWZ0cmlnaHRhcnJvdyc6J1xcdTI3RkEnLCdMb25nTGVmdFJpZ2h0QXJyb3cnOidcXHUyN0Y3JywnbG9uZ21hcHN0byc6J1xcdTI3RkMnLCdsb25ncmlnaHRhcnJvdyc6J1xcdTI3RjYnLCdMb25ncmlnaHRhcnJvdyc6J1xcdTI3RjknLCdMb25nUmlnaHRBcnJvdyc6J1xcdTI3RjYnLCdsb29wYXJyb3dsZWZ0JzonXFx1MjFBQicsJ2xvb3BhcnJvd3JpZ2h0JzonXFx1MjFBQycsJ2xvcGFyJzonXFx1Mjk4NScsJ2xvcGYnOidcXHVEODM1XFx1REQ1RCcsJ0xvcGYnOidcXHVEODM1XFx1REQ0MycsJ2xvcGx1cyc6J1xcdTJBMkQnLCdsb3RpbWVzJzonXFx1MkEzNCcsJ2xvd2FzdCc6J1xcdTIyMTcnLCdsb3diYXInOidfJywnTG93ZXJMZWZ0QXJyb3cnOidcXHUyMTk5JywnTG93ZXJSaWdodEFycm93JzonXFx1MjE5OCcsJ2xveic6J1xcdTI1Q0EnLCdsb3plbmdlJzonXFx1MjVDQScsJ2xvemYnOidcXHUyOUVCJywnbHBhcic6JygnLCdscGFybHQnOidcXHUyOTkzJywnbHJhcnInOidcXHUyMUM2JywnbHJjb3JuZXInOidcXHUyMzFGJywnbHJoYXInOidcXHUyMUNCJywnbHJoYXJkJzonXFx1Mjk2RCcsJ2xybSc6J1xcdTIwMEUnLCdscnRyaSc6J1xcdTIyQkYnLCdsc2FxdW8nOidcXHUyMDM5JywnbHNjcic6J1xcdUQ4MzVcXHVEQ0MxJywnTHNjcic6J1xcdTIxMTInLCdsc2gnOidcXHUyMUIwJywnTHNoJzonXFx1MjFCMCcsJ2xzaW0nOidcXHUyMjcyJywnbHNpbWUnOidcXHUyQThEJywnbHNpbWcnOidcXHUyQThGJywnbHNxYic6J1snLCdsc3F1byc6J1xcdTIwMTgnLCdsc3F1b3InOidcXHUyMDFBJywnbHN0cm9rJzonXFx1MDE0MicsJ0xzdHJvayc6J1xcdTAxNDEnLCdsdCc6JzwnLCdMdCc6J1xcdTIyNkEnLCdMVCc6JzwnLCdsdGNjJzonXFx1MkFBNicsJ2x0Y2lyJzonXFx1MkE3OScsJ2x0ZG90JzonXFx1MjJENicsJ2x0aHJlZSc6J1xcdTIyQ0InLCdsdGltZXMnOidcXHUyMkM5JywnbHRsYXJyJzonXFx1Mjk3NicsJ2x0cXVlc3QnOidcXHUyQTdCJywnbHRyaSc6J1xcdTI1QzMnLCdsdHJpZSc6J1xcdTIyQjQnLCdsdHJpZic6J1xcdTI1QzInLCdsdHJQYXInOidcXHUyOTk2JywnbHVyZHNoYXInOidcXHUyOTRBJywnbHVydWhhcic6J1xcdTI5NjYnLCdsdmVydG5lcXEnOidcXHUyMjY4XFx1RkUwMCcsJ2x2bkUnOidcXHUyMjY4XFx1RkUwMCcsJ21hY3InOidcXHhBRicsJ21hbGUnOidcXHUyNjQyJywnbWFsdCc6J1xcdTI3MjAnLCdtYWx0ZXNlJzonXFx1MjcyMCcsJ21hcCc6J1xcdTIxQTYnLCdNYXAnOidcXHUyOTA1JywnbWFwc3RvJzonXFx1MjFBNicsJ21hcHN0b2Rvd24nOidcXHUyMUE3JywnbWFwc3RvbGVmdCc6J1xcdTIxQTQnLCdtYXBzdG91cCc6J1xcdTIxQTUnLCdtYXJrZXInOidcXHUyNUFFJywnbWNvbW1hJzonXFx1MkEyOScsJ21jeSc6J1xcdTA0M0MnLCdNY3knOidcXHUwNDFDJywnbWRhc2gnOidcXHUyMDE0JywnbUREb3QnOidcXHUyMjNBJywnbWVhc3VyZWRhbmdsZSc6J1xcdTIyMjEnLCdNZWRpdW1TcGFjZSc6J1xcdTIwNUYnLCdNZWxsaW50cmYnOidcXHUyMTMzJywnbWZyJzonXFx1RDgzNVxcdUREMkEnLCdNZnInOidcXHVEODM1XFx1REQxMCcsJ21obyc6J1xcdTIxMjcnLCdtaWNybyc6J1xceEI1JywnbWlkJzonXFx1MjIyMycsJ21pZGFzdCc6JyonLCdtaWRjaXInOidcXHUyQUYwJywnbWlkZG90JzonXFx4QjcnLCdtaW51cyc6J1xcdTIyMTInLCdtaW51c2InOidcXHUyMjlGJywnbWludXNkJzonXFx1MjIzOCcsJ21pbnVzZHUnOidcXHUyQTJBJywnTWludXNQbHVzJzonXFx1MjIxMycsJ21sY3AnOidcXHUyQURCJywnbWxkcic6J1xcdTIwMjYnLCdtbnBsdXMnOidcXHUyMjEzJywnbW9kZWxzJzonXFx1MjJBNycsJ21vcGYnOidcXHVEODM1XFx1REQ1RScsJ01vcGYnOidcXHVEODM1XFx1REQ0NCcsJ21wJzonXFx1MjIxMycsJ21zY3InOidcXHVEODM1XFx1RENDMicsJ01zY3InOidcXHUyMTMzJywnbXN0cG9zJzonXFx1MjIzRScsJ211JzonXFx1MDNCQycsJ011JzonXFx1MDM5QycsJ211bHRpbWFwJzonXFx1MjJCOCcsJ211bWFwJzonXFx1MjJCOCcsJ25hYmxhJzonXFx1MjIwNycsJ25hY3V0ZSc6J1xcdTAxNDQnLCdOYWN1dGUnOidcXHUwMTQzJywnbmFuZyc6J1xcdTIyMjBcXHUyMEQyJywnbmFwJzonXFx1MjI0OScsJ25hcEUnOidcXHUyQTcwXFx1MDMzOCcsJ25hcGlkJzonXFx1MjI0QlxcdTAzMzgnLCduYXBvcyc6J1xcdTAxNDknLCduYXBwcm94JzonXFx1MjI0OScsJ25hdHVyJzonXFx1MjY2RScsJ25hdHVyYWwnOidcXHUyNjZFJywnbmF0dXJhbHMnOidcXHUyMTE1JywnbmJzcCc6J1xceEEwJywnbmJ1bXAnOidcXHUyMjRFXFx1MDMzOCcsJ25idW1wZSc6J1xcdTIyNEZcXHUwMzM4JywnbmNhcCc6J1xcdTJBNDMnLCduY2Fyb24nOidcXHUwMTQ4JywnTmNhcm9uJzonXFx1MDE0NycsJ25jZWRpbCc6J1xcdTAxNDYnLCdOY2VkaWwnOidcXHUwMTQ1JywnbmNvbmcnOidcXHUyMjQ3JywnbmNvbmdkb3QnOidcXHUyQTZEXFx1MDMzOCcsJ25jdXAnOidcXHUyQTQyJywnbmN5JzonXFx1MDQzRCcsJ05jeSc6J1xcdTA0MUQnLCduZGFzaCc6J1xcdTIwMTMnLCduZSc6J1xcdTIyNjAnLCduZWFyaGsnOidcXHUyOTI0JywnbmVhcnInOidcXHUyMTk3JywnbmVBcnInOidcXHUyMUQ3JywnbmVhcnJvdyc6J1xcdTIxOTcnLCduZWRvdCc6J1xcdTIyNTBcXHUwMzM4JywnTmVnYXRpdmVNZWRpdW1TcGFjZSc6J1xcdTIwMEInLCdOZWdhdGl2ZVRoaWNrU3BhY2UnOidcXHUyMDBCJywnTmVnYXRpdmVUaGluU3BhY2UnOidcXHUyMDBCJywnTmVnYXRpdmVWZXJ5VGhpblNwYWNlJzonXFx1MjAwQicsJ25lcXVpdic6J1xcdTIyNjInLCduZXNlYXInOidcXHUyOTI4JywnbmVzaW0nOidcXHUyMjQyXFx1MDMzOCcsJ05lc3RlZEdyZWF0ZXJHcmVhdGVyJzonXFx1MjI2QicsJ05lc3RlZExlc3NMZXNzJzonXFx1MjI2QScsJ05ld0xpbmUnOidcXG4nLCduZXhpc3QnOidcXHUyMjA0JywnbmV4aXN0cyc6J1xcdTIyMDQnLCduZnInOidcXHVEODM1XFx1REQyQicsJ05mcic6J1xcdUQ4MzVcXHVERDExJywnbmdlJzonXFx1MjI3MScsJ25nRSc6J1xcdTIyNjdcXHUwMzM4JywnbmdlcSc6J1xcdTIyNzEnLCduZ2VxcSc6J1xcdTIyNjdcXHUwMzM4JywnbmdlcXNsYW50JzonXFx1MkE3RVxcdTAzMzgnLCduZ2VzJzonXFx1MkE3RVxcdTAzMzgnLCduR2cnOidcXHUyMkQ5XFx1MDMzOCcsJ25nc2ltJzonXFx1MjI3NScsJ25ndCc6J1xcdTIyNkYnLCduR3QnOidcXHUyMjZCXFx1MjBEMicsJ25ndHInOidcXHUyMjZGJywnbkd0dic6J1xcdTIyNkJcXHUwMzM4JywnbmhhcnInOidcXHUyMUFFJywnbmhBcnInOidcXHUyMUNFJywnbmhwYXInOidcXHUyQUYyJywnbmknOidcXHUyMjBCJywnbmlzJzonXFx1MjJGQycsJ25pc2QnOidcXHUyMkZBJywnbml2JzonXFx1MjIwQicsJ25qY3knOidcXHUwNDVBJywnTkpjeSc6J1xcdTA0MEEnLCdubGFycic6J1xcdTIxOUEnLCdubEFycic6J1xcdTIxQ0QnLCdubGRyJzonXFx1MjAyNScsJ25sZSc6J1xcdTIyNzAnLCdubEUnOidcXHUyMjY2XFx1MDMzOCcsJ25sZWZ0YXJyb3cnOidcXHUyMTlBJywnbkxlZnRhcnJvdyc6J1xcdTIxQ0QnLCdubGVmdHJpZ2h0YXJyb3cnOidcXHUyMUFFJywnbkxlZnRyaWdodGFycm93JzonXFx1MjFDRScsJ25sZXEnOidcXHUyMjcwJywnbmxlcXEnOidcXHUyMjY2XFx1MDMzOCcsJ25sZXFzbGFudCc6J1xcdTJBN0RcXHUwMzM4Jywnbmxlcyc6J1xcdTJBN0RcXHUwMzM4Jywnbmxlc3MnOidcXHUyMjZFJywnbkxsJzonXFx1MjJEOFxcdTAzMzgnLCdubHNpbSc6J1xcdTIyNzQnLCdubHQnOidcXHUyMjZFJywnbkx0JzonXFx1MjI2QVxcdTIwRDInLCdubHRyaSc6J1xcdTIyRUEnLCdubHRyaWUnOidcXHUyMkVDJywnbkx0dic6J1xcdTIyNkFcXHUwMzM4Jywnbm1pZCc6J1xcdTIyMjQnLCdOb0JyZWFrJzonXFx1MjA2MCcsJ05vbkJyZWFraW5nU3BhY2UnOidcXHhBMCcsJ25vcGYnOidcXHVEODM1XFx1REQ1RicsJ05vcGYnOidcXHUyMTE1Jywnbm90JzonXFx4QUMnLCdOb3QnOidcXHUyQUVDJywnTm90Q29uZ3J1ZW50JzonXFx1MjI2MicsJ05vdEN1cENhcCc6J1xcdTIyNkQnLCdOb3REb3VibGVWZXJ0aWNhbEJhcic6J1xcdTIyMjYnLCdOb3RFbGVtZW50JzonXFx1MjIwOScsJ05vdEVxdWFsJzonXFx1MjI2MCcsJ05vdEVxdWFsVGlsZGUnOidcXHUyMjQyXFx1MDMzOCcsJ05vdEV4aXN0cyc6J1xcdTIyMDQnLCdOb3RHcmVhdGVyJzonXFx1MjI2RicsJ05vdEdyZWF0ZXJFcXVhbCc6J1xcdTIyNzEnLCdOb3RHcmVhdGVyRnVsbEVxdWFsJzonXFx1MjI2N1xcdTAzMzgnLCdOb3RHcmVhdGVyR3JlYXRlcic6J1xcdTIyNkJcXHUwMzM4JywnTm90R3JlYXRlckxlc3MnOidcXHUyMjc5JywnTm90R3JlYXRlclNsYW50RXF1YWwnOidcXHUyQTdFXFx1MDMzOCcsJ05vdEdyZWF0ZXJUaWxkZSc6J1xcdTIyNzUnLCdOb3RIdW1wRG93bkh1bXAnOidcXHUyMjRFXFx1MDMzOCcsJ05vdEh1bXBFcXVhbCc6J1xcdTIyNEZcXHUwMzM4Jywnbm90aW4nOidcXHUyMjA5Jywnbm90aW5kb3QnOidcXHUyMkY1XFx1MDMzOCcsJ25vdGluRSc6J1xcdTIyRjlcXHUwMzM4Jywnbm90aW52YSc6J1xcdTIyMDknLCdub3RpbnZiJzonXFx1MjJGNycsJ25vdGludmMnOidcXHUyMkY2JywnTm90TGVmdFRyaWFuZ2xlJzonXFx1MjJFQScsJ05vdExlZnRUcmlhbmdsZUJhcic6J1xcdTI5Q0ZcXHUwMzM4JywnTm90TGVmdFRyaWFuZ2xlRXF1YWwnOidcXHUyMkVDJywnTm90TGVzcyc6J1xcdTIyNkUnLCdOb3RMZXNzRXF1YWwnOidcXHUyMjcwJywnTm90TGVzc0dyZWF0ZXInOidcXHUyMjc4JywnTm90TGVzc0xlc3MnOidcXHUyMjZBXFx1MDMzOCcsJ05vdExlc3NTbGFudEVxdWFsJzonXFx1MkE3RFxcdTAzMzgnLCdOb3RMZXNzVGlsZGUnOidcXHUyMjc0JywnTm90TmVzdGVkR3JlYXRlckdyZWF0ZXInOidcXHUyQUEyXFx1MDMzOCcsJ05vdE5lc3RlZExlc3NMZXNzJzonXFx1MkFBMVxcdTAzMzgnLCdub3RuaSc6J1xcdTIyMEMnLCdub3RuaXZhJzonXFx1MjIwQycsJ25vdG5pdmInOidcXHUyMkZFJywnbm90bml2Yyc6J1xcdTIyRkQnLCdOb3RQcmVjZWRlcyc6J1xcdTIyODAnLCdOb3RQcmVjZWRlc0VxdWFsJzonXFx1MkFBRlxcdTAzMzgnLCdOb3RQcmVjZWRlc1NsYW50RXF1YWwnOidcXHUyMkUwJywnTm90UmV2ZXJzZUVsZW1lbnQnOidcXHUyMjBDJywnTm90UmlnaHRUcmlhbmdsZSc6J1xcdTIyRUInLCdOb3RSaWdodFRyaWFuZ2xlQmFyJzonXFx1MjlEMFxcdTAzMzgnLCdOb3RSaWdodFRyaWFuZ2xlRXF1YWwnOidcXHUyMkVEJywnTm90U3F1YXJlU3Vic2V0JzonXFx1MjI4RlxcdTAzMzgnLCdOb3RTcXVhcmVTdWJzZXRFcXVhbCc6J1xcdTIyRTInLCdOb3RTcXVhcmVTdXBlcnNldCc6J1xcdTIyOTBcXHUwMzM4JywnTm90U3F1YXJlU3VwZXJzZXRFcXVhbCc6J1xcdTIyRTMnLCdOb3RTdWJzZXQnOidcXHUyMjgyXFx1MjBEMicsJ05vdFN1YnNldEVxdWFsJzonXFx1MjI4OCcsJ05vdFN1Y2NlZWRzJzonXFx1MjI4MScsJ05vdFN1Y2NlZWRzRXF1YWwnOidcXHUyQUIwXFx1MDMzOCcsJ05vdFN1Y2NlZWRzU2xhbnRFcXVhbCc6J1xcdTIyRTEnLCdOb3RTdWNjZWVkc1RpbGRlJzonXFx1MjI3RlxcdTAzMzgnLCdOb3RTdXBlcnNldCc6J1xcdTIyODNcXHUyMEQyJywnTm90U3VwZXJzZXRFcXVhbCc6J1xcdTIyODknLCdOb3RUaWxkZSc6J1xcdTIyNDEnLCdOb3RUaWxkZUVxdWFsJzonXFx1MjI0NCcsJ05vdFRpbGRlRnVsbEVxdWFsJzonXFx1MjI0NycsJ05vdFRpbGRlVGlsZGUnOidcXHUyMjQ5JywnTm90VmVydGljYWxCYXInOidcXHUyMjI0JywnbnBhcic6J1xcdTIyMjYnLCducGFyYWxsZWwnOidcXHUyMjI2JywnbnBhcnNsJzonXFx1MkFGRFxcdTIwRTUnLCducGFydCc6J1xcdTIyMDJcXHUwMzM4JywnbnBvbGludCc6J1xcdTJBMTQnLCducHInOidcXHUyMjgwJywnbnByY3VlJzonXFx1MjJFMCcsJ25wcmUnOidcXHUyQUFGXFx1MDMzOCcsJ25wcmVjJzonXFx1MjI4MCcsJ25wcmVjZXEnOidcXHUyQUFGXFx1MDMzOCcsJ25yYXJyJzonXFx1MjE5QicsJ25yQXJyJzonXFx1MjFDRicsJ25yYXJyYyc6J1xcdTI5MzNcXHUwMzM4JywnbnJhcnJ3JzonXFx1MjE5RFxcdTAzMzgnLCducmlnaHRhcnJvdyc6J1xcdTIxOUInLCduUmlnaHRhcnJvdyc6J1xcdTIxQ0YnLCducnRyaSc6J1xcdTIyRUInLCducnRyaWUnOidcXHUyMkVEJywnbnNjJzonXFx1MjI4MScsJ25zY2N1ZSc6J1xcdTIyRTEnLCduc2NlJzonXFx1MkFCMFxcdTAzMzgnLCduc2NyJzonXFx1RDgzNVxcdURDQzMnLCdOc2NyJzonXFx1RDgzNVxcdURDQTknLCduc2hvcnRtaWQnOidcXHUyMjI0JywnbnNob3J0cGFyYWxsZWwnOidcXHUyMjI2JywnbnNpbSc6J1xcdTIyNDEnLCduc2ltZSc6J1xcdTIyNDQnLCduc2ltZXEnOidcXHUyMjQ0JywnbnNtaWQnOidcXHUyMjI0JywnbnNwYXInOidcXHUyMjI2JywnbnNxc3ViZSc6J1xcdTIyRTInLCduc3FzdXBlJzonXFx1MjJFMycsJ25zdWInOidcXHUyMjg0JywnbnN1YmUnOidcXHUyMjg4JywnbnN1YkUnOidcXHUyQUM1XFx1MDMzOCcsJ25zdWJzZXQnOidcXHUyMjgyXFx1MjBEMicsJ25zdWJzZXRlcSc6J1xcdTIyODgnLCduc3Vic2V0ZXFxJzonXFx1MkFDNVxcdTAzMzgnLCduc3VjYyc6J1xcdTIyODEnLCduc3VjY2VxJzonXFx1MkFCMFxcdTAzMzgnLCduc3VwJzonXFx1MjI4NScsJ25zdXBlJzonXFx1MjI4OScsJ25zdXBFJzonXFx1MkFDNlxcdTAzMzgnLCduc3Vwc2V0JzonXFx1MjI4M1xcdTIwRDInLCduc3Vwc2V0ZXEnOidcXHUyMjg5JywnbnN1cHNldGVxcSc6J1xcdTJBQzZcXHUwMzM4JywnbnRnbCc6J1xcdTIyNzknLCdudGlsZGUnOidcXHhGMScsJ050aWxkZSc6J1xceEQxJywnbnRsZyc6J1xcdTIyNzgnLCdudHJpYW5nbGVsZWZ0JzonXFx1MjJFQScsJ250cmlhbmdsZWxlZnRlcSc6J1xcdTIyRUMnLCdudHJpYW5nbGVyaWdodCc6J1xcdTIyRUInLCdudHJpYW5nbGVyaWdodGVxJzonXFx1MjJFRCcsJ251JzonXFx1MDNCRCcsJ051JzonXFx1MDM5RCcsJ251bSc6JyMnLCdudW1lcm8nOidcXHUyMTE2JywnbnVtc3AnOidcXHUyMDA3JywnbnZhcCc6J1xcdTIyNERcXHUyMEQyJywnbnZkYXNoJzonXFx1MjJBQycsJ252RGFzaCc6J1xcdTIyQUQnLCduVmRhc2gnOidcXHUyMkFFJywnblZEYXNoJzonXFx1MjJBRicsJ252Z2UnOidcXHUyMjY1XFx1MjBEMicsJ252Z3QnOic+XFx1MjBEMicsJ252SGFycic6J1xcdTI5MDQnLCdudmluZmluJzonXFx1MjlERScsJ252bEFycic6J1xcdTI5MDInLCdudmxlJzonXFx1MjI2NFxcdTIwRDInLCdudmx0JzonPFxcdTIwRDInLCdudmx0cmllJzonXFx1MjJCNFxcdTIwRDInLCdudnJBcnInOidcXHUyOTAzJywnbnZydHJpZSc6J1xcdTIyQjVcXHUyMEQyJywnbnZzaW0nOidcXHUyMjNDXFx1MjBEMicsJ253YXJoayc6J1xcdTI5MjMnLCdud2Fycic6J1xcdTIxOTYnLCdud0Fycic6J1xcdTIxRDYnLCdud2Fycm93JzonXFx1MjE5NicsJ253bmVhcic6J1xcdTI5MjcnLCdvYWN1dGUnOidcXHhGMycsJ09hY3V0ZSc6J1xceEQzJywnb2FzdCc6J1xcdTIyOUInLCdvY2lyJzonXFx1MjI5QScsJ29jaXJjJzonXFx4RjQnLCdPY2lyYyc6J1xceEQ0Jywnb2N5JzonXFx1MDQzRScsJ09jeSc6J1xcdTA0MUUnLCdvZGFzaCc6J1xcdTIyOUQnLCdvZGJsYWMnOidcXHUwMTUxJywnT2RibGFjJzonXFx1MDE1MCcsJ29kaXYnOidcXHUyQTM4Jywnb2RvdCc6J1xcdTIyOTknLCdvZHNvbGQnOidcXHUyOUJDJywnb2VsaWcnOidcXHUwMTUzJywnT0VsaWcnOidcXHUwMTUyJywnb2ZjaXInOidcXHUyOUJGJywnb2ZyJzonXFx1RDgzNVxcdUREMkMnLCdPZnInOidcXHVEODM1XFx1REQxMicsJ29nb24nOidcXHUwMkRCJywnb2dyYXZlJzonXFx4RjInLCdPZ3JhdmUnOidcXHhEMicsJ29ndCc6J1xcdTI5QzEnLCdvaGJhcic6J1xcdTI5QjUnLCdvaG0nOidcXHUwM0E5Jywnb2ludCc6J1xcdTIyMkUnLCdvbGFycic6J1xcdTIxQkEnLCdvbGNpcic6J1xcdTI5QkUnLCdvbGNyb3NzJzonXFx1MjlCQicsJ29saW5lJzonXFx1MjAzRScsJ29sdCc6J1xcdTI5QzAnLCdvbWFjcic6J1xcdTAxNEQnLCdPbWFjcic6J1xcdTAxNEMnLCdvbWVnYSc6J1xcdTAzQzknLCdPbWVnYSc6J1xcdTAzQTknLCdvbWljcm9uJzonXFx1MDNCRicsJ09taWNyb24nOidcXHUwMzlGJywnb21pZCc6J1xcdTI5QjYnLCdvbWludXMnOidcXHUyMjk2Jywnb29wZic6J1xcdUQ4MzVcXHVERDYwJywnT29wZic6J1xcdUQ4MzVcXHVERDQ2Jywnb3Bhcic6J1xcdTI5QjcnLCdPcGVuQ3VybHlEb3VibGVRdW90ZSc6J1xcdTIwMUMnLCdPcGVuQ3VybHlRdW90ZSc6J1xcdTIwMTgnLCdvcGVycCc6J1xcdTI5QjknLCdvcGx1cyc6J1xcdTIyOTUnLCdvcic6J1xcdTIyMjgnLCdPcic6J1xcdTJBNTQnLCdvcmFycic6J1xcdTIxQkInLCdvcmQnOidcXHUyQTVEJywnb3JkZXInOidcXHUyMTM0Jywnb3JkZXJvZic6J1xcdTIxMzQnLCdvcmRmJzonXFx4QUEnLCdvcmRtJzonXFx4QkEnLCdvcmlnb2YnOidcXHUyMkI2Jywnb3Jvcic6J1xcdTJBNTYnLCdvcnNsb3BlJzonXFx1MkE1NycsJ29ydic6J1xcdTJBNUInLCdvUyc6J1xcdTI0QzgnLCdvc2NyJzonXFx1MjEzNCcsJ09zY3InOidcXHVEODM1XFx1RENBQScsJ29zbGFzaCc6J1xceEY4JywnT3NsYXNoJzonXFx4RDgnLCdvc29sJzonXFx1MjI5OCcsJ290aWxkZSc6J1xceEY1JywnT3RpbGRlJzonXFx4RDUnLCdvdGltZXMnOidcXHUyMjk3JywnT3RpbWVzJzonXFx1MkEzNycsJ290aW1lc2FzJzonXFx1MkEzNicsJ291bWwnOidcXHhGNicsJ091bWwnOidcXHhENicsJ292YmFyJzonXFx1MjMzRCcsJ092ZXJCYXInOidcXHUyMDNFJywnT3ZlckJyYWNlJzonXFx1MjNERScsJ092ZXJCcmFja2V0JzonXFx1MjNCNCcsJ092ZXJQYXJlbnRoZXNpcyc6J1xcdTIzREMnLCdwYXInOidcXHUyMjI1JywncGFyYSc6J1xceEI2JywncGFyYWxsZWwnOidcXHUyMjI1JywncGFyc2ltJzonXFx1MkFGMycsJ3BhcnNsJzonXFx1MkFGRCcsJ3BhcnQnOidcXHUyMjAyJywnUGFydGlhbEQnOidcXHUyMjAyJywncGN5JzonXFx1MDQzRicsJ1BjeSc6J1xcdTA0MUYnLCdwZXJjbnQnOiclJywncGVyaW9kJzonLicsJ3Blcm1pbCc6J1xcdTIwMzAnLCdwZXJwJzonXFx1MjJBNScsJ3BlcnRlbmsnOidcXHUyMDMxJywncGZyJzonXFx1RDgzNVxcdUREMkQnLCdQZnInOidcXHVEODM1XFx1REQxMycsJ3BoaSc6J1xcdTAzQzYnLCdQaGknOidcXHUwM0E2JywncGhpdic6J1xcdTAzRDUnLCdwaG1tYXQnOidcXHUyMTMzJywncGhvbmUnOidcXHUyNjBFJywncGknOidcXHUwM0MwJywnUGknOidcXHUwM0EwJywncGl0Y2hmb3JrJzonXFx1MjJENCcsJ3Bpdic6J1xcdTAzRDYnLCdwbGFuY2snOidcXHUyMTBGJywncGxhbmNraCc6J1xcdTIxMEUnLCdwbGFua3YnOidcXHUyMTBGJywncGx1cyc6JysnLCdwbHVzYWNpcic6J1xcdTJBMjMnLCdwbHVzYic6J1xcdTIyOUUnLCdwbHVzY2lyJzonXFx1MkEyMicsJ3BsdXNkbyc6J1xcdTIyMTQnLCdwbHVzZHUnOidcXHUyQTI1JywncGx1c2UnOidcXHUyQTcyJywnUGx1c01pbnVzJzonXFx4QjEnLCdwbHVzbW4nOidcXHhCMScsJ3BsdXNzaW0nOidcXHUyQTI2JywncGx1c3R3byc6J1xcdTJBMjcnLCdwbSc6J1xceEIxJywnUG9pbmNhcmVwbGFuZSc6J1xcdTIxMEMnLCdwb2ludGludCc6J1xcdTJBMTUnLCdwb3BmJzonXFx1RDgzNVxcdURENjEnLCdQb3BmJzonXFx1MjExOScsJ3BvdW5kJzonXFx4QTMnLCdwcic6J1xcdTIyN0EnLCdQcic6J1xcdTJBQkInLCdwcmFwJzonXFx1MkFCNycsJ3ByY3VlJzonXFx1MjI3QycsJ3ByZSc6J1xcdTJBQUYnLCdwckUnOidcXHUyQUIzJywncHJlYyc6J1xcdTIyN0EnLCdwcmVjYXBwcm94JzonXFx1MkFCNycsJ3ByZWNjdXJseWVxJzonXFx1MjI3QycsJ1ByZWNlZGVzJzonXFx1MjI3QScsJ1ByZWNlZGVzRXF1YWwnOidcXHUyQUFGJywnUHJlY2VkZXNTbGFudEVxdWFsJzonXFx1MjI3QycsJ1ByZWNlZGVzVGlsZGUnOidcXHUyMjdFJywncHJlY2VxJzonXFx1MkFBRicsJ3ByZWNuYXBwcm94JzonXFx1MkFCOScsJ3ByZWNuZXFxJzonXFx1MkFCNScsJ3ByZWNuc2ltJzonXFx1MjJFOCcsJ3ByZWNzaW0nOidcXHUyMjdFJywncHJpbWUnOidcXHUyMDMyJywnUHJpbWUnOidcXHUyMDMzJywncHJpbWVzJzonXFx1MjExOScsJ3BybmFwJzonXFx1MkFCOScsJ3BybkUnOidcXHUyQUI1JywncHJuc2ltJzonXFx1MjJFOCcsJ3Byb2QnOidcXHUyMjBGJywnUHJvZHVjdCc6J1xcdTIyMEYnLCdwcm9mYWxhcic6J1xcdTIzMkUnLCdwcm9mbGluZSc6J1xcdTIzMTInLCdwcm9mc3VyZic6J1xcdTIzMTMnLCdwcm9wJzonXFx1MjIxRCcsJ1Byb3BvcnRpb24nOidcXHUyMjM3JywnUHJvcG9ydGlvbmFsJzonXFx1MjIxRCcsJ3Byb3B0byc6J1xcdTIyMUQnLCdwcnNpbSc6J1xcdTIyN0UnLCdwcnVyZWwnOidcXHUyMkIwJywncHNjcic6J1xcdUQ4MzVcXHVEQ0M1JywnUHNjcic6J1xcdUQ4MzVcXHVEQ0FCJywncHNpJzonXFx1MDNDOCcsJ1BzaSc6J1xcdTAzQTgnLCdwdW5jc3AnOidcXHUyMDA4JywncWZyJzonXFx1RDgzNVxcdUREMkUnLCdRZnInOidcXHVEODM1XFx1REQxNCcsJ3FpbnQnOidcXHUyQTBDJywncW9wZic6J1xcdUQ4MzVcXHVERDYyJywnUW9wZic6J1xcdTIxMUEnLCdxcHJpbWUnOidcXHUyMDU3JywncXNjcic6J1xcdUQ4MzVcXHVEQ0M2JywnUXNjcic6J1xcdUQ4MzVcXHVEQ0FDJywncXVhdGVybmlvbnMnOidcXHUyMTBEJywncXVhdGludCc6J1xcdTJBMTYnLCdxdWVzdCc6Jz8nLCdxdWVzdGVxJzonXFx1MjI1RicsJ3F1b3QnOidcIicsJ1FVT1QnOidcIicsJ3JBYXJyJzonXFx1MjFEQicsJ3JhY2UnOidcXHUyMjNEXFx1MDMzMScsJ3JhY3V0ZSc6J1xcdTAxNTUnLCdSYWN1dGUnOidcXHUwMTU0JywncmFkaWMnOidcXHUyMjFBJywncmFlbXB0eXYnOidcXHUyOUIzJywncmFuZyc6J1xcdTI3RTknLCdSYW5nJzonXFx1MjdFQicsJ3JhbmdkJzonXFx1Mjk5MicsJ3JhbmdlJzonXFx1MjlBNScsJ3JhbmdsZSc6J1xcdTI3RTknLCdyYXF1byc6J1xceEJCJywncmFycic6J1xcdTIxOTInLCdyQXJyJzonXFx1MjFEMicsJ1JhcnInOidcXHUyMUEwJywncmFycmFwJzonXFx1Mjk3NScsJ3JhcnJiJzonXFx1MjFFNScsJ3JhcnJiZnMnOidcXHUyOTIwJywncmFycmMnOidcXHUyOTMzJywncmFycmZzJzonXFx1MjkxRScsJ3JhcnJoayc6J1xcdTIxQUEnLCdyYXJybHAnOidcXHUyMUFDJywncmFycnBsJzonXFx1Mjk0NScsJ3JhcnJzaW0nOidcXHUyOTc0JywncmFycnRsJzonXFx1MjFBMycsJ1JhcnJ0bCc6J1xcdTI5MTYnLCdyYXJydyc6J1xcdTIxOUQnLCdyYXRhaWwnOidcXHUyOTFBJywnckF0YWlsJzonXFx1MjkxQycsJ3JhdGlvJzonXFx1MjIzNicsJ3JhdGlvbmFscyc6J1xcdTIxMUEnLCdyYmFycic6J1xcdTI5MEQnLCdyQmFycic6J1xcdTI5MEYnLCdSQmFycic6J1xcdTI5MTAnLCdyYmJyayc6J1xcdTI3NzMnLCdyYnJhY2UnOid9JywncmJyYWNrJzonXScsJ3JicmtlJzonXFx1Mjk4QycsJ3JicmtzbGQnOidcXHUyOThFJywncmJya3NsdSc6J1xcdTI5OTAnLCdyY2Fyb24nOidcXHUwMTU5JywnUmNhcm9uJzonXFx1MDE1OCcsJ3JjZWRpbCc6J1xcdTAxNTcnLCdSY2VkaWwnOidcXHUwMTU2JywncmNlaWwnOidcXHUyMzA5JywncmN1Yic6J30nLCdyY3knOidcXHUwNDQwJywnUmN5JzonXFx1MDQyMCcsJ3JkY2EnOidcXHUyOTM3JywncmRsZGhhcic6J1xcdTI5NjknLCdyZHF1byc6J1xcdTIwMUQnLCdyZHF1b3InOidcXHUyMDFEJywncmRzaCc6J1xcdTIxQjMnLCdSZSc6J1xcdTIxMUMnLCdyZWFsJzonXFx1MjExQycsJ3JlYWxpbmUnOidcXHUyMTFCJywncmVhbHBhcnQnOidcXHUyMTFDJywncmVhbHMnOidcXHUyMTFEJywncmVjdCc6J1xcdTI1QUQnLCdyZWcnOidcXHhBRScsJ1JFRyc6J1xceEFFJywnUmV2ZXJzZUVsZW1lbnQnOidcXHUyMjBCJywnUmV2ZXJzZUVxdWlsaWJyaXVtJzonXFx1MjFDQicsJ1JldmVyc2VVcEVxdWlsaWJyaXVtJzonXFx1Mjk2RicsJ3JmaXNodCc6J1xcdTI5N0QnLCdyZmxvb3InOidcXHUyMzBCJywncmZyJzonXFx1RDgzNVxcdUREMkYnLCdSZnInOidcXHUyMTFDJywnckhhcic6J1xcdTI5NjQnLCdyaGFyZCc6J1xcdTIxQzEnLCdyaGFydSc6J1xcdTIxQzAnLCdyaGFydWwnOidcXHUyOTZDJywncmhvJzonXFx1MDNDMScsJ1Jobyc6J1xcdTAzQTEnLCdyaG92JzonXFx1MDNGMScsJ1JpZ2h0QW5nbGVCcmFja2V0JzonXFx1MjdFOScsJ3JpZ2h0YXJyb3cnOidcXHUyMTkyJywnUmlnaHRhcnJvdyc6J1xcdTIxRDInLCdSaWdodEFycm93JzonXFx1MjE5MicsJ1JpZ2h0QXJyb3dCYXInOidcXHUyMUU1JywnUmlnaHRBcnJvd0xlZnRBcnJvdyc6J1xcdTIxQzQnLCdyaWdodGFycm93dGFpbCc6J1xcdTIxQTMnLCdSaWdodENlaWxpbmcnOidcXHUyMzA5JywnUmlnaHREb3VibGVCcmFja2V0JzonXFx1MjdFNycsJ1JpZ2h0RG93blRlZVZlY3Rvcic6J1xcdTI5NUQnLCdSaWdodERvd25WZWN0b3InOidcXHUyMUMyJywnUmlnaHREb3duVmVjdG9yQmFyJzonXFx1Mjk1NScsJ1JpZ2h0Rmxvb3InOidcXHUyMzBCJywncmlnaHRoYXJwb29uZG93bic6J1xcdTIxQzEnLCdyaWdodGhhcnBvb251cCc6J1xcdTIxQzAnLCdyaWdodGxlZnRhcnJvd3MnOidcXHUyMUM0JywncmlnaHRsZWZ0aGFycG9vbnMnOidcXHUyMUNDJywncmlnaHRyaWdodGFycm93cyc6J1xcdTIxQzknLCdyaWdodHNxdWlnYXJyb3cnOidcXHUyMTlEJywnUmlnaHRUZWUnOidcXHUyMkEyJywnUmlnaHRUZWVBcnJvdyc6J1xcdTIxQTYnLCdSaWdodFRlZVZlY3Rvcic6J1xcdTI5NUInLCdyaWdodHRocmVldGltZXMnOidcXHUyMkNDJywnUmlnaHRUcmlhbmdsZSc6J1xcdTIyQjMnLCdSaWdodFRyaWFuZ2xlQmFyJzonXFx1MjlEMCcsJ1JpZ2h0VHJpYW5nbGVFcXVhbCc6J1xcdTIyQjUnLCdSaWdodFVwRG93blZlY3Rvcic6J1xcdTI5NEYnLCdSaWdodFVwVGVlVmVjdG9yJzonXFx1Mjk1QycsJ1JpZ2h0VXBWZWN0b3InOidcXHUyMUJFJywnUmlnaHRVcFZlY3RvckJhcic6J1xcdTI5NTQnLCdSaWdodFZlY3Rvcic6J1xcdTIxQzAnLCdSaWdodFZlY3RvckJhcic6J1xcdTI5NTMnLCdyaW5nJzonXFx1MDJEQScsJ3Jpc2luZ2RvdHNlcSc6J1xcdTIyNTMnLCdybGFycic6J1xcdTIxQzQnLCdybGhhcic6J1xcdTIxQ0MnLCdybG0nOidcXHUyMDBGJywncm1vdXN0JzonXFx1MjNCMScsJ3Jtb3VzdGFjaGUnOidcXHUyM0IxJywncm5taWQnOidcXHUyQUVFJywncm9hbmcnOidcXHUyN0VEJywncm9hcnInOidcXHUyMUZFJywncm9icmsnOidcXHUyN0U3Jywncm9wYXInOidcXHUyOTg2Jywncm9wZic6J1xcdUQ4MzVcXHVERDYzJywnUm9wZic6J1xcdTIxMUQnLCdyb3BsdXMnOidcXHUyQTJFJywncm90aW1lcyc6J1xcdTJBMzUnLCdSb3VuZEltcGxpZXMnOidcXHUyOTcwJywncnBhcic6JyknLCdycGFyZ3QnOidcXHUyOTk0JywncnBwb2xpbnQnOidcXHUyQTEyJywncnJhcnInOidcXHUyMUM5JywnUnJpZ2h0YXJyb3cnOidcXHUyMURCJywncnNhcXVvJzonXFx1MjAzQScsJ3JzY3InOidcXHVEODM1XFx1RENDNycsJ1JzY3InOidcXHUyMTFCJywncnNoJzonXFx1MjFCMScsJ1JzaCc6J1xcdTIxQjEnLCdyc3FiJzonXScsJ3JzcXVvJzonXFx1MjAxOScsJ3JzcXVvcic6J1xcdTIwMTknLCdydGhyZWUnOidcXHUyMkNDJywncnRpbWVzJzonXFx1MjJDQScsJ3J0cmknOidcXHUyNUI5JywncnRyaWUnOidcXHUyMkI1JywncnRyaWYnOidcXHUyNUI4JywncnRyaWx0cmknOidcXHUyOUNFJywnUnVsZURlbGF5ZWQnOidcXHUyOUY0JywncnVsdWhhcic6J1xcdTI5NjgnLCdyeCc6J1xcdTIxMUUnLCdzYWN1dGUnOidcXHUwMTVCJywnU2FjdXRlJzonXFx1MDE1QScsJ3NicXVvJzonXFx1MjAxQScsJ3NjJzonXFx1MjI3QicsJ1NjJzonXFx1MkFCQycsJ3NjYXAnOidcXHUyQUI4Jywnc2Nhcm9uJzonXFx1MDE2MScsJ1NjYXJvbic6J1xcdTAxNjAnLCdzY2N1ZSc6J1xcdTIyN0QnLCdzY2UnOidcXHUyQUIwJywnc2NFJzonXFx1MkFCNCcsJ3NjZWRpbCc6J1xcdTAxNUYnLCdTY2VkaWwnOidcXHUwMTVFJywnc2NpcmMnOidcXHUwMTVEJywnU2NpcmMnOidcXHUwMTVDJywnc2NuYXAnOidcXHUyQUJBJywnc2NuRSc6J1xcdTJBQjYnLCdzY25zaW0nOidcXHUyMkU5Jywnc2Nwb2xpbnQnOidcXHUyQTEzJywnc2NzaW0nOidcXHUyMjdGJywnc2N5JzonXFx1MDQ0MScsJ1NjeSc6J1xcdTA0MjEnLCdzZG90JzonXFx1MjJDNScsJ3Nkb3RiJzonXFx1MjJBMScsJ3Nkb3RlJzonXFx1MkE2NicsJ3NlYXJoayc6J1xcdTI5MjUnLCdzZWFycic6J1xcdTIxOTgnLCdzZUFycic6J1xcdTIxRDgnLCdzZWFycm93JzonXFx1MjE5OCcsJ3NlY3QnOidcXHhBNycsJ3NlbWknOic7Jywnc2Vzd2FyJzonXFx1MjkyOScsJ3NldG1pbnVzJzonXFx1MjIxNicsJ3NldG1uJzonXFx1MjIxNicsJ3NleHQnOidcXHUyNzM2Jywnc2ZyJzonXFx1RDgzNVxcdUREMzAnLCdTZnInOidcXHVEODM1XFx1REQxNicsJ3Nmcm93bic6J1xcdTIzMjInLCdzaGFycCc6J1xcdTI2NkYnLCdzaGNoY3knOidcXHUwNDQ5JywnU0hDSGN5JzonXFx1MDQyOScsJ3NoY3knOidcXHUwNDQ4JywnU0hjeSc6J1xcdTA0MjgnLCdTaG9ydERvd25BcnJvdyc6J1xcdTIxOTMnLCdTaG9ydExlZnRBcnJvdyc6J1xcdTIxOTAnLCdzaG9ydG1pZCc6J1xcdTIyMjMnLCdzaG9ydHBhcmFsbGVsJzonXFx1MjIyNScsJ1Nob3J0UmlnaHRBcnJvdyc6J1xcdTIxOTInLCdTaG9ydFVwQXJyb3cnOidcXHUyMTkxJywnc2h5JzonXFx4QUQnLCdzaWdtYSc6J1xcdTAzQzMnLCdTaWdtYSc6J1xcdTAzQTMnLCdzaWdtYWYnOidcXHUwM0MyJywnc2lnbWF2JzonXFx1MDNDMicsJ3NpbSc6J1xcdTIyM0MnLCdzaW1kb3QnOidcXHUyQTZBJywnc2ltZSc6J1xcdTIyNDMnLCdzaW1lcSc6J1xcdTIyNDMnLCdzaW1nJzonXFx1MkE5RScsJ3NpbWdFJzonXFx1MkFBMCcsJ3NpbWwnOidcXHUyQTlEJywnc2ltbEUnOidcXHUyQTlGJywnc2ltbmUnOidcXHUyMjQ2Jywnc2ltcGx1cyc6J1xcdTJBMjQnLCdzaW1yYXJyJzonXFx1Mjk3MicsJ3NsYXJyJzonXFx1MjE5MCcsJ1NtYWxsQ2lyY2xlJzonXFx1MjIxOCcsJ3NtYWxsc2V0bWludXMnOidcXHUyMjE2Jywnc21hc2hwJzonXFx1MkEzMycsJ3NtZXBhcnNsJzonXFx1MjlFNCcsJ3NtaWQnOidcXHUyMjIzJywnc21pbGUnOidcXHUyMzIzJywnc210JzonXFx1MkFBQScsJ3NtdGUnOidcXHUyQUFDJywnc210ZXMnOidcXHUyQUFDXFx1RkUwMCcsJ3NvZnRjeSc6J1xcdTA0NEMnLCdTT0ZUY3knOidcXHUwNDJDJywnc29sJzonLycsJ3NvbGInOidcXHUyOUM0Jywnc29sYmFyJzonXFx1MjMzRicsJ3NvcGYnOidcXHVEODM1XFx1REQ2NCcsJ1NvcGYnOidcXHVEODM1XFx1REQ0QScsJ3NwYWRlcyc6J1xcdTI2NjAnLCdzcGFkZXN1aXQnOidcXHUyNjYwJywnc3Bhcic6J1xcdTIyMjUnLCdzcWNhcCc6J1xcdTIyOTMnLCdzcWNhcHMnOidcXHUyMjkzXFx1RkUwMCcsJ3NxY3VwJzonXFx1MjI5NCcsJ3NxY3Vwcyc6J1xcdTIyOTRcXHVGRTAwJywnU3FydCc6J1xcdTIyMUEnLCdzcXN1Yic6J1xcdTIyOEYnLCdzcXN1YmUnOidcXHUyMjkxJywnc3FzdWJzZXQnOidcXHUyMjhGJywnc3FzdWJzZXRlcSc6J1xcdTIyOTEnLCdzcXN1cCc6J1xcdTIyOTAnLCdzcXN1cGUnOidcXHUyMjkyJywnc3FzdXBzZXQnOidcXHUyMjkwJywnc3FzdXBzZXRlcSc6J1xcdTIyOTInLCdzcXUnOidcXHUyNUExJywnc3F1YXJlJzonXFx1MjVBMScsJ1NxdWFyZSc6J1xcdTI1QTEnLCdTcXVhcmVJbnRlcnNlY3Rpb24nOidcXHUyMjkzJywnU3F1YXJlU3Vic2V0JzonXFx1MjI4RicsJ1NxdWFyZVN1YnNldEVxdWFsJzonXFx1MjI5MScsJ1NxdWFyZVN1cGVyc2V0JzonXFx1MjI5MCcsJ1NxdWFyZVN1cGVyc2V0RXF1YWwnOidcXHUyMjkyJywnU3F1YXJlVW5pb24nOidcXHUyMjk0Jywnc3F1YXJmJzonXFx1MjVBQScsJ3NxdWYnOidcXHUyNUFBJywnc3JhcnInOidcXHUyMTkyJywnc3Njcic6J1xcdUQ4MzVcXHVEQ0M4JywnU3Njcic6J1xcdUQ4MzVcXHVEQ0FFJywnc3NldG1uJzonXFx1MjIxNicsJ3NzbWlsZSc6J1xcdTIzMjMnLCdzc3RhcmYnOidcXHUyMkM2Jywnc3Rhcic6J1xcdTI2MDYnLCdTdGFyJzonXFx1MjJDNicsJ3N0YXJmJzonXFx1MjYwNScsJ3N0cmFpZ2h0ZXBzaWxvbic6J1xcdTAzRjUnLCdzdHJhaWdodHBoaSc6J1xcdTAzRDUnLCdzdHJucyc6J1xceEFGJywnc3ViJzonXFx1MjI4MicsJ1N1Yic6J1xcdTIyRDAnLCdzdWJkb3QnOidcXHUyQUJEJywnc3ViZSc6J1xcdTIyODYnLCdzdWJFJzonXFx1MkFDNScsJ3N1YmVkb3QnOidcXHUyQUMzJywnc3VibXVsdCc6J1xcdTJBQzEnLCdzdWJuZSc6J1xcdTIyOEEnLCdzdWJuRSc6J1xcdTJBQ0InLCdzdWJwbHVzJzonXFx1MkFCRicsJ3N1YnJhcnInOidcXHUyOTc5Jywnc3Vic2V0JzonXFx1MjI4MicsJ1N1YnNldCc6J1xcdTIyRDAnLCdzdWJzZXRlcSc6J1xcdTIyODYnLCdzdWJzZXRlcXEnOidcXHUyQUM1JywnU3Vic2V0RXF1YWwnOidcXHUyMjg2Jywnc3Vic2V0bmVxJzonXFx1MjI4QScsJ3N1YnNldG5lcXEnOidcXHUyQUNCJywnc3Vic2ltJzonXFx1MkFDNycsJ3N1YnN1Yic6J1xcdTJBRDUnLCdzdWJzdXAnOidcXHUyQUQzJywnc3VjYyc6J1xcdTIyN0InLCdzdWNjYXBwcm94JzonXFx1MkFCOCcsJ3N1Y2NjdXJseWVxJzonXFx1MjI3RCcsJ1N1Y2NlZWRzJzonXFx1MjI3QicsJ1N1Y2NlZWRzRXF1YWwnOidcXHUyQUIwJywnU3VjY2VlZHNTbGFudEVxdWFsJzonXFx1MjI3RCcsJ1N1Y2NlZWRzVGlsZGUnOidcXHUyMjdGJywnc3VjY2VxJzonXFx1MkFCMCcsJ3N1Y2NuYXBwcm94JzonXFx1MkFCQScsJ3N1Y2NuZXFxJzonXFx1MkFCNicsJ3N1Y2Nuc2ltJzonXFx1MjJFOScsJ3N1Y2NzaW0nOidcXHUyMjdGJywnU3VjaFRoYXQnOidcXHUyMjBCJywnc3VtJzonXFx1MjIxMScsJ1N1bSc6J1xcdTIyMTEnLCdzdW5nJzonXFx1MjY2QScsJ3N1cCc6J1xcdTIyODMnLCdTdXAnOidcXHUyMkQxJywnc3VwMSc6J1xceEI5Jywnc3VwMic6J1xceEIyJywnc3VwMyc6J1xceEIzJywnc3VwZG90JzonXFx1MkFCRScsJ3N1cGRzdWInOidcXHUyQUQ4Jywnc3VwZSc6J1xcdTIyODcnLCdzdXBFJzonXFx1MkFDNicsJ3N1cGVkb3QnOidcXHUyQUM0JywnU3VwZXJzZXQnOidcXHUyMjgzJywnU3VwZXJzZXRFcXVhbCc6J1xcdTIyODcnLCdzdXBoc29sJzonXFx1MjdDOScsJ3N1cGhzdWInOidcXHUyQUQ3Jywnc3VwbGFycic6J1xcdTI5N0InLCdzdXBtdWx0JzonXFx1MkFDMicsJ3N1cG5lJzonXFx1MjI4QicsJ3N1cG5FJzonXFx1MkFDQycsJ3N1cHBsdXMnOidcXHUyQUMwJywnc3Vwc2V0JzonXFx1MjI4MycsJ1N1cHNldCc6J1xcdTIyRDEnLCdzdXBzZXRlcSc6J1xcdTIyODcnLCdzdXBzZXRlcXEnOidcXHUyQUM2Jywnc3Vwc2V0bmVxJzonXFx1MjI4QicsJ3N1cHNldG5lcXEnOidcXHUyQUNDJywnc3Vwc2ltJzonXFx1MkFDOCcsJ3N1cHN1Yic6J1xcdTJBRDQnLCdzdXBzdXAnOidcXHUyQUQ2Jywnc3dhcmhrJzonXFx1MjkyNicsJ3N3YXJyJzonXFx1MjE5OScsJ3N3QXJyJzonXFx1MjFEOScsJ3N3YXJyb3cnOidcXHUyMTk5Jywnc3dud2FyJzonXFx1MjkyQScsJ3N6bGlnJzonXFx4REYnLCdUYWInOidcXHQnLCd0YXJnZXQnOidcXHUyMzE2JywndGF1JzonXFx1MDNDNCcsJ1RhdSc6J1xcdTAzQTQnLCd0YnJrJzonXFx1MjNCNCcsJ3RjYXJvbic6J1xcdTAxNjUnLCdUY2Fyb24nOidcXHUwMTY0JywndGNlZGlsJzonXFx1MDE2MycsJ1RjZWRpbCc6J1xcdTAxNjInLCd0Y3knOidcXHUwNDQyJywnVGN5JzonXFx1MDQyMicsJ3Rkb3QnOidcXHUyMERCJywndGVscmVjJzonXFx1MjMxNScsJ3Rmcic6J1xcdUQ4MzVcXHVERDMxJywnVGZyJzonXFx1RDgzNVxcdUREMTcnLCd0aGVyZTQnOidcXHUyMjM0JywndGhlcmVmb3JlJzonXFx1MjIzNCcsJ1RoZXJlZm9yZSc6J1xcdTIyMzQnLCd0aGV0YSc6J1xcdTAzQjgnLCdUaGV0YSc6J1xcdTAzOTgnLCd0aGV0YXN5bSc6J1xcdTAzRDEnLCd0aGV0YXYnOidcXHUwM0QxJywndGhpY2thcHByb3gnOidcXHUyMjQ4JywndGhpY2tzaW0nOidcXHUyMjNDJywnVGhpY2tTcGFjZSc6J1xcdTIwNUZcXHUyMDBBJywndGhpbnNwJzonXFx1MjAwOScsJ1RoaW5TcGFjZSc6J1xcdTIwMDknLCd0aGthcCc6J1xcdTIyNDgnLCd0aGtzaW0nOidcXHUyMjNDJywndGhvcm4nOidcXHhGRScsJ1RIT1JOJzonXFx4REUnLCd0aWxkZSc6J1xcdTAyREMnLCdUaWxkZSc6J1xcdTIyM0MnLCdUaWxkZUVxdWFsJzonXFx1MjI0MycsJ1RpbGRlRnVsbEVxdWFsJzonXFx1MjI0NScsJ1RpbGRlVGlsZGUnOidcXHUyMjQ4JywndGltZXMnOidcXHhENycsJ3RpbWVzYic6J1xcdTIyQTAnLCd0aW1lc2Jhcic6J1xcdTJBMzEnLCd0aW1lc2QnOidcXHUyQTMwJywndGludCc6J1xcdTIyMkQnLCd0b2VhJzonXFx1MjkyOCcsJ3RvcCc6J1xcdTIyQTQnLCd0b3Bib3QnOidcXHUyMzM2JywndG9wY2lyJzonXFx1MkFGMScsJ3RvcGYnOidcXHVEODM1XFx1REQ2NScsJ1RvcGYnOidcXHVEODM1XFx1REQ0QicsJ3RvcGZvcmsnOidcXHUyQURBJywndG9zYSc6J1xcdTI5MjknLCd0cHJpbWUnOidcXHUyMDM0JywndHJhZGUnOidcXHUyMTIyJywnVFJBREUnOidcXHUyMTIyJywndHJpYW5nbGUnOidcXHUyNUI1JywndHJpYW5nbGVkb3duJzonXFx1MjVCRicsJ3RyaWFuZ2xlbGVmdCc6J1xcdTI1QzMnLCd0cmlhbmdsZWxlZnRlcSc6J1xcdTIyQjQnLCd0cmlhbmdsZXEnOidcXHUyMjVDJywndHJpYW5nbGVyaWdodCc6J1xcdTI1QjknLCd0cmlhbmdsZXJpZ2h0ZXEnOidcXHUyMkI1JywndHJpZG90JzonXFx1MjVFQycsJ3RyaWUnOidcXHUyMjVDJywndHJpbWludXMnOidcXHUyQTNBJywnVHJpcGxlRG90JzonXFx1MjBEQicsJ3RyaXBsdXMnOidcXHUyQTM5JywndHJpc2InOidcXHUyOUNEJywndHJpdGltZSc6J1xcdTJBM0InLCd0cnBleml1bSc6J1xcdTIzRTInLCd0c2NyJzonXFx1RDgzNVxcdURDQzknLCdUc2NyJzonXFx1RDgzNVxcdURDQUYnLCd0c2N5JzonXFx1MDQ0NicsJ1RTY3knOidcXHUwNDI2JywndHNoY3knOidcXHUwNDVCJywnVFNIY3knOidcXHUwNDBCJywndHN0cm9rJzonXFx1MDE2NycsJ1RzdHJvayc6J1xcdTAxNjYnLCd0d2l4dCc6J1xcdTIyNkMnLCd0d29oZWFkbGVmdGFycm93JzonXFx1MjE5RScsJ3R3b2hlYWRyaWdodGFycm93JzonXFx1MjFBMCcsJ3VhY3V0ZSc6J1xceEZBJywnVWFjdXRlJzonXFx4REEnLCd1YXJyJzonXFx1MjE5MScsJ3VBcnInOidcXHUyMUQxJywnVWFycic6J1xcdTIxOUYnLCdVYXJyb2Npcic6J1xcdTI5NDknLCd1YnJjeSc6J1xcdTA0NUUnLCdVYnJjeSc6J1xcdTA0MEUnLCd1YnJldmUnOidcXHUwMTZEJywnVWJyZXZlJzonXFx1MDE2QycsJ3VjaXJjJzonXFx4RkInLCdVY2lyYyc6J1xceERCJywndWN5JzonXFx1MDQ0MycsJ1VjeSc6J1xcdTA0MjMnLCd1ZGFycic6J1xcdTIxQzUnLCd1ZGJsYWMnOidcXHUwMTcxJywnVWRibGFjJzonXFx1MDE3MCcsJ3VkaGFyJzonXFx1Mjk2RScsJ3VmaXNodCc6J1xcdTI5N0UnLCd1ZnInOidcXHVEODM1XFx1REQzMicsJ1Vmcic6J1xcdUQ4MzVcXHVERDE4JywndWdyYXZlJzonXFx4RjknLCdVZ3JhdmUnOidcXHhEOScsJ3VIYXInOidcXHUyOTYzJywndWhhcmwnOidcXHUyMUJGJywndWhhcnInOidcXHUyMUJFJywndWhibGsnOidcXHUyNTgwJywndWxjb3JuJzonXFx1MjMxQycsJ3VsY29ybmVyJzonXFx1MjMxQycsJ3VsY3JvcCc6J1xcdTIzMEYnLCd1bHRyaSc6J1xcdTI1RjgnLCd1bWFjcic6J1xcdTAxNkInLCdVbWFjcic6J1xcdTAxNkEnLCd1bWwnOidcXHhBOCcsJ1VuZGVyQmFyJzonXycsJ1VuZGVyQnJhY2UnOidcXHUyM0RGJywnVW5kZXJCcmFja2V0JzonXFx1MjNCNScsJ1VuZGVyUGFyZW50aGVzaXMnOidcXHUyM0REJywnVW5pb24nOidcXHUyMkMzJywnVW5pb25QbHVzJzonXFx1MjI4RScsJ3VvZ29uJzonXFx1MDE3MycsJ1VvZ29uJzonXFx1MDE3MicsJ3VvcGYnOidcXHVEODM1XFx1REQ2NicsJ1VvcGYnOidcXHVEODM1XFx1REQ0QycsJ3VwYXJyb3cnOidcXHUyMTkxJywnVXBhcnJvdyc6J1xcdTIxRDEnLCdVcEFycm93JzonXFx1MjE5MScsJ1VwQXJyb3dCYXInOidcXHUyOTEyJywnVXBBcnJvd0Rvd25BcnJvdyc6J1xcdTIxQzUnLCd1cGRvd25hcnJvdyc6J1xcdTIxOTUnLCdVcGRvd25hcnJvdyc6J1xcdTIxRDUnLCdVcERvd25BcnJvdyc6J1xcdTIxOTUnLCdVcEVxdWlsaWJyaXVtJzonXFx1Mjk2RScsJ3VwaGFycG9vbmxlZnQnOidcXHUyMUJGJywndXBoYXJwb29ucmlnaHQnOidcXHUyMUJFJywndXBsdXMnOidcXHUyMjhFJywnVXBwZXJMZWZ0QXJyb3cnOidcXHUyMTk2JywnVXBwZXJSaWdodEFycm93JzonXFx1MjE5NycsJ3Vwc2knOidcXHUwM0M1JywnVXBzaSc6J1xcdTAzRDInLCd1cHNpaCc6J1xcdTAzRDInLCd1cHNpbG9uJzonXFx1MDNDNScsJ1Vwc2lsb24nOidcXHUwM0E1JywnVXBUZWUnOidcXHUyMkE1JywnVXBUZWVBcnJvdyc6J1xcdTIxQTUnLCd1cHVwYXJyb3dzJzonXFx1MjFDOCcsJ3VyY29ybic6J1xcdTIzMUQnLCd1cmNvcm5lcic6J1xcdTIzMUQnLCd1cmNyb3AnOidcXHUyMzBFJywndXJpbmcnOidcXHUwMTZGJywnVXJpbmcnOidcXHUwMTZFJywndXJ0cmknOidcXHUyNUY5JywndXNjcic6J1xcdUQ4MzVcXHVEQ0NBJywnVXNjcic6J1xcdUQ4MzVcXHVEQ0IwJywndXRkb3QnOidcXHUyMkYwJywndXRpbGRlJzonXFx1MDE2OScsJ1V0aWxkZSc6J1xcdTAxNjgnLCd1dHJpJzonXFx1MjVCNScsJ3V0cmlmJzonXFx1MjVCNCcsJ3V1YXJyJzonXFx1MjFDOCcsJ3V1bWwnOidcXHhGQycsJ1V1bWwnOidcXHhEQycsJ3V3YW5nbGUnOidcXHUyOUE3JywndmFuZ3J0JzonXFx1Mjk5QycsJ3ZhcmVwc2lsb24nOidcXHUwM0Y1JywndmFya2FwcGEnOidcXHUwM0YwJywndmFybm90aGluZyc6J1xcdTIyMDUnLCd2YXJwaGknOidcXHUwM0Q1JywndmFycGknOidcXHUwM0Q2JywndmFycHJvcHRvJzonXFx1MjIxRCcsJ3ZhcnInOidcXHUyMTk1JywndkFycic6J1xcdTIxRDUnLCd2YXJyaG8nOidcXHUwM0YxJywndmFyc2lnbWEnOidcXHUwM0MyJywndmFyc3Vic2V0bmVxJzonXFx1MjI4QVxcdUZFMDAnLCd2YXJzdWJzZXRuZXFxJzonXFx1MkFDQlxcdUZFMDAnLCd2YXJzdXBzZXRuZXEnOidcXHUyMjhCXFx1RkUwMCcsJ3ZhcnN1cHNldG5lcXEnOidcXHUyQUNDXFx1RkUwMCcsJ3ZhcnRoZXRhJzonXFx1MDNEMScsJ3ZhcnRyaWFuZ2xlbGVmdCc6J1xcdTIyQjInLCd2YXJ0cmlhbmdsZXJpZ2h0JzonXFx1MjJCMycsJ3ZCYXInOidcXHUyQUU4JywnVmJhcic6J1xcdTJBRUInLCd2QmFydic6J1xcdTJBRTknLCd2Y3knOidcXHUwNDMyJywnVmN5JzonXFx1MDQxMicsJ3ZkYXNoJzonXFx1MjJBMicsJ3ZEYXNoJzonXFx1MjJBOCcsJ1ZkYXNoJzonXFx1MjJBOScsJ1ZEYXNoJzonXFx1MjJBQicsJ1ZkYXNobCc6J1xcdTJBRTYnLCd2ZWUnOidcXHUyMjI4JywnVmVlJzonXFx1MjJDMScsJ3ZlZWJhcic6J1xcdTIyQkInLCd2ZWVlcSc6J1xcdTIyNUEnLCd2ZWxsaXAnOidcXHUyMkVFJywndmVyYmFyJzonfCcsJ1ZlcmJhcic6J1xcdTIwMTYnLCd2ZXJ0JzonfCcsJ1ZlcnQnOidcXHUyMDE2JywnVmVydGljYWxCYXInOidcXHUyMjIzJywnVmVydGljYWxMaW5lJzonfCcsJ1ZlcnRpY2FsU2VwYXJhdG9yJzonXFx1Mjc1OCcsJ1ZlcnRpY2FsVGlsZGUnOidcXHUyMjQwJywnVmVyeVRoaW5TcGFjZSc6J1xcdTIwMEEnLCd2ZnInOidcXHVEODM1XFx1REQzMycsJ1Zmcic6J1xcdUQ4MzVcXHVERDE5Jywndmx0cmknOidcXHUyMkIyJywndm5zdWInOidcXHUyMjgyXFx1MjBEMicsJ3Zuc3VwJzonXFx1MjI4M1xcdTIwRDInLCd2b3BmJzonXFx1RDgzNVxcdURENjcnLCdWb3BmJzonXFx1RDgzNVxcdURENEQnLCd2cHJvcCc6J1xcdTIyMUQnLCd2cnRyaSc6J1xcdTIyQjMnLCd2c2NyJzonXFx1RDgzNVxcdURDQ0InLCdWc2NyJzonXFx1RDgzNVxcdURDQjEnLCd2c3VibmUnOidcXHUyMjhBXFx1RkUwMCcsJ3ZzdWJuRSc6J1xcdTJBQ0JcXHVGRTAwJywndnN1cG5lJzonXFx1MjI4QlxcdUZFMDAnLCd2c3VwbkUnOidcXHUyQUNDXFx1RkUwMCcsJ1Z2ZGFzaCc6J1xcdTIyQUEnLCd2emlnemFnJzonXFx1Mjk5QScsJ3djaXJjJzonXFx1MDE3NScsJ1djaXJjJzonXFx1MDE3NCcsJ3dlZGJhcic6J1xcdTJBNUYnLCd3ZWRnZSc6J1xcdTIyMjcnLCdXZWRnZSc6J1xcdTIyQzAnLCd3ZWRnZXEnOidcXHUyMjU5Jywnd2VpZXJwJzonXFx1MjExOCcsJ3dmcic6J1xcdUQ4MzVcXHVERDM0JywnV2ZyJzonXFx1RDgzNVxcdUREMUEnLCd3b3BmJzonXFx1RDgzNVxcdURENjgnLCdXb3BmJzonXFx1RDgzNVxcdURENEUnLCd3cCc6J1xcdTIxMTgnLCd3cic6J1xcdTIyNDAnLCd3cmVhdGgnOidcXHUyMjQwJywnd3Njcic6J1xcdUQ4MzVcXHVEQ0NDJywnV3Njcic6J1xcdUQ4MzVcXHVEQ0IyJywneGNhcCc6J1xcdTIyQzInLCd4Y2lyYyc6J1xcdTI1RUYnLCd4Y3VwJzonXFx1MjJDMycsJ3hkdHJpJzonXFx1MjVCRCcsJ3hmcic6J1xcdUQ4MzVcXHVERDM1JywnWGZyJzonXFx1RDgzNVxcdUREMUInLCd4aGFycic6J1xcdTI3RjcnLCd4aEFycic6J1xcdTI3RkEnLCd4aSc6J1xcdTAzQkUnLCdYaSc6J1xcdTAzOUUnLCd4bGFycic6J1xcdTI3RjUnLCd4bEFycic6J1xcdTI3RjgnLCd4bWFwJzonXFx1MjdGQycsJ3huaXMnOidcXHUyMkZCJywneG9kb3QnOidcXHUyQTAwJywneG9wZic6J1xcdUQ4MzVcXHVERDY5JywnWG9wZic6J1xcdUQ4MzVcXHVERDRGJywneG9wbHVzJzonXFx1MkEwMScsJ3hvdGltZSc6J1xcdTJBMDInLCd4cmFycic6J1xcdTI3RjYnLCd4ckFycic6J1xcdTI3RjknLCd4c2NyJzonXFx1RDgzNVxcdURDQ0QnLCdYc2NyJzonXFx1RDgzNVxcdURDQjMnLCd4c3FjdXAnOidcXHUyQTA2JywneHVwbHVzJzonXFx1MkEwNCcsJ3h1dHJpJzonXFx1MjVCMycsJ3h2ZWUnOidcXHUyMkMxJywneHdlZGdlJzonXFx1MjJDMCcsJ3lhY3V0ZSc6J1xceEZEJywnWWFjdXRlJzonXFx4REQnLCd5YWN5JzonXFx1MDQ0RicsJ1lBY3knOidcXHUwNDJGJywneWNpcmMnOidcXHUwMTc3JywnWWNpcmMnOidcXHUwMTc2JywneWN5JzonXFx1MDQ0QicsJ1ljeSc6J1xcdTA0MkInLCd5ZW4nOidcXHhBNScsJ3lmcic6J1xcdUQ4MzVcXHVERDM2JywnWWZyJzonXFx1RDgzNVxcdUREMUMnLCd5aWN5JzonXFx1MDQ1NycsJ1lJY3knOidcXHUwNDA3JywneW9wZic6J1xcdUQ4MzVcXHVERDZBJywnWW9wZic6J1xcdUQ4MzVcXHVERDUwJywneXNjcic6J1xcdUQ4MzVcXHVEQ0NFJywnWXNjcic6J1xcdUQ4MzVcXHVEQ0I0JywneXVjeSc6J1xcdTA0NEUnLCdZVWN5JzonXFx1MDQyRScsJ3l1bWwnOidcXHhGRicsJ1l1bWwnOidcXHUwMTc4JywnemFjdXRlJzonXFx1MDE3QScsJ1phY3V0ZSc6J1xcdTAxNzknLCd6Y2Fyb24nOidcXHUwMTdFJywnWmNhcm9uJzonXFx1MDE3RCcsJ3pjeSc6J1xcdTA0MzcnLCdaY3knOidcXHUwNDE3JywnemRvdCc6J1xcdTAxN0MnLCdaZG90JzonXFx1MDE3QicsJ3plZXRyZic6J1xcdTIxMjgnLCdaZXJvV2lkdGhTcGFjZSc6J1xcdTIwMEInLCd6ZXRhJzonXFx1MDNCNicsJ1pldGEnOidcXHUwMzk2JywnemZyJzonXFx1RDgzNVxcdUREMzcnLCdaZnInOidcXHUyMTI4JywnemhjeSc6J1xcdTA0MzYnLCdaSGN5JzonXFx1MDQxNicsJ3ppZ3JhcnInOidcXHUyMUREJywnem9wZic6J1xcdUQ4MzVcXHVERDZCJywnWm9wZic6J1xcdTIxMjQnLCd6c2NyJzonXFx1RDgzNVxcdURDQ0YnLCdac2NyJzonXFx1RDgzNVxcdURDQjUnLCd6d2onOidcXHUyMDBEJywnenduaic6J1xcdTIwMEMnfTtcblx0dmFyIGRlY29kZU1hcExlZ2FjeSA9IHsnYWFjdXRlJzonXFx4RTEnLCdBYWN1dGUnOidcXHhDMScsJ2FjaXJjJzonXFx4RTInLCdBY2lyYyc6J1xceEMyJywnYWN1dGUnOidcXHhCNCcsJ2FlbGlnJzonXFx4RTYnLCdBRWxpZyc6J1xceEM2JywnYWdyYXZlJzonXFx4RTAnLCdBZ3JhdmUnOidcXHhDMCcsJ2FtcCc6JyYnLCdBTVAnOicmJywnYXJpbmcnOidcXHhFNScsJ0FyaW5nJzonXFx4QzUnLCdhdGlsZGUnOidcXHhFMycsJ0F0aWxkZSc6J1xceEMzJywnYXVtbCc6J1xceEU0JywnQXVtbCc6J1xceEM0JywnYnJ2YmFyJzonXFx4QTYnLCdjY2VkaWwnOidcXHhFNycsJ0NjZWRpbCc6J1xceEM3JywnY2VkaWwnOidcXHhCOCcsJ2NlbnQnOidcXHhBMicsJ2NvcHknOidcXHhBOScsJ0NPUFknOidcXHhBOScsJ2N1cnJlbic6J1xceEE0JywnZGVnJzonXFx4QjAnLCdkaXZpZGUnOidcXHhGNycsJ2VhY3V0ZSc6J1xceEU5JywnRWFjdXRlJzonXFx4QzknLCdlY2lyYyc6J1xceEVBJywnRWNpcmMnOidcXHhDQScsJ2VncmF2ZSc6J1xceEU4JywnRWdyYXZlJzonXFx4QzgnLCdldGgnOidcXHhGMCcsJ0VUSCc6J1xceEQwJywnZXVtbCc6J1xceEVCJywnRXVtbCc6J1xceENCJywnZnJhYzEyJzonXFx4QkQnLCdmcmFjMTQnOidcXHhCQycsJ2ZyYWMzNCc6J1xceEJFJywnZ3QnOic+JywnR1QnOic+JywnaWFjdXRlJzonXFx4RUQnLCdJYWN1dGUnOidcXHhDRCcsJ2ljaXJjJzonXFx4RUUnLCdJY2lyYyc6J1xceENFJywnaWV4Y2wnOidcXHhBMScsJ2lncmF2ZSc6J1xceEVDJywnSWdyYXZlJzonXFx4Q0MnLCdpcXVlc3QnOidcXHhCRicsJ2l1bWwnOidcXHhFRicsJ0l1bWwnOidcXHhDRicsJ2xhcXVvJzonXFx4QUInLCdsdCc6JzwnLCdMVCc6JzwnLCdtYWNyJzonXFx4QUYnLCdtaWNybyc6J1xceEI1JywnbWlkZG90JzonXFx4QjcnLCduYnNwJzonXFx4QTAnLCdub3QnOidcXHhBQycsJ250aWxkZSc6J1xceEYxJywnTnRpbGRlJzonXFx4RDEnLCdvYWN1dGUnOidcXHhGMycsJ09hY3V0ZSc6J1xceEQzJywnb2NpcmMnOidcXHhGNCcsJ09jaXJjJzonXFx4RDQnLCdvZ3JhdmUnOidcXHhGMicsJ09ncmF2ZSc6J1xceEQyJywnb3JkZic6J1xceEFBJywnb3JkbSc6J1xceEJBJywnb3NsYXNoJzonXFx4RjgnLCdPc2xhc2gnOidcXHhEOCcsJ290aWxkZSc6J1xceEY1JywnT3RpbGRlJzonXFx4RDUnLCdvdW1sJzonXFx4RjYnLCdPdW1sJzonXFx4RDYnLCdwYXJhJzonXFx4QjYnLCdwbHVzbW4nOidcXHhCMScsJ3BvdW5kJzonXFx4QTMnLCdxdW90JzonXCInLCdRVU9UJzonXCInLCdyYXF1byc6J1xceEJCJywncmVnJzonXFx4QUUnLCdSRUcnOidcXHhBRScsJ3NlY3QnOidcXHhBNycsJ3NoeSc6J1xceEFEJywnc3VwMSc6J1xceEI5Jywnc3VwMic6J1xceEIyJywnc3VwMyc6J1xceEIzJywnc3psaWcnOidcXHhERicsJ3Rob3JuJzonXFx4RkUnLCdUSE9STic6J1xceERFJywndGltZXMnOidcXHhENycsJ3VhY3V0ZSc6J1xceEZBJywnVWFjdXRlJzonXFx4REEnLCd1Y2lyYyc6J1xceEZCJywnVWNpcmMnOidcXHhEQicsJ3VncmF2ZSc6J1xceEY5JywnVWdyYXZlJzonXFx4RDknLCd1bWwnOidcXHhBOCcsJ3V1bWwnOidcXHhGQycsJ1V1bWwnOidcXHhEQycsJ3lhY3V0ZSc6J1xceEZEJywnWWFjdXRlJzonXFx4REQnLCd5ZW4nOidcXHhBNScsJ3l1bWwnOidcXHhGRid9O1xuXHR2YXIgZGVjb2RlTWFwTnVtZXJpYyA9IHsnMCc6J1xcdUZGRkQnLCcxMjgnOidcXHUyMEFDJywnMTMwJzonXFx1MjAxQScsJzEzMSc6J1xcdTAxOTInLCcxMzInOidcXHUyMDFFJywnMTMzJzonXFx1MjAyNicsJzEzNCc6J1xcdTIwMjAnLCcxMzUnOidcXHUyMDIxJywnMTM2JzonXFx1MDJDNicsJzEzNyc6J1xcdTIwMzAnLCcxMzgnOidcXHUwMTYwJywnMTM5JzonXFx1MjAzOScsJzE0MCc6J1xcdTAxNTInLCcxNDInOidcXHUwMTdEJywnMTQ1JzonXFx1MjAxOCcsJzE0Nic6J1xcdTIwMTknLCcxNDcnOidcXHUyMDFDJywnMTQ4JzonXFx1MjAxRCcsJzE0OSc6J1xcdTIwMjInLCcxNTAnOidcXHUyMDEzJywnMTUxJzonXFx1MjAxNCcsJzE1Mic6J1xcdTAyREMnLCcxNTMnOidcXHUyMTIyJywnMTU0JzonXFx1MDE2MScsJzE1NSc6J1xcdTIwM0EnLCcxNTYnOidcXHUwMTUzJywnMTU4JzonXFx1MDE3RScsJzE1OSc6J1xcdTAxNzgnfTtcblx0dmFyIGludmFsaWRSZWZlcmVuY2VDb2RlUG9pbnRzID0gWzEsMiwzLDQsNSw2LDcsOCwxMSwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwxMjcsMTI4LDEyOSwxMzAsMTMxLDEzMiwxMzMsMTM0LDEzNSwxMzYsMTM3LDEzOCwxMzksMTQwLDE0MSwxNDIsMTQzLDE0NCwxNDUsMTQ2LDE0NywxNDgsMTQ5LDE1MCwxNTEsMTUyLDE1MywxNTQsMTU1LDE1NiwxNTcsMTU4LDE1OSw2NDk3Niw2NDk3Nyw2NDk3OCw2NDk3OSw2NDk4MCw2NDk4MSw2NDk4Miw2NDk4Myw2NDk4NCw2NDk4NSw2NDk4Niw2NDk4Nyw2NDk4OCw2NDk4OSw2NDk5MCw2NDk5MSw2NDk5Miw2NDk5Myw2NDk5NCw2NDk5NSw2NDk5Niw2NDk5Nyw2NDk5OCw2NDk5OSw2NTAwMCw2NTAwMSw2NTAwMiw2NTAwMyw2NTAwNCw2NTAwNSw2NTAwNiw2NTAwNyw2NTUzNCw2NTUzNSwxMzEwNzAsMTMxMDcxLDE5NjYwNiwxOTY2MDcsMjYyMTQyLDI2MjE0MywzMjc2NzgsMzI3Njc5LDM5MzIxNCwzOTMyMTUsNDU4NzUwLDQ1ODc1MSw1MjQyODYsNTI0Mjg3LDU4OTgyMiw1ODk4MjMsNjU1MzU4LDY1NTM1OSw3MjA4OTQsNzIwODk1LDc4NjQzMCw3ODY0MzEsODUxOTY2LDg1MTk2Nyw5MTc1MDIsOTE3NTAzLDk4MzAzOCw5ODMwMzksMTA0ODU3NCwxMDQ4NTc1LDExMTQxMTAsMTExNDExMV07XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cblx0dmFyIG9iamVjdCA9IHt9O1xuXHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdHZhciBoYXMgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5TmFtZSkge1xuXHRcdHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHlOYW1lKTtcblx0fTtcblxuXHR2YXIgY29udGFpbnMgPSBmdW5jdGlvbihhcnJheSwgdmFsdWUpIHtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRpZiAoYXJyYXlbaW5kZXhdID09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0dmFyIG1lcmdlID0gZnVuY3Rpb24ob3B0aW9ucywgZGVmYXVsdHMpIHtcblx0XHRpZiAoIW9wdGlvbnMpIHtcblx0XHRcdHJldHVybiBkZWZhdWx0cztcblx0XHR9XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdHZhciBrZXk7XG5cdFx0Zm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcblx0XHRcdC8vIEEgYGhhc093blByb3BlcnR5YCBjaGVjayBpcyBub3QgbmVlZGVkIGhlcmUsIHNpbmNlIG9ubHkgcmVjb2duaXplZFxuXHRcdFx0Ly8gb3B0aW9uIG5hbWVzIGFyZSB1c2VkIGFueXdheS4gQW55IG90aGVycyBhcmUgaWdub3JlZC5cblx0XHRcdHJlc3VsdFtrZXldID0gaGFzKG9wdGlvbnMsIGtleSkgPyBvcHRpb25zW2tleV0gOiBkZWZhdWx0c1trZXldO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIE1vZGlmaWVkIHZlcnNpb24gb2YgYHVjczJlbmNvZGVgOyBzZWUgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlLlxuXHR2YXIgY29kZVBvaW50VG9TeW1ib2wgPSBmdW5jdGlvbihjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikgfHwgY29kZVBvaW50ID4gMHgxMEZGRkYpIHtcblx0XHRcdC8vIFNlZSBpc3N1ZSAjNDpcblx0XHRcdC8vIOKAnE90aGVyd2lzZSwgaWYgdGhlIG51bWJlciBpcyBpbiB0aGUgcmFuZ2UgMHhEODAwIHRvIDB4REZGRiBvciBpc1xuXHRcdFx0Ly8gZ3JlYXRlciB0aGFuIDB4MTBGRkZGLCB0aGVuIHRoaXMgaXMgYSBwYXJzZSBlcnJvci4gUmV0dXJuIGEgVStGRkZEXG5cdFx0XHQvLyBSRVBMQUNFTUVOVCBDSEFSQUNURVIu4oCdXG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHBhcnNlRXJyb3IoJ2NoYXJhY3RlciByZWZlcmVuY2Ugb3V0c2lkZSB0aGUgcGVybWlzc2libGUgVW5pY29kZSByYW5nZScpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICdcXHVGRkZEJztcblx0XHR9XG5cdFx0aWYgKGhhcyhkZWNvZGVNYXBOdW1lcmljLCBjb2RlUG9pbnQpKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHBhcnNlRXJyb3IoJ2Rpc2FsbG93ZWQgY2hhcmFjdGVyIHJlZmVyZW5jZScpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRlY29kZU1hcE51bWVyaWNbY29kZVBvaW50XTtcblx0XHR9XG5cdFx0aWYgKHN0cmljdCAmJiBjb250YWlucyhpbnZhbGlkUmVmZXJlbmNlQ29kZVBvaW50cywgY29kZVBvaW50KSkge1xuXHRcdFx0cGFyc2VFcnJvcignZGlzYWxsb3dlZCBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcblx0XHRcdGNvZGVQb2ludCAtPSAweDEwMDAwO1xuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0Y29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkY7XG5cdFx0fVxuXHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9O1xuXG5cdHZhciBoZXhFc2NhcGUgPSBmdW5jdGlvbihjb2RlUG9pbnQpIHtcblx0XHRyZXR1cm4gJyYjeCcgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyAnOyc7XG5cdH07XG5cblx0dmFyIGRlY0VzY2FwZSA9IGZ1bmN0aW9uKGNvZGVQb2ludCkge1xuXHRcdHJldHVybiAnJiMnICsgY29kZVBvaW50ICsgJzsnO1xuXHR9O1xuXG5cdHZhciBwYXJzZUVycm9yID0gZnVuY3Rpb24obWVzc2FnZSkge1xuXHRcdHRocm93IEVycm9yKCdQYXJzZSBlcnJvcjogJyArIG1lc3NhZ2UpO1xuXHR9O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBlbmNvZGUgPSBmdW5jdGlvbihzdHJpbmcsIG9wdGlvbnMpIHtcblx0XHRvcHRpb25zID0gbWVyZ2Uob3B0aW9ucywgZW5jb2RlLm9wdGlvbnMpO1xuXHRcdHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDtcblx0XHRpZiAoc3RyaWN0ICYmIHJlZ2V4SW52YWxpZFJhd0NvZGVQb2ludC50ZXN0KHN0cmluZykpIHtcblx0XHRcdHBhcnNlRXJyb3IoJ2ZvcmJpZGRlbiBjb2RlIHBvaW50Jyk7XG5cdFx0fVxuXHRcdHZhciBlbmNvZGVFdmVyeXRoaW5nID0gb3B0aW9ucy5lbmNvZGVFdmVyeXRoaW5nO1xuXHRcdHZhciB1c2VOYW1lZFJlZmVyZW5jZXMgPSBvcHRpb25zLnVzZU5hbWVkUmVmZXJlbmNlcztcblx0XHR2YXIgYWxsb3dVbnNhZmVTeW1ib2xzID0gb3B0aW9ucy5hbGxvd1Vuc2FmZVN5bWJvbHM7XG5cdFx0dmFyIGVzY2FwZUNvZGVQb2ludCA9IG9wdGlvbnMuZGVjaW1hbCA/IGRlY0VzY2FwZSA6IGhleEVzY2FwZTtcblxuXHRcdHZhciBlc2NhcGVCbXBTeW1ib2wgPSBmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRcdHJldHVybiBlc2NhcGVDb2RlUG9pbnQoc3ltYm9sLmNoYXJDb2RlQXQoMCkpO1xuXHRcdH07XG5cblx0XHRpZiAoZW5jb2RlRXZlcnl0aGluZykge1xuXHRcdFx0Ly8gRW5jb2RlIEFTQ0lJIHN5bWJvbHMuXG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleEFzY2lpV2hpdGVsaXN0LCBmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRcdFx0Ly8gVXNlIG5hbWVkIHJlZmVyZW5jZXMgaWYgcmVxdWVzdGVkICYgcG9zc2libGUuXG5cdFx0XHRcdGlmICh1c2VOYW1lZFJlZmVyZW5jZXMgJiYgaGFzKGVuY29kZU1hcCwgc3ltYm9sKSkge1xuXHRcdFx0XHRcdHJldHVybiAnJicgKyBlbmNvZGVNYXBbc3ltYm9sXSArICc7Jztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZXNjYXBlQm1wU3ltYm9sKHN5bWJvbCk7XG5cdFx0XHR9KTtcblx0XHRcdC8vIFNob3J0ZW4gYSBmZXcgZXNjYXBlcyB0aGF0IHJlcHJlc2VudCB0d28gc3ltYm9scywgb2Ygd2hpY2ggYXQgbGVhc3Qgb25lXG5cdFx0XHQvLyBpcyB3aXRoaW4gdGhlIEFTQ0lJIHJhbmdlLlxuXHRcdFx0aWYgKHVzZU5hbWVkUmVmZXJlbmNlcykge1xuXHRcdFx0XHRzdHJpbmcgPSBzdHJpbmdcblx0XHRcdFx0XHQucmVwbGFjZSgvJmd0O1xcdTIwRDIvZywgJyZudmd0OycpXG5cdFx0XHRcdFx0LnJlcGxhY2UoLyZsdDtcXHUyMEQyL2csICcmbnZsdDsnKVxuXHRcdFx0XHRcdC5yZXBsYWNlKC8mI3g2NjsmI3g2QTsvZywgJyZmamxpZzsnKTtcblx0XHRcdH1cblx0XHRcdC8vIEVuY29kZSBub24tQVNDSUkgc3ltYm9scy5cblx0XHRcdGlmICh1c2VOYW1lZFJlZmVyZW5jZXMpIHtcblx0XHRcdFx0Ly8gRW5jb2RlIG5vbi1BU0NJSSBzeW1ib2xzIHRoYXQgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBuYW1lZCByZWZlcmVuY2UuXG5cdFx0XHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4RW5jb2RlTm9uQXNjaWksIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0XHRcdC8vIE5vdGU6IHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hlY2sgYGhhcyhlbmNvZGVNYXAsIHN0cmluZylgIGhlcmUuXG5cdFx0XHRcdFx0cmV0dXJuICcmJyArIGVuY29kZU1hcFtzdHJpbmddICsgJzsnO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdC8vIE5vdGU6IGFueSByZW1haW5pbmcgbm9uLUFTQ0lJIHN5bWJvbHMgYXJlIGhhbmRsZWQgb3V0c2lkZSBvZiB0aGUgYGlmYC5cblx0XHR9IGVsc2UgaWYgKHVzZU5hbWVkUmVmZXJlbmNlcykge1xuXHRcdFx0Ly8gQXBwbHkgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMuXG5cdFx0XHQvLyBFbmNvZGUgYDw+XCInJmAgdXNpbmcgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMuXG5cdFx0XHRpZiAoIWFsbG93VW5zYWZlU3ltYm9scykge1xuXHRcdFx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleEVzY2FwZSwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRcdFx0cmV0dXJuICcmJyArIGVuY29kZU1hcFtzdHJpbmddICsgJzsnOyAvLyBubyBuZWVkIHRvIGNoZWNrIGBoYXMoKWAgaGVyZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdC8vIFNob3J0ZW4gZXNjYXBlcyB0aGF0IHJlcHJlc2VudCB0d28gc3ltYm9scywgb2Ygd2hpY2ggYXQgbGVhc3Qgb25lIGlzXG5cdFx0XHQvLyBgPD5cIicmYC5cblx0XHRcdHN0cmluZyA9IHN0cmluZ1xuXHRcdFx0XHQucmVwbGFjZSgvJmd0O1xcdTIwRDIvZywgJyZudmd0OycpXG5cdFx0XHRcdC5yZXBsYWNlKC8mbHQ7XFx1MjBEMi9nLCAnJm52bHQ7Jyk7XG5cdFx0XHQvLyBFbmNvZGUgbm9uLUFTQ0lJIHN5bWJvbHMgdGhhdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIG5hbWVkIHJlZmVyZW5jZS5cblx0XHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4RW5jb2RlTm9uQXNjaWksIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0XHQvLyBOb3RlOiB0aGVyZSBpcyBubyBuZWVkIHRvIGNoZWNrIGBoYXMoZW5jb2RlTWFwLCBzdHJpbmcpYCBoZXJlLlxuXHRcdFx0XHRyZXR1cm4gJyYnICsgZW5jb2RlTWFwW3N0cmluZ10gKyAnOyc7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKCFhbGxvd1Vuc2FmZVN5bWJvbHMpIHtcblx0XHRcdC8vIEVuY29kZSBgPD5cIicmYCB1c2luZyBoZXhhZGVjaW1hbCBlc2NhcGVzLCBub3cgdGhhdCB0aGV54oCZcmUgbm90IGhhbmRsZWRcblx0XHRcdC8vIHVzaW5nIG5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzLlxuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhFc2NhcGUsIGVzY2FwZUJtcFN5bWJvbCk7XG5cdFx0fVxuXHRcdHJldHVybiBzdHJpbmdcblx0XHRcdC8vIEVuY29kZSBhc3RyYWwgc3ltYm9scy5cblx0XHRcdC5yZXBsYWNlKHJlZ2V4QXN0cmFsU3ltYm9scywgZnVuY3Rpb24oJDApIHtcblx0XHRcdFx0Ly8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG5cdFx0XHRcdHZhciBoaWdoID0gJDAuY2hhckNvZGVBdCgwKTtcblx0XHRcdFx0dmFyIGxvdyA9ICQwLmNoYXJDb2RlQXQoMSk7XG5cdFx0XHRcdHZhciBjb2RlUG9pbnQgPSAoaGlnaCAtIDB4RDgwMCkgKiAweDQwMCArIGxvdyAtIDB4REMwMCArIDB4MTAwMDA7XG5cdFx0XHRcdHJldHVybiBlc2NhcGVDb2RlUG9pbnQoY29kZVBvaW50KTtcblx0XHRcdH0pXG5cdFx0XHQvLyBFbmNvZGUgYW55IHJlbWFpbmluZyBCTVAgc3ltYm9scyB0aGF0IGFyZSBub3QgcHJpbnRhYmxlIEFTQ0lJIHN5bWJvbHNcblx0XHRcdC8vIHVzaW5nIGEgaGV4YWRlY2ltYWwgZXNjYXBlLlxuXHRcdFx0LnJlcGxhY2UocmVnZXhCbXBXaGl0ZWxpc3QsIGVzY2FwZUJtcFN5bWJvbCk7XG5cdH07XG5cdC8vIEV4cG9zZSBkZWZhdWx0IG9wdGlvbnMgKHNvIHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gZ2xvYmFsbHkpLlxuXHRlbmNvZGUub3B0aW9ucyA9IHtcblx0XHQnYWxsb3dVbnNhZmVTeW1ib2xzJzogZmFsc2UsXG5cdFx0J2VuY29kZUV2ZXJ5dGhpbmcnOiBmYWxzZSxcblx0XHQnc3RyaWN0JzogZmFsc2UsXG5cdFx0J3VzZU5hbWVkUmVmZXJlbmNlcyc6IGZhbHNlLFxuXHRcdCdkZWNpbWFsJyA6IGZhbHNlXG5cdH07XG5cblx0dmFyIGRlY29kZSA9IGZ1bmN0aW9uKGh0bWwsIG9wdGlvbnMpIHtcblx0XHRvcHRpb25zID0gbWVyZ2Uob3B0aW9ucywgZGVjb2RlLm9wdGlvbnMpO1xuXHRcdHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDtcblx0XHRpZiAoc3RyaWN0ICYmIHJlZ2V4SW52YWxpZEVudGl0eS50ZXN0KGh0bWwpKSB7XG5cdFx0XHRwYXJzZUVycm9yKCdtYWxmb3JtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZScpO1xuXHRcdH1cblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKHJlZ2V4RGVjb2RlLCBmdW5jdGlvbigkMCwgJDEsICQyLCAkMywgJDQsICQ1LCAkNiwgJDcsICQ4KSB7XG5cdFx0XHR2YXIgY29kZVBvaW50O1xuXHRcdFx0dmFyIHNlbWljb2xvbjtcblx0XHRcdHZhciBkZWNEaWdpdHM7XG5cdFx0XHR2YXIgaGV4RGlnaXRzO1xuXHRcdFx0dmFyIHJlZmVyZW5jZTtcblx0XHRcdHZhciBuZXh0O1xuXG5cdFx0XHRpZiAoJDEpIHtcblx0XHRcdFx0cmVmZXJlbmNlID0gJDE7XG5cdFx0XHRcdC8vIE5vdGU6IHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hlY2sgYGhhcyhkZWNvZGVNYXAsIHJlZmVyZW5jZSlgLlxuXHRcdFx0XHRyZXR1cm4gZGVjb2RlTWFwW3JlZmVyZW5jZV07XG5cdFx0XHR9XG5cblx0XHRcdGlmICgkMikge1xuXHRcdFx0XHQvLyBEZWNvZGUgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgd2l0aG91dCB0cmFpbGluZyBgO2AsIGUuZy4gYCZhbXBgLlxuXHRcdFx0XHQvLyBUaGlzIGlzIG9ubHkgYSBwYXJzZSBlcnJvciBpZiBpdCBnZXRzIGNvbnZlcnRlZCB0byBgJmAsIG9yIGlmIGl0IGlzXG5cdFx0XHRcdC8vIGZvbGxvd2VkIGJ5IGA9YCBpbiBhbiBhdHRyaWJ1dGUgY29udGV4dC5cblx0XHRcdFx0cmVmZXJlbmNlID0gJDI7XG5cdFx0XHRcdG5leHQgPSAkMztcblx0XHRcdFx0aWYgKG5leHQgJiYgb3B0aW9ucy5pc0F0dHJpYnV0ZVZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKHN0cmljdCAmJiBuZXh0ID09ICc9Jykge1xuXHRcdFx0XHRcdFx0cGFyc2VFcnJvcignYCZgIGRpZCBub3Qgc3RhcnQgYSBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiAkMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdFx0XHRwYXJzZUVycm9yKFxuXHRcdFx0XHRcdFx0XHQnbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBOb3RlOiB0aGVyZSBpcyBubyBuZWVkIHRvIGNoZWNrIGBoYXMoZGVjb2RlTWFwTGVnYWN5LCByZWZlcmVuY2UpYC5cblx0XHRcdFx0XHRyZXR1cm4gZGVjb2RlTWFwTGVnYWN5W3JlZmVyZW5jZV0gKyAobmV4dCB8fCAnJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCQ0KSB7XG5cdFx0XHRcdC8vIERlY29kZSBkZWNpbWFsIGVzY2FwZXMsIGUuZy4gYCYjMTE5NTU4O2AuXG5cdFx0XHRcdGRlY0RpZ2l0cyA9ICQ0O1xuXHRcdFx0XHRzZW1pY29sb24gPSAkNTtcblx0XHRcdFx0aWYgKHN0cmljdCAmJiAhc2VtaWNvbG9uKSB7XG5cdFx0XHRcdFx0cGFyc2VFcnJvcignY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb2RlUG9pbnQgPSBwYXJzZUludChkZWNEaWdpdHMsIDEwKTtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludFRvU3ltYm9sKGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCQ2KSB7XG5cdFx0XHRcdC8vIERlY29kZSBoZXhhZGVjaW1hbCBlc2NhcGVzLCBlLmcuIGAmI3gxRDMwNjtgLlxuXHRcdFx0XHRoZXhEaWdpdHMgPSAkNjtcblx0XHRcdFx0c2VtaWNvbG9uID0gJDc7XG5cdFx0XHRcdGlmIChzdHJpY3QgJiYgIXNlbWljb2xvbikge1xuXHRcdFx0XHRcdHBhcnNlRXJyb3IoJ2NoYXJhY3RlciByZWZlcmVuY2Ugd2FzIG5vdCB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29kZVBvaW50ID0gcGFyc2VJbnQoaGV4RGlnaXRzLCAxNik7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnRUb1N5bWJvbChjb2RlUG9pbnQsIHN0cmljdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHdl4oCZcmUgc3RpbGwgaGVyZSwgYGlmICgkNylgIGlzIGltcGxpZWQ7IGl04oCZcyBhbiBhbWJpZ3VvdXNcblx0XHRcdC8vIGFtcGVyc2FuZCBmb3Igc3VyZS4gaHR0cHM6Ly9tdGhzLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzXG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHBhcnNlRXJyb3IoXG5cdFx0XHRcdFx0J25hbWVkIGNoYXJhY3RlciByZWZlcmVuY2Ugd2FzIG5vdCB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICQwO1xuXHRcdH0pO1xuXHR9O1xuXHQvLyBFeHBvc2UgZGVmYXVsdCBvcHRpb25zIChzbyB0aGV5IGNhbiBiZSBvdmVycmlkZGVuIGdsb2JhbGx5KS5cblx0ZGVjb2RlLm9wdGlvbnMgPSB7XG5cdFx0J2lzQXR0cmlidXRlVmFsdWUnOiBmYWxzZSxcblx0XHQnc3RyaWN0JzogZmFsc2Vcblx0fTtcblxuXHR2YXIgZXNjYXBlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlZ2V4RXNjYXBlLCBmdW5jdGlvbigkMCkge1xuXHRcdFx0Ly8gTm90ZTogdGhlcmUgaXMgbm8gbmVlZCB0byBjaGVjayBgaGFzKGVzY2FwZU1hcCwgJDApYCBoZXJlLlxuXHRcdFx0cmV0dXJuIGVzY2FwZU1hcFskMF07XG5cdFx0fSk7XG5cdH07XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIGhlID0ge1xuXHRcdCd2ZXJzaW9uJzogJzEuMi4wJyxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VzY2FwZSc6IGVzY2FwZSxcblx0XHQndW5lc2NhcGUnOiBkZWNvZGVcblx0fTtcblxuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZShmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBoZTtcblx0XHR9KTtcblx0fVx0ZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgIWZyZWVFeHBvcnRzLm5vZGVUeXBlKSB7XG5cdFx0aWYgKGZyZWVNb2R1bGUpIHsgLy8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gaGU7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAodmFyIGtleSBpbiBoZSkge1xuXHRcdFx0XHRoYXMoaGUsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBoZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LmhlID0gaGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvLyEgbW9tZW50LmpzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzICgpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrIChjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eSAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdyAgICAgICAgOiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRNb250aCAgICA6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICAgICAgaXNvICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWREYXRlUGFydHMgOiBbXSxcbiAgICAgICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICByZmMyODIyICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaCA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICB2YXIgc29tZTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgICAgIHZhciBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGlzTm93VmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPSBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmIChob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2Fybihtc2cgKyAnXFxuQXJndW1lbnRzOiAnICsgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgKyAnXFxuJyArIChuZXcgRXJyb3IoKSkuc3RhY2spO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbiAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCAoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgICAgICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgICAgIExUICAgOiAnaDptbSBBJyxcbiAgICAgICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbiAgICB2YXIgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG4gICAgZnVuY3Rpb24gb3JkaW5hbCAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgbSAgOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCAgOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCAgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSAgOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgIDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihvdXRwdXQpKSA/XG4gICAgICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIHZhciBwcmlvcml0aWVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICAgICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW107XG4gICAgICAgIGZvciAodmFyIHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIHVuaXRzLnB1c2goe3VuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdfSk7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fFlZWVlZWXxZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nO1xuXG4gICAgdmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbiAgICB2YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbiAgICB2YXIgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksIGksIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJywgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKSA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxuICAgIHZhciBtYXRjaDIgICAgICAgICA9IC9cXGRcXGQvOyAgICAgICAgICAvLyAgICAgIDAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG4gICAgdmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2g2ICAgICAgICAgPSAvWystXT9cXGR7Nn0vOyAgICAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxuICAgIHZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG4gICAgdmFyIG1hdGNoNXRvNiAgICAgID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vOyAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgdmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxuICAgIHZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoMXRvNiAgICAgID0gL1srLV0/XFxkezEsNn0vOyAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuXG4gICAgdmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxuICAgIHZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxuICAgIHZhciBtYXRjaE9mZnNldCAgICA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naTsgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgdmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxuICAgIHZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbiAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgdmFyIG1hdGNoV29yZCA9IC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pO1xuXG4gICAgdmFyIHJlZ2V4ZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4gKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KSA/IHJlZ2V4IDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUocy5yZXBsYWNlKCdcXFxcJywgJycpLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSwgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBZRUFSID0gMDtcbiAgICB2YXIgTU9OVEggPSAxO1xuICAgIHZhciBEQVRFID0gMjtcbiAgICB2YXIgSE9VUiA9IDM7XG4gICAgdmFyIE1JTlVURSA9IDQ7XG4gICAgdmFyIFNFQ09ORCA9IDU7XG4gICAgdmFyIE1JTExJU0VDT05EID0gNjtcbiAgICB2YXIgV0VFSyA9IDc7XG4gICAgdmFyIFdFRUtEQVkgPSA4O1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyAnJyArIHkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsICA1XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0IChtb20sIHVuaXQpIHtcbiAgICAgICAgcmV0dXJuIG1vbS5pc1ZhbGlkKCkgP1xuICAgICAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEgKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG1vbS5pc1ZhbGlkKCkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHVuaXQgPT09ICdGdWxsWWVhcicgJiYgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJiBtb20ubW9udGgoKSA9PT0gMSAmJiBtb20uZGF0ZSgpID09PSAyOSkge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSwgbW9tLm1vbnRoKCksIGRheXNJbk1vbnRoKHZhbHVlLCBtb20ubW9udGgoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMSA/IChpc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyOCkgOiAoMzEgLSBtb2RNb250aCAlIDcgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHMgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0IChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydCA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0W01PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiBtb250aHNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRlICh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSAoeSkge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBhcmdzWzBdID0geSArIDQwMDtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlaywgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMgKHdzLCBuKSB7XG4gICAgICAgIHJldHVybiB3cy5zbGljZShuLCA3KS5jb25jYXQod3Muc2xpY2UoMCwgbikpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWyhtICYmIG0gIT09IHRydWUgJiYgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpKSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB3ZWVrZGF5c1ttLmRheSgpXSA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c1Nob3J0LCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZCcgJiYgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pblBpZWNlcyA9IFtdLCBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb20sIG1pbnAsIHNob3J0cCwgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICBzaG9ydHAgPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICBsb25ncCA9IHRoaXMud2Vla2RheXMobW9tLCAnJyk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignSCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAvLyB0aGlzIHJ1bGUuXG4gICAgdmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fTtcbiAgICB2YXIgbG9jYWxlRmFtaWxpZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGw7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICB2YXIgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUgKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAvL3dhcm4gdXNlciBpZiBhcmd1bWVudHMgYXJlIHBhc3NlZCBidXQgdGhlIGxvY2FsZSBjb3VsZCBub3QgYmUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jYWxlICcgKyBrZXkgKyAgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZSgnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLCB0bXBMb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICAvLyBNRVJHRVxuICAgICAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGdldExvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgICAgIC0xO1xuXG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIGV4cGVjdGVkV2Vla2RheSwgeWVhclRvVXNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8IGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVEMgPyBjb25maWcuX2QuZ2V0VVRDRGF5KCkgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5KSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3c7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhcik7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgdmFyIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG4gICAgdmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG4gICAgdmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbiAgICB2YXIgaXNvRGF0ZXMgPSBbXG4gICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbiAgICBdO1xuXG4gICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgIHZhciBpc29UaW1lcyA9IFtcbiAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgXTtcblxuICAgIHZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgdmFyIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvO1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyh5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCAnICcpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbnRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUocGFyc2VkSW5wdXRbMF0sIHBhcnNlZElucHV0WzFdLCBwYXJzZWRJbnB1dFsyXSkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG9ic09mZnNldHMgPSB7XG4gICAgICAgIFVUOiAwLFxuICAgICAgICBHTVQ6IDAsXG4gICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgUFNUOiAtOCAqIDYwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApO1xuICAgICAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKG1hdGNoWzRdLCBtYXRjaFszXSwgbWF0Y2hbMl0sIG1hdGNoWzVdLCBtYXRjaFs2XSwgbWF0Y2hbN10pO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIG1ham9yIHJlbGVhc2UuIFBsZWFzZSByZWZlciB0byAnICtcbiAgICAgICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMDtcblxuICAgICAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICAvLyAgICAgICAgICdyZWdleCcsIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9IHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbCAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXggKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFsneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmICghKGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiYgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlcmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICAgICAgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCAodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2h1bmsgICA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgP1xuICAgICAgICAgIDAgOlxuICAgICAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID0gKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpID8gaW5wdXQudmFsdWVPZigpIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICB2YXIgaXNvUmVnZXggPSAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGggOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzIDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgICAgIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDsgdmFsID0gcGVyaW9kOyBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkICAgICAgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyk7XG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZSc7XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIobG9jYWxGcm9tLCB1bml0cykgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cykgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsXG4gICAgICAgICAgICB6b25lRGVsdGEsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzOyBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDsgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZTtcbiAgICAgICAgdmFyIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgICAgICB2YXIgem9uZSA9ICcnO1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHZhciB5ZWFyID0gKDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwO1xuICAgIHZhciBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05EO1xuICAgIHZhciBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURTtcbiAgICB2YXIgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSO1xuXG4gICAgLy8gYWN0dWFsIG1vZHVsbyAtIGhhbmRsZXMgbmVnYXRpdmUgbnVtYmVycyAoZm9yIGRhdGVzIGJlZm9yZSAxOTcwKTpcbiAgICBmdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgICByZXR1cm4gKGRpdmlkZW5kICUgZGl2aXNvciArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSAtIHRoaXMubW9udGgoKSAlIDMsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksIE1TX1BFUl9IT1VSKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSAtIHRoaXMubW9udGgoKSAlIDMgKyAzLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDcpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgNykgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9IT1VSIC0gbW9kJDEodGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksIE1TX1BFUl9IT1VSKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9TRUNPTkQgLSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXggKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgICAgICAobG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlKSA6XG4gICAgICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID0gTWF0aC5yb3VuZCgodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNSkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIGRheU9mWWVhciksICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW47XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgICAgICAgICAgICAgICA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciAgICAgICAgICA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmICAgICAgICAgICAgICA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tICAgICAgICAgICAgICA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG4gICAgcHJvdG8udG9Ob3cgICAgICAgICAgICAgPSB0b05vdztcbiAgICBwcm90by5nZXQgICAgICAgICAgICAgICA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyICAgICAgICAgICA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgICAgICAgICAgICA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkICAgICAgICAgICA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSAgICAgICAgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyAgICAgID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCAgICAgICAgICAgICAgID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCAgICAgICAgICA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgICAgICAgICAgID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSAgICAgICAgICAgID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xuICAgIHByb3RvLnRvSlNPTiAgICAgICAgICAgID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nICAgICAgICAgID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgICAgICAgICAgID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgICAgICA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgICAgICAgID0gcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ICAgICAgICA9IHByb3RvLmRheXMgICAgICAgICAgICAgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciAgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgICAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbiAgICBwcm90by55ZWFycyAgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLCBnZXRTZXRZZWFyKTtcbiAgICBwcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKCdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJywgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXggKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCAgICAgICAgICAgICA9IHNldDtcblxuICAgIHByb3RvJDEubW9udGhzICAgICAgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyAgICAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggICAgICAgPSAgICAgICAgd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCAgICA9ICAgICAgICB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG4gICAgICAgIHZhciB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbCAoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0IChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbiAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0b0ludChudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLCBnZXRMb2NhbGUpO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgICA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgICAgICAgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyAgICAgICAgID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxIChkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICAgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlICgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IHRoaXMuX2RheXM7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSB0aGlzLl9tb250aHM7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgICAgICB2YXIgc2Vjb25kcywgbWludXRlcywgaG91cnMsIHllYXJzLCBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoISgobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApKSkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzICAgICAgICAgICA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzICA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyAoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gZGF5cyAqIDQ4MDAgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzIChtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzICh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzO1xuICAgICAgICB2YXIgbW9udGhzO1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOiAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOiAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YkMSAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbiAgICB2YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbiAgICB2YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbiAgICB2YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbiAgICB2YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbiAgICB2YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbiAgICB2YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbiAgICB2YXIgYXNRdWFydGVycyAgICAgPSBtYWtlQXMoJ1EnKTtcbiAgICB2YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG4gICAgdmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbiAgICB2YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xuICAgIHZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xuICAgIHZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICAgIHZhciB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzczogNDQsICAgICAgICAgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICBtIDogNDUsICAgICAgICAgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgIGggOiAyMiwgICAgICAgICAvLyBob3VycyB0byBkYXlcbiAgICAgICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICAgICAgTSA6IDExICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpO1xuICAgICAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgICAgIHZhciBob3VycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpO1xuICAgICAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICAgICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgICAgIHZhciB5ZWFycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpO1xuXG4gICAgICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgICAgIHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgICAmJiBbJ3NzJywgc2Vjb25kc10gfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDw9IDEgICAgICAgICAgICAgJiYgWydtJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDwgdGhyZXNob2xkcy5oICAgJiYgWydoaCcsIGhvdXJzXSAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgICAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDw9IDEgICAgICAgICAgICAgJiYgWydNJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcgKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZSAod2l0aFN1ZmZpeCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDA7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSBhYnMkMSh0aGlzLl9kYXlzKTtcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICB2YXIgWSA9IHllYXJzO1xuICAgICAgICB2YXIgTSA9IG1vbnRocztcbiAgICAgICAgdmFyIEQgPSBkYXlzO1xuICAgICAgICB2YXIgaCA9IGhvdXJzO1xuICAgICAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgICAgIHZhciBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgICAgIChZID8geW1TaWduICsgWSArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAoTSA/IHltU2lnbiArIE0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGggPyBobXNTaWduICsgaCArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJyk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgICAgICAgID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzICAgICAgICAgICAgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgICAgICAgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgICAgICAgICAgICAgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyAgICAgPSBhc1F1YXJ0ZXJzO1xuICAgIHByb3RvJDIuYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiAgICAgICAgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lICAgICAgICAgID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCAgICAgICAgICAgID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgICAgICAgID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzICAgICAgICAgICA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyAgICAgICAgICA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyAgICAgICAgICA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgICAgICAgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiAgICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjI0LjAnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbiAgICBob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG4gICAgaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuICAgIGhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSAgICAgICAgICAgICAgICA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluICAgICAgICAgICA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgICAgICAgICAgICAgICA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nICA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCAgICAgICAgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgICAgICAgICAgICAgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsImltcG9ydCB7IHByaW50IH0gZnJvbSAncmRmanNvbic7XG5cbi8qKlxuICogQSBtb2R1bGUgdGhhdCBjb250YWluIHV0aWxpdHkgbWV0aG9kcyBmb3IgZ2VuZXJhdGluZyBodG1sIGZvciBlbnRyaWVzLlxuICpcbiAqIEBleHBvcnRzIHN0b3JlL2h0bWxcbiAqIEBuYW1lc3BhY2VcbiAqL1xuY29uc3QgaHRtbCA9IHt9O1xuLy8gVGhlIGFib3ZlIGNvbnN0cnVjdGlvbiBzZWVtIHRvIGJlIG5lZWRlZCBiZWNhdXNlIG9mIGpzZG9jMyBpc3N1ZXMgd2l0aCBub3QgZGV0ZWN0aW5nIHRoZVxuLy8gZXhwb3J0cyB2YXJpYWJsZS5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB0YWJsZSB3aXRoIGNvbHVtbnMgc3ViamVjdCwgcHJlZGljYXRlLCBhbmQgb2JqZWN0LlxuICogQHBhcmFtIHtzdG9yZS9FbnRyeX0gZW50cnkgdG8gZXhwb3NlIG1ldGFkYXRhIGZvclxuICogQHJldHVybnMge3N0cmluZ30gcmVuZGVyZWQgaHRtbCBhcyBhIHN0cmluZ1xuICovXG5odG1sLm1ldGFkYXRhVGFibGUgPSAoZW50cnkpID0+IHtcbiAgY29uc3QgZGVsZWdhdGVzID0gcHJpbnQucHJldHR5VHJlZShlbnRyeS5nZXRNZXRhZGF0YSgpLCBlbnRyeS5nZXRSZXNvdXJjZVVSSSgpKTtcbiAgY29uc3QgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsZWdhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZCA9IGRlbGVnYXRlc1tpXTtcbiAgICBjb25zdCBzdCA9IGQuc3RtdDtcbiAgICBhcnIucHVzaChgJHsnPHRyPicgK1xuICAgICAgXCI8dGQgY2xhc3M9J3JkZl9zdWJqZWN0Jz5cIn0ke3N0LmlzU3ViamVjdEJsYW5rKCkgPyBkLnMgOlxuICAgICAgYDxhIGhyZWY9JyR7c3QuZ2V0U3ViamVjdCgpfSc+JHtkLnN9PC9hPmB9PC90ZD5gICtcbiAgICAgIGA8dGQgY2xhc3M9J3JkZl9wcmVkaWNhdGUnPjxhIGhyZWY9JyR7c3QuZ2V0UHJlZGljYXRlKCl9Jz4ke2QucH08L2E+PC90ZD5gICtcbiAgICAgIGA8dGQgY2xhc3M9J3JkZl9vYmplY3QnPiR7c3QuZ2V0VHlwZSgpID09PSAndXJpJyA/IGA8YSBocmVmPScke3N0LmdldFZhbHVlKCl9Jz4ke2Qub308L2E+YCA6XG4gICAgICAgIGQub308L3RkPjwvdHI+YCk7XG4gIH1cbiAgcmV0dXJuIGFyci5qb2luKCdcXG4nKTtcbn07XG5cbmNvbnN0IF9pbmQgPSB7fTtcbmNvbnN0IGluZGVudGVyID0gZnVuY3Rpb24gKGluZGVudCkge1xuICBpZiAoIV9pbmRbaW5kZW50XSkge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGluZGVudDsgaSsrKSB7XG4gICAgICBzdHIgKz0gXCI8c3BhbiBjbGFzcz0ncmRmX2luZGVudCc+PC9zcGFuPlwiO1xuICAgIH1cbiAgICBfaW5kW2luZGVudF0gPSBzdHI7XG4gIH1cbiAgcmV0dXJuIF9pbmRbaW5kZW50XTtcbn07XG5cbi8qKlxuICogUHJpbnRzIG9uZSBsZXZlbCBvZiB0cmlwbGVzIGZyb20gYSBzdWJqZWN0IHdoZXJlIFVSSXMgYXJlIG5hbWVzcGFjZWQuXG4gKlxuICogQHBhcmFtIHtyZGZqc29uL0dyYXBofSBncmFwaCB0aGUgZ3JhcGggY29udGFpbmluZyB0aGUgbWV0YWRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJqZWN0IFVSSSB0byBhIHJlc291cmNlIHRvIHN0YXJ0IGZyb21cbiAqIEByZXR1cm5zIHtzdHJpbmd9IHN0cmluZyB3aXRoIHRoZSB0cmlwbGVzIHJlbmRlcmVkIGFzIEhUTUwuXG4gKi9cbmh0bWwubWV0YWRhdGFJbmRlbnQgPSBmdW5jdGlvbiAoZ3JhcGgsIHN1YmplY3QpIHtcbiAgY29uc3QgZGVsZWdhdGVzID0gcHJpbnQucHJldHR5VHJlZShncmFwaCwgc3ViamVjdCk7XG4gIGNvbnN0IGFyciA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlbGVnYXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGQgPSBkZWxlZ2F0ZXNbaV07XG4gICAgY29uc3Qgc3QgPSBkLnN0bXQ7XG4gICAgYXJyLnB1c2goYDxkaXYgY2xhc3M9J3JkZl9zdGF0ZW1lbnQnPiR7aW5kZW50ZXIoZC5pbmRlbnQpfTxzcGFuIGNsYXNzPSdyZGZfc3ViamVjdCc+JHtcbiAgICAgICAgc3QuaXNTdWJqZWN0QmxhbmsoKSA/IGQucyA6IGA8YSBocmVmPScke3N0LmdldFN1YmplY3QoKX0nPiR7ZC5zfTwvYT5gfTwvc3Bhbj5gICtcbiAgICAgIGA8c3BhbiBjbGFzcz0ncmRmX3ByZWRpY2F0ZSc+PGEgaHJlZj0nJHtzdC5nZXRQcmVkaWNhdGUoKX0nPiR7ZC5wfTwvYT48L3NwYW4+YCArXG4gICAgICBgPHNwYW4gY2xhc3M9J3JkZl9vYmplY3QnPiR7c3QuZ2V0VHlwZSgpID09PSAndXJpJyA/XG4gICAgICAgIGA8YSBocmVmPScke3N0LmdldFZhbHVlKCl9Jz4ke2Qub308L2E+YCA6IGQub308L3NwYW4+PC9kaXY+YCk7XG4gIH1cbiAgcmV0dXJuIGFyci5qb2luKCdcXG4nKTtcbn07XG5cbi8qKlxuICogUHJpbnRzIHRoZSB0aHJlZSB0eXBlcyBvZiB0aGUgZW50cnksIGkuZS4gZW50cnksIHJlc291cmNlIGFuZCBncmFwaHR5cGUuXG4gKiBAcGFyYW0ge3N0b3JlL0VudHJ5SW5mb30gZW50cnlJbmZvXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5odG1sLmVudHJ5SW5mbyA9IGVudHJ5SW5mbyA9PlxuICBgPHNwYW4gY2xhc3M9J2luZm8gZW50cnl0eXBlJz48bGFiZWw+RW50cnlUeXBlOjwvbGFiZWw+ICR7ZW50cnlJbmZvLmdldEVudHJ5VHlwZSgpfTwvc3Bhbj5gICtcbiAgYDxzcGFuIGNsYXNzPSdpbmZvIHJlc291cmNlVHlwZSc+PGxhYmVsPlJlc291cmNlVHlwZTo8L2xhYmVsPiAke2VudHJ5SW5mby5nZXRSZXNvdXJjZVR5cGUoKVxuICAgIH08L3NwYW4+YCArXG4gIGA8c3BhbiBjbGFzcz0naW5mbyBncmFwaFR5cGUnPjxsYWJlbD5HcmFwaFR5cGU6PC9sYWJlbD4gJHtlbnRyeUluZm8uZ2V0R3JhcGhUeXBlKCl9PC9zcGFuPmA7XG5cbi8qKlxuICogUHJpbnRzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlbnRyeSwgaW5jbHVkaW5nIGVudHJ5aW5mbywgbWV0YWRhdGEsIGNhY2hlZCBleHRlcm5hbCBtZXRhZGF0YVxuICogYXMgd2VsbCBhcyB3aGljaCBjb250ZXh0IHRoZSBlbnRyeSBiZWxvbmdzIHRvLlxuICpcbiAqIEBwYXJhbSB7c3RvcmUvRW50cnl9IGVudHJ5XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZW50cnkgYXMgYSBIVE1MIHN0cmluZy5cbiAqL1xuaHRtbC5wcmludCA9IChlbnRyeSkgPT4ge1xuICBjb25zdCBzdHJzID0gW2Ake1wiPGRpdiBjbGFzcz0nZW50cnknPlwiICtcbiAgXCI8aDM+Q29udGV4dDogPGEgY2xhc3M9J2NvbnRleHRVUkknIGhyZWY9J1wifSR7ZW50cnkuZ2V0Q29udGV4dCgpLmdldEVudHJ5VVJJKCl9Jz4ke2VudHJ5LmdldENvbnRleHQoKS5nZXRJZCgpfTwvYT4gPHNwYW4+PC9zcGFuPiBgICtcbiAgYEVudHJ5OiA8YSBjbGFzcz0nZW50cnlVUkknIGhyZWY9JyR7ZW50cnkuZ2V0VVJJKCl9Jz4ke2VudHJ5LmdldElkKCl9PC9hPjwvaDM+YCArXG4gICc8ZGl2PicgK1xuICBgPGRpdiBjbGFzcz0nZW50cnlJbmZvJz4ke2h0bWwuZW50cnlJbmZvKGVudHJ5LmdldEVudHJ5SW5mbygpKX08L2Rpdj5gXTtcbiAgY29uc3QgbWQgPSBlbnRyeS5nZXRNZXRhZGF0YSgpO1xuICBpZiAobWQgJiYgIW1kLmlzRW1wdHkoKSkge1xuICAgIHN0cnMucHVzaChgPGg0PkxvY2FsIG1ldGFkYXRhOjwvaDQ+PGRpdiBjbGFzcz0nbWV0YWRhdGEnPiR7aHRtbC5tZXRhZGF0YUluZGVudChtZCwgZW50cnkuZ2V0UmVzb3VyY2VVUkkoKSl9PC9kaXY+YCk7XG4gIH1cbiAgY29uc3QgZW1kID0gZW50cnkuZ2V0Q2FjaGVkRXh0ZXJuYWxNZXRhZGF0YSgpO1xuICBpZiAoZW1kICYmICFlbWQuaXNFbXB0eSgpKSB7XG4gICAgc3Rycy5wdXNoKGA8aDQ+Q2FjaGVkIGV4dGVybmFsIG1ldGFkYXRhOjwvaDQ+PGRpdiBjbGFzcz0nbWV0YWRhdGEnPiR7aHRtbC5tZXRhZGF0YUluZGVudChlbWQsIGVudHJ5LmdldFJlc291cmNlVVJJKCkpfTwvZGl2PmApO1xuICB9XG4gIHN0cnMucHVzaCgnPC9kaXY+PC9kaXY+Jyk7XG4gIHJldHVybiBzdHJzLmpvaW4oJycpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgY29udGFpbnMgdXRpbGl0eSBtZXRob2RzIGZvciBwcm9taXNlcy5cbiAqXG4gKiBAZXhwb3J0cyBzdG9yZS9wcm9taXNlVXRpbFxuICogQG5hbWVzcGFjZVxuICovXG5jb25zdCBwcm9taXNlVXRpbCA9IHt9O1xuXG4vKipcbiAqIEFzeW5jaHJvbm91cyBmb3JFYWNoIHJlbHlpbmcgb24gcHJvbWlzZXMgdGhhdCB3b3JrcyBpbiBzZXJpYWwgcmF0aGVyIHRoYW4gcGFyYWxsZWxsLlxuICogSXQgaW52b2tlcyBhIGZ1bmN0aW9uIG9uIGVhY2ggaXRlbSBvbmx5IGFmdGVyIHRoZSBwcm9taXNlIGZyb20gdGhlIHByZXZpb3VzIGl0ZW1cbiAqIGluIHRoZSBhcnJheSBoYXMgc3VjY2VlZGVkLlxuICogSWYgb25lIG9mIHRoZSBwcm9taXNlcyBmYWlscyB0aGUgZm9yRWFjaCBwcm9taXNlIGZhaWxzIGFsdG9naGV0ZXIuXG4gKiBUaGUgcmVzdWx0IGlzIHByb3ZpZGVkIGluIGFuIGFycmF5IGlmIHRoZSBpdGVtcyBpcyBhbiBhcnJheS5cbiAqIEluIHRoZSBjYXNlIHdoZXJlIHRoZSBpdGVtcyBpcyBhbiBvYmplY3QgdGhlIHNhbWUgb2JqZWN0IGlzIHJldHVybmVkXG4gKiBidXQgd2l0aCB0aGUgdmFsdWVzIHJlcGxhY2VkIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgcHJvbWlzZS5cbiAqIChUaGUgZnVuY3Rpb24gaXMgYXBwbGllZCB0byB0aGUgdmFsdWUgb2YgZWFjaCBrZXkgaW4gdGhlIGl0ZW1zIG9iamVjdC4pXG4gKlxuICogQHBhcmFtIHthcnJheXxvYmplY3R9IGl0ZW1zXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIGEgZnVuY3Rpb24gdGhhdCBpcyBhcHBsaWVkIHRvIGVhY2ggaXRlbSBhbmQgbXVzdCByZXR1cm4gYSBwcm9taXNlXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xucHJvbWlzZVV0aWwuZm9yRWFjaCA9IChpdGVtcywgZnVuYykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICBsZXQgYXJyO1xuICBsZXQgY3Vyc29yO1xuICBjb25zdCBvbkZhaWx1cmUgPSAoZXJyKSA9PiB7XG4gICAgcmVqZWN0KGVycik7XG4gIH07XG4gIGlmIChBcnJheS5pc0FycmF5KGl0ZW1zKSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBhcnIgPSBpdGVtcy5zbGljZSgpO1xuICAgIGN1cnNvciA9IChyZXN1bHQpID0+IHtcbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlVXRpbC50b1Byb21pc2UoZnVuYyhhcnIuc2hpZnQoKSkpLnRoZW4oY3Vyc29yLCBvbkZhaWx1cmUpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZVV0aWwudG9Qcm9taXNlKGZ1bmMoYXJyLnNoaWZ0KCkpKS50aGVuKGN1cnNvciwgb25GYWlsdXJlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW1zID09PSAnb2JqZWN0Jykge1xuICAgIGFyciA9IE9iamVjdC5rZXlzKGl0ZW1zKTtcbiAgICBsZXQgaXRlbUtleTtcbiAgICBjb25zdCBvblN1Y2Nlc3MgPSAocmVzdWx0KSA9PiB7XG4gICAgICBpdGVtc1tpdGVtS2V5XSA9IHJlc3VsdDtcbiAgICAgIGN1cnNvcigpO1xuICAgIH07XG4gICAgY3Vyc29yID0gKCkgPT4ge1xuICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGl0ZW1LZXkgPSBhcnIuc2hpZnQoKTtcbiAgICAgICAgcHJvbWlzZVV0aWwudG9Qcm9taXNlKGZ1bmMoaXRlbXNbaXRlbUtleV0pKS50aGVuKG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgY3Vyc29yKCk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIE1ha2VzIHN1cmUgYSB2YWx1ZSBpcyBhIHByb21pc2UsIGlmIG5lZWRlZCB3cmFwcyBpdCBhcyBhIHByb21pc2UuXG4gKiBJZiB0aGUgdmFsdWUgdGhlIGZhbHNlIGJvb2xlYW4gaXQgaXMgaW50ZXJwcmV0ZWQgYXMgYSByZWplY3QuXG4gKlxuICogQHBhcmFtIHthbnl8UHJvbWlzZX0gdmFsdWUgdGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBwcm9taXNlLCBpZiBpdCBhbHJlYWR5IGlzIGEgcHJvbWlzZSBpdCBpcyByZXR1cm5lZC5cbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cbnByb21pc2VVdGlsLnRvUHJvbWlzZSA9ICh2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHZhbHVlKTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbn07XG5cbi8qKlxuICogVXNlIHNldFRpbWVvdXQgd2l0aCBwcm9taXNlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGRvIHRoaW5ncyBsaWtlXG4gKiBQcm9taXNlLmFsbChcbiAqICBwcm9taXNlMSxcbiAqICBwcm9taXNlVXRpbC5kZWxheSgxMDAwKSxcbiAqIF0pO1xuICogQHBhcmFtIG1pbGxpc2Vjc1xuICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAqL1xucHJvbWlzZVV0aWwuZGVsYXkgPSBtaWxsaXNlY3MgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1pbGxpc2VjcykpO1xuXG5leHBvcnQgZGVmYXVsdCBwcm9taXNlVXRpbDtcblxuIiwiLyoqXG4gKiBFbnRyeVN0b3JlVXRpbCBwcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9uYWxpdHkgZm9yIHdvcmtpbmcgd2l0aCBlbnRyaWVzLlxuICogQGV4cG9ydHMgc3RvcmUvRW50cnlTdG9yZVV0aWxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnlTdG9yZVV0aWwge1xuICAvKipcbiAgICogQHBhcmFtIHtzdG9yZS9FbnRyeVN0b3JlfSBlbnRyeXN0b3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbnRyeXN0b3JlKSB7XG4gICAgdGhpcy5fZW50cnlzdG9yZSA9IGVudHJ5c3RvcmU7XG4gICAgdGhpcy5fcHJlbG9hZElkeCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RvcmUvRW50cnlTdG9yZX1cbiAgICovXG4gIGdldEVudHJ5U3RvcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5c3RvcmU7XG4gIH1cblxuICAvKipcbiAgICogUHJlbG9hZCBlbnRyaWVzIG9mIGEgc3BlY2lmaWMgdHlwZS5cbiAgICogTm90IHN0cmljdGx5IG5lZWRlZCwgdXNlZCBmb3Igb3B0aW1pemF0aW9uIHJlYXNvbnMuXG4gICAqIFVwIHRvIGEgbWF4aW11bSBvZiAxMDAgZW50cmllcyBhcmUgcHJlbG9hZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2ZUeXBlXG4gICAqIEBwYXJhbSB7c3RvcmUvQ29udGV4dH0gY29udGV4dCBpZiBwcm92aWRlZCBsaW1pdHMgdGhlIHByZWxvYWQgdG8gYSBzcGVjaWZpYyBjb250ZXh0LlxuICAgKiBAcmV0dXJucyB7c3RvcmUvRW50cnl9XG4gICAqL1xuICBwcmVsb2FkRW50cmllcyhvZlR5cGUsIGNvbnRleHQpIHtcbiAgICBsZXQgcHJlbG9hZEZvclR5cGUgPSB0aGlzLl9wcmVsb2FkSWR4LmdldChvZlR5cGUpO1xuICAgIGxldCBwcm9taXNlO1xuICAgIGlmIChwcmVsb2FkRm9yVHlwZSkge1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcHJvbWlzZSA9IHByZWxvYWRGb3JUeXBlW2NvbnRleHQuZ2V0RW50cnlVUkkoKV07XG4gICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJlbG9hZEZvclR5cGUubm9Db250ZXh0KSB7XG4gICAgICAgIHJldHVybiBwcmVsb2FkRm9yVHlwZS5ub0NvbnRleHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWxvYWRGb3JUeXBlID0ge307XG4gICAgICB0aGlzLl9wcmVsb2FkSWR4LnNldChvZlR5cGUsIHByZWxvYWRGb3JUeXBlKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWFyY2hPYmogPSB0aGlzLl9lbnRyeXN0b3JlLm5ld1NvbHJRdWVyeSgpLnJlc291cmNlVHlwZShvZlR5cGUpLmxpbWl0KDEwMCk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHNlYXJjaE9iai5jb250ZXh0KGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBsaXN0ID0gc2VhcmNoT2JqLmxpc3QoKTtcbiAgICBwcm9taXNlID0gbGlzdC5nZXRFbnRyaWVzKDApO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBwcmVsb2FkRm9yVHlwZVtjb250ZXh0LmdldEVudHJ5VVJJKCldID0gcHJvbWlzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlbG9hZEZvclR5cGUubm9Db250ZXh0ID0gcHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBjbGVhclByZWxvYWRFbnRyaWVzRHVwbGljYXRlQ2hlY2sob2ZUeXBlLCBpbkNvbnRleHQpIHtcbiAgICBpZiAob2ZUeXBlKSB7XG4gICAgICBjb25zdCBwcmVsb2FkRm9yVHlwZSA9IHRoaXMuX3ByZWxvYWRJZHguZ2V0KG9mVHlwZSk7XG4gICAgICBpZiAocHJlbG9hZEZvclR5cGUgJiYgaW5Db250ZXh0KSB7XG4gICAgICAgIGRlbGV0ZSBwcmVsb2FkRm9yVHlwZVtpbkNvbnRleHQuZ2V0RW50cnlVUkkoKV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wcmVsb2FkSWR4LmRlbGV0ZShvZlR5cGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wcmVsb2FkSWR4ID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYW4gZW50cnkgZm9yIGEgcmVzb3VyY2UgVVJJLCBub3RlIHRoYXQgaWYgdGhlcmUgYXJlIHNldmVyYWwgZW50cmllcyB0aGF0IGFsbFxuICAgKiBoYXZlIHRoZSBzYW1lIHJlc291cmNlIFVSSSBpdCBpcyB1bmNsZWFyIHdoaWNoIG9mIHRoZXNlIGVudHJpZXMgdGhhdCBhcmUgcmV0dXJuZWQuXG4gICAqIEhlbmNlLCBvbmx5IHVzZSB0aGlzIGZ1bmN0aW9uIGlmIHlvdSBleHBlY3QgdGhlcmUgdG8gYmUgYSBzaW5nbGUgZW50cnkgcGVyIHJlc291cmNlIFVSSS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlVVJJIGlzIHRoZSBVUkkgZm9yIHRoZSByZXNvdXJjZS5cbiAgICogQHBhcmFtIHtzdG9yZS9Db250ZXh0PX0gY29udGV4dCBvbmx5IGxvb2sgZm9yIGVudHJpZXMgaW4gdGhpcyBjb250ZXh0LCBtYXkgYmUgbGVmdCBvdXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhc3luY0NhbGxUeXBlIHRoZSBjYWxsVHlwZSB1c2VkIHdoZW4gbWFraW5nIHRoZSBzZWFyY2guXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdG9yZS9FbnRyeT59XG4gICAqIEBhc3luY1xuICAgKiBAdGhyb3dzXG4gICAqL1xuICBhc3luYyBnZXRFbnRyeUJ5UmVzb3VyY2VVUkkocmVzb3VyY2VVUkksIGNvbnRleHQsIGFzeW5jQ2FsbFR5cGUpIHtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2VudHJ5c3RvcmUuZ2V0Q2FjaGUoKTtcbiAgICBjb25zdCBlbnRyaWVzU2V0ID0gY2FjaGUuZ2V0QnlSZXNvdXJjZVVSSShyZXNvdXJjZVVSSSk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllc1NldCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmIChlbnRyeS5nZXRDb250ZXh0KCkuZ2V0SWQoKSA9PT0gY29udGV4dC5nZXRJZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLl9lbnRyeXN0b3JlLm5ld1NvbHJRdWVyeSgpLnJlc291cmNlKHJlc291cmNlVVJJKS5saW1pdCgxKTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgcXVlcnkuY29udGV4dChjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZW50cnlBcnIgPSBhd2FpdCBxdWVyeS5saXN0KGFzeW5jQ2FsbFR5cGUpLmdldEVudHJpZXMoMCk7XG4gICAgaWYgKGVudHJ5QXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBlbnRyeUFyclswXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBlbnRyaWVzIGZvciByZXNvdXJjZSB3aXRoIFVSSTogJHtyZXNvdXJjZVVSSX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VVUkkgaXMgdGhlIFVSSSBmb3IgdGhlIHJlc291cmNlLlxuICAgKiBAcmV0dXJucyB7c3RvcmUvRW50cnl9XG4gICAqL1xuICBnZXRFbnRyeUxpc3RCeVJlc291cmNlVVJJKHJlc291cmNlVVJJKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJ5c3RvcmUubmV3U29sclF1ZXJ5KCkucmVzb3VyY2UocmVzb3VyY2VVUkkpLmxpc3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0aW5nIHRvIGZpbmQgYSB1bmlxdWUgZW50cnkgZm9yIGEgc3BlY2lmaWMgdHlwZSxcbiAgICogaWYgbXVsdGlwbGUgZW50cmllcyBleGlzdHMgd2l0aCB0aGUgc2FtZSB0eXBlIHRoZSByZXR1cm5lZCBwcm9taXNlIGZhaWxzLlxuICAgKiBZb3UgbWF5IHJlc3RyaWN0IHRvIGEgc3BlY2lmaWMgY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVVUkkgaXMgdGhlIHJkZjp0eXBlIFVSSSBmb3IgdGhlIGVudHJ5IHRvIG1hdGNoLlxuICAgKiBAcGFyYW0ge3N0b3JlL0NvbnRleHR9IGNvbnRleHQgcmVzdHJpY3QgdG8gZmluZGluZyB0aGUgZW50cnkgaW4gdGhpcyBjb250ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhc3luY0NhbGxUeXBlIHRoZSBjYWxsVHlwZSB1c2VkIHdoZW4gbWFraW5nIHRoZSBzZWFyY2guXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxzdG9yZS9FbnRyeT59XG4gICAqIEBhc3luY1xuICAgKiBAdGhyb3dzXG4gICAqL1xuICBhc3luYyBnZXRFbnRyeUJ5VHlwZSh0eXBlVVJJLCBjb250ZXh0LCBhc3luY0NhbGxUeXBlKSB7XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLl9lbnRyeXN0b3JlLm5ld1NvbHJRdWVyeSgpLnJkZlR5cGUodHlwZVVSSSkubGltaXQoMik7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHF1ZXJ5LmNvbnRleHQoY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGVudHJ5QXJyID0gYXdhaXQgcXVlcnkubGlzdChhc3luY0NhbGxUeXBlKS5nZXRFbnRyaWVzKDApO1xuICAgIGlmIChlbnRyeUFyci5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBlbnRyeUFyclswXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBudW1iZXIgb2YgZW50cmllcyBpbiBjb250ZXh0IC8gcmVwb3NpdG9yeScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRpbmcgdG8gZmluZCBvbmUgZW50cnkgZm9yIGEgc3BlY2lmaWMgZ3JhcGggdHlwZSxcbiAgICogaWYgbXVsdGlwbGUgZW50cmllcyBleGlzdHMgd2l0aCB0aGUgc2FtZSB0eXBlIHRoZSByZXR1cm5lZCBwcm9taXNlIGZhaWxzLlxuICAgKiBZb3UgbWF5IHJlc3RyaWN0IHRvIGEgc3BlY2lmaWMgY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGdyYXBoVHlwZSBpcyB0aGUgZ3JhcGggdHlwZSBmb3IgdGhlIGVudHJ5IHRvIG1hdGNoLCBlLmcuIHVzZVxuICAgKiB7QHNlZSBzdG9yZS90eXBlcyNHVF9VU0VSfS5cbiAgICogQHBhcmFtIHtzdG9yZS9Db250ZXh0fSBjb250ZXh0IHJlc3RyaWN0IHRvIGZpbmRpbmcgdGhlIGVudHJ5IGluIHRoaXMgY29udGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXN5bmNDYWxsVHlwZSB0aGUgY2FsbFR5cGUgdXNlZCB3aGVuIG1ha2luZyB0aGUgc2VhcmNoLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48c3RvcmUvRW50cnk+fVxuICAgKiBAYXN5bmNcbiAgICogQHRocm93c1xuICAgKi9cbiAgYXN5bmMgZ2V0RW50cnlCeUdyYXBoVHlwZShncmFwaFR5cGUsIGNvbnRleHQsIGFzeW5jQ2FsbFR5cGUpIHtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMuX2VudHJ5c3RvcmUubmV3U29sclF1ZXJ5KCkuZ3JhcGhUeXBlKGdyYXBoVHlwZSkubGltaXQoMik7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHF1ZXJ5LmNvbnRleHQoY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGVudHJ5QXJyID0gYXdhaXQgcXVlcnkubGlzdChhc3luY0NhbGxUeXBlKS5nZXRFbnRyaWVzKDApO1xuICAgIGlmIChlbnRyeUFyci5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZW50cnlBcnJbMF07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgTm8gZW50cmllcyBpbiAke2NvbnRleHQgPyAnY29udGV4dCcgOiAncmVwb3NpdG9yeSd9IGNvbnRleHQgd2l0aCBncmFwaFR5cGUgJHtncmFwaFR5cGV9YCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZW50cmllcyBtYXRjaGVkIGJ5IGEgc2VhcmNoIGluIGEgc2VyaWFsIG1hbm5lcixcbiAgICogYWxzbyBlbXB0aWVzIHRoZSBjYWNoZSBmcm9tIGxvYWRlZCBlbnRyaWVzIHNvIGl0IHNob3VsZCBub3Qgb3ZlcmZsb3dcbiAgICogaWYgdGhlIHNlYXJjaGxpc3QgaXMgYmlnLlxuICAgKlxuICAgKiBUaGUgcmVtb3ZhbCBpcyBhY2NvbXBsaXNoZWQgYnkgZmlyc3QgaXRlcmF0aW5nIHRocm91Z2ggdGhlIHNlYXJjaGxpc3QgYW5kIGNvbGxlY3RpbmdcbiAgICogdXJpcyB0byBhbGwgZW50cmllcyB0aGF0IHNob3VsZCBiZSByZW1vdmVkLiBBZnRlciB0aGF0IHRoZSBlbnRyaWVzIGFyZSByZW1vdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0b3JlL1NlYXJjaExpc3R9IGxpc3RcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBhc3luYyByZW1vdmVBbGwobGlzdCkge1xuICAgIGNvbnN0IHVyaXMgPSBbXTtcbiAgICBjb25zdCBlcyA9IHRoaXMuX2VudHJ5c3RvcmU7XG4gICAgY29uc3QgY2FjaGUgPSBlcy5nZXRDYWNoZSgpO1xuICAgIGNvbnN0IHJlc3QgPSBlcy5nZXRSRVNUKCk7XG5cbiAgICBjb25zdCBkZWxldGVOZXh0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHVyaXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB1cmkgPSB1cmlzLnBvcCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHJlc3QuZGVsKHVyaSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBDb3VsZCBub3QgcmVtb3ZlIGVudHJ5IHdpdGggdXJpOiAke3VyaX0gY29udGludWluZyBhbnl3YXkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlTmV4dCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGlzdC5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgdXJpcy5wdXNoKGVudHJ5LmdldFVSSSgpKTtcbiAgICAgIGNhY2hlLnVuQ2FjaGUoZW50cnkpOyAvLyBAdG9kbyBAdmFsZW50aW5vIHBlcmhhcHMgdGhleSBhcmUgcmVtb3ZlZCBmcm9tIGNhY2hlIHRvbyBlYXJseS4gTW92ZSB0byBkZWxldGVOZXh0P1xuICAgIH0pO1xuXG4gICAgZGVsZXRlTmV4dChyZXN1bHQpO1xuICB9XG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=