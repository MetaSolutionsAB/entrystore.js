module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=195)}([function(e,t,n){var r=n(2),a=n(15).f,i=n(13),o=n(16),s=n(95),c=n(130),u=n(59);e.exports=function(e,t){var n,l,p,d,f,h=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[h]||s(h,{}):(r[h]||{}).prototype)for(l in t){if(d=t[l],p=e.noTargetGet?(f=a(n,l))&&f.value:n[l],!u(m?l:h+(v?".":"#")+l,e.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(e.sham||p&&p.sham)&&i(d,"sham",!0),o(n,l,d,e)}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n="object",r=function(e){return e&&e.Math==Math&&e};e.exports=r(typeof globalThis==n&&globalThis)||r(typeof window==n&&window)||r(typeof self==n&&self)||r(typeof global==n&&global)||Function("return this")()},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";var r,a=n(6),i=n(2),o=n(3),s=n(11),c=n(66),u=n(13),l=n(16),p=n(9).f,d=n(27),f=n(48),h=n(7),m=n(56),v=i.DataView,g=v&&v.prototype,y=i.Int8Array,x=y&&y.prototype,b=i.Uint8ClampedArray,w=b&&b.prototype,_=y&&d(y),k=x&&d(x),E=Object.prototype,S=E.isPrototypeOf,R=h("toStringTag"),T=m("TYPED_ARRAY_TAG"),A=!(!i.ArrayBuffer||!v),D=A&&!!f,O=!1,I={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},j=function(e){return o(e)&&s(I,c(e))};for(r in I)i[r]||(D=!1);if((!D||"function"!=typeof _||_===Function.prototype)&&(_=function(){throw TypeError("Incorrect invocation")},D))for(r in I)i[r]&&f(i[r],_);if((!D||!k||k===E)&&(k=_.prototype,D))for(r in I)i[r]&&f(i[r].prototype,k);if(D&&d(w)!==k&&f(w,k),a&&!s(k,R))for(r in O=!0,p(k,R,{get:function(){return o(this)?this[T]:void 0}}),I)i[r]&&u(i[r],T,r);A&&f&&d(g)!==E&&f(g,E),e.exports={NATIVE_ARRAY_BUFFER:A,NATIVE_ARRAY_BUFFER_VIEWS:D,TYPED_ARRAY_TAG:O&&T,aTypedArray:function(e){if(j(e))return e;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(e){if(f){if(S.call(_,e))return e}else for(var t in I)if(s(I,r)){var n=i[t];if(n&&(e===n||S.call(n,e)))return e}throw TypeError("Target is not a typed array constructor")},exportProto:function(e,t,n){if(a){if(n)for(var r in I){var o=i[r];o&&s(o.prototype,e)&&delete o.prototype[e]}k[e]&&!n||l(k,e,n?t:D&&x[e]||t)}},exportStatic:function(e,t,n){var r,o;if(a){if(f){if(n)for(r in I)(o=i[r])&&s(o,e)&&delete o[e];if(_[e]&&!n)return;try{return l(_,e,n?t:D&&y[e]||t)}catch(e){}}for(r in I)!(o=i[r])||o[e]&&!n||l(o,e,t)}},isView:function(e){var t=c(e);return"DataView"===t||s(I,t)},isTypedArray:j,TypedArray:_,TypedArrayPrototype:k}},function(e,t,n){var r=n(1);e.exports=!r(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(2),a=n(55),i=n(56),o=n(132),s=r.Symbol,c=a("wks");e.exports=function(e){return c[e]||(c[e]=o&&s[e]||(o?s:i)("Symbol."+e))}},function(e,t,n){var r=n(23),a=Math.min;e.exports=function(e){return e>0?a(r(e),9007199254740991):0}},function(e,t,n){var r=n(6),a=n(127),i=n(4),o=n(25),s=Object.defineProperty;t.f=r?s:function(e,t,n){if(i(e),t=o(t,!0),i(n),a)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(14);e.exports=function(e){return Object(r(e))}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(36),a=n(54),i=n(10),o=n(8),s=n(61),c=[].push,u=function(e){var t=1==e,n=2==e,u=3==e,l=4==e,p=6==e,d=5==e||p;return function(f,h,m,v){for(var g,y,x=i(f),b=a(x),w=r(h,m,3),_=o(b.length),k=0,E=v||s,S=t?E(f,_):n?E(f,0):void 0;_>k;k++)if((d||k in b)&&(y=w(g=b[k],k,x),e))if(t)S[k]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return k;case 2:c.call(S,g)}else if(l)return!1;return p?-1:u||l?l:S}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(e,t,n){var r=n(6),a=n(9),i=n(42);e.exports=r?function(e,t,n){return a.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(6),a=n(72),i=n(42),o=n(18),s=n(25),c=n(11),u=n(127),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=o(e),t=s(t,!0),u)try{return l(e,t)}catch(e){}if(c(e,t))return i(!a.f.call(e,t),e[t])}},function(e,t,n){var r=n(2),a=n(55),i=n(13),o=n(11),s=n(95),c=n(128),u=n(19),l=u.get,p=u.enforce,d=String(c).split("toString");a("inspectSource",function(e){return c.call(e)}),(e.exports=function(e,t,n,a){var c=!!a&&!!a.unsafe,u=!!a&&!!a.enumerable,l=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||i(n,"name",t),p(n).source=d.join("string"==typeof t?t:"")),e!==r?(c?!l&&e[t]&&(u=!0):delete e[t],u?e[t]=n:i(e,t,n)):u?e[t]=n:s(t,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&l(this).source||c.call(this)})},function(e,t,n){var r=n(47),a=n(11),i=n(135),o=n(9).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});a(t,e)||o(t,e,{value:i.f(e)})}},function(e,t,n){var r=n(54),a=n(14);e.exports=function(e){return r(a(e))}},function(e,t,n){var r,a,i,o=n(129),s=n(2),c=n(3),u=n(13),l=n(11),p=n(73),d=n(57),f=s.WeakMap;if(o){var h=new f,m=h.get,v=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},a=function(e){return m.call(h,e)||{}},i=function(e){return v.call(h,e)}}else{var y=p("state");d[y]=!0,r=function(e,t){return u(e,y,t),t},a=function(e){return l(e,y)?e[y]:{}},i=function(e){return l(e,y)}}e.exports={set:r,get:a,has:i,enforce:function(e){return i(e)?a(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!c(t)||(n=a(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(14),a=/"/g;e.exports=function(e,t,n,i){var o=String(r(e)),s="<"+t;return""!==n&&(s+=" "+n+'="'+String(i).replace(a,"&quot;")+'"'),s+">"+o+"</"+t+">"}},function(e,t,n){var r=n(1);e.exports=function(e){return r(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(3);e.exports=function(e,t){if(!r(e))return e;var n,a;if(t&&"function"==typeof(n=e.toString)&&!r(a=n.call(e)))return a;if("function"==typeof(n=e.valueOf)&&!r(a=n.call(e)))return a;if(!t&&"function"==typeof(n=e.toString)&&!r(a=n.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(9).f,a=n(11),i=n(7)("toStringTag");e.exports=function(e,t,n){e&&!a(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(11),a=n(10),i=n(73),o=n(101),s=i("IE_PROTO"),c=Object.prototype;e.exports=o?Object.getPrototypeOf:function(e){return e=a(e),r(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){var n=[][e];return!n||!r(function(){n.call(null,t||function(){throw 1},1)})}},function(e,t,n){var r=n(4),a=n(20),i=n(7)("species");e.exports=function(e,t){var n,o=r(e).constructor;return void 0===o||null==(n=r(o)[i])?t:a(n)}},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(6),o=n(114),s=n(5),c=n(87),u=n(38),l=n(42),p=n(13),d=n(8),f=n(160),h=n(161),m=n(25),v=n(11),g=n(66),y=n(3),x=n(35),b=n(48),w=n(43).f,_=n(162),k=n(12).forEach,E=n(49),S=n(9),R=n(15),T=n(19),A=T.get,D=T.set,O=S.f,I=R.f,j=Math.round,C=a.RangeError,N=c.ArrayBuffer,L=c.DataView,q=s.NATIVE_ARRAY_BUFFER_VIEWS,U=s.TYPED_ARRAY_TAG,P=s.TypedArray,M=s.TypedArrayPrototype,F=s.aTypedArrayConstructor,z=s.isTypedArray,B=function(e,t){for(var n=0,r=t.length,a=new(F(e))(r);r>n;)a[n]=t[n++];return a},V=function(e,t){O(e,t,{get:function(){return A(this)[t]}})},G=function(e){var t;return e instanceof N||"ArrayBuffer"==(t=g(e))||"SharedArrayBuffer"==t},Y=function(e,t){return z(e)&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},H=function(e,t){return Y(e,t=m(t,!0))?l(2,e[t]):I(e,t)},W=function(e,t,n){return!(Y(e,t=m(t,!0))&&y(n)&&v(n,"value"))||v(n,"get")||v(n,"set")||n.configurable||v(n,"writable")&&!n.writable||v(n,"enumerable")&&!n.enumerable?O(e,t,n):(e[t]=n.value,e)};i?(q||(R.f=H,S.f=W,V(M,"buffer"),V(M,"byteOffset"),V(M,"byteLength"),V(M,"length")),r({target:"Object",stat:!0,forced:!q},{getOwnPropertyDescriptor:H,defineProperty:W}),e.exports=function(e,t,n,i){var s=e+(i?"Clamped":"")+"Array",c="get"+e,l="set"+e,m=a[s],v=m,g=v&&v.prototype,S={},R=function(e,n){O(e,n,{get:function(){return function(e,n){var r=A(e);return r.view[c](n*t+r.byteOffset,!0)}(this,n)},set:function(e){return function(e,n,r){var a=A(e);i&&(r=(r=j(r))<0?0:r>255?255:255&r),a.view[l](n*t+a.byteOffset,r,!0)}(this,n,e)},enumerable:!0})};q?o&&(v=n(function(e,n,r,a){return u(e,v,s),y(n)?G(n)?void 0!==a?new m(n,h(r,t),a):void 0!==r?new m(n,h(r,t)):new m(n):z(n)?B(v,n):_.call(v,n):new m(f(n))}),b&&b(v,P),k(w(m),function(e){e in v||p(v,e,m[e])}),v.prototype=g):(v=n(function(e,n,r,a){u(e,v,s);var i,o,c,l=0,p=0;if(y(n)){if(!G(n))return z(n)?B(v,n):_.call(v,n);i=n,p=h(r,t);var m=n.byteLength;if(void 0===a){if(m%t)throw C("Wrong length");if((o=m-p)<0)throw C("Wrong length")}else if((o=d(a)*t)+p>m)throw C("Wrong length");c=o/t}else c=f(n),i=new N(o=c*t);for(D(e,{buffer:i,byteOffset:p,byteLength:o,length:c,view:new L(i)});l<c;)R(e,l++)}),b&&b(v,P),g=v.prototype=x(M)),g.constructor!==v&&p(g,"constructor",v),U&&p(g,U,s),S[s]=v,r({global:!0,forced:v!=m,sham:!q},S),"BYTES_PER_ELEMENT"in v||p(v,"BYTES_PER_ELEMENT",t),"BYTES_PER_ELEMENT"in g||p(g,"BYTES_PER_ELEMENT",t),E(s)}):e.exports=function(){}},function(e,t){e.exports=require("util")},function(e,t){e.exports=!1},function(e,t,n){var r=n(47),a=n(2),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(a[e]):r[e]&&r[e][t]||a[e]&&a[e][t]}},function(e,t,n){var r=n(23),a=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?a(n+t,0):i(n,t)}},function(e,t,n){var r=n(4),a=n(99),i=n(97),o=n(57),s=n(133),c=n(94),u=n(73)("IE_PROTO"),l=function(){},p=function(){var e,t=c("iframe"),n=i.length;for(t.style.display="none",s.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),p=e.F;n--;)delete p.prototype[i[n]];return p()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[u]=e):n=p(),void 0===t?n:a(n,t)},o[u]=!0},function(e,t,n){var r=n(20);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,a){return e.call(t,n,r,a)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(7),a=n(35),i=n(13),o=r("unscopables"),s=Array.prototype;null==s[o]&&i(s,o,a(null)),e.exports=function(e){s[o][e]=!0}},function(e,t){e.exports=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(41),a=v(n(115)),i=v(n(118)),o=v(n(124)),s=v(n(193)),c=v(n(88)),u=v(n(194)),l=v(n(92)),p=v(n(116)),d=v(n(122)),f=v(n(125)),h=v(n(52)),m=v(n(123));function v(e){return e&&e.__esModule?e:{default:e}}var g={sortBy:"title",prio:"List"},y=50,x=function(e,t){var n=t.getBaseURI(),r=e.substr(n.length,e.indexOf("/",n.length)-n.length),i=t.getCachedContextsIdx(),o=i[r];return o||(o=new a.default("".concat(n,"_contexts/entry/").concat(r),n+r,t),i[r]=o),o},b=function(e,t){var n=t.resource;null!=e&&(n&&"string"==typeof n.name&&(e instanceof m.default?(e._data=e._data||{},e._data.name=n.name):e._name=n.name),e instanceof m.default&&(e._data=e._data||{},n&&"boolean"==typeof n.disabled&&(e._data.disabled=n.disabled)))},w=function(e,t,n){var r=t||{},a=e.getResource(!0),i=e.getURI(),o=e.getResourceURI(),d=e.getContext().getResourceURI(),v=e.getEntryStore(),g=e.getEntryInfo();if(!a&&g.getEntryType()===h.default.ET_LOCAL&&g.getResourceType()===h.default.RT_INFORMATIONRESOURCE){switch(e.getEntryInfo().getGraphType()){case h.default.GT_CONTEXT:(a=x("".concat(v.getBaseURI()+e.getId(),"/"),e.getEntryStore()))._update(r);break;case h.default.GT_LIST:case h.default.GT_GROUP:a=e.isGroup()?new u.default(i,o,v):new l.default(i,o,v),r.resource&&r.resource.children&&a._update(r.resource,r.resource.children.map(function(e){return k("".concat(d,"/entry/").concat(e.entryId),e,v)}));break;case h.default.GT_USER:(n||null!=r.resource)&&(a=new m.default(i,o,v,r.resource||{}));break;case h.default.GT_STRING:(n||null!=r.resource)&&(a=new f.default(i,o,v,r.resource||""));break;case h.default.GT_GRAPH:(n||null!=r.resource)&&(a=new c.default(i,o,v,r.resource||{}));break;case h.default.GT_PIPELINE:(n||null!=r.resource)&&(a=new p.default(i,o,v,r.resource||{}));break;case h.default.GT_PIPELINERESULT:case h.default.GT_NONE:a=new s.default(i,o,v)}return e._resource=a,void b(a,r)}null!=a&&null!=r.resource?a._update&&(e.isList()||e.isGroup()?r.resource&&r.resource.children&&a._update(r.resource,r.resource.children.map(function(t){return k("".concat(d,"/entry/").concat(t.entryId),t,e.getEntryStore())})):a._update(r.resource)):b(a,r)},_=function(e,t){(e._metadata=t.metadata?new r.Graph(t.metadata):null,e._cachedExternalMetadata=t["cached-external-metadata"]?new r.Graph(t["cached-external-metadata"]):null,e._inferredMetadata=t.inferred?new r.Graph(t.inferred):null,e._extractedMetadata=t["extracted-metadata"]?new r.Graph(t["extracted-metadata"]):null,e._relation=t.relations?new r.Graph(t.relations):new r.Graph,e._rights=function(e){for(var t={},n=e||[],r=0;r<n.length;r++)t[n[r]]=!0;return t}(t.rights),t.name||t.resource&&t.resource.name)&&(e.getEntryInfo()._name=t.name||t.resource.name);(t.disabled||t.resource&&t.resource.disabled)&&(e.getEntryInfo()._disabled=t.disabled||t.resource.disabled);return e},k=function(e,t,n){var a=n.getCache(),s=a.get(e);if(s)s.getEntryInfo().setGraph(new r.Graph(t.info));else{var c=new o.default(e,new r.Graph(t.info),n),u=x(e,n);s=new i.default(u,c)}return _(s,t),w(s,t),a.cache(s),s},E=function(e,t){var n=e;t&&(n=n.substr(t.length-1));var r=n.match(/\/([^\/]+)\/(entry|resource|metadata|relation)\/([^?\/]+)(\?.*)?$/);return r?r[3]:0===n.lastIndexOf("/")?n.substr(1):t?void 0:n.substr(n.lastIndexOf("/")+1)},S=function(e,t){var n=e;t&&(n=n.substr(t.length-1));var r=n.match(/\/([^\/]+)\/(entry|resource|metadata|relation)\/([^?\/]+)(\?.*)?$/);return r?r[1]:-1!==n.indexOf("/")&&t?void 0:"_contexts"},R={getContext:function(e,t){var n=e.getBaseURI(),r="".concat(n,"_contexts/entry/"),i=t.substr(r.length),o=e.getCachedContextsIdx(),s=o[i];return s||(s=new a.default(t,n+i,e),o[i]=s),s},getList:function(e,t){var n=e.getCache(),a=n.get(t);if(!a){var s=new o.default(t,new r.Graph,e),c=x(t,e);a=new i.default(c,s);var u=t.replace("/entry/","/resource/");a._resource=new l.default(t,u,e),n.cache(a,!0),a.setRefreshNeeded(!0)}return a._resource},updateOrCreate:k,updateOrCreateResource:w,update:function(e,t){e.getEntryInfo().setGraph(new r.Graph(t.info)),w(e,t),_(e,t),e.getEntryStore().getCache().cache(e)},createSearchList:function(e,t){return new d.default(e,t)},extractSearchResults:function(e,t,n){e.resource.offset=e.resource.offset||e.offset,e.resource.size=e.resource.size||e.results;var r=n.getBaseURI(),a=e.resource.children.map(function(e){return k("".concat(r+e.contextId,"/entry/").concat(e.entryId),e,n)});return t._update(e.resource,a),a},getCachedExternalMetadataURI:function(e){return e.replace("/entry/","/cached-external-metadata/")},getId:function(e){return e.substr(e.lastIndexOf("/")+1)},getEntryId:E,getContextId:S,getEntryURIFromURI:function(e,t){var n=e.getBaseURI();return"".concat(n+S(t,n),"/entry/").concat(E(t,n))},getEntryURI:function(e,t,n){return"".concat(e.getBaseURI()).concat(t,"/entry/").concat(n)},getMetadataURIFromURI:function(e,t){var n=e.getBaseURI();return"".concat(n+S(t,n),"/metadata/").concat(E(t,n))},getMetadataURI:function(e,t,n){return"".concat(e.getBaseURI()).concat(t,"/entry/").concat(n)},getResourceBase:function(e,t){return"".concat(e.getBaseURI()+t,"/resource/")},getResourceURI:function(e,t,n){return"_contexts"===t?e.getBaseURI()+n:"".concat(e.getBaseURI()+t,"/resource/").concat(n)},getURIFromCreated:function(e,t){return"".concat(t.getResourceURI(),"/entry/").concat(e.entryId)},getEntryLoadURI:function(e,t){var n=t||{},r="";r=n.limit>0||-1===n.limit?"&limit=".concat(n.limit):"&limit=".concat(y);var a=null==n.offset||0===n.offset?"":"&offset=".concat(n.offset),i=null==n.sort?g:n.sort,o="",s="",c="";return null!=i&&(o=null==i.sortBy?"":"&sort=".concat(i.sortBy),s=!0===i.descending?"&order=desc":"",c=null==i.prio?"":"&prio=".concat(i.prio)),"".concat(e,"?includeAll").concat(r).concat(a).concat(o).concat(s).concat(c)},getEntryCreateURI:function(e,t){var n="".concat(e.getContext().getResourceURI(),"?");if(e){var r=e.getEntryInfo();null!=e.getSpecificId()&&(n="".concat(n,"id=").concat(e.getSpecificId(),"&")),e.isLink()&&(n="".concat(n,"resource=").concat(encodeURIComponent(e.getResourceURI()),"&")),(e.isReference()||e.isLinkReference())&&(n="".concat(n,"resource=").concat(encodeURIComponent(e.getResourceURI()),"&"),n="".concat(n,"cached-external-metadata=").concat(encodeURIComponent(r.getExternalMetadataURI()),"&")),r.getEntryType()!==h.default.ET_LOCAL&&(n="".concat(n,"entrytype=").concat(r.getEntryType().toLowerCase(),"&")),r.getResourceType()!==h.default.RT_INFORMATIONRESOURCE&&(n="".concat(n,"informationresource=false&")),r.getGraphType()!==h.default.GT_NONE&&(n="".concat(n,"graphtype=").concat(r.getGraphType().toLowerCase(),"&"))}return t&&(n="".concat(n,"list=").concat(t.getResourceURI(),"&")),n.slice(0,-1)},getEntryCreatePostData:function(e){var t={},n=!0,r=e.getMetadata();null==r||r.isEmpty()||(t.metadata=r.exportRDFJSON(),n=!1);var a=e.getResource(!0);null!=a&&null!=a.getSource&&(t.resource=a.getSource(),n=!1);var i=e.getEntryInfo().getGraph();null==i||i.isEmpty()||(t.info=i.exportRDFJSON(),n=!1);var o=e.getCachedExternalMetadata();return null==o||o.isEmpty()||(t["cached-external-metadata"]=o.exportRDFJSON(),n=!1),n?"":JSON.stringify(t)},getMoveURI:function(e,t,n,r){var a=e.getURI().substr(r.length),i=t.getResourceURI().substr(r.length);return"".concat(n.getResourceURI(),"?moveEntry=").concat(a,"&fromList=").concat(i)},getProxyURI:function(e,t,n){var r="".concat(e,"proxy?url=").concat(encodeURIComponent(t));return null!=n&&(r+="&fromFormat=".concat(n)),r},getPutFileURI:function(e){return"".concat(e+(e.indexOf("?")<0?"?":"&"),"method=put&textarea=true")},setSort:function(e){g=e},getSort:function(){return g},getDefaultLimit:function(){return y},setDefaultLimit:function(e){y=e}};t.default=R},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(39))&&r.__esModule?r:{default:r};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryURI=t,this._resourceURI=n,this._entryStore=r}var t,n,r;return t=e,(n=[{key:"getEntryStore",value:function(){return this._entryStore}},{key:"getEntry",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._entryStore.getEntry(this._entryURI,{direct:e})}},{key:"getResourceURI",value:function(){return this._resourceURI}},{key:"getEntryURI",value:function(){return this._entryURI}},{key:"getId",value:function(){return a.default.getEntryId(this._entryURI)}},{key:"_update",value:function(e){this._data=e}},{key:"getSource",value:function(){return this._data}}])&&i(t.prototype,n),r&&i(t,r),e}();t.default=o},function(e,t,n){"use strict";n.r(t);const r={ical:"http://www.w3.org/2002/12/cal/ical#",vcard:"http://www.w3.org/2006/vcard/ns#",dcterms:"http://purl.org/dc/terms/",skos:"http://www.w3.org/2004/02/skos/core#",rdfs:"http://www.w3.org/2000/01/rdf-schema#",rdf:"http://www.w3.org/1999/02/22-rdf-syntax-ns#",owl:"http://www.w3.org/2002/07/owl#",vs:"http://www.w3.org/2003/06/sw-vocab-status/ns#",foaf:"http://xmlns.com/foaf/0.1/",wot:"http://xmlns.com/wot/0.1/",dc:"http://purl.org/dc/elements/1.1/",xsd:"http://www.w3.org/2001/XMLSchema#",dcat:"http://www.w3.org/ns/dcat#",org:"http://www.w3.org/ns/org#",gn:"http://www.geonames.org/ontology#",locn:"http://www.w3.org/ns/locn#",schema:"http://schema.org/",ex:"http://example.com/",gsp:"http://www.opengis.net/ont/geosparql#",odrs:"http://schema.theodi.org/odrs#"};let a=0;const i=(e,t,n)=>(r[e]||(r[e]=t),{abbrev:e,ns:t,localname:n,full:t+n,pretty:`${e}:${n}`}),o=e=>{const t=Object.keys(r).find(t=>0===e.indexOf(r[t]));if(t)return i(t,r[t],e.substring(r[t].length));let n=e.lastIndexOf("/");const o=e.lastIndexOf("#");return o>n&&(n=o),i(`ns${a+=1}`,e.substring(0,n+1),e.substring(n+1))};var s={nsify:o,shortenKnown:e=>{const t=Object.keys(r).find(t=>0===e.indexOf(r[t]));return t?i(t,r[t],e.substring(r[t].length)).pretty:e},shorten:e=>o(e).pretty,expand:e=>{const t=e.split(":");return 2===t.length&&r.hasOwnProperty(t[0])?r[t[0]]+t[1]:e},add:(e,t)=>{"string"==typeof e?r[e]=t:"object"==typeof e&&Object.keys(e).forEach(t=>{r[t]=e[t]})},registry:()=>r},c=n(93),u=n.n(c);const l=e=>void 0!==e&&(null===e||"object"==typeof e||Array.isArray(e)||"function"==typeof e),p=e=>"string"==typeof e||e instanceof String,d=(e,t,n)=>{0===e[t][n].length&&(delete e[t][n],0===Object.keys(e[t]).length&&delete e[t])},f=e=>{if(!l(e[0]))throw new Error("Graph is not a object.");if(!p(e[1]))throw new Error("Subject is not a string.");if(!p(e[2]))throw new Error("Predicate is not a string.");if(!l(e[3]))throw new Error("Object is not a object.");if(void 0===e[3].type)throw new Error("Object has no type attribute, must be one of 'uri', 'literal', or 'bnode'");if(void 0===e[3].value)throw new Error("Object has no value attribute corresponding to the lexical value of the object.")},h=(e,t)=>e===t||null==e&&e===t||(p(e)?p(t)?e===t:e===t.value:p(t)?e.value===t:e.type===t.type&&e.value===t.value&&e.lang===t.lang&&e.datatype===t.datatype);var m={isObject:l,isString:p,isFunction:e=>"[object Function]"===Object.prototype.toString.call(e),statementEquals:(e,t)=>e.s===t.s&&e.p===t.p&&h(e.o,t.o),add:(e,t,n,r)=>{if(f([e,t,n,r]),void 0===e[t])return e[t]={},e[t][n]=[r],r;if(void 0===e[t][n])return e[t][n]=[r],r;let a;const i=e[t][n];for(a=i.length-1;a>=0;a--)if(h(r,i[a]))return i[a];return i.push(r),r},remove:(e,t,n,r)=>{if(f([e,t,n,r]),void 0===e[t]||void 0===e[t][n])return;let a;const i=e[t][n];for(a=i.length-1;a>=0;a--)if(h(r,i[a])){const r=i[a];return i.splice(a,1),d(e,t,n),r}},contains:(e,t,n,r)=>{if(f([e,t,n,r]),void 0===e[t]||void 0===e[t][n])return;let a;const i=e[t][n];for(a=i.length-1;a>=0;a--)if(h(r,i[a]))return i[a]},cleanup:d,checkForWrongArgs:f,objectEquals:h,findDirectOrRDFValue:(e,t,n)=>{const r=e.find(t,n);if(r.length>0)return"bnode"!==r[0].getType()?r[0].getValue():e.findFirstValue(r[0].getValue(),"http://www.w3.org/1999/02/22-rdf-syntax-ns#value")}};class v{constructor(e,t,n,r,a){this._graph=e,this._s=t,this._p=n,this._o=r,this._o._statement=this,this._asserted=a}getGraph(){return this._graph}setAsserted(e){e!==this._asserted&&(e?this._graph.add(this,void 0,void 0,this._silentValue):this._graph.remove(this,this._silentValue),this._asserted=e)}isAsserted(){return this._asserted}getSubject(){return this._s}isSubjectBlank(){return!0!==this._sIsBlank&&!1!==this._sIsBlank&&(this._sIsBlank=0===this._s.indexOf("_:")),this._sIsBlank}isObjectBlank(){return"bnode"===this.getType()}setSubject(e){this._silentValue=!1;const t=s.expand(e);this._asserted?(this._graph.remove(this),this._s=t,this._graph.add(this),delete this._sIsBlank):this._s=t}getPredicate(){return this._p}setPredicate(e){this._silentValue=!1;const t=s.expand(e);this._asserted?(this._graph.remove(this),this._p=t,this._graph.add(this)):this._p=t}getNamedGraph(){return this._o.ng}setNamedGraph(e){this._o.ng=e}getObject(){return this._o}getCleanObject(){const e=this._o,t={value:e.value,type:e.type};return this._o.ng&&(t.ng=e.ng),e.lang&&(t.lang=e.lang),this._o.datatype&&(t.datatype=e.datatype),t}getType(){return this._o.type}setType(e){throw new Error("Changing the type of an object is not supported, create a new statement instead.")}getValue(){return this._o.value}setValue(e,t=!1){this._silentValue=!0===t,e!==this._o.value&&(this._o.value=e,this.isAsserted()&&!0!==t&&this._graph.setChanged())}getLanguage(){return this._o.lang}setLanguage(e,t){if(this._silentValue=!0===t,"literal"!==this._o.type)throw new Error("Cannot set the language for a resource, has to be a literal");this._o.lang!==e&&(this._o.lang=e,this.isAsserted()&&!0!==t&&this._graph.setChanged())}getDatatype(){return this._o.datatype}setDatatype(e,t){if(this._silentValue=!0===t,"literal"!==this._o.type||null!=this._o.lang)throw new Error("Cannot set the datatype for a resource, has to be a literal");this._o.datatype!==e&&(this._o.datatype=e,this.isAsserted()&&!0!==t&&this._graph.setChanged())}}var g=n(126),y=n.n(g);const x=(e,t,n,r,a)=>{t||new E;const i=r||{};return e.find(n,null,null).forEach(n=>{i[n.getPredicate()]?a&&t.add(n):(t.add(n),"bnode"===n.getType()&&x(e,t,n.getValue(),i))}),t},b=(e,t,n)=>{const r=n||{};e.find(t,null,null).forEach(t=>{e.remove(t),r[t.getPredicate()]||"bnode"===t.getType()&&b(e,t.getValue(),r)})};var w={extract:x,remove:b,fingerprint:(e,t)=>{const n=[],r=new Set((t||[]).map(e=>s.expand(e))),a=[],i={},o=e=>{let t=e.getValue();return e.getLanguage()&&(t+=`@${e.getLanguage()}`),e.getDatatype()&&(t+=`^^${e.getDatatype()}`),t},c=(e,t)=>{const n=i[e]||{rels:[]};i[e]=n,n.rels.push(t)};return e.find().forEach(e=>{const t=e.getSubject(),i=e.getPredicate();if(r.has(i))return;const s="bnode"===e.getType(),u=e.isSubjectBlank();if(u||s)return a.push(e),u&&c(e.getSubject(),s?i:i+o(e)),void("bnode"===e.getType()&&c(e.getValue(),u?i:t+i));n.push(t+i+o(e))}),Object.values(i).forEach(e=>{e.rels.sort(),e.hash=y()(e.rels.join(""))}),a.forEach(e=>{const t=[];t.push(e.isSubjectBlank()?i[e.getSubject()].hash:e.getSubject()),t.push(e.getPredicate()),t.push("bnode"===e.getType()?i[e.getValue()].hash:o(e)),n.push(t.join(""))}),n.sort(),y()(n.join(""))}};const _=e=>0===e.length?e:[e[0]],k=(e,t,n)=>({object(r){for(let a=0;a<t.length;a++){let i;if(n)i=t[a].getSubject();else{const e=t[a].getType();if("uri"===e||"bnode"===e)continue;i=t[a].getValue()}const o=e.find(i,r);o.length>0&&k(e,[o[0]])}return k(e,[])},objects(r){let a,i=[];if(!0===n)for(a=0;a<t.length;a++)i=i.concat(e.find(t[a].getSubject(),r));else for(a=0;a<t.length;a++){const n=t[a].getType();"uri"!==n&&"bnode"!==n||(i=i.concat(e.find(t[a].getValue(),r)))}return k(e,i)},constr(r,a){let i=a;m.isString(i)&&(i={type:"uri",value:i});const o=[];for(let a=0;a<t.length;a++){const s=n?t[a].getSubject():t[a].getValue();e.find(s,r,i).length>0&&o.push(t[a])}return k(e,o,n)},each(r,a){if(!0===n)for(let i=0;i<t.length;i++){const o="_:"===t[i].getSubject().substring(0,2)?"bnode":"uri";null!=a&&a!==o||r(k(e,t[i],n))}else for(let a=0;a<t.length;a++)r(k(e,t[a],n))},nodes(e){const r=[];if(!0===n)for(let n=0;n<t.length;n++){const a="_:"===t[n].getSubject().substring(0,2)?"bnode":"uri";null!=e&&e!==a||r.push({type:a,value:t[n].getSubject()})}else for(let n=0;n<t.length;n++)null!=e&&e!==t[n].getType()||r.push(t[n].getObject());return r},values(e){const r=[];if(!0===n)for(let n=0;n<t.length;n++){const a="_:"===t[n].getSubject().substring(0,2)?"bnode":"uri";null!=e&&e!==a||r.push(t[n].getSubject())}else for(let n=0;n<t.length;n++)null!=e&&e!==t[n].getType()||r.push(t[n].getValue());return r},firstValue(e){if(!0===n)for(let n=0;n<t.length;n++){const r="_:"===t[n].getSubject().substring(0,2)?"bnode":"uri";if(null==e||e===r)return t[n].getSubject()}else for(let n=0;n<t.length;n++)if(null==e||e===t[n].getType())return t[n].getValue()}});class E{constructor(e=null,t){this._graph=e||{},this._bnodes={},this._bnodesIndexed=!1,!1!==t&&this.validate(),this._changed=!1}isEmpty(){return!Object.keys(this._graph).find(e=>{const t=this._graph[e];return Object.keys(t).find(e=>t[e].find(e=>null==e._statement||e._statement.isAsserted()))})}onChange(){}setChanged(e){this._changed=!(!0!==e&&null!=e),this._changed&&this.onChange()}isChanged(){return this._changed}addAll(e,t){const n={};let r;const a=e.find();for(let e=0;e<a.length;e++){const i=a[e];let o=i.getSubject(),s=i.getPredicate();const c=i.getCleanObject();t&&(c.ng=t),0===o.indexOf("_:")&&(r=n[o]||this._newBNode(),n[o]=r,o=r),0===s.indexOf("_:")&&(r=n[s]||this._newBNode(),n[s]=r,s=r),"bnode"===c.type&&(r=n[c.value]||this._newBNode(),n[c.value]=r,c.value=r),this.add(o,s,c)}}add(e,t=null,n=null,r=!1){if(e instanceof v){const t=e.getPredicate(),n=e.getObject(),a=e.getSubject();this._trackBNodes(a,t,n);const i=this._graphObject(n),o=m.add(this._graph,a,t,i);return!0!==r&&this.setChanged(),this._get(a,t,o,!0)}return this.create(e,t,n,!0,r)}addL(e,t,n,r){const a={type:"literal",value:n};return"string"==typeof r&&(a.lang=r),this.create(e,t,a,!0)}addD(e,t,n,r){const a={type:"literal",value:n};return"string"==typeof r&&(a.datatype=s.expand(r)),this.create(e,t,a,!0)}create(e=null,t=null,n=null,r=!0,a=!1){let i=e,o=t,c=n;if(i=null==i?this._newBNode():s.expand(i),o=null==o?this._newBNode():s.expand(o),null==c?c={type:"bnode",value:this._newBNode()}:m.isString(c)?c={type:"uri",value:s.expand(c)}:("uri"===(c={type:c.type,value:c.value,lang:c.lang,datatype:c.datatype}).type&&null!=c.value&&(c.value=s.expand(c.value)),c.datatype&&(c.datatype=s.expand(c.datatype))),!1!==r){const e=m.add(this._graph,i,o,c);return!0!==a&&this.setChanged(),this._getOrCreate(i,o,e,!0)}return new v(this,i,o,c,!1)}findAndRemove(e,t,n,r=!1){const a=this.find(e,t,n);for(let e=0;e<a.length;e++)this.remove(a[e],r)}remove(e,t=!1){const n=e.getSubject(),r=e.getPredicate(),a=e.getObject();this._trackBNodes(n,r,a),null!=m.remove(this._graph,n,r,a)&&!0!==t&&this.setChanged()}find(e,t,n){let r=e,a=t,i=n;if("string"==typeof r&&(r=s.expand(r)),"string"==typeof a&&(a=s.expand(a)),"object"==typeof i&&null!==i&&"uri"===i.type?i.value=s.expand(i.value):"string"==typeof i&&(i={type:"uri",value:s.expand(i)}),null==i)return null==a?null==r?this._find():this._findS(r):null==r?this._findP(a):this._findSP(r,a);if(null==a)return null==r?this._findO(i):this._findSO(r,i);if(null==r)return this._findPO(a,i);const o=this._get(r,a,m.contains(this._graph,r,a,i),!0);return null==o?[]:[o]}findFirstValue(e,t){const n=this.find(e,t);if(n.length>0)return n[0].getValue()}projection(e,t,n){const r={};return Object.keys(t).forEach(a=>{const i=t[a],o=this.find(e,i);if(o.length>0)switch("*"===a[0]?r[a.substr(1)]=o.map(e=>e.getValue()):r[a]=o[0].getValue(),n||"none"){case"statement":r[`*${a}`]=o;break;case"objects":r[`*${a}`]=o.map(e=>e.getCleanObject());break;case"values":r[`*${a}`]=o.map(e=>e.getValue())}}),r}subjects(e,t){return k(this,this.find(null,e,t),!0)}subject(e,t){return k(this,_(this.find(null,e,t)),!0)}objects(e,t){return k(this,this.find(e,t,null))}object(e,t){return k(this,_(this.find(e,t,null)))}addList(e){return this._addList(e,"add")}addListL(e,t){return this._addList(e,"addL",t)}addListD(e,t){return this._addList(e,"addD",t)}_addList(e,t,n){let r;if(Array.isArray(e)&&0!==e.length){let a=r=this._newBNode();const i=e.length-1;e.forEach((e,r)=>{this[t](a,"rdf:first",e,n),r!==i?a=this.add(a,"rdf:rest").getValue():this.add(a,"rdf:rest","rdf:nil")})}else r=s.expand("rdf:nil");return r}removeList(e){let t=!1,n="object"==typeof e?e.value:e;try{const e=s.expand("rdf:nil");for(t=n===e;n!==e&&null!=n;){const e=this.findFirstValue(n,"rdf:rest");this.findAndRemove(n),t=null!=(n=e)}}catch(e){return console.warn(`Invalid list for object: ${n}`),!1}return t}getList(e){let t="object"==typeof e?e.value:e;const n=[];try{const e=s.expand("rdf:nil");for(;t!==e&&null!=t;)n.push(this.find(t,"rdf:first")[0].getObject()),t=this.findFirstValue(t,"rdf:rest")}catch(e){console.warn(`Invalid list for object: ${t}`)}return n}findFirstListAsValues(e,t){return this.getList(this.findFirstValue(e,t)).map(e=>e.value)}findAndRemoveLists(e,t){let n=!1;return this.find(e,t).forEach(e=>{this.removeList(e.getValue())&&(this.remove(e),n=!0)}),n}exportRDFJSON(){const e=this._graph,t={};return Object.keys(e).forEach(n=>{const r=e[n];t[n]={},Object.keys(r).forEach(e=>{const a=[];t[n][e]=a,r[e].forEach(e=>{const t={type:e.type,value:e.value};null!=e.ng&&(t.ng=e.ng),null!=e.lang&&(t.lang=e.lang),null!=e.datatype&&(t.datatype=e.datatype),a.push(t)})})}),t}replaceSubject(e,t){return this.replaceURI(e,t)}replaceURI(e,t){const n=this._graph;if(n.hasOwnProperty(e)){if(n.hasOwnProperty(t))throw new Error("Cannot replace subject with target URI since it already exists.");n[t]=n[e],delete n[e],this.forEach((n,r,a)=>{"uri"===a.type&&a.value===e&&(a.value=t),n===t&&a._statement&&(a._statement._s=t)})}return this}replaceBlankWithURI(e,t){const n=this._graph;if(n.hasOwnProperty(e)){if(n.hasOwnProperty(t))throw new Error("Cannot replace subject with target URI since it already exists.");n[t]=n[e],delete n[e],this.forEach((n,r,a)=>{"bnode"===a.type&&a.value===e&&(a.value=t,a.type="uri"),n===t&&a._statement&&(a._statement._s=t)})}return delete this._bnodes[e],this}clone(){return new E(this.exportRDFJSON())}findProperties(e){return Object.keys(this._graph[e]||{})}validate(){if(this.report=this._validate(),!this.report.valid)throw this.report;return this.report}registerBNode(e){this._bnodes[e]=!0}forEach(e){const t=this._graph;Object.keys(t).forEach(n=>{const r=t[n];Object.keys(r).forEach(t=>{r[t].forEach(r=>{e(n,t,r)})})})}map(e){const t=[];return this.forEach(n=>{t.push(e(n))}),t}equals(e,t){return w.fingerprint(this,t)===w.fingerprint(e,t)}size(){let e=0;return Object.values(this._graph).forEach(t=>{Object.values(t).forEach(t=>{e+=t.length})}),e}_get(e,t,n,r){if(null!=n)return this._getOrCreate(e,t,n,r)}_getOrCreate(e,t,n,r){return null==n._statement&&(n._statement=new v(this,e,t,n,r)),n._statement}_graphObject(e){return null==e._statement||e._statement._graph===this?e:{type:e.type,value:e.value,lang:e.lang,datatype:e.datatype}}_findSP(e,t){return null==this._graph[e]||null==this._graph[e][t]?[]:this._graph[e][t].map(n=>this._get(e,t,n,!0))}_findS(e){const t=this._graph[e],n=Object.keys(t||{}).map(t=>this._findSP(e,t));return Array.prototype.concat.apply([],n)}_find(){const e=[];return this.forEach((t,n,r)=>{e.push(this._get(t,n,r,!0))}),e}_findP(e){const t=[];return this.forEach((n,r,a)=>{e===r&&t.push(this._get(n,r,a,!0))}),t}_findO(e){const t=[];return this.forEach((n,r,a)=>{m.objectEquals(e,a)&&t.push(this._get(n,r,a,!0))}),t}_findSO(e,t){const n=[];return this.forEach((r,a,i)=>{e===r&&m.objectEquals(t,i)&&n.push(this._get(r,a,i,!0))}),n}_findPO(e,t){const n=[];return this.forEach((r,a,i)=>{e===a&&m.objectEquals(t,i)&&n.push(this._get(r,a,i,!0))}),n}_validate(){const e=this._graph,t={valid:!0,errors:[],nr:0};return Object.keys(e).forEach(n=>{const r=e[n];m.isObject(r)?Object.keys(r).forEach(e=>{const a=r[e];Array.isArray(a)?a.forEach((r,a)=>{m.isObject(r)?null!=r.type?m.isString(r.value)?t.nr+=1:(t.errors.push({s:n,p:e,oindex:a+1,message:`Object ${a+1} in object array must have the 'value' attribute pointing to a string.`}),t.valid=!1):(t.errors.push({s:n,p:e,oindex:a+1,message:`Object ${a+1} in object array lacks the attribute type, must be either 'literal', 'resource' or 'bnode'.`}),t.valid=!1):(t.errors.push({s:n,p:e,oindex:a+1,message:`Element ${a+1} in object array is not an object.`}),t.valid=!1)}):(t.errors.push({s:n,p:e,message:"Predicate must point to an array of objects."}),t.valid=!1)}):(t.errors.push({s:n,message:"Subject must point to an object."}),t.valid=!1)}),t}_newBNode(){let e,t,n;for(this._indexBNodes(),e=1;e<20;e++)for(t=1;t<=e;t++)if(n=`_:${Math.floor(Math.random()*(Math.pow(10,e)+1))}`,!0!==this._bnodes[n])return this._bnodes[n]=!0,n;throw new Error("Failed creating a new blank node, increadible unprobable...")}_indexBNodes(){if(this._bnodesIndexed)return;const e=this._graph;Object.keys(e).forEach(t=>{0===t.indexOf("_:")&&(this._bnodes[t]=!0);const n=e[t];Object.keys(n).forEach(e=>{0===e.indexOf("_:")&&(this._bnodes[e]=!0),n[e].forEach(e=>{"bnode"===e.type&&(this._bnodes[e.value]=!0)})})}),this._bnodesIndexed=!0}_trackBNodes(e,t,n){0===e.indexOf("_:")&&(this._bnodes[e]=!0),0===t.indexOf("_:")&&(this._bnodes[t]=!0),"bnode"===n.type&&(this._bnodes[n.value]=!0)}}const S=(e,t)=>{var n=t.indexOf("#");if(n>0&&(t=t.slice(0,n)),0==e.length)return t;if(0==e.indexOf("#"))return t+e;if(e.indexOf(":")>=0)return e;var r=t.indexOf(":");if(r<0)return console.log("Invalid base URL "+t),e;var a,i=t.slice(0,r+1);if(0==e.indexOf("//"))return i+e;if(t.indexOf("//",r)==r+1){if((a=t.indexOf("/",r+3))<0)return t.length-r-3>0?t+"/"+e:i+e}else if((a=t.indexOf("/",r+1))<0)return t.length-r-1>0?t+"/"+e:i+e;if(0==e.indexOf("/"))return t.slice(0,a)+e;var o=t.slice(a),s=o.lastIndexOf("/");if(s<0)return i+e;for(s>=0&&s<o.length-1&&(o=o.slice(0,s+1)),o+=e;o.match(/[^\/]*\/\.\.\//);)o=o.replace(/[^\/]*\/\.\.\//,"");return o=o.replace(/\.\//g,""),t.slice(0,a)+o};var R,T=R=function(e){R.ns={RDF:"http://www.w3.org/1999/02/22-rdf-syntax-ns#",RDFS:"http://www.w3.org/2000/01/rdf-schema#"},R.nodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12},this.frameFactory=function(e,t,n){return{NODE:1,ARC:2,parent:t,parser:e,store:e.store,element:n,lastChild:0,base:null,lang:null,node:null,nodeType:null,listIndex:1,rdfid:null,datatype:null,collection:!1,terminateFrame:function(){this.collection&&this.node.close()},addSymbol:function(e,t){t=S(t,this.base),this.node=this.store.sym(t),this.nodeType=e},loadTriple:function(){if(this.parent.parent.collection?this.parent.parent.node.append(this.node):this.store.add(this.parent.parent.node,this.parent.node,this.node,this.parser.why),null!=this.parent.rdfid){var e=this.store.sym(S("#"+this.parent.rdfid,this.base));this.store.add(e,this.store.sym(R.ns.RDF+"type"),this.store.sym(R.ns.RDF+"Statement"),this.parser.why),this.store.add(e,this.store.sym(R.ns.RDF+"subject"),this.parent.parent.node,this.parser.why),this.store.add(e,this.store.sym(R.ns.RDF+"predicate"),this.parent.node,this.parser.why),this.store.add(e,this.store.sym(R.ns.RDF+"object"),this.node,this.parser.why)}},isTripleToLoad:function(){return null!=this.parent&&null!=this.parent.parent&&this.nodeType==this.NODE&&this.parent.nodeType==this.ARC&&this.parent.parent.nodeType==this.NODE},addNode:function(e){this.addSymbol(this.NODE,e),this.isTripleToLoad()&&this.loadTriple()},addCollection:function(){this.nodeType=this.NODE,this.node=this.store.collection(),this.collection=!0,this.isTripleToLoad()&&this.loadTriple()},addCollectionArc:function(){this.nodeType=this.ARC},addBNode:function(e){null!=e?null!=this.parser.bnodes[e]?this.node=this.parser.bnodes[e]:this.node=this.parser.bnodes[e]=this.store.bnode():this.node=this.store.bnode(),this.nodeType=this.NODE,this.isTripleToLoad()&&this.loadTriple()},addArc:function(e){e==R.ns.RDF+"li"&&(e=R.ns.RDF+"_"+this.parent.listIndex++),this.addSymbol(this.ARC,e)},addLiteral:function(e){this.parent.datatype?this.node=this.store.literal(e,"",this.store.sym(this.parent.datatype)):this.node=this.store.literal(e,this.lang),this.nodeType=this.NODE,this.isTripleToLoad()&&this.loadTriple()}}},this.store=e,this.bnodes={},this.why=null,this.reify=!1,this.parse=function(e,t,n){var r,a=e.childNodes;if(this.cleanParser(),e.nodeType==R.nodeType.DOCUMENT){for(var i=0;i<a.length;i++)if(a[i].nodeType==R.nodeType.ELEMENT){r=a[i];break}}else{if(e.nodeType!=R.nodeType.ELEMENT)throw new Error("RDFParser: can't find root in "+t+". Halting. ");r=e}this.why=n;var o=this.frameFactory(this);return o.base=t,o.lang="",this.parseDOM(this.buildFrame(o,r)),!0},this.parseDOM=function(e){for(var t=function(e){return e.namespaceURI+e.localName},n=!0;e.parent;){var r,a,i=e.element,o=i.attributes;if(i.nodeType==R.nodeType.TEXT||i.nodeType==R.nodeType.CDATA_SECTION)e.addLiteral(i.nodeValue);else if(t(i)!=R.ns.RDF+"RDF")if(e.parent&&e.parent.collection&&(e.addCollectionArc(),(e=this.buildFrame(e,e.element)).parent.element=null),e.parent&&e.parent.nodeType&&e.parent.nodeType!=e.ARC){e.addArc(t(i)),this.reify&&(r=i.getAttributeNodeNS(R.ns.RDF,"ID"))&&(e.rdfid=r.nodeValue,i.removeAttributeNode(r));var s=i.getAttributeNodeNS(R.ns.RDF,"parseType"),c=i.getAttributeNodeNS(R.ns.RDF,"datatype");if(c&&(e.datatype=c.nodeValue,i.removeAttributeNode(c)),s){var u=s.nodeValue;"Literal"==u?(e.datatype=R.ns.RDF+"XMLLiteral",(e=this.buildFrame(e)).addLiteral(i),n=!1):"Resource"==u?((e=this.buildFrame(e,e.element)).parent.element=null,e.addBNode()):"Collection"==u&&((e=this.buildFrame(e,e.element)).parent.element=null,e.addCollection()),i.removeAttributeNode(s)}if(0!=o.length){var l=i.getAttributeNodeNS(R.ns.RDF,"resource");for(a=i.getAttributeNodeNS(R.ns.RDF,"nodeID"),e=this.buildFrame(e),l?(e.addNode(l.nodeValue),i.removeAttributeNode(l)):a?(e.addBNode(a.nodeValue),i.removeAttributeNode(a)):e.addBNode(),h=o.length-1;h>=0;h--){var p=this.buildFrame(e);p.addArc(t(o[h])),t(o[h])==R.ns.RDF+"type"?this.buildFrame(p).addNode(o[h].nodeValue):this.buildFrame(p).addLiteral(o[h].nodeValue)}}else 0==i.childNodes.length&&this.buildFrame(e).addLiteral("")}else{var d=i.getAttributeNodeNS(R.ns.RDF,"about");if(r=i.getAttributeNodeNS(R.ns.RDF,"ID"),d&&r)throw new Error("RDFParser: "+i.nodeName+" has both rdf:id and rdf:about. Halting. Only one of these properties may be specified on a node.");null==d&&r?(e.addNode("#"+r.nodeValue),i.removeAttributeNode(r)):null==d&&null==r?(a=i.getAttributeNodeNS(R.ns.RDF,"nodeID"))?(e.addBNode(a.nodeValue),i.removeAttributeNode(a)):e.addBNode():(e.addNode(d.nodeValue),i.removeAttributeNode(d));var f=i.getAttributeNodeNS(R.ns.RDF,"type");R.ns.RDF+"Description"!=t(i)&&(f={nodeValue:t(i)}),null!=f&&(this.store.add(e.node,this.store.sym(R.ns.RDF+"type"),this.store.sym(S(f.nodeValue,e.base)),this.why),f.nodeName&&i.removeAttributeNode(f));for(var h=o.length-1;h>=0;h--)this.store.add(e.node,this.store.sym(t(o[h])),this.store.literal(o[h].nodeValue,e.lang),this.why)}for(i=e.element;e.parent;){for(var m=e;null==i;)i=(e=e.parent).element;var v=i.childNodes,g=null!=v?v[e.lastChild]:null;if(null!=g&&n){if((g.nodeType==R.nodeType.ELEMENT||g.nodeType==R.nodeType.TEXT||g.nodeType==R.nodeType.CDATA_SECTION)&&(g.nodeType!=R.nodeType.TEXT&&g.nodeType!=R.nodeType.CDATA_SECTION||1==i.childNodes.length)){e.lastChild++,e=this.buildFrame(m,i.childNodes[e.lastChild-1]);break}e.lastChild++}else{if(e.terminateFrame(),!(e=e.parent))break;i=e.element,n=!0}}}},this.cleanParser=function(){this.bnodes={},this.why=null},this.buildFrame=function(e,t){var n=this.frameFactory(this,e,t);if(e&&(n.base=e.base,n.lang=e.lang),null==t||t.nodeType==R.nodeType.TEXT||t.nodeType==R.nodeType.CDATA_SECTION)return n;var r=t.attributes,a=t.getAttributeNode("xml:base");null!=a&&(n.base=a.nodeValue,t.removeAttribute("xml:base"));var i=t.getAttributeNode("xml:lang");null!=i&&(n.lang=i.nodeValue,t.removeAttribute("xml:lang"));for(var o=r.length-1;o>=0;o--)"xml"==r[o].nodeName.substr(0,3)&&t.removeAttributeNode(r[o]);return n}};const A=e=>"object"==typeof e?e:"string"==typeof e?new N(e):void(void 0!==e&&alert(`Can't make term from ${e} of type ${typeof e}`)),D=function(){return this};D.prototype.termType="empty",D.prototype.toString=function(){return""},D.prototype.toNT=function(){return""};const O=function(){return"<"+this.uri+">"},I=function(e){return this.uri=e,this};I.prototype.termType="symbol",I.prototype.toString=O,I.prototype.toNT=O;let j=0;const C=function(){return this.id=j++,this};C.prototype.termType="bnode",C.prototype.toNT=function(){return"_:n"+this.id},C.prototype.toString=C.prototype.toNT;const N=function(e,t,n){return this.value=e,this.lang=t,this.datatype=n,this};N.prototype.termType="literal",N.prototype.toNT=function(){const e=this.value;if("string"!=typeof e)throw Error("Value of RDF literal is not string: "+e);return e=e.replace(/\\/g,"\\\\"),e=e.replace(/"/g,'\\"'),e='"'+e+'"',this.datatype&&(e=e+"^^"+this.datatype),this.lang&&(e=e+"@"+this.lang),e},N.prototype.toString=function(){return this.value};const L=function(){this.id=j++,this.elements=[],this.closed=!1};L.prototype.termType="collection",L.prototype.toNT=function(){return"_:n"+this.id},L.prototype.toString=L.prototype.toNT,L.prototype.append=function(e){this.elements.push(e)},L.prototype.close=function(){this.closed=!0};const q=function(){return this.subject.toNT()+" "+this.predicate.toNT()+" "+this.object.toNT()+" ."},U=function(e,t,n,r){return this.subject=A(e),this.predicate=A(t),this.object=A(n),void 0!==r&&(this.why=r),this};U.prototype.toNT=q,U.prototype.toString=q;const P=function(){return this.statements=[],this.constraints=[],this.initBindings=[],this.optional=[],this},M=function(){return"{\n"+this.statements.join("\n")+"}"};P.prototype.termType="formula",P.prototype.toNT=M,P.prototype.toString=M,P.prototype.add=function(e,t,n,r){this.statements.push(new U(e,t,n,r))},P.prototype.sym=function(e,t){return null!=t&&(e=this.namespaces[e]+t),new I(e)},P.prototype.literal=function(e,t,n){return new N(e.toString(),t,n)},P.prototype.bnode=function(){return new C},P.prototype.formula=function(){return new P},P.prototype.collection=function(){return new L};const F=function(e){return this.uri=S(e,"varid:"),this};F.prototype.termType="variable",F.prototype.toNT=function(){return"varid:"==this.uri.slice(0,"varid:".length)?`?${this.uri.slice("varid:".length)}`:`?${this.uri}`},F.prototype.toString=F.prototype.toNT,F.prototype.classOrder=7,P.prototype.variable=function(e){return new F(e)},F.prototype.hashString=F.prototype.toNT,P.prototype.fromNT=function(e){const t=e.length,n=e.slice(0,1);if("<"===n)return this.sym(e.slice(1,t-1));if("_"===n){const t=new C;return t.id=parseInt(e.slice(3)),j--,t}alert(`Can't yet convert from NT: '${e}', ${e[0]}`)};let z,B;if("undefined"==typeof window||void 0===window.DOMParser&&"undefined"==typeof ActiveXObject){z=e=>(new XMLSerializer).serializeToString(e);const e=u.a.DOMParser;B=t=>(new e).parseFromString(t,"text/xml")}else z=e=>e.xml,B=e=>{let t;try{if(window.DOMParser){t=(new DOMParser).parseFromString(e,"text/xml")}else(t=new ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e)}catch(e){t=null}if(!t||!t.documentElement||t.getElementsByTagName("parsererror").length)throw new Error("Could not parse text as xml");return t};const V=e=>{if(/["<>^`{|}]/i.test(e))throw Error({message:`URL "${e}" is not allowed to contain special characters " < > \\ ^ \` { | or }.`,character:!0});if(!/^(?:[a-z][a-z0-9+.-]*:)/i.test(e))throw Error({message:`Relative URL not supported: ${e}`,relative:!0});if(/ /i.test(e)){if(exports.convertSpacesInURIs)return e.replace(/ /g,"%20");throw Error({message:`Spaces inside of URL not supported: ${e}`,space:!0})}return e},G=(e,t=null)=>{let n=e;m.isString(n)&&(n=B(n));const r=t||new E({}),a=new P;return a.add=(e,t,n)=>{let a,i;const o={};e instanceof C?(a=e.toString(),r.registerBNode(a)):(e.uri=V(e.uri),a=e.uri),t instanceof C?(i=t.toString(),r.registerBNode(i)):(t.uri=V(t.uri),i=t.uri),n instanceof N?(o.type="literal",o.value=n.value,n.lang&&(o.lang=n.lang),n.datatype&&(o.datatype=n.datatype.uri)):n instanceof I?(n.uri=V(n.uri),o.type="uri",o.value=n.uri):n instanceof C&&(o.value=n.toString(),r.registerBNode(o.value),o.type="bnode"),r.create(a,i,o,!0)},new T(a).parse(n,"",""),r},Y=e=>encodeURI(decodeURI(e)).replace(/&/g,"&amp;");var H={xml2string:z,string2xml:B,rdfxml2graph:G,rdfjson2rdfxml:e=>{const t=e instanceof E?e._graph:e||{},n=[],r={},a=[];Object.keys(t).forEach(e=>{"_:"===e.substr(0,2)?a.push(`  <rdf:Description rdf:nodeID="_${e.substring(2)}">\n`):a.push(`  <rdf:Description rdf:about="${Y(e)}">\n`);const i=t[e];Object.keys(i).forEach(e=>{const t=function(e){const t=s.nsify(e);return r[t.abbrev]||(n.push(t.abbrev),r[t.abbrev]=t.ns),t.pretty}(e);i[e].forEach(e=>{let n;switch(e.type){case"literal":n=e.value.replace("&","&amp;").replace("<","&lt;"),null!=e.lang?a.push(`    <${t} xml:lang="${e.lang}">${n}</${t}>\n`):null!=e.datatype?a.push(`    <${t} rdf:datatype="${e.datatype}">${n}</${t}>\n`):a.push(`    <${t}>${n}</${t}>\n`);break;case"uri":a.push(`    <${t} rdf:resource="${Y(e.value)}"/>\n`);break;case"bnode":"_:"===e.value.substr(0,2)?a.push(`    <${t} rdf:nodeID="_${e.value.substring(2)}"/>\n`):a.push(`    <${t} rdf:nodeID="${e.value}"/>\n`)}})}),a.push("  </rdf:Description>\n")});const i=['<?xml version="1.0"?>\n<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"'];for(let e=0;e<n.length;e++)"rdf"!==n[e]&&i.push(`\n\txmlns:${n[e]}="${r[n[e]]}"`);return i.push(">\n"),a.unshift(i.join("")),a.push("</rdf:RDF>"),a.join("")},detect:e=>{const t={};if("string"==typeof e){if(-1!==e.substr(0,200).toLowerCase().indexOf("<rdf:rdf")){t.format="rdf/xml";try{t.graph=G(e)}catch(e){e.relative||e.space||e.character?(t.error=e.message,t.errorCode=1):(t.error="Invalid rdf/xml",t.errorCode=2)}}else if('{"'===e.substring(0,2)){t.format="rdf/json";try{const e=JSON.parse((void 0).rdfjson);t.graph=new E(e)}catch(e){t.error="Invalid json.",t.errorCode=3}}else t.error="No RDF detected.",t.errorCode=4}else e instanceof E?(t.format="rdf/json",t.graph=e):"object"==typeof e?(t.format="rdf/json",t.graph=new E(e)):(t.error="unknown format",t.errorCode=5);if(!t.error){t.graph.validate().valid||(t.error="RDF/JSON is not valid.",t.errorCode=6)}return t}};const W=(e,t,n)=>{const r=n||{},a=e?e.find(t):[],i=[];for(let t=0;t<a.length;t++){const n=a[t];if("literal"===n.getType())i.push({stmt:n});else{const t={stmt:n},a=n.getValue();r[a]||(r[a]=!0,t.children=W(e,a,r))}}return i},$=(e,t)=>{const n=W(e,t),r=[],a=(e,t)=>{for(let n=0;n<e.length;n++){const i=e[n];i.indent=t,r.push(i),i.children&&(a(i.children,t+1),delete i.children)}};return a(n,1),r};var J={pretty:(e,t)=>{const n={},r=e.find(t);for(let e=0;e<r.length;e++){const t=r[e];"bnode"!==t.getType()&&(n[s.shorten(t.getPredicate())]=t.getValue())}return n},statementList:$,statementTree:W,prettyTree:(e,t)=>{const n=$(e,t);for(let e=0;e<n.length;e++){const t=n[e],r=t.stmt;r.isSubjectBlank()?t.s=r.getSubject():t.s=s.shorten(r.getSubject()),t.p=s.shorten(r.getPredicate());const a=r.getType();if("uri"===a){t.o=s.shorten(r.getValue());const e=r.getLanguage(),n=r.getDatatype();null!=e?t.o+=`@@${e}`:null!=n&&(t.o+=`^^${n}`)}else t.o=`"${r.getValue()}"`}return n}};n.d(t,"namespaces",function(){return s}),n.d(t,"converters",function(){return H}),n.d(t,"Graph",function(){return E}),n.d(t,"Statement",function(){return v}),n.d(t,"utils",function(){return w}),n.d(t,"print",function(){return J})},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(131),a=n(97).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,a)}},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(57),a=n(3),i=n(11),o=n(9).f,s=n(56),c=n(62),u=s("meta"),l=0,p=Object.isExtensible||function(){return!0},d=function(e){o(e,u,{value:{objectID:"O"+ ++l,weakData:{}}})},f=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,u)){if(!p(e))return"F";if(!t)return"E";d(e)}return e[u].objectID},getWeakData:function(e,t){if(!i(e,u)){if(!p(e))return!0;if(!t)return!1;d(e)}return e[u].weakData},onFreeze:function(e){return c&&f.REQUIRED&&p(e)&&!i(e,u)&&d(e),e}};r[u]=!0},function(e,t,n){"use strict";var r=n(25),a=n(9),i=n(42);e.exports=function(e,t,n){var o=r(t);o in e?a.f(e,o,i(0,n)):e[o]=n}},function(e,t,n){e.exports=n(2)},function(e,t,n){var r=n(4),a=n(140);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,i){return r(n),a(i),t?e.call(n,i):n.__proto__=i,n}}():void 0)},function(e,t,n){"use strict";var r=n(33),a=n(9),i=n(7),o=n(6),s=i("species");e.exports=function(e){var t=r(e),n=a.f;o&&t&&!t[s]&&n(t,s,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(14),a="["+n(84)+"]",i=RegExp("^"+a+a+"*"),o=RegExp(a+a+"*$"),s=function(e){return function(t){var n=String(r(t));return 1&e&&(n=n.replace(i,"")),2&e&&(n=n.replace(o,"")),n}};e.exports={start:s(1),end:s(2),trim:s(3)}},function(e,t,n){var r=n(16);e.exports=function(e,t,n){for(var a in t)r(e,a,t[a],n);return e}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={ET_LOCAL:"Local",ET_LINK:"Link",ET_REF:"Reference",ET_LINKREF:"Linkreference",GT_NONE:"None",GT_CONTEXT:"Context",GT_SYSTEMCONTEXT:"Systemcontext",GT_USER:"User",GT_GROUP:"Group",GT_LIST:"List",GT_RESULTLIST:"Resultlist",GT_GRAPH:"Graph",GT_STRING:"String",GT_PIPELINE:"Pipeline",GT_PIPELINERESULT:"PipelineResult",RT_INFORMATIONRESOURCE:"Information",RT_RESOLVABLEINFORMATIONRESOURCE:"Resolvable",RT_NAMEDRESOURCE:"Named",RT_UNKNOWN:"Unknown"};t.default=n},function(e,t){e.exports=require("stream")},function(e,t,n){var r=n(1),a=n(24),i="".split;e.exports=r(function(){return!Object("z").propertyIsEnumerable(0)})?function(e){return"String"==a(e)?i.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(2),a=n(95),i=n(32),o=r["__core-js_shared__"]||a("__core-js_shared__",{});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.1.3",mode:i?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t){e.exports={}},function(e,t,n){var r=n(18),a=n(8),i=n(34),o=function(e){return function(t,n,o){var s,c=r(t),u=a(c.length),l=i(o,u);if(e&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:o(!0),indexOf:o(!1)}},function(e,t,n){var r=n(1),a=/#|\.prototype\./,i=function(e,t){var n=s[o(e)];return n==u||n!=c&&("function"==typeof t?r(t):!!t)},o=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},function(e,t,n){var r=n(131),a=n(97);e.exports=Object.keys||function(e){return r(e,a)}},function(e,t,n){var r=n(3),a=n(44),i=n(7)("species");e.exports=function(e,t){var n;return a(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!a(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(1);e.exports=!r(function(){return Object.isExtensible(Object.preventExtensions({}))})},function(e,t,n){var r=n(4),a=n(100),i=n(8),o=n(36),s=n(65),c=n(138),u=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,t,n,l,p){var d,f,h,m,v,g,y=o(t,n,l?2:1);if(p)d=e;else{if("function"!=typeof(f=s(e)))throw TypeError("Target is not iterable");if(a(f)){for(h=0,m=i(e.length);m>h;h++)if((v=l?y(r(g=e[h])[0],g[1]):y(e[h]))&&v instanceof u)return v;return new u(!1)}d=f.call(e)}for(;!(g=d.next()).done;)if((v=c(d,y,g.value,l))&&v instanceof u)return v;return new u(!1)}).stop=function(e){return new u(!0,e)}},function(e,t){e.exports={}},function(e,t,n){var r=n(66),a=n(64),i=n(7)("iterator");e.exports=function(e){if(null!=e)return e[i]||e["@@iterator"]||a[r(e)]}},function(e,t,n){var r=n(24),a=n(7)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?n:i?r(t):"Object"==(o=r(t))&&"function"==typeof t.callee?"Arguments":o}},function(e,t,n){var r=n(1),a=n(7)("species");e.exports=function(e){return!r(function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=n(41),i=(r=n(52))&&r.__esModule?r:{default:r};var o=function(e){var t={};return Object.keys(e).forEach(function(n){t[e[n]]=n}),t},s="http://entrystore.org/terms/",c="http://www.w3.org/2001/XMLSchema#";a.namespaces.add("prov","http://www.w3.org/ns/prov#"),a.namespaces.add("store",s),a.namespaces.add("storepr","http://entrystore.org/terms/pipelineresult#");var u={homeContext:"".concat(s,"homeContext"),resource:"".concat(s,"resource"),metadata:"".concat(s,"metadata"),externalMetadata:"".concat(s,"externalMetadata"),reasoningFacts:"".concat(s,"reasoningFacts"),status:{property:"".concat(s,"status"),InProgress:"".concat(s,"InProgress"),Pending:"".concat(s,"Pending"),Succeeded:"".concat(s,"Success"),Failed:"".concat(s,"Failed")},rdf:{type:"".concat("http://www.w3.org/1999/02/22-rdf-syntax-ns#","type")},pipeline:{pipeline:"".concat(s,"pipeline"),pipelineData:"".concat(s,"pipelineData"),transform:"".concat(s,"transform"),transformPriority:"".concat(s,"transformPriority"),transformType:"".concat(s,"transformType"),transformArgument:"".concat(s,"transformArgument"),transformArgumentKey:"".concat(s,"transformArgumentKey"),transformArgumentValue:"".concat(s,"transformArgumentValue"),transformDestination:"".concat(s,"transformDestination"),transformDetectDestination:"".concat(s,"transformDetectDestination")},acl:{read:"".concat(s,"read"),write:"".concat(s,"write")},xsd:{integer:"".concat(c,"integer"),float:"".concat(c,"float"),boolean:"".concat(c,"boolean")}},l={};l["".concat(s,"Local")]=i.default.ET_LOCAL,l["".concat(s,"Link")]=i.default.ET_LINK,l["".concat(s,"LinkReference")]=i.default.ET_LINKREF,l["".concat(s,"Reference")]=i.default.ET_REF,l.default=i.default.ET_LOCAL,u.entryType=l,u.invEntryType=o(l);var p={};p["".concat(s,"None")]=i.default.GT_NONE,p["".concat(s,"Context")]=i.default.GT_CONTEXT,p["".concat(s,"SystemContext")]=i.default.GT_SYSTEMCONTEXT,p["".concat(s,"User")]=i.default.GT_USER,p["".concat(s,"Group")]=i.default.GT_GROUP,p["".concat(s,"List")]=i.default.GT_LIST,p["".concat(s,"ResultList")]=i.default.GT_RESULTLIST,p["".concat(s,"Graph")]=i.default.GT_GRAPH,p["".concat(s,"Pipeline")]=i.default.GT_PIPELINE,p["".concat(s,"PipelineResult")]=i.default.GT_PIPELINERESULT,p["".concat(s,"String")]=i.default.GT_STRING,p.default=i.default.GT_NONE,u.graphType=p,u.invGraphType=o(p);var d={};d["".concat(s,"InformationResource")]=i.default.RT_INFORMATIONRESOURCE,d["".concat(s,"ResolvableInformationResource")]=i.default.RT_RESOLVABLEINFORMATIONRESOURCE,d["".concat(s,"NamedResource")]=i.default.RT_NAMEDRESOURCE,d["".concat(s,"Unknown")]=i.default.RT_UNKNOWN,d.default=i.default.RT_INFORMATIONRESOURCE,u.resourceType=d,u.invResourceType=o(d);var f=u;t.default=f},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("url")},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);t.f=i?function(e){var t=a(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(55),a=n(56),i=r("keys");e.exports=function(e){return i[e]||(i[e]=a(e))}},function(e,t,n){"use strict";var r=n(32),a=n(2),i=n(1);e.exports=r||!i(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete a[e]})},function(e,t,n){var r=n(7)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},function(e,t,n){var r=n(20),a=n(10),i=n(54),o=n(8),s=function(e){return function(t,n,s,c){r(n);var u=a(t),l=i(u),p=o(u.length),d=e?p-1:0,f=e?-1:1;if(s<2)for(;;){if(d in l){c=l[d],d+=f;break}if(d+=f,e?d<0:p<=d)throw TypeError("Reduce of empty array with no initial value")}for(;e?d>=0:p>d;d+=f)d in l&&(c=n(c,l[d],d,u));return c}};e.exports={left:s(!1),right:s(!0)}},function(e,t,n){"use strict";var r=n(18),a=n(37),i=n(64),o=n(19),s=n(103),c=o.set,u=o.getterFor("Array Iterator");e.exports=s(Array,"Array",function(e,t){c(this,{type:"Array Iterator",target:r(e),index:0,kind:t})},function(){var e=u(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}},"values"),i.Arguments=i.Array,a("keys"),a("values"),a("entries")},function(e,t,n){var r=n(23),a=n(14),i=function(e){return function(t,n){var i,o,s=String(a(t)),c=r(n),u=s.length;return c<0||c>=u?e?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(o=s.charCodeAt(c+1))<56320||o>57343?e?s.charAt(c):i:e?s.slice(c,c+2):o-56320+(i-55296<<10)+65536}};e.exports={codeAt:i(!1),charAt:i(!0)}},function(e,t,n){"use strict";var r=n(13),a=n(16),i=n(1),o=n(7),s=n(80),c=o("species"),u=!i(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),l=!i(function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]});e.exports=function(e,t,n,p){var d=o(e),f=!i(function(){var t={};return t[d]=function(){return 7},7!=""[e](t)}),h=f&&!i(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!t});if(!f||!h||"replace"===e&&!u||"split"===e&&!l){var m=/./[d],v=n(d,""[e],function(e,t,n,r,a){return t.exec===s?f&&!a?{done:!0,value:m.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),g=v[0],y=v[1];a(String.prototype,e,g),a(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)}),p&&r(RegExp.prototype[d],"sham",!0)}}},function(e,t,n){"use strict";var r,a,i=n(68),o=RegExp.prototype.exec,s=String.prototype.replace,c=o,u=(r=/a/,a=/b*/g,o.call(r,"a"),o.call(a,"a"),0!==r.lastIndex||0!==a.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(c=function(e){var t,n,r,a,c=this;return l&&(n=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),u&&(t=c.lastIndex),r=o.call(c,e),u&&r&&(c.lastIndex=c.global?r.index+r[0].length:t),l&&r&&r.length>1&&s.call(r[0],n,function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(r[a]=void 0)}),r}),e.exports=c},function(e,t,n){"use strict";var r=n(78).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r=n(24),a=n(80);e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw TypeError("RegExp#exec called on incompatible receiver");return a.call(e,t)}},function(e,t,n){var r=n(33);e.exports=r("navigator","userAgent")||""},function(e,t){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,t){var n=Math.expm1,r=Math.exp;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:r(e)-1}:n},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(59),o=n(16),s=n(45),c=n(63),u=n(38),l=n(3),p=n(1),d=n(75),f=n(26),h=n(111);e.exports=function(e,t,n,m,v){var g=a[e],y=g&&g.prototype,x=g,b=m?"set":"add",w={},_=function(e){var t=y[e];o(y,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!l(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!l(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!l(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this})};if(i(e,"function"!=typeof g||!(v||y.forEach&&!p(function(){(new g).entries().next()}))))x=n.getConstructor(t,e,m,b),s.REQUIRED=!0;else if(i(e,!0)){var k=new x,E=k[b](v?{}:-0,1)!=k,S=p(function(){k.has(1)}),R=d(function(e){new g(e)}),T=!v&&p(function(){for(var e=new g,t=5;t--;)e[b](t,t);return!e.has(-0)});R||((x=t(function(t,n){u(t,x,e);var r=h(new g,t,x);return null!=n&&c(n,r[b],r,m),r})).prototype=y,y.constructor=x),(S||T)&&(_("delete"),_("has"),m&&_("get")),(T||E)&&_(b),v&&y.clear&&delete y.clear}return w[e]=x,r({global:!0,forced:x!=g},w),f(x,e),v||n.setStrong(x,e,m),x}},function(e,t,n){"use strict";var r=n(2),a=n(6),i=n(5).NATIVE_ARRAY_BUFFER,o=n(13),s=n(51),c=n(1),u=n(38),l=n(23),p=n(8),d=n(160),f=n(43).f,h=n(9).f,m=n(102),v=n(26),g=n(19),y=g.get,x=g.set,b=r.ArrayBuffer,w=b,_=r.DataView,k=r.Math,E=r.RangeError,S=k.abs,R=k.pow,T=k.floor,A=k.log,D=k.LN2,O=function(e,t,n){var r,a,i,o=new Array(n),s=8*n-t-1,c=(1<<s)-1,u=c>>1,l=23===t?R(2,-24)-R(2,-77):0,p=e<0||0===e&&1/e<0?1:0,d=0;for((e=S(e))!=e||e===1/0?(a=e!=e?1:0,r=c):(r=T(A(e)/D),e*(i=R(2,-r))<1&&(r--,i*=2),(e+=r+u>=1?l/i:l*R(2,1-u))*i>=2&&(r++,i/=2),r+u>=c?(a=0,r=c):r+u>=1?(a=(e*i-1)*R(2,t),r+=u):(a=e*R(2,u-1)*R(2,t),r=0));t>=8;o[d++]=255&a,a/=256,t-=8);for(r=r<<t|a,s+=t;s>0;o[d++]=255&r,r/=256,s-=8);return o[--d]|=128*p,o},I=function(e,t){var n,r=e.length,a=8*r-t-1,i=(1<<a)-1,o=i>>1,s=a-7,c=r-1,u=e[c--],l=127&u;for(u>>=7;s>0;l=256*l+e[c],c--,s-=8);for(n=l&(1<<-s)-1,l>>=-s,s+=t;s>0;n=256*n+e[c],c--,s-=8);if(0===l)l=1-o;else{if(l===i)return n?NaN:u?-1/0:1/0;n+=R(2,t),l-=o}return(u?-1:1)*n*R(2,l-t)},j=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},C=function(e){return[255&e]},N=function(e){return[255&e,e>>8&255]},L=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},q=function(e){return O(e,23,4)},U=function(e){return O(e,52,8)},P=function(e,t){h(e.prototype,t,{get:function(){return y(this)[t]}})},M=function(e,t,n,r){var a=d(+n),i=y(e);if(a+t>i.byteLength)throw E("Wrong index");var o=y(i.buffer).bytes,s=a+i.byteOffset,c=o.slice(s,s+t);return r?c:c.reverse()},F=function(e,t,n,r,a,i){var o=d(+n),s=y(e);if(o+t>s.byteLength)throw E("Wrong index");for(var c=y(s.buffer).bytes,u=o+s.byteOffset,l=r(+a),p=0;p<t;p++)c[u+p]=l[i?p:t-p-1]};if(i){if(!c(function(){b(1)})||!c(function(){new b(-1)})||c(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var z,B=(w=function(e){return u(this,w),new b(d(e))}).prototype=b.prototype,V=f(b),G=0;V.length>G;)(z=V[G++])in w||o(w,z,b[z]);B.constructor=w}var Y=new _(new w(2)),H=_.prototype.setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||s(_.prototype,{setInt8:function(e,t){H.call(this,e,t<<24>>24)},setUint8:function(e,t){H.call(this,e,t<<24>>24)}},{unsafe:!0})}else w=function(e){u(this,w,"ArrayBuffer");var t=d(e);x(this,{bytes:m.call(new Array(t),0),byteLength:t}),a||(this.byteLength=t)},_=function(e,t,n){u(this,_,"DataView"),u(e,w,"DataView");var r=y(e).byteLength,i=l(t);if(i<0||i>r)throw E("Wrong offset");if(i+(n=void 0===n?r-i:p(n))>r)throw E("Wrong length");x(this,{buffer:e,byteLength:n,byteOffset:i}),a||(this.buffer=e,this.byteLength=n,this.byteOffset=i)},a&&(P(w,"byteLength"),P(_,"buffer"),P(_,"byteLength"),P(_,"byteOffset")),s(_.prototype,{getInt8:function(e){return M(this,1,e)[0]<<24>>24},getUint8:function(e){return M(this,1,e)[0]},getInt16:function(e){var t=M(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=M(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return j(M(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return j(M(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return I(M(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return I(M(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){F(this,1,e,C,t)},setUint8:function(e,t){F(this,1,e,C,t)},setInt16:function(e,t){F(this,2,e,N,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){F(this,2,e,N,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){F(this,4,e,L,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){F(this,4,e,L,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){F(this,4,e,q,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){F(this,8,e,U,t,arguments.length>2?arguments[2]:void 0)}});v(w,"ArrayBuffer"),v(_,"DataView"),t.ArrayBuffer=w,t.DataView=_},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=n(41),i=(r=n(40))&&r.__esModule?r:{default:r};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(e,n,r,i){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(o=c(this,u(t).call(this,e,n,r)))._graph=i&&i._graph?i:new a.Graph(i),o}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,i.default),n=t,(r=[{key:"getGraph",value:function(){return this._graph}},{key:"setGraph",value:function(e){return this._graph=e||new a.Graph,this}},{key:"commit",value:function(){return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify(this._graph.exportRDFJSON())),"commitGraph")}},{key:"getSource",value:function(){return this._graph.exportRDFJSON()}},{key:"_update",value:function(e){this._graph=new a.Graph(e)}}])&&s(n.prototype,r),o&&s(n,o),t}();t.default=p},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=f(n(168)),a=f(n(169)),i=f(n(39)),o=f(n(117)),s=f(n(40)),c=f(n(170)),u=f(n(191)),l=f(n(52)),p=f(n(123)),d=n(91);function f(e){return e&&e.__esModule?e:{default:e}}function h(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function m(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){h(i,r,a,o,s,"next",e)}function s(e){h(i,r,a,o,s,"throw",e)}o(void 0)})}}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=n(465),x=function(){function e(t,n){var i;(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),(0,d.isBrowser)()&&null==t?this._baseURI="".concat(window.location.origin,"/store/"):(this._baseURI=t,"/"!==this._baseURI[this._baseURI.length-1]&&(this._baseURI="".concat(this._baseURI,"/"))),this._cache=new a.default,this._auth=new r.default(this),n)&&(i=this._auth).login.apply(i,v(n));this._contexts={},this._rest=new c.default}var t,f,h,x,b;return t=e,f=[{key:"addAsyncListener",value:function(e){this.asyncListeners?this.asyncListeners.push(e):this.asyncListeners=[e]}},{key:"removeAsyncListener",value:function(e){this.asyncListeners&&this.asyncListeners.splice(this.asyncListeners.indexOf(e),1)}},{key:"handleAsync",value:function(e,t){if(this.asyncListeners)for(var n=0;n<this.asyncListeners.length;n++)this.asyncListeners[n](e,t);return e}},{key:"getAuth",value:function(){return this._auth}},{key:"getUserInfo",value:function(){return this._auth.getUserInfo()}},{key:"getUserEntry",value:function(){return this._auth.getUserEntry()}},{key:"auth",value:function(e){return null==e?this._auth.logout():this._auth.login(e.user,e.password,e.maxAge)}},{key:"logout",value:function(){return this._auth.logout()}},{key:"getEntry",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!!t&&!0===t.forceLoad,r=this._cache.get(e),a="getEntry";if(null!=t&&(t.asyncContext&&(a=t.asyncContext),!0===t.direct))return r;var o=function(e){return null!=t&&t.loadResource&&null==e.getResource()?e.getResource().then(function(){return e}):e};if(r&&!n){if((r.isList()||r.isGroup())&&null!=t){var s=r.getResource(!0);s.setLimit(t.limit),s.setSort(t.sort)}return this.handleAsync(r.refresh().then(o),a)}var c=this,u=i.default.getEntryLoadURI(e,t);return this.handleAsync(this._rest.get(u).then(function(t){var n=i.default.updateOrCreate(e,t,c);return o(n)},function(e){throw new Error("Failed fetching entry. ".concat(e))}),a)}},{key:"getListEntries",value:function(e,t,n,r){var a=this;return new Promise(function(o,s){var c={};null!=t&&(c.sort=t),n%1==0&&(c.limit=n),r%1==0&&(c.offset=n%1==0?n*r:i.default.getDefaultLimit()*r),a.getEntryStore().getEntry(e,c).then(function(e){e.getResource(!0).getEntries(r).then(o,s)},s)})}},{key:"getContextById",value:function(e){return i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/").concat(e))}},{key:"getContext",value:function(e){return i.default.getContext(this,e)}},{key:"getContextList",value:function(){return this.newSolrQuery().graphType(l.default.GT_CONTEXT).list()}},{key:"getPrincipalList",value:function(){return this.newSolrQuery().graphType([l.default.GT_USER,l.default.GT_GROUP]).list()}},{key:"createEntry",value:(b=m(regeneratorRuntime.mark(function e(t){var n,r,a,o,s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.default.getEntryCreateURI(t,t.getParentList()),r=i.default.getEntryCreatePostData(t),e.prev=2,e.next=5,this.handleAsync(this._rest.create(n,r),"createEntry");case 5:a=e.sent,e.next=12;break;case 8:return e.prev=8,e.t0=e.catch(2),console.error(e.t0),e.abrupt("return");case 12:return null!=(o=t.getParentList())&&null!=(s=o.getResource(!0))&&s.needRefresh&&o.getResource(!0).needRefresh(),e.abrupt("return",this.getEntry(a));case 15:case"end":return e.stop()}},e,this,[[2,8]])})),function(e){return b.apply(this,arguments)})},{key:"newContext",value:function(e,t){var n=i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/_contexts")),r=new o.default(n,t).setGraphType(l.default.GT_CONTEXT);if(null!=e){var a=r.getEntryInfo(),c=new s.default(a.getEntryURI(),a.getResourceURI(),this);c._update({name:e}),r._resource=c}return r}},{key:"createGroupAndContext",value:(x=m(regeneratorRuntime.mark(function e(t){var n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(this._baseURI,"_principals/groups"),null!=t&&(n+="?name=".concat(encodeURIComponent(t))),e.next=4,this.handleAsync(this._rest.create(n),"createGroupAndContext");case 4:return r=e.sent,e.abrupt("return",this.getEntry(r));case 6:case"end":return e.stop()}},e,this)})),function(e){return x.apply(this,arguments)})},{key:"newUser",value:function(e,t,n,r){var a=i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/_principals")),s=new o.default(a,r).setGraphType(l.default.GT_USER),c=s.getEntryInfo(),u={};return null!=e&&(u.name=e),null!=t&&(u.password=t),null!=n&&(u.homecontext=n),s._resource=new p.default(c.getEntryURI(),c.getResourceURI(),this,u),s}},{key:"newGroup",value:function(e,t){var n=i.default.getContext(this,"".concat(this._baseURI,"_contexts/entry/_principals")),r=new o.default(n,t).setGraphType(l.default.GT_GROUP);if(null!=e){var a=r.getEntryInfo(),c=new s.default(a.getEntryURI(),a.getResourceURI(),this);c._update({name:e}),r._resource=c}return r}},{key:"moveEntry",value:function(e,t,n){var r=i.default.getMoveURI(e,t,n,this._baseURI);return this.handleAsync(this.getREST().post(r,""),"moveEntry")}},{key:"loadViaProxy",value:function(e,t){var n=i.default.getProxyURI(this._baseURI,e);return this.handleAsync(this.getREST().get(n,t,!0),"loadViaProxy")}},{key:"echoFile",value:function(e){if(!(e instanceof Node))throw new Error("Argument needs to be an input element.");if(null==e.name||""===e.name)throw new Error("Failure, cannot upload resource from input element unless a name attribute is provided.");return this.handleAsync(this.getREST().putFile("".concat(this.getBaseURI(),"echo"),e,"text").then(function(e){var t=e.text;if(t){var n=t.indexOf("\n"),r=parseInt(t.substr(0,n).split(":")[1],10);if(200!==r){var a=new Error("HTTP status code: ".concat(r));throw a.status=r,a}var i=t.substr(n+1).replace("</textarea>","");return y.decode(i)}return t}),"echoFile")}},{key:"newSolrQuery",value:function(){return new u.default(this)}},{key:"createSearchList",value:function(e){return i.default.createSearchList(this,e)}},{key:"getMetadataURI",value:function(e,t){return i.default.getMetadataURI(this,e,t)}},{key:"getEntryURI",value:function(e,t){return i.default.getEntryURI(this,e,t)}},{key:"getEntryURIFromURI",value:function(e){return i.default.getEntryURIFromURI(this,e)}},{key:"getResourceURI",value:function(e,t){return i.default.getResourceURI(this,e,t)}},{key:"getBaseURI",value:function(){return this._baseURI}},{key:"getEntryId",value:function(e){return i.default.getEntryId(e,this.getBaseURI())}},{key:"getContextId",value:function(e){return i.default.getContextId(e,this.getBaseURI())}},{key:"getStatus",value:function(){var e="".concat(this._baseURI,"management/status?extended");return this.handleAsync(this.getREST().get(e))}},{key:"getCache",value:function(){return this._cache}},{key:"getREST",value:function(){return this._rest}},{key:"getCachedContextsIdx",value:function(){return this._contexts}}],h=[{key:"info",value:function(){return{version:n(466).version}}}],f&&g(t.prototype,f),h&&g(t,h),e}();t.default=x},function(e,t){e.exports=require("path")},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isIE=t.isNode=t.isBrowser=t.utils=void 0;var r={};t.utils=r,r.getRelatedToEntryURIs=function(e){var t=e.getEntryStore(),n=e.getEntryStore().getBaseURI(),r=[];return e.getMetadata().find().forEach(function(e){if("uri"===e.getType()){var a=e.getValue();if(0===a.indexOf(n)){var i=t.getEntryURI(t.getContextId(a),t.getEntryId(a));r.push(i)}}}),r},r.getRelatedToEntries=function(e){var t=e.getEntryStore();return Promise.all(r.getRelatedToEntryURIs(e).map(function(e){return t.getEntry(e)}))},r.remove=function(e){var t=e.getEntryStore(),n=t.getCache(),a=e.getReferrersGraph().find(),i=a.map(function(e){var n=e.getSubject(),r=t.getEntryURI(t.getContextId(n),t.getEntryId(n));return t.getEntry(r)});return e.del().then(function(){return Promise.all(i).then(function(t){var i=a.map(function(e,n){return t[n].getMetadata().remove(e),t[n].commitMetadata()});return r.getRelatedToEntryURIs(e).forEach(function(e){var t=n.get(e);null!=t&&(t.setRefreshNeeded(),i.push(t.refresh()))}),Promise.all(i)})})},r.addRelation=function(e,t,n){return e.getMetadata().add(e.getResourceURI(),t,n.getResourceURI()),e.commitMetadata().then(function(){return n.setRefreshNeeded(),n.refresh()})},r.removeRelation=function(e,t,n){return e.getMetadata().remove(e.getResourceURI(),t,{type:"uri",value:n.getResourceURI()}),e.commitMetadata().then(function(){return n.setRefreshNeeded(),n.refresh()})};var a=function(){return"undefined"!=typeof window&&void 0!==window.document};t.isBrowser=a,r.isBrowser=a;var i=function(){return void 0!==e.exports};t.isNode=i,r.isNode=i;var o=function(){return window&&null!==window.navigator.userAgent.match(/MSIE/)};t.isIE=o,r.isIE=o;var s=r;t.default=s},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(40)),a=i(n(39));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function c(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){s(i,r,a,o,c,"next",e)}function c(e){s(i,r,a,o,c,"throw",e)}o(void 0)})}}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(e,n,r){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=l(this,p(t).call(this,e,n,r)))._cache=r.getCache(),a._sortedChildren=[],a}var n,i,o,s,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,r.default),n=t,(i=[{key:"setLimit",value:function(e){return this._limit=e,this}},{key:"getLimit",value:function(){return this._limit||a.default.getDefaultLimit()}},{key:"setSort",value:function(e){return this._clearSortedEntries(),this._sortParams=e,this}},{key:"getEntries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=this._getEntries(e);return null!=t?Promise.resolve(t):this._forceLoadEntries(e)}},{key:"forEach",value:function(e){var t,n,r=this,a=0,i=0,o=this.getLimit();return this.getEntries(0).then(function s(c){var u=c.length;return t=function(e){return!1===e?Promise.resolve(!1):n()},(n=function(){if(0===c.length)return Promise.resolve(!0);var n=e(c.pop(),i);return i+=1,void 0!==n&&"function"==typeof n.then?n.then(t):t(n)})().then(function(e){return!1!==e&&u===o?(a+=1,r.getEntries(a).then(s)):Promise.resolve(i)})})}},{key:"addEntry",value:(f=c(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllEntryIds();case 2:return(n=e.sent).push(t.getId()),e.next=6,this.setAllEntryIds(n,"addToList");case 6:return t.setRefreshNeeded(),e.abrupt("return",this.getEntry());case 8:case"end":return e.stop()}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"removeEntry",value:(s=c(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllEntryIds();case 2:return(n=e.sent).splice(n.indexOf(t.getId()),1),e.next=6,this.setAllEntryIds(n,"removeFromList");case 6:t.setRefreshNeeded();case 7:case"end":return e.stop()}},e,this)})),function(e){return s.apply(this,arguments)})},{key:"needRefresh",value:function(){delete this._unsortedChildren,this._sortedChildren=[],delete this._size}},{key:"getAllEntryIds",value:function(){var e=this;return null!=this._unsortedChildren?Promise.resolve(this._unsortedChildren):this.getEntries().then(function(){return e._unsortedChildren})}},{key:"setAllEntryIds",value:function(e,t){var n=this;return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify(e)).then(function(){return n.needRefresh(),n._entryStore.getEntry(n.getEntryURI()).then(function(e){return e.setRefreshNeeded(),e})}),t||"setList")}},{key:"getSize",value:function(){return"number"==typeof this._size?this._size:-1}},{key:"_clearSortedEntries",value:function(){this._sortedChildren=[]}},{key:"_getEntries",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(null==this._size)return null;for(var n,r=this.getLimit(),a=e*r,i=!1,o=[],s=a;s<a+r&&s<this._size;s++){if(!(n=this._sortedChildren[s])){i=!0;break}var c=this._entryStore.getCache().get(n);if(!1!==t&&(null==c||c.needRefresh())){i=!0;break}o.push(c)}return i?null:o}},{key:"_forceLoadEntries",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=this.getLimit(),r=t*n;return this._entryStore.getEntry(this._entryURI,{forceLoad:!0,offset:r,limit:n,sort:this._sort,asyncContext:"loadListEntries"}).then(function(){return e._getEntries(t,!1)})}},{key:"_update",value:function(e,t){for(var n=e.offset||0,r=0;r<t.length;r++)this._sortedChildren[n+r]=t[r].getURI();this._size=e.size||t.length,this._unsortedChildren=e.allUnsorted||t.map(function(e){return e.getId()})}}])&&u(n.prototype,i),o&&u(n,o),t}();t.default=f},function(e,t,n){function r(e){this.options=e||{locator:{}}}function a(){this.cdata=!1}function i(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function o(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function s(e,t,n){return"string"==typeof e?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}function c(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}r.prototype.parseFromString=function(e,t){var n=this.options,r=new u,i=n.domBuilder||new a,s=n.errorHandler,c=n.locator,l=n.xmlns||{},p={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return c&&i.setDocumentLocator(c),r.errorHandler=function(e,t,n){if(!e){if(t instanceof a)return t;e=t}var r={},i=e instanceof Function;function s(t){var a=e[t];!a&&i&&(a=2==e.length?function(n){e(t,n)}:e),r[t]=a&&function(e){a("[xmldom "+t+"]\t"+e+o(n))}||function(){}}return n=n||{},s("warning"),s("error"),s("fatalError"),r}(s,i,c),r.domBuilder=n.domBuilder||i,/\/x?html?$/.test(t)&&(p.nbsp=" ",p.copy="©",l[""]="http://www.w3.org/1999/xhtml"),l.xml=l.xml||"http://www.w3.org/XML/1998/namespace",e?r.parse(e,l,p):r.errorHandler.error("invalid doc source"),i.doc},a.prototype={startDocument:function(){this.doc=(new l).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var a=this.doc,o=a.createElementNS(e,n||t),s=r.length;c(this,o),this.currentElement=o,this.locator&&i(this.locator,o);for(var u=0;u<s;u++){e=r.getURI(u);var l=r.getValue(u),p=(n=r.getQName(u),a.createAttributeNS(e,n));this.locator&&i(r.getLocator(u),p),p.value=p.nodeValue=l,o.setAttributeNode(p)}},endElement:function(e,t,n){var r=this.currentElement;r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&i(this.locator,n),c(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=s.apply(this,arguments)){if(this.cdata)var r=this.doc.createCDATASection(e);else r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&i(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=s.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&i(this.locator,r),c(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var a=r.createDocumentType(e,t,n);this.locator&&i(this.locator,a),c(this,a)}},warning:function(e){console.warn("[xmldom warning]\t"+e,o(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,o(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,o(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(e){a.prototype[e]=function(){return null}});var u=n(416).XMLReader,l=t.DOMImplementation=n(166).DOMImplementation;t.XMLSerializer=n(166).XMLSerializer,t.DOMParser=r},function(e,t,n){var r=n(2),a=n(3),i=r.document,o=a(i)&&a(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t,n){var r=n(2),a=n(13);e.exports=function(e,t){try{a(r,e,t)}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(33),a=n(43),i=n(98),o=n(4);e.exports=r("Reflect","ownKeys")||function(e){var t=a.f(o(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(6),a=n(9),i=n(4),o=n(60);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=o(t),s=r.length,c=0;s>c;)a.f(e,n=r[c++],t[n]);return e}},function(e,t,n){var r=n(7),a=n(64),i=r("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||o[i]===e)}},function(e,t,n){var r=n(1);e.exports=!r(function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})},function(e,t,n){"use strict";var r=n(10),a=n(34),i=n(8);e.exports=function(e){for(var t=r(this),n=i(t.length),o=arguments.length,s=a(o>1?arguments[1]:void 0,n),c=o>2?arguments[2]:void 0,u=void 0===c?n:a(c,n);u>s;)t[s++]=e;return t}},function(e,t,n){"use strict";var r=n(0),a=n(104),i=n(27),o=n(48),s=n(26),c=n(13),u=n(16),l=n(7),p=n(32),d=n(64),f=n(147),h=f.IteratorPrototype,m=f.BUGGY_SAFARI_ITERATORS,v=l("iterator"),g=function(){return this};e.exports=function(e,t,n,l,f,y,x){a(n,t,l);var b,w,_,k=function(e){if(e===f&&A)return A;if(!m&&e in R)return R[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},E=t+" Iterator",S=!1,R=e.prototype,T=R[v]||R["@@iterator"]||f&&R[f],A=!m&&T||k(f),D="Array"==t&&R.entries||T;if(D&&(b=i(D.call(new e)),h!==Object.prototype&&b.next&&(p||i(b)===h||(o?o(b,h):"function"!=typeof b[v]&&c(b,v,g)),s(b,E,!0,!0),p&&(d[E]=g))),"values"==f&&T&&"values"!==T.name&&(S=!0,A=function(){return T.call(this)}),p&&!x||R[v]===A||c(R,v,A),d[t]=A,f)if(w={values:k("values"),keys:y?A:k("keys"),entries:k("entries")},x)for(_ in w)!m&&!S&&_ in R||u(R,_,w[_]);else r({target:t,proto:!0,forced:m||S},w);return w}},function(e,t,n){"use strict";var r=n(147).IteratorPrototype,a=n(35),i=n(42),o=n(26),s=n(64),c=function(){return this};e.exports=function(e,t,n){var u=t+" Iterator";return e.prototype=a(r,{next:i(1,n)}),o(e,u,!1,!0),s[u]=c,e}},function(e,t,n){var r=n(106);e.exports=function(e){if(r(e))throw TypeError("The method doesn't accept regular expressions");return e}},function(e,t,n){var r=n(3),a=n(24),i=n(7)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==a(e))}},function(e,t,n){var r=n(7)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,"/./"[e](t)}catch(e){}}return!1}},function(e,t,n){var r=n(8),a=n(109),i=n(14),o=Math.ceil,s=function(e){return function(t,n,s){var c,u,l=String(i(t)),p=l.length,d=void 0===s?" ":String(s),f=r(n);return f<=p||""==d?l:(c=f-p,(u=a.call(d,o(c/d.length))).length>c&&(u=u.slice(0,c)),e?l+u:u+l)}};e.exports={start:s(!1),end:s(!0)}},function(e,t,n){"use strict";var r=n(23),a=n(14);e.exports="".repeat||function(e){var t=String(a(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Wrong number of repetitions");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t,n){var r=n(1),a=n(84);e.exports=function(e){return r(function(){return!!a[e]()||"​᠎"!="​᠎"[e]()||a[e].name!==e})}},function(e,t,n){var r=n(3),a=n(48);e.exports=function(e,t,n){var i,o;return a&&"function"==typeof(i=t.constructor)&&i!==n&&r(o=i.prototype)&&o!==n.prototype&&a(e,o),e}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t,n){var r,a,i,o=n(2),s=n(1),c=n(24),u=n(36),l=n(133),p=n(94),d=o.location,f=o.setImmediate,h=o.clearImmediate,m=o.process,v=o.MessageChannel,g=o.Dispatch,y=0,x={},b=function(e){if(x.hasOwnProperty(e)){var t=x[e];delete x[e],t()}},w=function(e){return function(){b(e)}},_=function(e){b(e.data)},k=function(e){o.postMessage(e+"",d.protocol+"//"+d.host)};f&&h||(f=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return x[++y]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},r(y),y},h=function(e){delete x[e]},"process"==c(m)?r=function(e){m.nextTick(w(e))}:g&&g.now?r=function(e){g.now(w(e))}:v?(i=(a=new v).port2,a.port1.onmessage=_,r=u(i.postMessage,i,1)):!o.addEventListener||"function"!=typeof postMessage||o.importScripts||s(k)?r="onreadystatechange"in p("script")?function(e){l.appendChild(p("script")).onreadystatechange=function(){l.removeChild(this),b(e)}}:function(e){setTimeout(w(e),0)}:(r=k,o.addEventListener("message",_,!1))),e.exports={set:f,clear:h}},function(e,t,n){var r=n(2),a=n(1),i=n(75),o=n(5).NATIVE_ARRAY_BUFFER_VIEWS,s=r.ArrayBuffer,c=r.Int8Array;e.exports=!o||!a(function(){c(1)})||!a(function(){new c(-1)})||!i(function(e){new c,new c(null),new c(1.5),new c(e)},!0)||a(function(){return 1!==new c(new s(2),1,void 0).length})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(88)),a=u(n(116)),i=u(n(117)),o=u(n(40)),s=u(n(125)),c=u(n(52));function u(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),f(this,h(t).apply(this,arguments))}var n,u,l,v,g;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,o.default),n=t,(u=[{key:"listEntries",value:function(e,t,n){return this.getEntryStore().getListEntries("".concat(this._resourceURI,"/entry/_all"),e,t,n)}},{key:"getEntryById",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.getEntryStore().getEntry(this.getEntryURIbyId(e),t)}},{key:"getEntryURIbyId",value:function(e){return this.getEntryStore().getEntryURI(this.getId(),e)}},{key:"newEntry",value:function(e){return new i.default(this,e)}},{key:"newNamedEntry",value:function(e){return new i.default(this,e).setResourceType(c.default.RT_NAMEDRESOURCE)}},{key:"newLink",value:function(e,t){return new i.default(this,t).setResourceURI(e).setEntryType(c.default.ET_LINK)}},{key:"newLinkRef",value:function(e,t,n){return new i.default(this,n).setResourceURI(e).setExternalMetadataURI(t).setEntryType(c.default.ET_LINKREF)}},{key:"newRef",value:function(e,t,n){return new i.default(this,n).setResourceURI(e).setExternalMetadataURI(t).setEntryType(c.default.ET_REF)}},{key:"newList",value:function(e){return new i.default(this,e).setGraphType(c.default.GT_LIST)}},{key:"newGraph",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=new i.default(this,t).setGraphType(c.default.GT_GRAPH),a=n.getEntryInfo();return n._resource=new r.default(a.getEntryURI(),a.getResourceURI(),this.getEntryStore(),e),n}},{key:"newString",value:function(e,t){var n=new i.default(this,t).setGraphType(c.default.GT_STRING),r=n.getEntryInfo();return n._resource=new s.default(r.getEntryURI(),r.getResourceURI(),this.getEntryStore(),e),n}},{key:"newPipeline",value:function(e){var t=new i.default(this,e).setGraphType(c.default.GT_PIPELINE),n=t.getEntryInfo();return t._resource=new a.default(n.getEntryURI(),n.getResourceURI(),this.getEntryStore(),{}),t}},{key:"getName",value:function(){return this._name}},{key:"setName",value:function(e){var t=this,n=this._name;return this._name=e,this.getEntryStore().handleAsync(this.getEntryStore().getREST().put("".concat(this.getEntryURI(),"/name"),JSON.stringify({name:e})).then(function(e){var n=t.getEntry(!0);return n&&(n.getEntryInfo()._name=e),e},function(e){throw t._name=n,e}),"setContextName")}},{key:"getHomeContextOf",value:(v=regeneratorRuntime.mark(function e(){var t,n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getEntry();case 2:if(t=e.sent,n=t.getEntryStore(),!((r=t.getReferrers("store:homeContext")).length>0)){e.next=7;break}return e.abrupt("return",n.getEntry(n.getEntryURIFromURI(r[0])));case 7:throw new Error("No user or group that has this context as home context");case 8:case"end":return e.stop()}},e,this)}),g=function(){var e=this,t=arguments;return new Promise(function(n,r){var a=v.apply(e,t);function i(e){p(a,n,r,i,o,"next",e)}function o(e){p(a,n,r,i,o,"throw",e)}i(void 0)})},function(){return g.apply(this,arguments)})},{key:"_update",value:function(e){this._name=e.alias||e.name}}])&&d(n.prototype,u),l&&d(n,l),t}();t.default=v},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(88)),a=i(n(69));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,u(t).apply(this,arguments))}var n,i,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,r.default),n=t,(i=[{key:"getDestination",value:function(){return this._graph.findFirstValue(null,a.default.pipeline.transformDestination)}},{key:"setDestination",value:function(e){this._graph.findAndRemove(null,a.default.pipeline.transformDestination);var t="object"===o(e)&&e.getURI?e.getURI():e;this._graph.add(this._resourceURI,a.default.pipeline.transformDestination,t)}},{key:"getDetectDestination",value:function(){var e=this._graph.findFirstValue(null,a.default.pipeline.transformDetectDestination);return void 0!==e&&0===e.toLowerCase().indexOf("true")}},{key:"setDetectDestination",value:function(e){this._graph.findAndRemove(null,a.default.pipeline.transformDetectDestination),!0===e&&this._graph.add(this._resourceURI,a.default.pipeline.transformDetectDestination,{type:"literal",value:"true",datatype:a.default.xsd.boolean})}},{key:"getTransforms",value:function(){var e=this._graph.find(null,a.default.pipeline.transform).map(function(e){return e.getValue()}),t=this;return e.sort(function(e,n){return t.getPriority(e)-t.getPriority(n)}),e}},{key:"getTransformForType",value:function(e){var t,n=this;return this.getTransforms().forEach(function(r){n.getTransformType(r)===e&&(t=r)},this),t}},{key:"addTransform",value:function(e,t){var n=this.getTransforms(),r=n.length>0?this.getPriority(n[n.length-1]):0,i=this._graph.add(this._resourceURI,a.default.pipeline.transform).getValue();return this.setTransformType(i,e),this.setPriority(i,r+1),this.setTransformArguments(i,t),i}},{key:"removeTransform",value:function(e){this.setTransformArguments(e,{}),this._graph.findAndRemove(e),this._graph.findAndRemove(null,null,{type:"bnode",value:e})}},{key:"setOrderOfTransforms",value:function(e){for(var t=0;t<e.length;t++)this._graph.findAndRemove(e[t],a.default.pipeline.transformPriority),this._graph.add(e[t],a.default.pipeline.transformPriority,{type:"literal",value:"".concat(t),datatype:a.default.xsd.integer})}},{key:"getPriority",value:function(e){var t=this._graph.findFirstValue(e,a.default.pipeline.transformPriority);return"string"!=typeof t||(t=parseFloat(t),isNaN(t))?0:t}},{key:"setPriority",value:function(e,t){this._graph.findAndRemove(e,a.default.pipeline.transformPriority),this._graph.add(e,a.default.pipeline.transformPriority,{type:"literal",value:"".concat(t),datatype:a.default.xsd.integer})}},{key:"getTransformType",value:function(e){return this._graph.findFirstValue(e,a.default.pipeline.transformType)}},{key:"setTransformType",value:function(e,t){this._graph.findAndRemove(e,a.default.pipeline.transformType),this._graph.addL(e,a.default.pipeline.transformType,t)}},{key:"getTransformArguments",value:function(e){var t,n=this;return this._graph.find(e,a.default.pipeline.transformArgument).forEach(function(e){var r=n._graph.findFirstValue(e.getValue(),a.default.pipeline.transformArgumentKey),i=n._graph.findFirstValue(e.getValue(),a.default.pipeline.transformArgumentValue);(t=t||{})[r]=i},this),t}},{key:"getTransformArgumentsKeys",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=[];if(t){var r=this._graph.find(t,a.default.pipeline.transformArgument);r.forEach(function(t){var r=e._graph.find(t.getValue(),a.default.pipeline.transformArgumentKey);n.push(r.map(function(e){return e.getValue()}))},this)}return n}},{key:"setTransformArguments",value:function(e,t){var n=this;this._graph.find(e,a.default.pipeline.transformArgument).forEach(function(e){n._graph.findAndRemove(e.getValue(),a.default.pipeline.transformArgumentKey),n._graph.findAndRemove(e.getValue(),a.default.pipeline.transformArgumentValue),n._graph.remove(e)},this),Object.keys(t).forEach(function(r){var i=n._graph.add(e,a.default.pipeline.transformArgument);n._graph.addL(i.getValue(),a.default.pipeline.transformArgumentKey,r),n._graph.addL(i.getValue(),a.default.pipeline.transformArgumentValue,t[r])})}},{key:"getTransformProperty",value:function(e,t){var n=this.getTransformForType(e);if(n){var r=this.getTransformArguments(n);if(r&&t in r)return r[t]}}},{key:"setTransformProperty",value:function(e,t,n){var r=this.getTransformArguments(e);if(null!=r)r[t]=n,this.setTransformArguments(e,r);else{var a=this.getTransformForType(e);null!=(r=this.getTransformArguments(a))&&(r[t]=n,this.setTransformArguments(a,r))}}},{key:"execute",value:function(e,t){var n,r=this.getEntryStore(),a=t||{};return a.pipeline=this.getEntryURI(),null==e?n="".concat(r.getBaseURI()+r.getContextId(this.getEntryURI()),"/execute"):(a.source=e.getURI(),n="".concat(e.getContext().getResourceURI(),"/execute")),r.handleAsync(r.getREST().post(n,JSON.stringify(a)),"execute").then(function(e){return e.body.result},function(e){throw e})}}])&&s(n.prototype,i),p&&s(n,p),t}();t.default=p,p.prototype.transformTypes={TABULAR:"tabular",ROWSTORE:"rowstore",EMPTY:"empty",FETCH:"fetch",VALIDATE:"validate",MERGE:"merge"}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(118)),a=o(n(124)),i=o(n(69));function o(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d="_newId",f=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:d;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=e.getResourceURI(),o=new a.default("".concat(i,"/entry/").concat(r),null,e.getEntryStore());"_contexts"===e.getId()?o._resourceURI=e.getEntryStore().getBaseURI()+r:o._resourceURI="".concat(i,"/resource/").concat(r);var c=o.setResourceURI.bind(o);return o.setResourceURI=function(e){return n._resourceURI=e,c(e),l(n)},o.getResourceURI=function(){return n._resourceURI||o._resourceURI},n=function(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?l(e):t}(this,u(t).call(this,e,o)),r!==d&&(n.specificId=r),n}var n,o,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,r.default),n=t,(o=[{key:"getResource",value:function(){return this._resource}},{key:"setACL",value:function(){return a.default.prototype.setACL.apply(this._entryInfo,arguments),this}},{key:"setResourceURI",value:function(e){return this._entryInfo.setResourceURI(e),this}},{key:"setExternalMetadataURI",value:function(){return a.default.prototype.setExternalMetadataURI.apply(this._entryInfo,arguments),this}},{key:"setEntryType",value:function(e){var t=i.default.invEntryType[e];return t&&this._entryInfo.getGraph().create(this._entryInfo.getEntryURI(),i.default.rdf.type,{type:"uri",value:t}),this}},{key:"setGraphType",value:function(e){this._gt=e;var t=i.default.invGraphType[e];return t&&this._entryInfo.getGraph().create(this._entryInfo.getResourceURI(),i.default.rdf.type,{type:"uri",value:t}),this}},{key:"setResourceType",value:function(e){var t=i.default.invResourceType[e];return t&&this._entryInfo.getGraph().create(this._entryInfo.getResourceURI(),i.default.rdf.type,{type:"uri",value:t}),this}},{key:"setParentList",value:function(e){return this.parentListEntry=e,this}},{key:"getParentList",value:function(){return this.parentListEntry}},{key:"getSpecificId",value:function(){return this.specificId}},{key:"commitMetadata",value:function(){if(!this.specificId)throw new Error("The entryId must have been specified for allowing metadata to be saved.");var e=this.getEntryStore();return e.handleAsync(e.getREST().put(this.getEntryInfo().getMetadataURI(),JSON.stringify(this.getMetadata().exportRDFJSON())),"commitMetadata")}},{key:"commitCachedExternalMetadata",value:function(){if(!this.specificId)throw new Error("The entryId must have been specified for allowing cached external metadata to be saved.");var e=this.getEntryStore();return e.handleAsync(e.getREST().put(this.getEntryInfo().getCachedExternalMetadataURI(),JSON.stringify(this._cachedExternalMetadata.exportRDFJSON())),"commitCachedExternalMetadata")}},{key:"create",value:function(){return this._context.getEntryStore().createEntry(this)}},{key:"commit",value:function(){return this._context.getEntryStore().createEntry(this)}}])&&c(n.prototype,o),f&&c(n,f),t}();t.default=f},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(41),a=o(n(52)),i=(o(n(89)),o(n(39)));function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._context=t,this._entryInfo=n,this._entryInfo._entry=this}var t,n,o;return t=e,(n=[{key:"getEntryStore",value:function(){return this._context.getEntryStore()}},{key:"getEntryInfo",value:function(){return this._entryInfo}},{key:"getURI",value:function(){return this._entryInfo.getEntryURI()}},{key:"getId",value:function(){return this._entryInfo.getId()}},{key:"getResourceURI",value:function(){return this._entryInfo.getResourceURI()}},{key:"getContext",value:function(){return this._context}},{key:"getMetadata",value:function(){return null==this._metadata&&(this._metadata=new r.Graph),this._metadata}},{key:"setMetadata",value:function(e){return this._metadata=e,this}},{key:"commitMetadata",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=this.getEntryStore();if(this.isReference())e=Promise.reject('Entry "'.concat(this.getURI(),'" is a reference and have no local metadata that can be saved.'));else if(this.canWriteMetadata())if(this.needRefresh())e=Promise.reject('The entry "'.concat(this.getURI(),'" need to be refreshed before its local metadata can be saved.\n')+"This message indicates that the client is written poorly, this case should have been taken into account.");else if(null==this._metadata)e=Promise.reject('The entry "'.concat(this.getURI(),'" should allow local metadata to be saved, but there is no local metadata.\nThis message is a bug in the storejs API.'));else if(n)e=r.getREST().put(this.getEntryInfo().getMetadataURI(),JSON.stringify(this._metadata.exportRDFJSON())).then(function(){return t});else{var a=this.getEntryInfo().getModificationDate();e=r.getREST().put(this.getEntryInfo().getMetadataURI(),JSON.stringify(this._metadata.exportRDFJSON()),a).then(function(){return t.setRefreshNeeded(!0),t.refresh().then(function(){return t},function(){return t.getEntryStore().getCache().message("refreshed",t),t})})}else e=Promise.reject('You do not have sufficient access rights to save metadata on entry "'.concat(this.getURI(),'".'));return r.handleAsync(e,"commitMetadata")}},{key:"add",value:function(e,t){return this.getMetadata().add(this.getResourceURI(),e,t),this}},{key:"addL",value:function(e,t,n){return this.getMetadata().addL(this.getResourceURI(),e,t,n),this}},{key:"addD",value:function(e,t,n){return this.getMetadata().addD(this.getResourceURI(),e,t,n),this}},{key:"getCachedExternalMetadata",value:function(){return null==this._cachedExternalMetadata&&(this._cachedExternalMetadata=new r.Graph),this._cachedExternalMetadata}},{key:"getInferredMetadata",value:function(){return this._inferredMetadata}},{key:"setCachedExternalMetadata",value:function(e){return e&&(this._cachedExternalMetadata=e),this}},{key:"commitCachedExternalMetadata",value:function(){var e=this,t=this.getEntryStore(),n=this.getEntryInfo().getModificationDate(),r=t.getREST().put(this.getEntryInfo().getCachedExternalMetadataURI(),JSON.stringify(this._cachedExternalMetadata.exportRDFJSON()),n).then(function(){return e.setRefreshNeeded(!0),e.refresh().then(function(){return e},function(){return e.getEntryStore().getCache().message("refreshed",e),e})});return t.handleAsync(r,"commitCachedExternalMetadata")}},{key:"getExtractedMetadata",value:function(){return null==this._extractedMetadata&&(this._extractedMetadata=new r.Graph),this._extractedMetadata}},{key:"getResource",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(t)return this._resource;var n,r=this.getEntryStore();if(this._resource)n=Promise.resolve(this._resource);else{var a=this.isString()?"text":null;n=r.getREST().get(this.getResourceURI(),a).then(function(t){return i.default.updateOrCreateResource(e,{resource:t},!0),e._resource})}return r.handleAsync(n,"getResource")}},{key:"getReferrersGraph",value:function(){return this._relation}},{key:"getReferrers",value:function(e){return this._relation.find(null,e,null).map(function(e){return e.getSubject()})}},{key:"getParentLists",value:function(){var e=this;return this.getReferrers("http://entrystore.org/terms/hasListMember").map(function(t){return i.default.getEntryURIFromURI(e.getEntryStore(),t)},this)}},{key:"getParentGroups",value:function(){var e=this;return this.getReferrers("http://entrystore.org/terms/hasGroupMember").map(function(t){return i.default.getEntryURIFromURI(e.getEntryStore(),t)},this)}},{key:"getComments",value:function(){return this.getReferrers("http://ontologi.es/like#regarding")}},{key:"isList",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_LIST}},{key:"isResultList",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_RESULTLIST}},{key:"isContext",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_CONTEXT}},{key:"isSystemContext",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_SYSTEMCONTEXT}},{key:"isUser",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_USER}},{key:"isGroup",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_GROUP}},{key:"isGraph",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_GRAPH}},{key:"isPipeline",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_PIPELINE}},{key:"isPipelineResult",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_PIPELINERESULT}},{key:"isString",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_STRING}},{key:"isNone",value:function(){return this.getEntryInfo().getGraphType()===a.default.GT_NONE}},{key:"isLink",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_LINK}},{key:"isReference",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_REF}},{key:"isLinkReference",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_LINKREF}},{key:"isExternal",value:function(){return this.getEntryInfo().getEntryType()!==a.default.ET_LOCAL}},{key:"isLocal",value:function(){return this.getEntryInfo().getEntryType()===a.default.ET_LOCAL}},{key:"isLinkToEntry",value:function(){var e=this.getEntryStore().getBaseURI();return this.isExternal()&&this.getResourceURI().substr(0,e.length)===e}},{key:"getLinkedEntry",value:function(){if(this.isLinkToEntry()){var e=this.getEntryStore(),t=this.getResourceURI(),n=e.getEntryId(t),r=e.getContextId(t),a=e.getEntryURI(r,n);return e.handleAsync(this.getEntryStore().getEntry(a),"getLinkedEntry")}}},{key:"isInformationResource",value:function(){return this.getEntryInfo().getResourceType()===a.default.RT_INFORMATIONRESOURCE}},{key:"isNamedResource",value:function(){return this.getEntryInfo().getResourceType()===a.default.RT_NAMEDRESOURCE}},{key:"canAdministerEntry",value:function(){return this._rights.administer||!1}},{key:"canReadResource",value:function(){return this._rights.administer||this._rights.readresource||this._rights.writeresource||!1}},{key:"canWriteResource",value:function(){return this._rights.administer||this._rights.writeresource||!1}},{key:"canReadMetadata",value:function(){return this._rights.administer||this._rights.readmetadata||this._rights.writemetadata||!1}},{key:"canWriteMetadata",value:function(){return this._rights.administer||this._rights.writemetadata||!1}},{key:"isPublic",value:function(){var e=this.getEntryStore().getResourceURI("_principals","_guest"),t=this.getEntryInfo().getACL();if(t.contextOverride)return["rwrite","rread","mwrite","mread"].some(function(n){return-1!==t[n].indexOf(e)});var n=this.getContext().getEntry(!0);return null!=n?(t=n.getEntryInfo().getACL(),["rwrite","rread"].some(function(n){return-1!==t[n].indexOf(e)})):void 0}},{key:"isPrivateTo",value:function(e){var t=e.getResourceURI(),n=this.getEntryInfo().getACL(),r=this.getContext().getEntry(!0);if(null!=r)return 1===r.getEntryInfo().getACL().admin.length&&n.admin[0]===t&&(!n.contextOverride||1===n.admin.length&&n.admin[0]===t)}},{key:"del",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=this.getEntryStore(),r=function(){return n.getCache().unCache(e)};return!0===t?n.handleAsync(n.getREST().del("".concat(this.getURI(),"?recursive=true")).then(r),"delEntry"):n.handleAsync(n.getREST().del(this.getURI()).then(r),"delEntry")}},{key:"setRefreshNeeded",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.getEntryStore().getCache().setRefreshNeeded(this,e)}},{key:"needRefresh",value:function(){return this.getEntryStore().getCache().needRefresh(this)}},{key:"refresh",value:function(){var e,t=this,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=this.getEntryStore();if(!0===r||a.getCache().needRefresh(this)){var o=this.getURI();e=a.getREST().get(i.default.getEntryLoadURI(o)).then(function(e){return i.default.update(t,e),a.getCache().cache(t,n),t})}else e=Promise.resolve(this);return a.handleAsync(e,"refresh")}}])&&s(t.prototype,n),o&&s(t,o),e}();t.default=c},function(e,t){e.exports=require("events")},function(e,t){e.exports=require("http")},function(e,t){!function(){"use strict";function e(t,n,r,a){return this instanceof e?(this.domain=t||void 0,this.path=n||"/",this.secure=!!r,this.script=!!a,this):new e(t,n,r,a)}function n(e,t,r){return e instanceof n?e:this instanceof n?(this.name=null,this.value=null,this.expiration_date=1/0,this.path=String(r||"/"),this.explicit_path=!1,this.domain=t||null,this.explicit_domain=!1,this.secure=!1,this.noscript=!1,e&&this.parse(e,t,r),this):new n(e,t,r)}e.All=Object.freeze(Object.create(null)),t.CookieAccessInfo=e,t.Cookie=n,n.prototype.toString=function(){var e=[this.name+"="+this.value];return this.expiration_date!==1/0&&e.push("expires="+new Date(this.expiration_date).toGMTString()),this.domain&&e.push("domain="+this.domain),this.path&&e.push("path="+this.path),this.secure&&e.push("secure"),this.noscript&&e.push("httponly"),e.join("; ")},n.prototype.toValueString=function(){return this.name+"="+this.value};var r=/[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;function a(){var e,t;return this instanceof a?(e=Object.create(null),this.setCookie=function(r,a,i){var o,s;if(o=(r=new n(r,a,i)).expiration_date<=Date.now(),void 0!==e[r.name]){for(t=e[r.name],s=0;s<t.length;s+=1)if(t[s].collidesWith(r))return o?(t.splice(s,1),0===t.length&&delete e[r.name],!1):(t[s]=r,r);return!o&&(t.push(r),r)}return!o&&(e[r.name]=[r],e[r.name])},this.getCookie=function(n,r){var a,i;if(t=e[n])for(i=0;i<t.length;i+=1)if((a=t[i]).expiration_date<=Date.now())0===t.length&&delete e[a.name];else if(a.matches(r))return a},this.getCookies=function(t){var n,r,a=[];for(n in e)(r=this.getCookie(n,t))&&a.push(r);return a.toString=function(){return a.join(":")},a.toValueString=function(){return a.map(function(e){return e.toValueString()}).join(";")},a},this):new a}n.prototype.parse=function(e,t,r){if(this instanceof n){var a,i=e.split(";").filter(function(e){return!!e}),o=i[0].match(/([^=]+)=([\s\S]*)/);if(!o)return void console.warn("Invalid cookie header encountered. Header: '"+e+"'");var s=o[1],c=o[2];if("string"!=typeof s||0===s.length||"string"!=typeof c)return void console.warn("Unable to extract values from cookie header. Cookie: '"+e+"'");for(this.name=s,this.value=c,a=1;a<i.length;a+=1)switch(s=(o=i[a].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(),c=o[2],s){case"httponly":this.noscript=!0;break;case"expires":this.expiration_date=c?Number(Date.parse(c)):1/0;break;case"path":this.path=c?c.trim():"",this.explicit_path=!0;break;case"domain":this.domain=c?c.trim():"",this.explicit_domain=!!this.domain;break;case"secure":this.secure=!0}return this.explicit_path||(this.path=r||"/"),this.explicit_domain||(this.domain=t),this}return(new n).parse(e,t,r)},n.prototype.matches=function(t){return t===e.All||!(this.noscript&&t.script||this.secure&&!t.secure||!this.collidesWith(t))},n.prototype.collidesWith=function(e){if(this.path&&!e.path||this.domain&&!e.domain)return!1;if(this.path&&0!==e.path.indexOf(this.path))return!1;if(this.explicit_path&&0!==e.path.indexOf(this.path))return!1;var t=e.domain&&e.domain.replace(/^[\.]/,""),n=this.domain&&this.domain.replace(/^[\.]/,"");if(n===t)return!0;if(n){if(!this.explicit_domain)return!1;var r=t.indexOf(n);return-1!==r&&r===t.length-n.length}return!0},t.CookieJar=a,a.prototype.setCookies=function(e,t,a){var i,o,s=[];for(e=(e=Array.isArray(e)?e:e.split(r)).map(function(e){return new n(e,t,a)}),i=0;i<e.length;i+=1)o=e[i],this.setCookie(o,t,a)&&s.push(o);return s}}()},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;i(n(89));var r=i(n(92)),a=i(n(39));function i(e){return e&&e.__esModule?e:{default:e}}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryStore=t,this._query=n,this._callType=r||"search",this._sortedChildren=[]}var t,n,r;return t=e,(n=[{key:"getQuery",value:function(){return this._query}},{key:"setLimit",value:function(e){this._query.limit(e)}},{key:"getLimit",value:function(){return this._query.getLimit()||a.default.getDefaultLimit()}},{key:"getFacets",value:function(){return this.facets}},{key:"setFacets",value:function(e){if(Array.isArray(e)&&0!==e.length){this.facets=e;var t=this._query.facet2predicate;e.forEach(function(e){t&&t[e.name]&&(e.predicate=t[e.name]),e.name.startsWith("metadata.predicate")?e.type=e.name.split(".")[2]:e.name.startsWith("related.metadata.predicate")&&(e.type=e.name.split(".")[3])})}else this.facets=[]}},{key:"_forceLoadEntries",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=t*this.getLimit();return this._query.offset(n),this._entryStore.handleAsync(this._entryStore.getREST().get(this._query.getQuery(this._entryStore)).then(function(t){return e.setFacets(t.facetFields),a.default.extractSearchResults(t,e,e._entryStore)}),this._callType)}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=s,s.prototype.getEntries=r.default.prototype.getEntries,s.prototype.forEach=r.default.prototype.forEach,s.prototype._getEntries=r.default.prototype._getEntries,s.prototype._update=r.default.prototype._update},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(40))&&r.__esModule?r:{default:r};function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(e,n,r,a){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=s(this,c(t).call(this,e,n,r)))._data=a,i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,a.default),n=t,(r=[{key:"getName",value:function(){return this._data.name}},{key:"setName",value:function(e){var t=this,n=this._data.name;return this._data.name=e,this._entryStore.handleAsync(es.getREST().put(this._resourceURI,JSON.stringify({name:e})).then(function(n){var r=t.getEntry(!0);return r&&(r.getEntryInfo()._name=e),n},function(e){throw t._data.name=n,e}),"setUserName")}},{key:"getLanguage",value:function(){return this._data.language}},{key:"setLanguage",value:function(e){var t=this,n=this._data.language;return this._data.language=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({language:e})).then(function(e){return e},function(e){throw t._data.language=n,e}),"setUserLanguage")}},{key:"setPassword",value:function(e){return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({password:e})),"setUserPassword")}},{key:"isDisabled",value:function(){return!0===this._data.disabled}},{key:"setDisabled",value:function(e){var t=this;if(e===this.isDisabled())return Promise.resolve(!0);var n=!0===this._data.disabled;return this._data.disabled=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({disabled:e})).then(function(n){var r=t.getEntry(!0);return r&&(r.getEntryInfo()._disabled=e),n},function(e){throw t._data.disabled=n,e}),"setUserDisabled")}},{key:"getHomeContext",value:function(){return this._data.homecontext}},{key:"setHomeContext",value:function(e){var t=this,n=this._data.homecontext;return this._data.homecontext=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({homecontext:e})).then(function(e){return e},function(e){throw t._data.homecontext=n,e}),"setUserHomeContext")}},{key:"getCustomProperties",value:function(){return this._data.customProperties||{}}},{key:"setCustomProperties",value:function(e){var t=this,n=this._data.customProperties;return this._data.customProperties=e,this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,JSON.stringify({customProperties:e})).then(function(e){return e},function(e){throw t._data.customProperties=n,e}),"setUserCustomProperties")}},{key:"getSource",value:function(){return this._data}}])&&o(n.prototype,r),i&&o(n,i),t}();t.default=l},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(467)),a=n(41),i=s(n(39)),o=s(n(69));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(e,t){for(var n=e._graph.find(e.getResourceURI(),o.default.rdf.type),r=0;r<n.length;r++){var a=t[n[r].getValue()];if(null!=a)return a}return t.default},p=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryURI=t||n.find(null,o.default.resource)[0].getSubject(),this._graph=n||new a.Graph,this._entryStore=r}var t,n,s,p,d;return t=e,(n=[{key:"getEntry",value:function(){return this._entry}},{key:"setGraph",value:function(e){this._graph=e}},{key:"getGraph",value:function(){return this._graph}},{key:"commit",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=this._entry.getEntryStore();!0===n&&(e=this.getModificationDate());var a=r.getREST().put(this.getEntryURI(),JSON.stringify(this._graph.exportRDFJSON()),e).then(function(){return!0!==n?(t._entry.setRefreshNeeded(!0),t._entry.refresh().then(function(){return t},function(){return r.getCache().message("refreshed",t),t})):t});return r.handleAsync(a,"commitEntryInfo")}},{key:"getEntryURI",value:function(){return this._entryURI}},{key:"getId",value:function(){return i.default.getEntryId(this._entryURI)}},{key:"getName",value:function(){return this._name}},{key:"isDisabled",value:function(){return this._disabled}},{key:"getMetadataURI",value:function(){return i.default.getMetadataURIFromURI(this._entryStore,this._entryURI)}},{key:"getExternalMetadataURI",value:function(){return this._graph.findFirstValue(this._entryURI,o.default.externalMetadata)}},{key:"setExternalMetadataURI",value:function(e){this._graph.findAndRemove(this._entryURI,o.default.externalMetadata),this._graph.create(this._entryURI,o.default.externalMetadata,{type:"uri",value:e})}},{key:"getCachedExternalMetadataURI",value:function(){return i.default.getCachedExternalMetadataURI(this._entryURI)}},{key:"getResourceURI",value:function(){return this._graph.findFirstValue(this._entryURI,o.default.resource)}},{key:"setResourceURI",value:function(e){var t=this.getResourceURI();if(this._graph.findAndRemove(this._entryURI,o.default.resource),this._graph.create(this._entryURI,o.default.resource,{type:"uri",value:e}),t)for(var n=this._graph.find(t),r=0;r<n.length;r++)n[r].setSubject(e)}},{key:"getEntryType",value:function(){var e=this._graph.findFirstValue(this._entryURI,o.default.rdf.type);return o.default.entryType[e||"default"]}},{key:"getResourceType",value:function(){return l(this,o.default.resourceType)}},{key:"getGraphType",value:function(){return l(this,o.default.graphType)}},{key:"getACL",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=function(t){return e?i.default.getEntryId(t.getValue()):t.getValue()},n=this.getResourceURI(),r=this.getMetadataURI(),a={admin:this._graph.find(this._entryURI,o.default.acl.write).map(t),rread:this._graph.find(n,o.default.acl.read).map(t),rwrite:this._graph.find(n,o.default.acl.write).map(t),mread:this._graph.find(r,o.default.acl.read).map(t),mwrite:this._graph.find(r,o.default.acl.write).map(t)};return a.contextOverride=0!==a.admin.length||0!==a.rread.length||0!==a.rwrite.length||0!==a.mread.length||0!==a.mwrite.length,a}},{key:"hasACL",value:function(){return this.getACL().contextOverride}},{key:"setACL",value:function(e){var t=this._graph,n=function(e,n,r,a){t.findAndRemove(e,n),(r||[]).forEach(function(r){r.length<a.length||0!==r.indexOf(a)?t.add(e,n,{type:"uri",value:a+r}):t.add(e,n,{type:"uri",value:r})})},r=e||{},a=this.getResourceURI(),s=this.getMetadataURI(),c=i.default.getResourceBase(this._entry.getEntryStore(),"_principals");n(this._entryURI,o.default.acl.write,r.admin,c),n(a,o.default.acl.read,r.rread,c),n(a,o.default.acl.write,r.rwrite,c),n(s,o.default.acl.read,r.mread,c),n(s,o.default.acl.write,r.mwrite,c)}},{key:"hasMetadataRevisions",value:function(){return null!=this._graph.findFirstValue(null,"owl:sameAs")}},{key:"getMetadataRevisions",value:function(){var e=[],t=this.getMetadataURI(),n=this._graph.find(null,"owl:sameAs",t);if(1!==n.length)return e;for(var a=n[0].getSubject(),i=this._entryStore;a;)e.push({uri:a,rev:a.substr(t.length+5),time:(0,r.default)(this._graph.findFirstValue(a,"prov:generatedAtTime")).toDate(),by:i.getEntryURIFromURI(this._graph.findFirstValue(a,"prov:wasAttributedTo"))}),a=this._graph.findFirstValue(a,"prov:wasRevisionOf");return e.sort(function(e,t){return e.time>t.time?-1:e.time<t.time?1:0}),e}},{key:"getMetadataRevisionGraph",value:(p=regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=this._entryStore.getREST().get(t),e.abrupt("return",new a.Graph(n));case 2:case"end":return e.stop()}},e,this)}),d=function(){var e=this,t=arguments;return new Promise(function(n,r){var a=p.apply(e,t);function i(e){c(a,n,r,i,o,"next",e)}function o(e){c(a,n,r,i,o,"throw",e)}i(void 0)})},function(e){return d.apply(this,arguments)})},{key:"getLabel",value:function(){return this._graph.findFirstValue(this.getResourceURI(),"http://www.w3.org/2000/01/rdf-schema#label")}},{key:"setLabel",value:function(e){this._graph.findAndRemove(this.getResourceURI(),"http://www.w3.org/2000/01/rdf-schema#label"),null!=e&&""!==e&&this._graph.add(this.getResourceURI(),"http://www.w3.org/2000/01/rdf-schema#label",{type:"literal",value:e})}},{key:"getFormat",value:function(){return this._graph.findFirstValue(this.getResourceURI(),"http://purl.org/dc/terms/format")}},{key:"setFormat",value:function(e){this._graph.findAndRemove(this.getResourceURI(),"http://purl.org/dc/terms/format"),null!=e&&""!==e&&this._graph.addL(this.getResourceURI(),"http://purl.org/dc/terms/format",e)}},{key:"getStatus",value:function(){return this._graph.findFirstValue(this.getEntryURI(),o.default.status.property)}},{key:"setStatus",value:function(e){this._graph.findAndRemove(this.getEntryURI(),o.default.status.property),null!=e&&""!==e&&0===e.indexOf("http")&&this._graph.add(this.getEntryURI(),o.default.status.property,e)}},{key:"getCreationDate",value:function(){var e=this._graph.findFirstValue(this.getEntryURI(),"http://purl.org/dc/terms/created");return(0,r.default)(e).toDate()}},{key:"getModificationDate",value:function(){var e=this._graph.findFirstValue(this.getEntryURI(),"http://purl.org/dc/terms/modified");return null!=e?(0,r.default)(e).toDate():this.getCreationDate()}},{key:"getCreator",value:function(){return this._graph.findFirstValue(this.getEntryURI(),"http://purl.org/dc/terms/creator")}},{key:"getSize",value:function(){var e=this._graph.findFirstValue(this.getResourceURI(),"http://purl.org/dc/terms/extent");if(parseInt(e,10)==parseInt(e,10))return parseInt(e,10)}},{key:"getContributors",value:function(){return this._graph.find(this.getEntryURI(),"http://purl.org/dc/terms/contributor").map(function(e){return e.getValue()})}}])&&u(t.prototype,n),s&&u(t,s),e}();t.default=p},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(40))&&r.__esModule?r:{default:r};function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(e,n,r,a){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=s(this,c(t).call(this,e,n,r)))._data=a,i}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,a.default),n=t,(r=[{key:"getString",value:function(){return this._data}},{key:"setString",value:function(e){return this._data=e||"",this}},{key:"commit",value:function(){return this._entryStore.handleAsync(this._entryStore.getREST().put(this._resourceURI,this._data),"commitString")}},{key:"getSource",value:function(){return this._data}}])&&o(n.prototype,r),i&&o(n,i),t}();t.default=l},function(e,t,n){var r,a,i,o,s;r=n(417),a=n(167).utf8,i=n(418),o=n(167).bin,(s=function(e,t){e.constructor==String?e=t&&"binary"===t.encoding?o.stringToBytes(e):a.stringToBytes(e):i(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||(e=e.toString());for(var n=r.bytesToWords(e),c=8*e.length,u=1732584193,l=-271733879,p=-1732584194,d=271733878,f=0;f<n.length;f++)n[f]=16711935&(n[f]<<8|n[f]>>>24)|4278255360&(n[f]<<24|n[f]>>>8);n[c>>>5]|=128<<c%32,n[14+(c+64>>>9<<4)]=c;var h=s._ff,m=s._gg,v=s._hh,g=s._ii;for(f=0;f<n.length;f+=16){var y=u,x=l,b=p,w=d;u=h(u,l,p,d,n[f+0],7,-680876936),d=h(d,u,l,p,n[f+1],12,-389564586),p=h(p,d,u,l,n[f+2],17,606105819),l=h(l,p,d,u,n[f+3],22,-1044525330),u=h(u,l,p,d,n[f+4],7,-176418897),d=h(d,u,l,p,n[f+5],12,1200080426),p=h(p,d,u,l,n[f+6],17,-1473231341),l=h(l,p,d,u,n[f+7],22,-45705983),u=h(u,l,p,d,n[f+8],7,1770035416),d=h(d,u,l,p,n[f+9],12,-1958414417),p=h(p,d,u,l,n[f+10],17,-42063),l=h(l,p,d,u,n[f+11],22,-1990404162),u=h(u,l,p,d,n[f+12],7,1804603682),d=h(d,u,l,p,n[f+13],12,-40341101),p=h(p,d,u,l,n[f+14],17,-1502002290),u=m(u,l=h(l,p,d,u,n[f+15],22,1236535329),p,d,n[f+1],5,-165796510),d=m(d,u,l,p,n[f+6],9,-1069501632),p=m(p,d,u,l,n[f+11],14,643717713),l=m(l,p,d,u,n[f+0],20,-373897302),u=m(u,l,p,d,n[f+5],5,-701558691),d=m(d,u,l,p,n[f+10],9,38016083),p=m(p,d,u,l,n[f+15],14,-660478335),l=m(l,p,d,u,n[f+4],20,-405537848),u=m(u,l,p,d,n[f+9],5,568446438),d=m(d,u,l,p,n[f+14],9,-1019803690),p=m(p,d,u,l,n[f+3],14,-187363961),l=m(l,p,d,u,n[f+8],20,1163531501),u=m(u,l,p,d,n[f+13],5,-1444681467),d=m(d,u,l,p,n[f+2],9,-51403784),p=m(p,d,u,l,n[f+7],14,1735328473),u=v(u,l=m(l,p,d,u,n[f+12],20,-1926607734),p,d,n[f+5],4,-378558),d=v(d,u,l,p,n[f+8],11,-2022574463),p=v(p,d,u,l,n[f+11],16,1839030562),l=v(l,p,d,u,n[f+14],23,-35309556),u=v(u,l,p,d,n[f+1],4,-1530992060),d=v(d,u,l,p,n[f+4],11,1272893353),p=v(p,d,u,l,n[f+7],16,-155497632),l=v(l,p,d,u,n[f+10],23,-1094730640),u=v(u,l,p,d,n[f+13],4,681279174),d=v(d,u,l,p,n[f+0],11,-358537222),p=v(p,d,u,l,n[f+3],16,-722521979),l=v(l,p,d,u,n[f+6],23,76029189),u=v(u,l,p,d,n[f+9],4,-640364487),d=v(d,u,l,p,n[f+12],11,-421815835),p=v(p,d,u,l,n[f+15],16,530742520),u=g(u,l=v(l,p,d,u,n[f+2],23,-995338651),p,d,n[f+0],6,-198630844),d=g(d,u,l,p,n[f+7],10,1126891415),p=g(p,d,u,l,n[f+14],15,-1416354905),l=g(l,p,d,u,n[f+5],21,-57434055),u=g(u,l,p,d,n[f+12],6,1700485571),d=g(d,u,l,p,n[f+3],10,-1894986606),p=g(p,d,u,l,n[f+10],15,-1051523),l=g(l,p,d,u,n[f+1],21,-2054922799),u=g(u,l,p,d,n[f+8],6,1873313359),d=g(d,u,l,p,n[f+15],10,-30611744),p=g(p,d,u,l,n[f+6],15,-1560198380),l=g(l,p,d,u,n[f+13],21,1309151649),u=g(u,l,p,d,n[f+4],6,-145523070),d=g(d,u,l,p,n[f+11],10,-1120210379),p=g(p,d,u,l,n[f+2],15,718787259),l=g(l,p,d,u,n[f+9],21,-343485551),u=u+y>>>0,l=l+x>>>0,p=p+b>>>0,d=d+w>>>0}return r.endian([u,l,p,d])})._ff=function(e,t,n,r,a,i,o){var s=e+(t&n|~t&r)+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._gg=function(e,t,n,r,a,i,o){var s=e+(t&r|n&~r)+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._hh=function(e,t,n,r,a,i,o){var s=e+(t^n^r)+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._ii=function(e,t,n,r,a,i,o){var s=e+(n^(t|~r))+(a>>>0)+o;return(s<<i|s>>>32-i)+t},s._blocksize=16,s._digestsize=16,e.exports=function(e,t){if(null==e)throw new Error("Illegal argument "+e);var n=r.wordsToBytes(s(e,t));return t&&t.asBytes?n:t&&t.asString?o.bytesToString(n):r.bytesToHex(n)}},function(e,t,n){var r=n(6),a=n(1),i=n(94);e.exports=!r&&!a(function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(55);e.exports=r("native-function-to-string",Function.toString)},function(e,t,n){var r=n(2),a=n(128),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(a.call(i))},function(e,t,n){var r=n(11),a=n(96),i=n(15),o=n(9);e.exports=function(e,t){for(var n=a(t),s=o.f,c=i.f,u=0;u<n.length;u++){var l=n[u];r(e,l)||s(e,l,c(t,l))}}},function(e,t,n){var r=n(11),a=n(18),i=n(58).indexOf,o=n(57);e.exports=function(e,t){var n,s=a(e),c=0,u=[];for(n in s)!r(o,n)&&r(s,n)&&u.push(n);for(;t.length>c;)r(s,n=t[c++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(1);e.exports=!!Object.getOwnPropertySymbols&&!r(function(){return!String(Symbol())})},function(e,t,n){var r=n(33);e.exports=r("document","documentElement")},function(e,t,n){var r=n(18),a=n(43).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return o&&"[object Window]"==i.call(e)?function(e){try{return a(e)}catch(e){return o.slice()}}(e):a(r(e))}},function(e,t,n){t.f=n(7)},function(e,t,n){"use strict";var r=n(6),a=n(1),i=n(60),o=n(98),s=n(72),c=n(10),u=n(54),l=Object.assign;e.exports=!l||a(function(){var e={},t={},n=Symbol();return e[n]=7,"abcdefghijklmnopqrst".split("").forEach(function(e){t[e]=e}),7!=l({},e)[n]||"abcdefghijklmnopqrst"!=i(l({},t)).join("")})?function(e,t){for(var n=c(e),a=arguments.length,l=1,p=o.f,d=s.f;a>l;)for(var f,h=u(arguments[l++]),m=p?i(h).concat(p(h)):i(h),v=m.length,g=0;v>g;)f=m[g++],r&&!d.call(h,f)||(n[f]=h[f]);return n}:l},function(e,t,n){var r=n(6),a=n(60),i=n(18),o=n(72).f,s=function(e){return function(t){for(var n,s=i(t),c=a(s),u=c.length,l=0,p=[];u>l;)n=c[l++],r&&!o.call(s,n)||p.push(e?[n,s[n]]:s[n]);return p}};e.exports={entries:s(!0),values:s(!1)}},function(e,t,n){var r=n(4);e.exports=function(e,t,n,a){try{return a?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){var r=n(3);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,n){"use strict";var r=n(20),a=n(3),i=[].slice,o={},s=function(e,t,n){if(!(t in o)){for(var r=[],a=0;a<t;a++)r[a]="a["+a+"]";o[t]=Function("C,a","return new C("+r.join(",")+")")}return o[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=i.call(arguments,1),o=function(){var r=n.concat(i.call(arguments));return this instanceof o?s(t,r.length,r):t.apply(e,r)};return a(t.prototype)&&(o.prototype=t.prototype),o}},function(e,t,n){"use strict";var r=n(36),a=n(10),i=n(138),o=n(100),s=n(8),c=n(46),u=n(65);e.exports=function(e){var t,n,l,p,d=a(e),f="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,v=void 0!==m,g=0,y=u(d);if(v&&(m=r(m,h>2?arguments[2]:void 0,2)),null==y||f==Array&&o(y))for(n=new f(t=s(d.length));t>g;g++)c(n,g,v?m(d[g],g):d[g]);else for(p=y.call(d),n=new f;!(l=p.next()).done;g++)c(n,g,v?i(p,m,[l.value,g],!0):l.value);return n.length=g,n}},function(e,t,n){"use strict";var r=n(10),a=n(34),i=n(8),o=Math.min;e.exports=[].copyWithin||function(e,t){var n=r(this),s=i(n.length),c=a(e,s),u=a(t,s),l=arguments.length>2?arguments[2]:void 0,p=o((void 0===l?s:a(l,s))-u,s-c),d=1;for(u<c&&c<u+p&&(d=-1,u+=p-1,c+=p-1);p-- >0;)u in n?n[c]=n[u]:delete n[c],c+=d,u+=d;return n}},function(e,t,n){"use strict";var r=n(44),a=n(8),i=n(36),o=function(e,t,n,s,c,u,l,p){for(var d,f=c,h=0,m=!!l&&i(l,p,3);h<s;){if(h in n){if(d=m?m(n[h],h,t):n[h],u>0&&r(d))f=o(e,t,d,a(d.length),f,u-1)-1;else{if(f>=9007199254740991)throw TypeError("Exceed the acceptable array length");e[f]=d}f++}h++}return f};e.exports=o},function(e,t,n){"use strict";var r=n(12).forEach,a=n(28);e.exports=a("forEach")?function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(e,t,n){"use strict";var r=n(18),a=n(23),i=n(8),o=n(28),s=Math.min,c=[].lastIndexOf,u=!!c&&1/[1].lastIndexOf(1,-0)<0,l=o("lastIndexOf");e.exports=u||l?function(e){if(u)return c.apply(this,arguments)||0;var t=r(this),n=i(t.length),o=n-1;for(arguments.length>1&&(o=s(o,a(arguments[1]))),o<0&&(o=n+o);o>=0;o--)if(o in t&&t[o]===e)return o||0;return-1}:c},function(e,t,n){"use strict";var r,a,i,o=n(27),s=n(13),c=n(11),u=n(7),l=n(32),p=u("iterator"),d=!1;[].keys&&("next"in(i=[].keys())?(a=o(o(i)))!==Object.prototype&&(r=a):d=!0),null==r&&(r={}),l||c(r,p)||s(r,p,function(){return this}),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(e,t,n){var r=n(83);e.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(r)},function(e,t,n){"use strict";var r=n(78).charAt,a=n(19),i=n(103),o=a.set,s=a.getterFor("String Iterator");i(String,"String",function(e){o(this,{type:"String Iterator",string:String(e),index:0})},function(){var e,t=s(this),n=t.string,a=t.index;return a>=n.length?{value:void 0,done:!0}:(e=r(n,a),t.index+=e.length,{value:e,done:!1})})},function(e,t,n){var r=n(2),a=n(50).trim,i=n(84),o=r.parseInt,s=/^[+-]?0[Xx]/,c=8!==o(i+"08")||22!==o(i+"0x16");e.exports=c?function(e,t){var n=a(String(e));return o(n,t>>>0||(s.test(n)?16:10))}:o},function(e,t,n){var r=n(2),a=n(50).trim,i=n(84),o=r.parseFloat,s=1/o(i+"-0")!=-1/0;e.exports=s?function(e){var t=a(String(e)),n=o(t);return 0===n&&"-"==t.charAt(0)?-0:n}:o},function(e,t,n){var r=n(3),a=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&a(e)===e}},function(e,t,n){var r=n(24);e.exports=function(e){if("number"!=typeof e&&"Number"!=r(e))throw TypeError("Incorrect invocation");return+e}},function(e,t){var n=Math.log;e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:n(1+e)}},function(e,t,n){var r,a,i,o,s,c,u,l=n(2),p=n(15).f,d=n(24),f=n(113).set,h=n(83),m=l.MutationObserver||l.WebKitMutationObserver,v=l.process,g=l.Promise,y="process"==d(v),x=p(l,"queueMicrotask"),b=x&&x.value;b||(r=function(){var e,t;for(y&&(e=v.domain)&&e.exit();a;){t=a.fn,a=a.next;try{t()}catch(e){throw a?o():i=void 0,e}}i=void 0,e&&e.enter()},y?o=function(){v.nextTick(r)}:m&&!/(iphone|ipod|ipad).*applewebkit/i.test(h)?(s=!0,c=document.createTextNode(""),new m(r).observe(c,{characterData:!0}),o=function(){c.data=s=!s}):g&&g.resolve?(u=g.resolve(void 0),o=function(){u.then(r)}):o=function(){f.call(l,r)}),e.exports=b||function(e){var t={fn:e,next:void 0};i&&(i.next=t),a||(a=t,o()),i=t}},function(e,t,n){var r=n(4),a=n(3),i=n(157);e.exports=function(e,t){if(r(e),a(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(20),a=function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new a(e)}},function(e,t,n){"use strict";var r=n(9).f,a=n(35),i=n(51),o=n(36),s=n(38),c=n(63),u=n(103),l=n(49),p=n(6),d=n(45).fastKey,f=n(19),h=f.set,m=f.getterFor;e.exports={getConstructor:function(e,t,n,u){var l=e(function(e,r){s(e,l,t),h(e,{type:t,index:a(null),first:void 0,last:void 0,size:0}),p||(e.size=0),null!=r&&c(r,e[u],e,n)}),f=m(t),v=function(e,t,n){var r,a,i=f(e),o=g(e,t);return o?o.value=n:(i.last=o={index:a=d(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=o),r&&(r.next=o),p?i.size++:e.size++,"F"!==a&&(i.index[a]=o)),e},g=function(e,t){var n,r=f(e),a=d(t);if("F"!==a)return r.index[a];for(n=r.first;n;n=n.next)if(n.key==t)return n};return i(l.prototype,{clear:function(){for(var e=f(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,p?e.size=0:this.size=0},delete:function(e){var t=f(this),n=g(this,e);if(n){var r=n.next,a=n.previous;delete t.index[n.index],n.removed=!0,a&&(a.next=r),r&&(r.previous=a),t.first==n&&(t.first=r),t.last==n&&(t.last=a),p?t.size--:this.size--}return!!n},forEach:function(e){for(var t,n=f(this),r=o(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!g(this,e)}}),i(l.prototype,n?{get:function(e){var t=g(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),p&&r(l.prototype,"size",{get:function(){return f(this).size}}),l},setStrong:function(e,t,n){var r=t+" Iterator",a=m(t),i=m(r);u(e,t,function(e,t){h(this,{type:r,target:e,state:a(e),kind:t,last:void 0})},function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})},n?"entries":"values",!n,!0),l(t)}}},function(e,t,n){"use strict";var r=n(51),a=n(45).getWeakData,i=n(4),o=n(3),s=n(38),c=n(63),u=n(12),l=n(11),p=n(19),d=p.set,f=p.getterFor,h=u.find,m=u.findIndex,v=0,g=function(e){return e.frozen||(e.frozen=new y)},y=function(){this.entries=[]},x=function(e,t){return h(e.entries,function(e){return e[0]===t})};y.prototype={get:function(e){var t=x(this,e);if(t)return t[1]},has:function(e){return!!x(this,e)},set:function(e,t){var n=x(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=m(this.entries,function(t){return t[0]===e});return~t&&this.entries.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,u){var p=e(function(e,r){s(e,p,t),d(e,{type:t,id:v++,frozen:void 0}),null!=r&&c(r,e[u],e,n)}),h=f(t),m=function(e,t,n){var r=h(e),o=a(i(t),!0);return!0===o?g(r).set(t,n):o[r.id]=n,e};return r(p.prototype,{delete:function(e){var t=h(this);if(!o(e))return!1;var n=a(e);return!0===n?g(t).delete(e):n&&l(n,t.id)&&delete n[t.id]},has:function(e){var t=h(this);if(!o(e))return!1;var n=a(e);return!0===n?g(t).has(e):n&&l(n,t.id)}}),r(p.prototype,n?{get:function(e){var t=h(this);if(o(e)){var n=a(e);return!0===n?g(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return m(this,e,t)}}:{add:function(e){return m(this,e,!0)}}),p}}},function(e,t,n){var r=n(23),a=n(8);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=a(t);if(t!==n)throw RangeError("Wrong length or index");return n}},function(e,t,n){var r=n(23);e.exports=function(e,t){var n=r(e);if(n<0||n%t)throw RangeError("Wrong offset");return n}},function(e,t,n){var r=n(10),a=n(8),i=n(65),o=n(100),s=n(36),c=n(5).aTypedArrayConstructor;e.exports=function(e){var t,n,u,l,p,d=r(e),f=arguments.length,h=f>1?arguments[1]:void 0,m=void 0!==h,v=i(d);if(null!=v&&!o(v))for(p=v.call(d),d=[];!(l=p.next()).done;)d.push(l.value);for(m&&f>2&&(h=s(h,arguments[2],2)),n=a(d.length),u=new(c(this))(n),t=0;n>t;t++)u[t]=m?h(d[t],t):d[t];return u}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){var r=n(1),a=n(7),i=n(32),o=a("iterator");e.exports=!r(function(){var e=new URL("b?e=1","http://a"),t=e.searchParams;return e.pathname="c%20d",i&&!e.toJSON||!t.sort||"http://a/c%20d?e=1"!==e.href||"1"!==t.get("e")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[o]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash})},function(e,t,n){"use strict";n(77);var r=n(0),a=n(164),i=n(16),o=n(51),s=n(26),c=n(104),u=n(19),l=n(38),p=n(11),d=n(36),f=n(4),h=n(3),m=n(413),v=n(65),g=n(7)("iterator"),y=u.set,x=u.getterFor("URLSearchParams"),b=u.getterFor("URLSearchParamsIterator"),w=/\+/g,_=Array(4),k=function(e){return _[e-1]||(_[e-1]=RegExp("((?:%[\\da-f]{2}){"+e+"})","gi"))},E=function(e){try{return decodeURIComponent(e)}catch(t){return e}},S=function(e){var t=e.replace(w," "),n=4;try{return decodeURIComponent(t)}catch(e){for(;n;)t=t.replace(k(n--),E);return t}},R=/[!'()~]|%20/g,T={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},A=function(e){return T[e]},D=function(e){return encodeURIComponent(e).replace(R,A)},O=function(e,t){if(t)for(var n,r,a=t.split("&"),i=0;i<a.length;)(n=a[i++]).length&&(r=n.split("="),e.push({key:S(r.shift()),value:S(r.join("="))}))},I=function(e){this.entries.length=0,O(this.entries,e)},j=function(e,t){if(e<t)throw TypeError("Not enough arguments")},C=c(function(e,t){y(this,{type:"URLSearchParamsIterator",iterator:m(x(e).entries),kind:t})},"Iterator",function(){var e=b(this),t=e.kind,n=e.iterator.next(),r=n.value;return n.done||(n.value="keys"===t?r.key:"values"===t?r.value:[r.key,r.value]),n}),N=function(){l(this,N,"URLSearchParams");var e,t,n,r,a,i,o,s=arguments.length>0?arguments[0]:void 0,c=this,u=[];if(y(c,{type:"URLSearchParams",entries:u,updateURL:function(){},updateSearchParams:I}),void 0!==s)if(h(s))if("function"==typeof(e=v(s)))for(t=e.call(s);!(n=t.next()).done;){if((a=(r=m(f(n.value))).next()).done||(i=r.next()).done||!r.next().done)throw TypeError("Expected sequence with length 2");u.push({key:a.value+"",value:i.value+""})}else for(o in s)p(s,o)&&u.push({key:o,value:s[o]+""});else O(u,"string"==typeof s?"?"===s.charAt(0)?s.slice(1):s:s+"")},L=N.prototype;o(L,{append:function(e,t){j(arguments.length,2);var n=x(this);n.entries.push({key:e+"",value:t+""}),n.updateURL()},delete:function(e){j(arguments.length,1);for(var t=x(this),n=t.entries,r=e+"",a=0;a<n.length;)n[a].key===r?n.splice(a,1):a++;t.updateURL()},get:function(e){j(arguments.length,1);for(var t=x(this).entries,n=e+"",r=0;r<t.length;r++)if(t[r].key===n)return t[r].value;return null},getAll:function(e){j(arguments.length,1);for(var t=x(this).entries,n=e+"",r=[],a=0;a<t.length;a++)t[a].key===n&&r.push(t[a].value);return r},has:function(e){j(arguments.length,1);for(var t=x(this).entries,n=e+"",r=0;r<t.length;)if(t[r++].key===n)return!0;return!1},set:function(e,t){j(arguments.length,1);for(var n,r=x(this),a=r.entries,i=!1,o=e+"",s=t+"",c=0;c<a.length;c++)(n=a[c]).key===o&&(i?a.splice(c--,1):(i=!0,n.value=s));i||a.push({key:o,value:s}),r.updateURL()},sort:function(){var e,t,n,r=x(this),a=r.entries,i=a.slice();for(a.length=0,n=0;n<i.length;n++){for(e=i[n],t=0;t<n;t++)if(a[t].key>e.key){a.splice(t,0,e);break}t===n&&a.push(e)}r.updateURL()},forEach:function(e){for(var t,n=x(this).entries,r=d(e,arguments.length>1?arguments[1]:void 0,3),a=0;a<n.length;)r((t=n[a++]).value,t.key,this)},keys:function(){return new C(this,"keys")},values:function(){return new C(this,"values")},entries:function(){return new C(this,"entries")}},{enumerable:!0}),i(L,g,L.entries),i(L,"toString",function(){for(var e,t=x(this).entries,n=[],r=0;r<t.length;)e=t[r++],n.push(D(e.key)+"="+D(e.value));return n.join("&")},{enumerable:!0}),s(N,"URLSearchParams"),r({global:!0,forced:!a},{URLSearchParams:N}),e.exports={URLSearchParams:N,getState:x}},function(e,t){function n(e,t){for(var n in e)t[n]=e[n]}function r(e,t){var r=e.prototype;if(Object.create){var a=Object.create(t.prototype);r.__proto__=a}if(!(r instanceof t)){function i(){}i.prototype=t.prototype,n(r,i=new i),e.prototype=r=i}r.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),r.constructor=e)}var a="http://www.w3.org/1999/xhtml",i={},o=i.ELEMENT_NODE=1,s=i.ATTRIBUTE_NODE=2,c=i.TEXT_NODE=3,u=i.CDATA_SECTION_NODE=4,l=i.ENTITY_REFERENCE_NODE=5,p=i.ENTITY_NODE=6,d=i.PROCESSING_INSTRUCTION_NODE=7,f=i.COMMENT_NODE=8,h=i.DOCUMENT_NODE=9,m=i.DOCUMENT_TYPE_NODE=10,v=i.DOCUMENT_FRAGMENT_NODE=11,g=i.NOTATION_NODE=12,y={},x={},b=(y.INDEX_SIZE_ERR=(x[1]="Index size error",1),y.DOMSTRING_SIZE_ERR=(x[2]="DOMString size error",2),y.HIERARCHY_REQUEST_ERR=(x[3]="Hierarchy request error",3)),w=(y.WRONG_DOCUMENT_ERR=(x[4]="Wrong document",4),y.INVALID_CHARACTER_ERR=(x[5]="Invalid character",5),y.NO_DATA_ALLOWED_ERR=(x[6]="No data allowed",6),y.NO_MODIFICATION_ALLOWED_ERR=(x[7]="No modification allowed",7),y.NOT_FOUND_ERR=(x[8]="Not found",8)),_=(y.NOT_SUPPORTED_ERR=(x[9]="Not supported",9),y.INUSE_ATTRIBUTE_ERR=(x[10]="Attribute in use",10));y.INVALID_STATE_ERR=(x[11]="Invalid state",11),y.SYNTAX_ERR=(x[12]="Syntax error",12),y.INVALID_MODIFICATION_ERR=(x[13]="Invalid modification",13),y.NAMESPACE_ERR=(x[14]="Invalid namespace",14),y.INVALID_ACCESS_ERR=(x[15]="Invalid access",15);function k(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,x[e]),this.message=x[e],Error.captureStackTrace&&Error.captureStackTrace(this,k);return n.code=e,t&&(this.message=this.message+": "+t),n}function E(){}function S(e,t){this._node=e,this._refresh=t,R(this)}function R(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var r=e._refresh(e._node);ne(e,"length",r.length),n(r,e),e._inc=t}}function T(){}function A(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function D(e,t,n,r){if(r?t[A(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var a=e.ownerDocument;a&&(r&&q(a,e,r),function(e,t,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&(t._nsMap[n.prefix?n.localName:""]=n.value)}(a,e,n))}}function O(e,t,n){var r=A(t,n);if(!(r>=0))throw k(w,new Error(e.tagName+"@"+n));for(var a=t.length-1;r<a;)t[r]=t[++r];if(t.length=a,e){var i=e.ownerDocument;i&&(q(i,e,n),n.ownerElement=null)}}function I(e){if(this._features={},e)for(var t in e)this._features=e[t]}function j(){}function C(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function N(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(N(e,t))return!0}while(e=e.nextSibling)}function L(){}function q(e,t,n,r){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&delete t._nsMap[n.prefix?n.localName:""]}function U(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var a=t.firstChild,i=0;a;)r[i++]=a,a=a.nextSibling;r.length=i}}}function P(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,U(e.ownerDocument,e),t}function M(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===v){var a=t.firstChild;if(null==a)return t;var i=t.lastChild}else a=i=t;var o=n?n.previousSibling:e.lastChild;a.previousSibling=o,i.nextSibling=n,o?o.nextSibling=a:e.firstChild=a,null==n?e.lastChild=i:n.previousSibling=i;do{a.parentNode=e}while(a!==i&&(a=a.nextSibling));return U(e.ownerDocument||e,e),t.nodeType==v&&(t.firstChild=t.lastChild=null),t}function F(){this._nsMap={}}function z(){}function B(){}function V(){}function G(){}function Y(){}function H(){}function W(){}function $(){}function J(){}function Z(){}function X(){}function K(){}function Q(e,t){var n=[],r=9==this.nodeType?this.documentElement:this,a=r.prefix,i=r.namespaceURI;if(i&&null==a&&null==(a=r.lookupPrefix(i)))var o=[{namespace:i,prefix:null}];return te(this,n,e,t,o),n.join("")}function ee(e,t,n){var r=e.prefix||"",a=e.namespaceURI;if(!r&&!a)return!1;if("xml"===r&&"http://www.w3.org/XML/1998/namespace"===a||"http://www.w3.org/2000/xmlns/"==a)return!1;for(var i=n.length;i--;){var o=n[i];if(o.prefix==r)return o.namespace!=a}return!0}function te(e,t,n,r,i){if(r){if(!(e=r(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case o:i||(i=[]);i.length;var p=e.attributes,g=p.length,y=e.firstChild,x=e.tagName;n=a===e.namespaceURI||n,t.push("<",x);for(var b=0;b<g;b++){"xmlns"==(w=p.item(b)).prefix?i.push({prefix:w.localName,namespace:w.value}):"xmlns"==w.nodeName&&i.push({prefix:"",namespace:w.value})}for(b=0;b<g;b++){var w;if(ee(w=p.item(b),0,i)){var _=w.prefix||"",k=w.namespaceURI,E=_?" xmlns:"+_:" xmlns";t.push(E,'="',k,'"'),i.push({prefix:_,namespace:k})}te(w,t,n,r,i)}if(ee(e,0,i)){_=e.prefix||"",k=e.namespaceURI,E=_?" xmlns:"+_:" xmlns";t.push(E,'="',k,'"'),i.push({prefix:_,namespace:k})}if(y||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(x)){if(t.push(">"),n&&/^script$/i.test(x))for(;y;)y.data?t.push(y.data):te(y,t,n,r,i),y=y.nextSibling;else for(;y;)te(y,t,n,r,i),y=y.nextSibling;t.push("</",x,">")}else t.push("/>");return;case h:case v:for(y=e.firstChild;y;)te(y,t,n,r,i),y=y.nextSibling;return;case s:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,C),'"');case c:return t.push(e.data.replace(/[<&]/g,C));case u:return t.push("<![CDATA[",e.data,"]]>");case f:return t.push("\x3c!--",e.data,"--\x3e");case m:var S=e.publicId,R=e.systemId;if(t.push("<!DOCTYPE ",e.name),S)t.push(' PUBLIC "',S),R&&"."!=R&&t.push('" "',R),t.push('">');else if(R&&"."!=R)t.push(' SYSTEM "',R,'">');else{var T=e.internalSubset;T&&t.push(" [",T,"]"),t.push(">")}return;case d:return t.push("<?",e.target," ",e.data,"?>");case l:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function ne(e,t,n){e[t]=n}k.prototype=Error.prototype,n(y,k),E.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)te(this[r],n,e,t);return n.join("")}},S.prototype.item=function(e){return R(this),this[e]},r(S,E),T.prototype={length:0,item:E.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new k(_);var n=this.getNamedItem(e.nodeName);return D(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t,n=e.ownerElement;if(n&&n!=this._ownerElement)throw new k(_);return t=this.getNamedItemNS(e.namespaceURI,e.localName),D(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return O(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return O(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}},I.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!(!n||t&&!(t in n))},createDocument:function(e,t,n){var r=new L;if(r.implementation=this,r.childNodes=new E,r.doctype=n,n&&r.appendChild(n),t){var a=r.createElementNS(e,t);r.appendChild(a)}return r},createDocumentType:function(e,t,n){var r=new H;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}},j.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return M(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return P(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,n,r){var a=new n.constructor;for(var i in n){var c=n[i];"object"!=typeof c&&c!=a[i]&&(a[i]=c)}n.childNodes&&(a.childNodes=new E);a.ownerDocument=t;switch(a.nodeType){case o:var u=n.attributes,l=a.attributes=new T,p=u.length;l._ownerElement=a;for(var d=0;d<p;d++)a.setAttributeNode(e(t,u.item(d),!0));break;case s:r=!0}if(r)for(var f=n.firstChild;f;)a.appendChild(e(t,f,r)),f=f.nextSibling;return a}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==c&&e.nodeType==c?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n)for(var r in n)if(n[r]==e)return r;t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},n(i,j),n(i,j.prototype),L.prototype={nodeName:"#document",nodeType:h,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==v){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return null==this.documentElement&&e.nodeType==o&&(this.documentElement=e),M(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),P(this,e)},importNode:function(e,t){return function e(t,n,r){var a;switch(n.nodeType){case o:(a=n.cloneNode(!1)).ownerDocument=t;case v:break;case s:r=!0}a||(a=n.cloneNode(!1));a.ownerDocument=t;a.parentNode=null;if(r)for(var i=n.firstChild;i;)a.appendChild(e(t,i,r)),i=i.nextSibling;return a}(this,e,t)},getElementById:function(e){var t=null;return N(this.documentElement,function(n){if(n.nodeType==o&&n.getAttribute("id")==e)return t=n,!0}),t},createElement:function(e){var t=new F;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new E,(t.attributes=new T)._ownerElement=t,t},createDocumentFragment:function(){var e=new Z;return e.ownerDocument=this,e.childNodes=new E,e},createTextNode:function(e){var t=new V;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new G;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new Y;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new X;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new z;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new J;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new F,r=t.split(":"),a=n.attributes=new T;return n.childNodes=new E,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,a._ownerElement=n,n},createAttributeNS:function(e,t){var n=new z,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}},r(L,j),F.prototype={nodeType:o,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===v?this.insertBefore(e,null):function(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t);r=e.lastChild}return r=e.lastChild,t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,U(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new S(this,function(t){var n=[];return N(t,function(r){r===t||r.nodeType!=o||"*"!==e&&r.tagName!=e||n.push(r)}),n})},getElementsByTagNameNS:function(e,t){return new S(this,function(n){var r=[];return N(n,function(a){a===n||a.nodeType!==o||"*"!==e&&a.namespaceURI!==e||"*"!==t&&a.localName!=t||r.push(a)}),r})}},L.prototype.getElementsByTagName=F.prototype.getElementsByTagName,L.prototype.getElementsByTagNameNS=F.prototype.getElementsByTagNameNS,r(F,j),z.prototype.nodeType=s,r(z,j),B.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(x[b])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){n=this.data.substring(0,e)+n+this.data.substring(e+t),this.nodeValue=this.data=n,this.length=n.length}},r(B,j),V.prototype={nodeName:"#text",nodeType:c,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}},r(V,B),G.prototype={nodeName:"#comment",nodeType:f},r(G,B),Y.prototype={nodeName:"#cdata-section",nodeType:u},r(Y,B),H.prototype.nodeType=m,r(H,j),W.prototype.nodeType=g,r(W,j),$.prototype.nodeType=p,r($,j),J.prototype.nodeType=l,r(J,j),Z.prototype.nodeName="#document-fragment",Z.prototype.nodeType=v,r(Z,j),X.prototype.nodeType=d,r(X,j),K.prototype.serializeToString=function(e,t,n){return Q.call(e,t,n)},j.prototype.toString=Q;try{if(Object.defineProperty){Object.defineProperty(S.prototype,"length",{get:function(){return R(this),this.$$length}}),Object.defineProperty(j.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case o:case v:var n=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case o:case v:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),ne=function(e,t,n){e["$$"+t]=n}}}catch(e){}t.DOMImplementation=I,t.XMLSerializer=K},function(e,t){var n={utf8:{stringToBytes:function(e){return n.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(n.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t},bytesToString:function(e){for(var t=[],n=0;n<e.length;n++)t.push(String.fromCharCode(e[n]));return t.join("")}}};e.exports=n},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function a(e){return function(){var t=this,n=arguments;return new Promise(function(a,i){var o=e.apply(t,n);function s(e){r(o,a,i,s,c,"next",e)}function c(e){r(o,a,i,s,c,"throw",e)}s(void 0)})}}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entryStore=t,this._listenerCounter=0,this._listeners=new Map}var t,r,o,s,c,u,l;return t=e,(r=[{key:"messageListeners",value:function(e,t){this._listeners.forEach(function(n){return n(e,t)})}},{key:"addAuthListener",value:function(e){null==e.__alid&&(e.__alid="idx_".concat(this._listenerCounter),this._listenerCounter+=1),this._listeners.set(e.__alid,e)}},{key:"removeAuthListener",value:function(e){null!=e.__alid&&this._listeners.delete(e.__alid)}},{key:"getUserInfo",value:(l=a(regeneratorRuntime.mark(function e(){var t,n=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n.length>0&&void 0!==n[0]&&n[0],!this.userInfo||t){e.next=3;break}return e.abrupt("return",Promise.resolve(this.userInfo));case 3:return e.next=5,this._entryStore.handleAsync(this._entryStore.getREST().get("".concat(this._entryStore._baseURI,"auth/user"),null,!0),"getUserInfo");case 5:return this.userInfo=e.sent,e.abrupt("return",this.userInfo);case 7:case"end":return e.stop()}},e,this)})),function(){return l.apply(this,arguments)})},{key:"getUserEntry",value:(u=a(regeneratorRuntime.mark(function e(){var t,n,r=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.length>0&&void 0!==r[0]&&r[0],!this.userEntry||t){e.next=3;break}return e.abrupt("return",Promise.resolve(this.userEntry));case 3:return e.next=5,this.getUserInfo(t);case 5:return n=e.sent,e.next=8,this._entryStore.getEntry(this._entryStore.getEntryURI("_principals",n.id),{asyncContext:"getUserEntry"});case 8:return this.userEntry=e.sent,e.abrupt("return",this.userEntry);case 10:case"end":return e.stop()}},e,this)})),function(){return u.apply(this,arguments)})},{key:"login",value:(c=a(regeneratorRuntime.mark(function e(t,r,a){var i,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.userInfo||this.userInfo.user!==t){e.next=2;break}return e.abrupt("return",this.getUserInfo());case 2:return i={base:this._entryStore.getBaseURI(),user:t,password:r,maxAge:a},e.next=5,this._entryStore.handleAsync(this._entryStore.getREST().auth(i),"login");case 5:if("object"!==n(o=e.sent)||!o.user){e.next=8;break}return e.abrupt("return",o);case 8:return e.next=10,this._entryStore.getREST().get("".concat(this._entryStore._baseURI,"auth/user"),null,!0);case 10:return this.userInfo=e.sent,delete this.userEntry,this._entryStore.getCache().allNeedRefresh(),this.messageListeners("login",this.userInfo),e.abrupt("return",this.userInfo);case 15:case"end":return e.stop()}},e,this)})),function(e,t,n){return c.apply(this,arguments)})},{key:"logout",value:(s=a(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.userInfo||"guest"!==this.userInfo.user){e.next=2;break}return e.abrupt("return",this.getUserInfo());case 2:return e.next=4,this._entryStore.handleAsync(this._entryStore.getREST().auth({base:this._entryStore.getBaseURI(),logout:!0}),"logout");case 4:return delete this.userEntry,this._entryStore.getCache().allNeedRefresh(),this.userInfo={user:"guest",id:"_guest"},this.messageListeners("logout",this.userInfo),e.abrupt("return",this.userInfo);case 9:case"end":return e.stop()}},e,this)})),function(){return s.apply(this,arguments)})}])&&i(t.prototype,r),o&&i(t,o),e}();t.default=o},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._listenersIdx=new Map,this._cacheIdx=new Map,this._cacheIdxResource=new Map,this._cacheCtrl=new Map,this._listenerCounter=0}var t,r,a;return t=e,(r=[{key:"cache",value:function(e,t){var n=e.getURI(),r=this._cacheIdx.has(n);this._cacheIdx.set(n,e);var a=e.getResourceURI(),i=this._cacheIdxResource.has(a)?this._cacheIdxResource.get(a):new Set;i.has(e)||i.add(e),this._cacheIdxResource.set(a,i),this._cacheCtrl.set(n,{date:(new Date).getTime()}),r&&!0!==t&&this.messageListeners("refreshed",e)}},{key:"unCache",value:function(e){var t=e.getURI(),n=e.getResourceURI();this._cacheIdx.delete(t);var r=this._cacheIdxResource.get(n);r.size>0&&(r.delete(e),0===r.size&&this._cacheIdxResource.delete(n))}},{key:"setRefreshNeeded",value:function(e,t){var n=e.getURI(),r=this._cacheCtrl.get(n);if(null==r)throw new Error("No cache control of existing entry: ".concat(n));r.stale=!0,!0!==t&&this.messageListeners("needRefresh",e)}},{key:"cacheAll",value:function(e,t){var n=this;e.forEach(function(e){n.cache(e,t)})}},{key:"get",value:function(e){return this._cacheIdx.get(e)}},{key:"getByResourceURI",value:function(e){return new Set(this._cacheIdxResource.get(e))}},{key:"needRefresh",value:function(e){var t=e.getURI(),n=this._cacheCtrl.get(t);if(null==n)throw Error("No cache control of existing entry: ".concat(t));return!0===n.stale}},{key:"addCacheUpdateListener",value:function(e){null!=e.__clid&&(e.__clid="idx_".concat(this._listenerCounter),this._listenerCounter+=1),this._listenersIdx.set(e.__clid,e)}},{key:"removeCacheUpdateListener",value:function(e){null!=e.__clid&&this._listenersIdx.delete(e.__clid)}},{key:"messageListeners",value:function(e,t){this._listenersIdx.forEach(function(n){n(e,t)})}},{key:"allNeedRefresh",value:function(){var e=this;this._cacheIdx.forEach(function(t,n){e.setRefreshNeeded(e._cacheIdx.get(n),!0)},this),this.messageListeners("allEntriesNeedRefresh")}},{key:"clear",value:function(){this._cacheIdx=new Map,this._cacheIdxResource=new Map,this._cacheCtrl=new Map}}])&&n(t.prototype,r),a&&n(t,a),e}();t.default=r},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(171)),a=s(n(172)),i=s(n(93)),o=n(91);function s(e){return e&&e.__esModule?e:{default:e}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function l(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){u(i,r,a,o,s,"next",e)}function s(e){u(i,r,a,o,s,"throw",e)}o(void 0)})}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=n(464),f=function(e){var t=document.createElement("a"),n=document.createElement("a");return t.href=e,n.href=window.location.href,t.hostname===n.hostname&&t.port===n.port&&t.protocol===n.protocol&&"file:"!==n.protocol},h=function(){return parseInt((1e4*Math.random()).toString(),10)},m=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.timeout=3e4,this.headers={Accept:"application/json","Content-Type":"application/json; charset=UTF-8","X-Requested-With":null};(0,o.isBrowser)()&&(this.putFile=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"application/json";if(t.value){var r=new FormData,i=t.files;return Array.from(i).forEach(function(e,t){e instanceof File&&r.append(t.toString(),e)}),a.default.post(e).query({preventCache:h()}).accept(n).withCredentials().send(r)}})}var t,n,s,u,m,v;return t=e,(n=[{key:"auth",value:(v=l(regeneratorRuntime.mark(function e(t){var n,r,i,s,c,u,l,p,d,f,m,v,g,y,x,b,w,_;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.user,r=t.password,i=t.base,s=t.maxAge,c=void 0===s?604800:s,u=t.logout,l=void 0!==u&&u,delete this.headers.cookie,!l){e.next=6;break}return p=a.default.get("".concat(i,"auth/logout")).query({preventCache:h()}).accept("application/json").withCredentials().timeout({response:this.timeout}),Object.entries(this.headers).map(function(e){return p.set(e[0],e[1])}),e.abrupt("return",p);case 6:if(d={auth_username:encodeURIComponent(n),auth_password:encodeURIComponent(r),auth_maxage:c},!(0,o.isBrowser)()){e.next=9;break}return e.abrupt("return",this.post("".concat(i,"auth/cookie"),d,null,"application/x-www-form-urlencoded"));case 9:return f=Object.entries(d).reduce(function(e,t){return"".concat(e).concat(t.join("="),"&")},""),e.next=12,this.post("".concat(i,"auth/cookie"),f,null,"application/x-www-form-urlencoded");case 12:m=e.sent,v=m.headers["set-cookie"],g=!0,y=!1,x=void 0,e.prev=17,b=v[Symbol.iterator]();case 19:if(g=(w=b.next()).done){e.next=27;break}if(!(_=w.value).startsWith("auth_token=")){e.next=24;break}return this.headers.cookie=[_],e.abrupt("break",27);case 24:g=!0,e.next=19;break;case 27:e.next=33;break;case 29:e.prev=29,e.t0=e.catch(17),y=!0,x=e.t0;case 33:e.prev=33,e.prev=34,g||null==b.return||b.return();case 36:if(e.prev=36,!y){e.next=39;break}throw x;case 39:return e.finish(36);case 40:return e.finish(33);case 41:return e.abrupt("return",m);case 42:case"end":return e.stop()}},e,this,[[17,29,33,41],[34,,36,40]])})),function(e){return v.apply(this,arguments)})},{key:"get",value:(m=l(regeneratorRuntime.mark(function e(t){var n,s,c,u,l,p,m,v=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=v.length>1&&void 0!==v[1]?v[1]:null,s=v.length>2&&void 0!==v[2]&&v[2],delete(c=Object.assign({},this.headers))["Content-Type"],u=t,l="json",null==n){e.next=15;break}c.Accept=n,e.t0=n,e.next="application/json"===e.t0?11:"application/xml"===e.t0?12:"text/xml"===e.t0?12:14;break;case 11:return e.abrupt("break",15);case 12:return l="xml",e.abrupt("break",15);case 14:l="text";case 15:if(!(0,o.isBrowser)()||f(u)||s){e.next=17;break}return e.abrupt("return",new Promise(function(e,t){new RegExp("[?&]format=").test(u)||(u+="".concat(u.includes("?")?"&":"?","format=application/json")),a.default.get(u).use(d({timeout:1e6,callbackName:"cb".concat((0,r.default)(u).slice(0,7)).concat(h())})).then(function(t){e(t.body)},t)}));case 17:return p=a.default.get(u).accept(l).timeout({response:this.timeout}).query({preventCache:h()}).withCredentials(),"xml"===l&&(p.parse["application/xml"]=function(e,t){var n=new((0,o.isBrowser)()?window.DOMParser:i.default.DOMParser);return(0,o.isBrowser)()?n.parseFromString(e,"application/xml"):(e.text=n.parseFromString(e.text,"application/xml"),t(null,e),e.text)}),Object.entries(c).map(function(e){return p.set(e[0],e[1])}),e.next=22,p;case 22:if(200!==(m=e.sent).statusCode){e.next=27;break}if("text"!==l&&"text/xml"!==n){e.next=26;break}return e.abrupt("return",m.text);case 26:return e.abrupt("return",m.body);case 27:throw new Error("Resource could not be loaded: ".concat(m.text));case 28:case"end":return e.stop()}},e,this)})),function(e){return m.apply(this,arguments)})},{key:"post",value:function(e,t,n,r){var i=Object.assign({},this.headers);n&&(i["If-Unmodified-Since"]=n.toUTCString()),r&&(i["Content-Type"]=r);var o=a.default.post(e).query({"request.preventCache":h()});return t&&o.send(t).serialize(function(e){return Object.entries(e).map(function(e){return"".concat(e[0],"=").concat(e[1],"&")}).join("")}),o.withCredentials().timeout({response:this.timeout}),Object.entries(i).map(function(e){return o.set(e[0],e[1])}),o}},{key:"create",value:(u=l(regeneratorRuntime.mark(function e(t,n){var r,a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.post(t,n);case 2:return r=e.sent,!(a=r.headers.location)&&r.body&&(i=t.indexOf("?"),a=-1!==i?t.substr(0,t.indexOf("?")):t,a+="/entry/".concat(JSON.parse(r.body).entryId)),e.abrupt("return",a);case 6:case"end":return e.stop()}},e,this)})),function(e,t){return u.apply(this,arguments)})},{key:"put",value:function(e,t,n,r){var i=Object.assign({},this.headers);n&&(i["If-Unmodified-Since"]=n.toUTCString()),r?i["Content-Type"]=r:"object"===c(t)&&(i["Content-Type"]="application/json");var o=a.default.put(e).query({preventCache:h()}).send(t).withCredentials().timeout({response:this.timeout});return Object.entries(i).map(function(e){return o.set(e[0],e[1])}),o}},{key:"del",value:function(e,t){var n=Object.assign({},this.headers);delete n["Content-Type"],t&&(n["If-Unmodified-Since"]=t.toUTCString());var r=a.default.del(e).query({preventCache:h()}).withCredentials().timeout({response:this.timeout});return Object.entries(n).map(function(e){return r.set(e[0],e[1])}),r}},{key:"putFile",value:function(e,t,n){return this.post(e,t,null,n)}}])&&p(t.prototype,n),s&&p(t,s),e}();t.default=m},function(e,t,n){var r;!function(a){"use strict";function i(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,r,a,o){return i((s=i(i(t,e),i(r,o)))<<(c=a)|s>>>32-c,n);var s,c}function s(e,t,n,r,a,i,s){return o(t&n|~t&r,e,t,a,i,s)}function c(e,t,n,r,a,i,s){return o(t&r|n&~r,e,t,a,i,s)}function u(e,t,n,r,a,i,s){return o(t^n^r,e,t,a,i,s)}function l(e,t,n,r,a,i,s){return o(n^(t|~r),e,t,a,i,s)}function p(e,t){var n,r,a,o,p;e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var d=1732584193,f=-271733879,h=-1732584194,m=271733878;for(n=0;n<e.length;n+=16)r=d,a=f,o=h,p=m,d=s(d,f,h,m,e[n],7,-680876936),m=s(m,d,f,h,e[n+1],12,-389564586),h=s(h,m,d,f,e[n+2],17,606105819),f=s(f,h,m,d,e[n+3],22,-1044525330),d=s(d,f,h,m,e[n+4],7,-176418897),m=s(m,d,f,h,e[n+5],12,1200080426),h=s(h,m,d,f,e[n+6],17,-1473231341),f=s(f,h,m,d,e[n+7],22,-45705983),d=s(d,f,h,m,e[n+8],7,1770035416),m=s(m,d,f,h,e[n+9],12,-1958414417),h=s(h,m,d,f,e[n+10],17,-42063),f=s(f,h,m,d,e[n+11],22,-1990404162),d=s(d,f,h,m,e[n+12],7,1804603682),m=s(m,d,f,h,e[n+13],12,-40341101),h=s(h,m,d,f,e[n+14],17,-1502002290),d=c(d,f=s(f,h,m,d,e[n+15],22,1236535329),h,m,e[n+1],5,-165796510),m=c(m,d,f,h,e[n+6],9,-1069501632),h=c(h,m,d,f,e[n+11],14,643717713),f=c(f,h,m,d,e[n],20,-373897302),d=c(d,f,h,m,e[n+5],5,-701558691),m=c(m,d,f,h,e[n+10],9,38016083),h=c(h,m,d,f,e[n+15],14,-660478335),f=c(f,h,m,d,e[n+4],20,-405537848),d=c(d,f,h,m,e[n+9],5,568446438),m=c(m,d,f,h,e[n+14],9,-1019803690),h=c(h,m,d,f,e[n+3],14,-187363961),f=c(f,h,m,d,e[n+8],20,1163531501),d=c(d,f,h,m,e[n+13],5,-1444681467),m=c(m,d,f,h,e[n+2],9,-51403784),h=c(h,m,d,f,e[n+7],14,1735328473),d=u(d,f=c(f,h,m,d,e[n+12],20,-1926607734),h,m,e[n+5],4,-378558),m=u(m,d,f,h,e[n+8],11,-2022574463),h=u(h,m,d,f,e[n+11],16,1839030562),f=u(f,h,m,d,e[n+14],23,-35309556),d=u(d,f,h,m,e[n+1],4,-1530992060),m=u(m,d,f,h,e[n+4],11,1272893353),h=u(h,m,d,f,e[n+7],16,-155497632),f=u(f,h,m,d,e[n+10],23,-1094730640),d=u(d,f,h,m,e[n+13],4,681279174),m=u(m,d,f,h,e[n],11,-358537222),h=u(h,m,d,f,e[n+3],16,-722521979),f=u(f,h,m,d,e[n+6],23,76029189),d=u(d,f,h,m,e[n+9],4,-640364487),m=u(m,d,f,h,e[n+12],11,-421815835),h=u(h,m,d,f,e[n+15],16,530742520),d=l(d,f=u(f,h,m,d,e[n+2],23,-995338651),h,m,e[n],6,-198630844),m=l(m,d,f,h,e[n+7],10,1126891415),h=l(h,m,d,f,e[n+14],15,-1416354905),f=l(f,h,m,d,e[n+5],21,-57434055),d=l(d,f,h,m,e[n+12],6,1700485571),m=l(m,d,f,h,e[n+3],10,-1894986606),h=l(h,m,d,f,e[n+10],15,-1051523),f=l(f,h,m,d,e[n+1],21,-2054922799),d=l(d,f,h,m,e[n+8],6,1873313359),m=l(m,d,f,h,e[n+15],10,-30611744),h=l(h,m,d,f,e[n+6],15,-1560198380),f=l(f,h,m,d,e[n+13],21,1309151649),d=l(d,f,h,m,e[n+4],6,-145523070),m=l(m,d,f,h,e[n+11],10,-1120210379),h=l(h,m,d,f,e[n+2],15,718787259),f=l(f,h,m,d,e[n+9],21,-343485551),d=i(d,r),f=i(f,a),h=i(h,o),m=i(m,p);return[d,f,h,m]}function d(e){var t,n="",r=32*e.length;for(t=0;t<r;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function f(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function h(e){var t,n,r="";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),r+="0123456789abcdef".charAt(t>>>4&15)+"0123456789abcdef".charAt(15&t);return r}function m(e){return unescape(encodeURIComponent(e))}function v(e){return function(e){return d(p(f(e),8*e.length))}(m(e))}function g(e,t){return function(e,t){var n,r,a=f(e),i=[],o=[];for(i[15]=o[15]=void 0,a.length>16&&(a=p(a,8*e.length)),n=0;n<16;n+=1)i[n]=909522486^a[n],o[n]=1549556828^a[n];return r=p(i.concat(f(t)),512+8*t.length),d(p(o.concat(r),640))}(m(e),m(t))}function y(e,t,n){return t?n?g(t,e):h(g(t,e)):n?v(e):h(v(e))}void 0===(r=function(){return y}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";const r=n(419)("superagent"),a=n(426),i=n(434),o=n(446),s=n(71).parse,c=n(71).format,u=n(71).resolve;let l=n(186);const p=n(53),d=n(185),f=n(448).unzip,h=n(449),m=n(450),v=n(178),g=n(120),y=n(70),x=n(188),b=n(187),w=n(31),_=n(454),k=n(455),E=n(121);function S(e,n){return"function"==typeof n?new t.Request("GET",e).end(n):1==arguments.length?new t.Request("GET",e):new t.Request(e,n)}function R(){}function T(e){const t=`node-superagent/${_.version}`;e._header={"user-agent":t},e.header={"User-Agent":t}}function A(e,t){p.call(this),"string"!=typeof t&&(t=c(t)),this._agent=!1,this._formData=null,this.method=e,this.url=t,T(this),this.writable=!0,this._redirects=0,this.redirects("HEAD"===e?0:5),this.cookies="",this.qs={},this._query=[],this.qsRaw=this._query,this._redirectList=[],this._streamRequest=!1,this.once("end",this.clearTimeout.bind(this))}function D(e){return/[\/+]json($|[^-\w])/.test(e)}function O(e){return~[301,302,303,305,307,308].indexOf(e)}(t=e.exports=S).Request=A,t.agent=n(457),t.Response=o,m.define({"application/x-www-form-urlencoded":["form","urlencoded","form-data"]},!0),t.protocols={"http:":g,"https:":v},t.serialize={"application/x-www-form-urlencoded":x.stringify,"application/json":JSON.stringify},t.parse=n(459),w.inherits(A,p),k(A.prototype),A.prototype.attach=function(e,t,n){if(t){if(this._data)throw Error("superagent can't mix .send() and .attach()");let a=n||{};"string"==typeof n&&(a={filename:n}),"string"==typeof t?(a.filename||(a.filename=t),r("creating `fs.ReadStream` instance for file: %s",t),t=y.createReadStream(t)):!a.filename&&t.path&&(a.filename=t.path),this._getFormData().append(e,t,a)}return this},A.prototype._getFormData=function(){return this._formData||(this._formData=new i,this._formData.on("error",e=>{this.emit("error",e),this.abort()})),this._formData},A.prototype.agent=function(e){return arguments.length?(this._agent=e,this):this._agent},A.prototype.type=function(e){return this.set("Content-Type",~e.indexOf("/")?e:m.lookup(e))},A.prototype.accept=function(e){return this.set("Accept",~e.indexOf("/")?e:m.lookup(e))},A.prototype.query=function(e){return"string"==typeof e?this._query.push(e):h(this.qs,e),this},A.prototype.write=function(e,t){const n=this.request();return this._streamRequest||(this._streamRequest=!0),n.write(e,t)},A.prototype.pipe=function(e,t){return this.piped=!0,this.buffer(!1),this.end(),this._pipeContinue(e,t)},A.prototype._pipeContinue=function(e,t){return this.req.once("response",n=>{if(O(n.statusCode)&&this._redirects++!=this._maxRedirects)return this._redirect(n)._pipeContinue(e,t);if(this.res=n,this._emitResponse(),!this._aborted){if(this._shouldUnzip(n)){const r=b.createUnzip();r.on("error",t=>{t&&"Z_BUF_ERROR"===t.code?e.emit("end"):e.emit("error",t)}),n.pipe(r).pipe(e,t)}else n.pipe(e,t);n.once("end",()=>{this.emit("end")})}}),e},A.prototype.buffer=function(e){return this._buffer=!1!==e,this},A.prototype._redirect=function(e){let t=e.headers.location;if(!t)return this.callback(new Error("No location header for redirect"),e);r("redirect %s -> %s",this.url,t),t=u(this.url,t),e.resume();let n=this.req._headers;const a=s(t).host!==s(this.url).host;return 301!=e.statusCode&&302!=e.statusCode||(n=d.cleanHeader(this.req._headers,a),this.method="HEAD"==this.method?"HEAD":"GET",this._data=null),303==e.statusCode&&(n=d.cleanHeader(this.req._headers,a),this.method="GET",this._data=null),delete n.host,delete this.req,delete this._formData,T(this),this._endCalled=!1,this.url=t,this.qs={},this._query.length=0,this.set(n),this.emit("redirect",e),this._redirectList.push(this.url),this.end(this._callback),this},A.prototype.auth=function(e,t,n){1===arguments.length&&(t=""),"object"==typeof t&&null!==t&&(n=t,t=""),n||(n={type:"basic"});var r=function(e){return new Buffer(e).toString("base64")};return this._auth(e,t,n,r)},A.prototype.ca=function(e){return this._ca=e,this},A.prototype.key=function(e){return this._key=e,this},A.prototype.pfx=function(e){return"object"!=typeof e||Buffer.isBuffer(e)?this._pfx=e:(this._pfx=e.pfx,this._passphrase=e.passphrase),this},A.prototype.cert=function(e){return this._cert=e,this},A.prototype.request=function(){if(this.req)return this.req;const e={};try{const e=x.stringify(this.qs,{indices:!1,strictNullHandling:!0});e&&(this.qs={},this._query.push(e)),this._finalizeQueryString()}catch(e){return this.emit("error",e)}let n=this.url;const r=this._retries;if(0!=n.indexOf("http")&&(n=`http://${n}`),n=s(n),!0===/^https?\+unix:/.test(n.protocol)){n.protocol=`${n.protocol.split("+")[0]}:`;const t=n.path.match(/^([^\/]+)(.+)$/);e.socketPath=t[1].replace(/%2F/g,"/"),n.path=t[2]}e.method=this.method,e.port=n.port,e.path=n.path,e.host=n.hostname,e.ca=this._ca,e.key=this._key,e.pfx=this._pfx,e.cert=this._cert,e.passphrase=this._passphrase,e.agent=this._agent;const a=t.protocols[n.protocol],i=this.req=a.request(e);if(i.setNoDelay(!0),"HEAD"!=e.method&&i.setHeader("Accept-Encoding","gzip, deflate"),this.protocol=n.protocol,this.host=n.host,i.once("drain",()=>{this.emit("drain")}),i.once("error",e=>{this._aborted||this._retries===r&&(this.response||this.callback(e))}),n.auth){const e=n.auth.split(":");this.auth(e[0],e[1])}this.username&&this.password&&this.auth(this.username,this.password);for(const e in this.header)this.header.hasOwnProperty(e)&&i.setHeader(e,this.header[e]);if(this.cookies)if(this.header.hasOwnProperty("cookie")){const e=new E.CookieJar;e.setCookies(this.header.cookie.split(";")),e.setCookies(this.cookies.split(";")),i.setHeader("Cookie",e.getCookies(E.CookieAccessInfo.All).toValueString())}else i.setHeader("Cookie",this.cookies);return i},A.prototype.callback=function(e,t){if(this._shouldRetry(e,t))return this._retry();const n=this._callback||R;if(this.clearTimeout(),this.called)return console.warn("superagent: double callback bug");if(this.called=!0,!e)try{if(!this._isResponseOK(t)){let n="Unsuccessful HTTP response";t&&(n=g.STATUS_CODES[t.status]||n),(e=new Error(n)).status=t?t.status:void 0}}catch(t){e=t}if(!e)return n(null,t);e.response=t,this._maxRetries&&(e.retries=this._retries-1),e&&this.listeners("error").length>0&&this.emit("error",e),n(e,t)},A.prototype._isHost=function(e){return Buffer.isBuffer(e)||e instanceof p||e instanceof i},A.prototype._emitResponse=function(e,t){const n=new o(this);return this.response=n,n.redirects=this._redirectList,void 0!==e&&(n.body=e),n.files=t,this.emit("response",n),n},A.prototype.end=function(e){return this.request(),r("%s %s",this.method,this.url),this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=e||R,this._end()},A.prototype._end=function(){let e=this._data;const n=this.req;let i=this._buffer;const o=this.method;if(this._setTimeouts(),"HEAD"!=o&&!n._headerSent){if("string"!=typeof e){let r=n.getHeader("Content-Type");r&&(r=r.split(";")[0]);let a=t.serialize[r];!a&&D(r)&&(a=t.serialize["application/json"]),a&&(e=a(e))}e&&!n.getHeader("Content-Length")&&n.setHeader("Content-Length",Buffer.isBuffer(e)?e.length:Buffer.byteLength(e))}n.once("response",e=>{if(r("%s %s -> %s",this.method,this.url,e.statusCode),this._responseTimeoutTimer&&clearTimeout(this._responseTimeoutTimer),this.piped)return;const o=this._maxRedirects,s=d.type(e.headers["content-type"]||"")||"text/plain",c=s.split("/")[0],u="multipart"==c,l=O(e.statusCode);let p=this._parser;const h=this._responseType;if(this.res=e,l&&this._redirects++!=o)return this._redirect(e);if("HEAD"==this.method)return this.emit("end"),void this.callback(null,this._emitResponse());if(this._shouldUnzip(e)&&f(n,e),!p)if(h)p=t.parse.image,i=!0;else if(u){const e=new a.IncomingForm;p=e.parse.bind(e),i=!0}else!function(e){const t=e.split("/")[0];return"image"==t||"video"==t}(s)?t.parse[s]?p=t.parse[s]:"text"==c?(p=t.parse.text,i=!1!==i):D(s)?(p=t.parse["application/json"],i=!1!==i):i&&(p=t.parse.text):(p=t.parse.image,i=!0);(void 0===i&&function(e){const t=e.split("/"),n=t[0],r=t[1];return"text"==n||"x-www-form-urlencoded"==r}(s)||D(s))&&(i=!0);let m=!1;if(i){let t=this._maxResponseSize||2e8;e.on("data",n=>{if((t-=n.byteLength||n.length)<0){const t=Error("Maximum response size reached");t.code="ETOOLARGE",m=!1,e.destroy(t)}})}if(p)try{m=i,p(e,(e,t,n)=>{if(!this.timedout)return e&&!this._aborted?this.callback(e):void(m&&(this.emit("end"),this.callback(null,this._emitResponse(t,n))))})}catch(e){return void this.callback(e)}if(this.res=e,i)e.once("error",e=>{m=!1,this.callback(e,null)}),m||e.once("end",()=>{r("end %s %s",this.method,this.url),this.emit("end"),this.callback(null,this._emitResponse())});else{if(r("unbuffered %s %s",this.method,this.url),this.callback(null,this._emitResponse()),u)return;e.once("end",()=>{r("end %s %s",this.method,this.url),this.emit("end")})}}),this.emit("request",this);const s=()=>{const e=n.getHeader("Content-Length");let t=0;const r=new p.Transform;return r._transform=(n,r,a)=>{t+=n.length,this.emit("progress",{direction:"upload",lengthComputable:!0,loaded:t,total:e}),a(null,n)},r},c=this._formData;if(c){const e=c.getHeaders();for(const t in e)r('setting FormData header: "%s: %s"',t,e[t]),n.setHeader(t,e[t]);c.getLength((e,t)=>{r("got FormData Content-Length: %s",t),"number"==typeof t&&n.setHeader("Content-Length",t),c.pipe(s()).pipe(n)})}else Buffer.isBuffer(e)?(e=>{const t=new p.Readable,n=e.length,r=n%16384,a=n-r;for(let n=0;n<a;n+=16384){const r=e.slice(n,n+16384);t.push(r)}if(r>0){const n=e.slice(-r);t.push(n)}return t.push(null),t})(e).pipe(s()).pipe(n):n.end(e);return this},A.prototype._shouldUnzip=e=>204!==e.statusCode&&304!==e.statusCode&&("0"!==e.headers["content-length"]&&/^\s*(?:deflate|gzip)\s*$/.test(e.headers["content-encoding"])),-1==l.indexOf("del")&&(l=l.slice(0)).push("del"),l.forEach(e=>{const t=e;e=(e="del"==e?"delete":e).toUpperCase(),S[t]=(t,n,r)=>{const a=S(e,t);return"function"==typeof n&&(r=n,n=null),n&&("GET"===e||"HEAD"===e?a.query(n):a.send(n)),r&&a.end(r),a}})},function(e,t,n){"use strict";e.exports=function(e){function t(e){for(var t=0,n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){var n;function o(){if(o.enabled){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var i=o,s=Number(new Date),c=s-(n||s);i.diff=c,i.prev=n,i.curr=s,n=s,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var u=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,n){if("%%"===e)return e;u++;var a=r.formatters[n];if("function"==typeof a){var o=t[u];e=a.call(i,o),t.splice(u,1),u--}return e}),r.formatArgs.call(i,t),(i.log||r.log).apply(i,t)}}return o.namespace=e,o.enabled=r.enabled(e),o.useColors=r.useColors(),o.color=t(e),o.destroy=a,o.extend=i,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function a(){var e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){return r(this.namespace+(void 0===t?":":t)+e)}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){r.enable("")},r.enable=function(e){var t;r.save(e),r.names=[],r.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),a=n.length;for(t=0;t<a;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){var i=r.instances[t];i.enabled=r.enabled(i.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(421),Object.keys(e).forEach(function(t){r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("buffer")},function(e,t){e.exports=require("string_decoder")},function(e,t){e.exports=require("https")},function(e,t,n){var r=n(180),a=n(181);e.exports=function(e,t,n,i){var o=n.keyedList?n.keyedList[n.index]:n.index;n.jobs[o]=function(e,t,n,a){var i;i=2==e.length?e(n,r(a)):e(n,t,r(a));return i}(t,o,e[o],function(e,t){o in n.jobs&&(delete n.jobs[o],e?a(n):n.results[o]=t,i(e,n.results))})}},function(e,t,n){var r=n(443);e.exports=function(e){var t=!1;return r(function(){t=!0}),function(n,a){t?e(n,a):r(function(){e(n,a)})}}},function(e,t){e.exports=function(e){Object.keys(e.jobs).forEach(function(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}.bind(e)),e.jobs={}}},function(e,t){e.exports=function(e,t){var n=!Array.isArray(e),r={index:0,keyedList:n||t?Object.keys(e):null,jobs:{},results:n?{}:[],size:n?Object.keys(e).length:e.length};t&&r.keyedList.sort(n?t:function(n,r){return t(e[n],e[r])});return r}},function(e,t,n){var r=n(181),a=n(180);e.exports=function(e){if(!Object.keys(this.jobs).length)return;this.index=this.size,r(this),a(e)(null,this.results)}},function(e,t,n){var r=n(179),a=n(182),i=n(183);function o(e,t){return e<t?-1:e>t?1:0}e.exports=function(e,t,n,o){var s=a(e,n);return r(e,t,s,function n(a,i){a?o(a,i):(s.index++,s.index<(s.keyedList||e).length?r(e,t,s,n):o(null,s.results))}),i.bind(s,o)},e.exports.ascending=o,e.exports.descending=function(e,t){return-1*o(e,t)}},function(e,t,n){"use strict";t.type=function(e){return e.split(/ *; */).shift()},t.params=function(e){return e.split(/ *; */).reduce(function(e,t){var n=t.split(/ *= */),r=n.shift(),a=n.shift();return r&&a&&(e[r]=a),e},{})},t.parseLinks=function(e){return e.split(/ *, */).reduce(function(e,t){var n=t.split(/ *; */),r=n[0].slice(1,-1);return e[n[1].split(/ *= */)[1].slice(1,-1)]=r,e},{})},t.cleanHeader=function(e,t){return delete e["content-type"],delete e["content-length"],delete e["transfer-encoding"],delete e.host,t&&(delete e.authorization,delete e.cookie),e}},function(e,t,n){"use strict";
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */var r=n(120);e.exports=r.METHODS&&r.METHODS.map(function(e){return e.toLowerCase()})||["get","post","put","head","delete","options","trace","copy","lock","mkcol","move","purge","propfind","proppatch","unlock","report","mkactivity","checkout","merge","m-search","notify","subscribe","unsubscribe","patch","search","connect"]},function(e,t){e.exports=require("zlib")},function(e,t,n){"use strict";var r=n(452),a=n(453),i=n(190);e.exports={formats:i,parse:a,stringify:r}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),i=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:i,assign:function(e,t){return Object.keys(t).reduce(function(e,n){return e[n]=t[n],e},e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],i=a.obj[a.prop],o=Object.keys(i),s=0;s<o.length;++s){var c=o[s],u=i[c];"object"==typeof u&&null!==u&&-1===n.indexOf(u)&&(t.push({obj:i,prop:c}),n.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(Array.isArray(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n){if(0===e.length)return e;var r="string"==typeof e?e:String(e);if("iso-8859-1"===n)return escape(r).replace(/%u[0-9a-f]{4}/gi,function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"});for(var i="",o=0;o<r.length;++o){var s=r.charCodeAt(o);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?i+=r.charAt(o):s<128?i+=a[s]:s<2048?i+=a[192|s>>6]+a[128|63&s]:s<55296||s>=57344?i+=a[224|s>>12]+a[128|s>>6&63]+a[128|63&s]:(o+=1,s=65536+((1023&s)<<10|1023&r.charCodeAt(o)),i+=a[240|s>>18]+a[128|s>>12&63]+a[128|s>>6&63]+a[128|63&s])}return i},isBuffer:function(e){return null!=e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,n,a){if(!n)return t;if("object"!=typeof n){if(Array.isArray(t))t.push(n);else{if("object"!=typeof t)return[t,n];(a&&(a.plainObjects||a.allowPrototypes)||!r.call(Object.prototype,n))&&(t[n]=!0)}return t}if("object"!=typeof t)return[t].concat(n);var o=t;return Array.isArray(t)&&!Array.isArray(n)&&(o=i(t,a)),Array.isArray(t)&&Array.isArray(n)?(n.forEach(function(n,i){r.call(t,i)?t[i]&&"object"==typeof t[i]?t[i]=e(t[i],n,a):t.push(n):t[i]=n}),t):Object.keys(n).reduce(function(t,i){var o=n[i];return r.call(t,i)?t[i]=e(t[i],o,a):t[i]=o,t},o)}}},function(e,t,n){"use strict";var r=String.prototype.replace,a=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return r.call(e,a,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(171)),a=n(41),i=(o(n(115)),o(n(89)),o(n(122)));function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u=function(e){return encodeURIComponent(e.replace(/:/g,"\\:").replace(/\(/g,"\\(").replace(/\)/g,"\\)"))},l=function(e){return(0,r.default)(a.namespaces.expand(e)).substr(0,8)},p=function(e,t,n){var r=t.trim().replace(/\s\s+/g," ");return 1===(r=function(e){return 0===e.indexOf("title")||0===e.indexOf("tag.literal")||0===e.indexOf("metadata.predicate.literal")&&0!==e.indexOf("metadata.predicate.literal_")||0===e.indexOf("related.metadata.predicate.literal")&&0!==e.indexOf("related.metadata.predicate.literal_")}(e)&&!0!==n?r.split(" ").map(function(e){return e.length<15?u(e):u(e.substr(0,15))}):function(e){return e.indexOf("predicate.literal_s")>0||-1===e.indexOf("predicate.literal")}(e)?-1===r.indexOf(" ")?[u(r)]:['"'.concat(u(r),'"')]:r.split(" ").map(function(e){return u(e)})).length?r[0]:"(".concat(r.join("+AND+"),")")},d=function e(t,n){var r=[];return Object.keys(t).forEach(function(n){var i=t[n];switch(i=Array.isArray(i)?i.map(function(e){return a.namespaces.expand(e)}):a.namespaces.expand(i),n){case"or":r.push(e(i,!1));break;case"and":r.push(e(i,!0));break;default:if("string"==typeof i)r.push("".concat(n,":").concat(p(n,i)));else if(Array.isArray(i)){var o=[];i.forEach(function(e){o.push("".concat(n,":").concat(p(n,e)))}),o.length>1?r.push("(".concat(o.join("+OR+"),")")):r.push("".concat(o.join("+OR+")))}else c(i)}}),r.length>1?"(".concat(r.join(n?"+AND+":"+OR+"),")"):r.join("".concat(n?"+AND+":"+OR+"))},f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entrystore=t,this.properties=[],this.relatedProperties=[],this.params=new Map,this.modifiers=new Map,this._and=new Set,this._or=new Set,this.facetpredicates={},this.relatedFacetpredicates={}}var t,n,r;return t=e,(n=[{key:"_q",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return this.params.set(e,t),null===n&&this.modifiers.set(e,n),this}},{key:"title",value:function(e,t){return this._q("title",e,t)}},{key:"description",value:function(e,t){return this._q("description",e,t)}},{key:"tagLiteral",value:function(e,t){return this._q("tag.literal",e,t)}},{key:"tagURI",value:function(e,t){return this._q("tag.uri",e,t)}},{key:"lang",value:function(e,t){return this._q("lang",e,t)}},{key:"all",value:function(e,t){return this._q("all",e,t)}},{key:"subject",value:function(e,t){return this._q("metadata.subject",e,t)}},{key:"predicate",value:function(e,t){return this._q("metadata.predicate",e,t)}},{key:"objectLiteral",value:function(e,t){return this._q("metadata.object.literal",e,t)}},{key:"objectUri",value:function(e,t){return this._q("metadata.object.uri",e,t)}},{key:"resource",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._q("resource",e,t)}},{key:"uri",value:function(e,t){return this._q("uri",e,t)}},{key:"rdfType",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return Array.isArray(e)?this._q("rdfType",e.map(function(e){return a.namespaces.expand(e)}),t):this._q("rdfType",a.namespaces.expand(e),t)}},{key:"creator",value:function(e,t){return this._q("creator",e,t)}},{key:"contributors",value:function(e,t){return this._q("contributors",e,t)}},{key:"lists",value:function(e,t){return this._q("lists",e,t)}},{key:"created",value:function(e,t){return this._q("created",e,t)}},{key:"modified",value:function(e,t){return this._q("modified",e,t)}},{key:"entryType",value:function(e,t){return this._q("entryType",e,t)}},{key:"graphType",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this._q("graphType",e,t)}},{key:"resourceType",value:function(e,t){return this._q("resourceType",e,t)}},{key:"publicRead",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._q("public",!0===e?"true":"false")}},{key:"admin",value:function(e,t){return this._q("acl.admin",e,t)}},{key:"metadataRead",value:function(e,t){return this._q("acl.metadata.r",e,t)}},{key:"metadataWrite",value:function(e,t){return this._q("acl.metadata.rw",e,t)}},{key:"resourceRead",value:function(e,t){return this._q("acl.resource.r",e,t)}},{key:"resourceWrite",value:function(e,t){return this._q("acl.resource.rw",e,t)}},{key:"status",value:function(e,t){return this._q("status",e,t)}},{key:"context",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=function(e){return e&&e.getResourceURI?e.getResourceURI():"string"==typeof e&&""!==e?0===e.indexOf("http")?e:t._entrystore.getContextById(e).getResourceURI():null};if(Array.isArray(e)){var a=e.map(r).filter(function(e){return null!==e});a.length>0&&this._q("context",a,n)}else{var i=r(e);if(null!==i)return this._q("context",i,n)}return this}},{key:"or",value:function(e){return this._or.add(e),this}},{key:"and",value:function(e){return this._and.add(e),this}},{key:"title_lang",value:function(e,t){}},{key:"titleWithLanguage",value:function(e,t){return this._title_lang={value:e,language:t},this}},{key:"literalProperty",value:function(e,t,n){var r,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"ngram",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=l(e);switch(a){case"text":r="literal_t";break;case"string":r="literal_s";break;case"ngram":default:r="literal"}return(i?this.relatedProperties:this.properties).push({md5:o,pred:e,object:t,modifier:n,nodetype:r}),this}},{key:"integerProperty",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=l(e);return(r?this.relatedProperties:this.properties).push({md5:a,pred:e,object:t,modifier:n,nodetype:"integer"}),this}},{key:"uriProperty",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=l(e);return(r?this.relatedProperties:this.properties).push({md5:i,pred:e,object:Array.isArray(t)?t.map(function(e){return a.namespaces.expand(e)}):a.namespaces.expand(t),modifier:n,nodetype:"uri"}),this}},{key:"limit",value:function(e){return this._limit=e,this}},{key:"getLimit",value:function(){return this._limit}},{key:"sort",value:function(e){return this._sort=e,this}},{key:"offset",value:function(e){return this._offset=e,this}},{key:"facet",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return this.facets=this.facets||[],t&&(this.facet2predicate=this.facet2predicate||{},this.facet2predicate[e]=a.namespaces.expand(t),n?this.relatedFacetpredicates[t]=!0:this.facetpredicates[t]=!0),this.facets.push(e),this}},{key:"literalFacet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.facet("".concat(t?"related.":"","metadata.predicate.literal_s.").concat(l(e)),e,t),this}},{key:"uriFacet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.facet("".concat(t?"related.":"","metadata.predicate.uri.").concat(l(e)),e,t),this}},{key:"integerFacet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.facet("".concat(t?"related.":"","metadata.predicate.integer.").concat(l(e)),e,t),this}},{key:"disjunctiveProperties",value:function(){return this.disjunctiveProperties=!0,this}},{key:"disjunctive",value:function(){return this.disjunctive=!0,this}},{key:"list",value:function(e){return new i.default(this._entrystore,this,e)}},{key:"getQuery",value:function(){var e=this,t=[];if(null!=this._title_lang&&t.push("title.".concat(this._title_lang.lang,":").concat(p(this._title_lang.lang,this._title_lang.value))),this.params.forEach(function(n,r){var a=e.modifiers.get(r);if("string"==typeof n&&""!==n)!0===a||"not"===a?t.push("NOT(".concat(r,":").concat(p(r,n),")")):t.push("".concat(r,":").concat(p(r,n)));else if(Array.isArray(n)&&n.length>0){var i=[];n.forEach(function(e){"string"==typeof e&&i.push("".concat(r,":").concat(p(r,e)))}),!0===a||"not"===a?t.push("NOT(".concat(i.join("+OR+"),")")):"and"===a?t.push("(".concat(i.join("+AND+"),")")):t.push("(".concat(i.join("+OR+"),")"))}}),this.relatedProperties.length>0){var n=[];this.relatedProperties.forEach(function(t){var r=t.object,a="related.metadata.predicate.".concat(t.nodetype,".").concat(t.md5);"string"==typeof r?n.push("".concat(a,":").concat(p(a,r,e.relatedFacetpredicates[t.pred]))):Array.isArray(r)&&r.length>0&&r.forEach(function(r){n.push("".concat(a,":").concat(p(a,r,e.relatedFacetpredicates[t.pred])))})}),t.push("(".concat(n.join("+OR+"),")"))}if(this.disjunctiveProperties||this.disjunctive){var r=[];this.properties.forEach(function(t){var n=t.object,a="metadata.predicate.".concat(t.nodetype,".").concat(t.md5);"string"==typeof n?r.push("".concat(a,":").concat(p(a,n,e.facetpredicates[t.pred]))):Array.isArray(n)&&n.length>0&&n.forEach(function(n){r.push("".concat(a,":").concat(p(a,n,e.facetpredicates[t.pred])))})}),r.length>0&&t.push("(".concat(r.join("+OR+"),")"))}else this.properties.forEach(function(n){var r=n.object,a="metadata.predicate.".concat(n.nodetype,".").concat(n.md5);if("string"==typeof r)!0===n.modifier||"not"===n.modifier?t.push("NOT(".concat(a,":").concat(p(a,r,e.facetpredicates[n.pred]),")")):t.push("".concat(a,":").concat(p(a,r,e.facetpredicates[n.pred])));else if(Array.isArray(r)&&r.length>0){var i=[];r.forEach(function(t){i.push("".concat(a,":").concat(p(a,t,e.facetpredicates[n.pred])))},e),!0===n.modifier||"not"===n.modifier?t.push("NOT(".concat(i.join("+OR+"),")")):"and"===n.modifier?t.push("(".concat(i.join("+AND+"),")")):t.push("(".concat(i.join("+OR+"),")"))}},this);this._and.forEach(function(e){t.push(d(e,!0))}),this._or.forEach(function(e){t.push(d(e,!1))});var a="";return null!=this._limit&&(a="&limit=".concat(this._limit)),this._offset&&(a="".concat(a,"&offset=").concat(this._offset)),this._sort&&(a="".concat(a,"&sort=").concat(this._sort||"score+asc")),this.facets&&(a+="&facetFields=".concat(this.facets.join(","))),"".concat(this._entrystore.getBaseURI(),"search?type=solr&query=").concat(t.join(this.disjunctive?"+OR":"+AND+")).concat(a)}},{key:"getEntries",value:function(e){return this.list().getEntries(e)}},{key:"forEach",value:function(e){return this.list().forEach(e)}}])&&s(t.prototype,n),r&&s(t,r),e}();t.default=f},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(93)),a=s(n(39)),i=s(n(40)),o=n(91);function s(e){return e&&e.__esModule?e:{default:e}}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,p(t).apply(this,arguments))}var n,s,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,i.default),n=t,(s=[{key:"putFile",value:function(e,t){var n,r=this;if((0,o.isBrowser)()&&e instanceof Node){if(null==e.name||""===e.name)throw new Error("Failure, cannot upload resource from input element unless a name attribute is provided.");n=a.default.getPutFileURI(this.getResourceURI())}else n=this.getResourceURI();var i=this.getEntryStore();return i.handleAsync(i.getREST().putFile(n,e,t).then(function(e){return r.getEntry(!0).setRefreshNeeded(),e}),"putFile")}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"application/json",n=this.getEntryStore();return n.handleAsync(n.getREST().put(this.getResourceURI(),e,null,t),"putFile")}},{key:"putText",value:function(e){return this.put(e,"text/plain")}},{key:"putJSON",value:function(e){return this.put(JSON.stringify(e))}},{key:"putXML",value:function(e){var t=e,n=(0,o.isBrowser)()?window.XMLSerializer:r.default.XMLSerializer;if(!(0,o.isBrowser)()||t instanceof Document)try{t=(new n).serializeToString(t)}catch(e){try{t=t.xml}catch(e){throw new Error("Xmlserializer not supported")}}else if("string"!=typeof t)throw new Error("Unsupported format of parameter xml to method putAsXML");return this.put(t,"text/xml")}},{key:"get",value:function(){var e=this.getEntry(!0).getEntryInfo().getFormat(),t=this.getEntryStore();return t.handleAsync(t.getREST().get(this.getResourceURI(),e),"getFile")}},{key:"getText",value:function(){return this.getEntryStore().handleAsync(this.getEntryStore().getREST().get(this.getResourceURI(),"text/plain",!0),"getFile")}},{key:"getJSON",value:function(){var e=this.getEntryStore();return e.handleAsync(e.getREST().get(this.getResourceURI(),"application/json"),"getFile")}},{key:"getXML",value:function(){var e=this.getEntryStore();return e.handleAsync(e.getREST().get(this.getResourceURI(),"text/xml"),"getFile")}}])&&u(n.prototype,s),c&&u(n,c),t}();t.default=f},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(92)),a=i(n(69));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e,t,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var a=Object.getOwnPropertyDescriptor(r,t);return a.get?a.get.call(n):a.value}})(e,t,n||e)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,l(t).apply(this,arguments))}var n,i,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,r.default),n=t,(i=[{key:"getName",value:function(){return this._name}},{key:"setName",value:function(e){var t=this,n=this._name;return this._name=e,this._entryStore.handleAsync(this._entryStore.getREST().put("".concat(this.getEntryURI(),"/name"),JSON.stringify({name:e})).then(function(e){var n=t.getEntry(!0);return n&&(n.getEntryInfo()._name=e),e},function(e){throw t._name=n,e}),"setGroupName")}},{key:"getHomeContext",value:function(){var e=this.getEntryStore(),t=this.getEntry(!0),n=t.getEntryInfo().getGraph().findFirstValue(t.getResourceURI(),a.default.homeContext);if(null!=n)return e.getEntryId(n)}},{key:"setHomeContext",value:function(e,t){var n=this.getEntryStore().getResourceURI("_contexts",e),r=this.getEntry(!0),i=r.getEntryInfo().getGraph();if(i.findAndRemove(r.getResourceURI(),a.default.homeContext),i.add(r.getResourceURI(),a.default.homeContext,{type:"uri",value:n}),!0!==t)return r.getEntryInfo().commit()}},{key:"_update",value:function(e,n){u(l(t.prototype),"_update",this).call(this,e,n),this._name=e.name}}])&&s(n.prototype,i),o&&s(n,o),t}();t.default=d},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"factory",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"html",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"promiseUtil",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"rest",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"solr",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"types",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"Auth",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"Cache",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"Context",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"Entry",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"EntryInfo",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"EntryStore",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"EntryStoreUtil",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"File",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"Graph",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"Group",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"List",{enumerable:!0,get:function(){return x.default}}),Object.defineProperty(t,"Pipeline",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"PrototypeEntry",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(t,"Resource",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"SearchList",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(t,"String",{enumerable:!0,get:function(){return E.default}}),Object.defineProperty(t,"User",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(t,"terms",{enumerable:!0,get:function(){return R.default}}),Object.defineProperty(t,"utils",{enumerable:!0,get:function(){return T.default}}),Object.defineProperty(t,"namespaces",{enumerable:!0,get:function(){return A.namespaces}}),n(196),n(415);var r=D(n(39)),a=D(n(468)),i=D(n(469)),o=D(n(170)),s=D(n(191)),c=D(n(52)),u=D(n(168)),l=D(n(169)),p=D(n(115)),d=D(n(118)),f=D(n(124)),h=D(n(89)),m=D(n(470)),v=D(n(193)),g=D(n(88)),y=D(n(194)),x=D(n(92)),b=D(n(116)),w=D(n(117)),_=D(n(40)),k=D(n(122)),E=D(n(125)),S=D(n(123)),R=D(n(69)),T=D(n(91)),A=n(41);function D(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){n(197),n(405),e.exports=n(47)},function(e,t,n){n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(77),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(149),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(342),n(343),n(345),n(346),n(349),n(350),n(351),n(352),n(353),n(354),n(355),n(356),n(357),n(358),n(359),n(360),n(361),n(362),n(363),n(364),n(365),n(366),n(367),n(368),n(369),n(370),n(371),n(372),n(373),n(374),n(375),n(376),n(377),n(378),n(379),n(380),n(381),n(382),n(383),n(384),n(385),n(386),n(387),n(388),n(389),n(390),n(391),n(392),n(393),n(394),n(395),n(396),n(397),n(398),n(399),n(400),n(401),n(402),n(403),n(404),e.exports=n(47)},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(32),o=n(6),s=n(132),c=n(1),u=n(11),l=n(44),p=n(3),d=n(4),f=n(10),h=n(18),m=n(25),v=n(42),g=n(35),y=n(60),x=n(43),b=n(134),w=n(98),_=n(15),k=n(9),E=n(72),S=n(13),R=n(16),T=n(55),A=n(73),D=n(57),O=n(56),I=n(7),j=n(135),C=n(17),N=n(26),L=n(19),q=n(12).forEach,U=A("hidden"),P=I("toPrimitive"),M=L.set,F=L.getterFor("Symbol"),z=Object.prototype,B=a.Symbol,V=a.JSON,G=V&&V.stringify,Y=_.f,H=k.f,W=b.f,$=E.f,J=T("symbols"),Z=T("op-symbols"),X=T("string-to-symbol-registry"),K=T("symbol-to-string-registry"),Q=T("wks"),ee=a.QObject,te=!ee||!ee.prototype||!ee.prototype.findChild,ne=o&&c(function(){return 7!=g(H({},"a",{get:function(){return H(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=Y(z,t);r&&delete z[t],H(e,t,n),r&&e!==z&&H(z,t,r)}:H,re=function(e,t){var n=J[e]=g(B.prototype);return M(n,{type:"Symbol",tag:e,description:t}),o||(n.description=t),n},ae=s&&"symbol"==typeof B.iterator?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof B},ie=function(e,t,n){e===z&&ie(Z,t,n),d(e);var r=m(t,!0);return d(n),u(J,r)?(n.enumerable?(u(e,U)&&e[U][r]&&(e[U][r]=!1),n=g(n,{enumerable:v(0,!1)})):(u(e,U)||H(e,U,v(1,{})),e[U][r]=!0),ne(e,r,n)):H(e,r,n)},oe=function(e,t){d(e);var n=h(t),r=y(n).concat(le(n));return q(r,function(t){o&&!se.call(n,t)||ie(e,t,n[t])}),e},se=function(e){var t=m(e,!0),n=$.call(this,t);return!(this===z&&u(J,t)&&!u(Z,t))&&(!(n||!u(this,t)||!u(J,t)||u(this,U)&&this[U][t])||n)},ce=function(e,t){var n=h(e),r=m(t,!0);if(n!==z||!u(J,r)||u(Z,r)){var a=Y(n,r);return!a||!u(J,r)||u(n,U)&&n[U][r]||(a.enumerable=!0),a}},ue=function(e){var t=W(h(e)),n=[];return q(t,function(e){u(J,e)||u(D,e)||n.push(e)}),n},le=function(e){var t=e===z,n=W(t?Z:h(e)),r=[];return q(n,function(e){!u(J,e)||t&&!u(z,e)||r.push(J[e])}),r};s||(R((B=function(){if(this instanceof B)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=O(e),n=function(e){this===z&&n.call(Z,e),u(this,U)&&u(this[U],t)&&(this[U][t]=!1),ne(this,t,v(1,e))};return o&&te&&ne(z,t,{configurable:!0,set:n}),re(t,e)}).prototype,"toString",function(){return F(this).tag}),E.f=se,k.f=ie,_.f=ce,x.f=b.f=ue,w.f=le,o&&(H(B.prototype,"description",{configurable:!0,get:function(){return F(this).description}}),i||R(z,"propertyIsEnumerable",se,{unsafe:!0})),j.f=function(e){return re(I(e),e)}),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:B}),q(y(Q),function(e){C(e)}),r({target:"Symbol",stat:!0,forced:!s},{for:function(e){var t=String(e);if(u(X,t))return X[t];var n=B(t);return X[t]=n,K[n]=t,n},keyFor:function(e){if(!ae(e))throw TypeError(e+" is not a symbol");if(u(K,e))return K[e]},useSetter:function(){te=!0},useSimple:function(){te=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!o},{create:function(e,t){return void 0===t?g(e):oe(g(e),t)},defineProperty:ie,defineProperties:oe,getOwnPropertyDescriptor:ce}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ue,getOwnPropertySymbols:le}),r({target:"Object",stat:!0,forced:c(function(){w.f(1)})},{getOwnPropertySymbols:function(e){return w.f(f(e))}}),V&&r({target:"JSON",stat:!0,forced:!s||c(function(){var e=B();return"[null]"!=G([e])||"{}"!=G({a:e})||"{}"!=G(Object(e))})},{stringify:function(e){for(var t,n,r=[e],a=1;arguments.length>a;)r.push(arguments[a++]);if(n=t=r[1],(p(t)||void 0!==e)&&!ae(e))return l(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ae(t))return t}),r[1]=t,G.apply(V,r)}}),B.prototype[P]||S(B.prototype,P,B.prototype.valueOf),N(B,"Symbol"),D[U]=!0},function(e,t,n){n(17)("asyncIterator")},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(2),o=n(11),s=n(3),c=n(9).f,u=n(130),l=i.Symbol;if(a&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var p={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new l(e):void 0===e?l():l(e);return""===e&&(p[t]=!0),t};u(d,l);var f=d.prototype=l.prototype;f.constructor=d;var h=f.toString,m="Symbol(test)"==String(l("test")),v=/^Symbol\((.*)\)[^)]+$/;c(f,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,t=h.call(e);if(o(p,e))return"";var n=m?t.slice(7,-1):t.replace(v,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},function(e,t,n){n(17)("hasInstance")},function(e,t,n){n(17)("isConcatSpreadable")},function(e,t,n){n(17)("iterator")},function(e,t,n){n(17)("match")},function(e,t,n){n(17)("matchAll")},function(e,t,n){n(17)("replace")},function(e,t,n){n(17)("search")},function(e,t,n){n(17)("species")},function(e,t,n){n(17)("split")},function(e,t,n){n(17)("toPrimitive")},function(e,t,n){n(17)("toStringTag")},function(e,t,n){n(17)("unscopables")},function(e,t,n){var r=n(0),a=n(136);r({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(e,t,n){n(0)({target:"Object",stat:!0,sham:!n(6)},{create:n(35)})},function(e,t,n){var r=n(0),a=n(6);r({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperty:n(9).f})},function(e,t,n){var r=n(0),a=n(6);r({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperties:n(99)})},function(e,t,n){var r=n(0),a=n(137).entries;r({target:"Object",stat:!0},{entries:function(e){return a(e)}})},function(e,t,n){var r=n(0),a=n(62),i=n(1),o=n(3),s=n(45).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i(function(){c(1)}),sham:!a},{freeze:function(e){return c&&o(e)?c(s(e)):e}})},function(e,t,n){var r=n(0),a=n(63),i=n(46);r({target:"Object",stat:!0},{fromEntries:function(e){var t={};return a(e,function(e,n){i(t,e,n)},void 0,!0),t}})},function(e,t,n){var r=n(0),a=n(1),i=n(18),o=n(15).f,s=n(6),c=a(function(){o(1)});r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(e,t){return o(i(e),t)}})},function(e,t,n){var r=n(0),a=n(6),i=n(96),o=n(18),s=n(15),c=n(46);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(e){for(var t,n,r=o(e),a=s.f,u=i(r),l={},p=0;u.length>p;)void 0!==(n=a(r,t=u[p++]))&&c(l,t,n);return l}})},function(e,t,n){var r=n(0),a=n(1),i=n(134).f;r({target:"Object",stat:!0,forced:a(function(){return!Object.getOwnPropertyNames(1)})},{getOwnPropertyNames:i})},function(e,t,n){var r=n(0),a=n(1),i=n(10),o=n(27),s=n(101);r({target:"Object",stat:!0,forced:a(function(){o(1)}),sham:!s},{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){n(0)({target:"Object",stat:!0},{is:n(139)})},function(e,t,n){var r=n(0),a=n(1),i=n(3),o=Object.isExtensible;r({target:"Object",stat:!0,forced:a(function(){o(1)})},{isExtensible:function(e){return!!i(e)&&(!o||o(e))}})},function(e,t,n){var r=n(0),a=n(1),i=n(3),o=Object.isFrozen;r({target:"Object",stat:!0,forced:a(function(){o(1)})},{isFrozen:function(e){return!i(e)||!!o&&o(e)}})},function(e,t,n){var r=n(0),a=n(1),i=n(3),o=Object.isSealed;r({target:"Object",stat:!0,forced:a(function(){o(1)})},{isSealed:function(e){return!i(e)||!!o&&o(e)}})},function(e,t,n){var r=n(0),a=n(10),i=n(60);r({target:"Object",stat:!0,forced:n(1)(function(){i(1)})},{keys:function(e){return i(a(e))}})},function(e,t,n){var r=n(0),a=n(3),i=n(45).onFreeze,o=n(62),s=n(1),c=Object.preventExtensions;r({target:"Object",stat:!0,forced:s(function(){c(1)}),sham:!o},{preventExtensions:function(e){return c&&a(e)?c(i(e)):e}})},function(e,t,n){var r=n(0),a=n(3),i=n(45).onFreeze,o=n(62),s=n(1),c=Object.seal;r({target:"Object",stat:!0,forced:s(function(){c(1)}),sham:!o},{seal:function(e){return c&&a(e)?c(i(e)):e}})},function(e,t,n){n(0)({target:"Object",stat:!0},{setPrototypeOf:n(48)})},function(e,t,n){var r=n(0),a=n(137).values;r({target:"Object",stat:!0},{values:function(e){return a(e)}})},function(e,t,n){var r=n(16),a=n(234),i=Object.prototype;a!==i.toString&&r(i,"toString",a,{unsafe:!0})},function(e,t,n){"use strict";var r=n(66),a={};a[n(7)("toStringTag")]="z",e.exports="[object z]"!==String(a)?function(){return"[object "+r(this)+"]"}:a.toString},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(20),c=n(9);a&&r({target:"Object",proto:!0,forced:i},{__defineGetter__:function(e,t){c.f(o(this),e,{get:s(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(20),c=n(9);a&&r({target:"Object",proto:!0,forced:i},{__defineSetter__:function(e,t){c.f(o(this),e,{set:s(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(25),c=n(27),u=n(15).f;a&&r({target:"Object",proto:!0,forced:i},{__lookupGetter__:function(e){var t,n=o(this),r=s(e,!0);do{if(t=u(n,r))return t.get}while(n=c(n))}})},function(e,t,n){"use strict";var r=n(0),a=n(6),i=n(74),o=n(10),s=n(25),c=n(27),u=n(15).f;a&&r({target:"Object",proto:!0,forced:i},{__lookupSetter__:function(e){var t,n=o(this),r=s(e,!0);do{if(t=u(n,r))return t.set}while(n=c(n))}})},function(e,t,n){n(0)({target:"Function",proto:!0},{bind:n(141)})},function(e,t,n){var r=n(6),a=n(9).f,i=Function.prototype,o=i.toString,s=/^\s*function ([^ (]*)/;!r||"name"in i||a(i,"name",{configurable:!0,get:function(){try{return o.call(this).match(s)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(3),a=n(9),i=n(27),o=n(7)("hasInstance"),s=Function.prototype;o in s||a.f(s,o,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=i(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(0),a=n(142);r({target:"Array",stat:!0,forced:!n(75)(function(e){Array.from(e)})},{from:a})},function(e,t,n){n(0)({target:"Array",stat:!0},{isArray:n(44)})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(46);r({target:"Array",stat:!0,forced:a(function(){function e(){}return!(Array.of.call(e)instanceof e)})},{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)i(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(44),o=n(3),s=n(10),c=n(8),u=n(46),l=n(61),p=n(67),d=n(7)("isConcatSpreadable"),f=!a(function(){var e=[];return e[d]=!1,e.concat()[0]!==e}),h=p("concat"),m=function(e){if(!o(e))return!1;var t=e[d];return void 0!==t?!!t:i(e)};r({target:"Array",proto:!0,forced:!f||!h},{concat:function(e){var t,n,r,a,i,o=s(this),p=l(o,0),d=0;for(t=-1,r=arguments.length;t<r;t++)if(i=-1===t?o:arguments[t],m(i)){if(d+(a=c(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<a;n++,d++)n in i&&u(p,d,i[n])}else{if(d>=9007199254740991)throw TypeError("Maximum allowed index exceeded");u(p,d++,i)}return p.length=d,p}})},function(e,t,n){var r=n(0),a=n(143),i=n(37);r({target:"Array",proto:!0},{copyWithin:a}),i("copyWithin")},function(e,t,n){"use strict";var r=n(0),a=n(12).every;r({target:"Array",proto:!0,forced:n(28)("every")},{every:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(0),a=n(102),i=n(37);r({target:"Array",proto:!0},{fill:a}),i("fill")},function(e,t,n){"use strict";var r=n(0),a=n(12).filter;r({target:"Array",proto:!0,forced:!n(67)("filter")},{filter:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(12).find,i=n(37),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r({target:"Array",proto:!0,forced:o},{find:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(e,t,n){"use strict";var r=n(0),a=n(12).findIndex,i=n(37),o=!0;"findIndex"in[]&&Array(1).findIndex(function(){o=!1}),r({target:"Array",proto:!0,forced:o},{findIndex:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("findIndex")},function(e,t,n){"use strict";var r=n(0),a=n(144),i=n(10),o=n(8),s=n(23),c=n(61);r({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=i(this),n=o(t.length),r=c(t,0);return r.length=a(r,t,t,n,0,void 0===e?1:s(e)),r}})},function(e,t,n){"use strict";var r=n(0),a=n(144),i=n(10),o=n(8),s=n(20),c=n(61);r({target:"Array",proto:!0},{flatMap:function(e){var t,n=i(this),r=o(n.length);return s(e),(t=c(n,0)).length=a(t,n,n,r,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},function(e,t,n){"use strict";var r=n(0),a=n(145);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(e,t,n){"use strict";var r=n(0),a=n(58).includes,i=n(37);r({target:"Array",proto:!0},{includes:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,t,n){"use strict";var r=n(0),a=n(58).indexOf,i=n(28),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0,c=i("indexOf");r({target:"Array",proto:!0,forced:s||c},{indexOf:function(e){return s?o.apply(this,arguments)||0:a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(54),i=n(18),o=n(28),s=[].join,c=a!=Object,u=o("join",",");r({target:"Array",proto:!0,forced:c||u},{join:function(e){return s.call(i(this),void 0===e?",":e)}})},function(e,t,n){var r=n(0),a=n(146);r({target:"Array",proto:!0,forced:a!==[].lastIndexOf},{lastIndexOf:a})},function(e,t,n){"use strict";var r=n(0),a=n(12).map;r({target:"Array",proto:!0,forced:!n(67)("map")},{map:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(76).left;r({target:"Array",proto:!0,forced:n(28)("reduce")},{reduce:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(76).right;r({target:"Array",proto:!0,forced:n(28)("reduceRight")},{reduceRight:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(44),i=[].reverse,o=[1,2];r({target:"Array",proto:!0,forced:String(o)===String(o.reverse())},{reverse:function(){return a(this)&&(this.length=this.length),i.call(this)}})},function(e,t,n){"use strict";var r=n(0),a=n(3),i=n(44),o=n(34),s=n(8),c=n(18),u=n(46),l=n(67),p=n(7)("species"),d=[].slice,f=Math.max;r({target:"Array",proto:!0,forced:!l("slice")},{slice:function(e,t){var n,r,l,h=c(this),m=s(h.length),v=o(e,m),g=o(void 0===t?m:t,m);if(i(h)&&("function"!=typeof(n=h.constructor)||n!==Array&&!i(n.prototype)?a(n)&&null===(n=n[p])&&(n=void 0):n=void 0,n===Array||void 0===n))return d.call(h,v,g);for(r=new(void 0===n?Array:n)(f(g-v,0)),l=0;v<g;v++,l++)v in h&&u(r,l,h[v]);return r.length=l,r}})},function(e,t,n){"use strict";var r=n(0),a=n(12).some;r({target:"Array",proto:!0,forced:n(28)("some")},{some:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(20),i=n(10),o=n(1),s=n(28),c=[].sort,u=[1,2,3],l=o(function(){u.sort(void 0)}),p=o(function(){u.sort(null)}),d=s("sort");r({target:"Array",proto:!0,forced:l||!p||d},{sort:function(e){return void 0===e?c.call(i(this)):c.call(i(this),a(e))}})},function(e,t,n){"use strict";var r=n(0),a=n(34),i=n(23),o=n(8),s=n(10),c=n(61),u=n(46),l=n(67),p=Math.max,d=Math.min;r({target:"Array",proto:!0,forced:!l("splice")},{splice:function(e,t){var n,r,l,f,h,m,v=s(this),g=o(v.length),y=a(e,g),x=arguments.length;if(0===x?n=r=0:1===x?(n=0,r=g-y):(n=x-2,r=d(p(i(t),0),g-y)),g+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(l=c(v,r),f=0;f<r;f++)(h=y+f)in v&&u(l,f,v[h]);if(l.length=r,n<r){for(f=y;f<g-r;f++)m=f+n,(h=f+r)in v?v[m]=v[h]:delete v[m];for(f=g;f>g-r+n;f--)delete v[f-1]}else if(n>r)for(f=g-r;f>y;f--)m=f+n-1,(h=f+r-1)in v?v[m]=v[h]:delete v[m];for(f=0;f<n;f++)v[f+y]=arguments[f+2];return v.length=g-r+n,l}})},function(e,t,n){n(49)("Array")},function(e,t,n){n(37)("flat")},function(e,t,n){n(37)("flatMap")},function(e,t,n){var r=n(0),a=n(34),i=String.fromCharCode,o=String.fromCodePoint;r({target:"String",stat:!0,forced:!!o&&1!=o.length},{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,o=0;r>o;){if(t=+arguments[o++],a(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(0),a=n(18),i=n(8);r({target:"String",stat:!0},{raw:function(e){for(var t=a(e.raw),n=i(t.length),r=arguments.length,o=[],s=0;n>s;)o.push(String(t[s++])),s<r&&o.push(String(arguments[s]));return o.join("")}})},function(e,t,n){"use strict";var r=n(0),a=n(78).codeAt;r({target:"String",proto:!0},{codePointAt:function(e){return a(this,e)}})},function(e,t,n){"use strict";var r=n(0),a=n(8),i=n(105),o=n(14),s=n(107),c="".endsWith,u=Math.min;r({target:"String",proto:!0,forced:!s("endsWith")},{endsWith:function(e){var t=String(o(this));i(e);var n=arguments.length>1?arguments[1]:void 0,r=a(t.length),s=void 0===n?r:u(a(n),r),l=String(e);return c?c.call(t,l,s):t.slice(s-l.length,s)===l}})},function(e,t,n){"use strict";var r=n(0),a=n(105),i=n(14);r({target:"String",proto:!0,forced:!n(107)("includes")},{includes:function(e){return!!~String(i(this)).indexOf(a(e),arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(79),a=n(4),i=n(8),o=n(14),s=n(81),c=n(82);r("match",1,function(e,t,n){return[function(t){var n=o(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var o=a(e),u=String(this);if(!o.global)return c(o,u);var l=o.unicode;o.lastIndex=0;for(var p,d=[],f=0;null!==(p=c(o,u));){var h=String(p[0]);d[f]=h,""===h&&(o.lastIndex=s(u,i(o.lastIndex),l)),f++}return 0===f?null:d}]})},function(e,t,n){"use strict";var r=n(0),a=n(104),i=n(14),o=n(8),s=n(20),c=n(4),u=n(66),l=n(68),p=n(13),d=n(7),f=n(29),h=n(81),m=n(19),v=n(32),g=d("matchAll"),y=m.set,x=m.getterFor("RegExp String Iterator"),b=RegExp.prototype,w=b.exec,_=a(function(e,t,n,r){y(this,{type:"RegExp String Iterator",regexp:e,string:t,global:n,unicode:r,done:!1})},"RegExp String",function(){var e=x(this);if(e.done)return{value:void 0,done:!0};var t=e.regexp,n=e.string,r=function(e,t){var n,r=e.exec;if("function"==typeof r){if("object"!=typeof(n=r.call(e,t)))throw TypeError("Incorrect exec result");return n}return w.call(e,t)}(t,n);return null===r?{value:void 0,done:e.done=!0}:e.global?(""==String(r[0])&&(t.lastIndex=h(n,o(t.lastIndex),e.unicode)),{value:r,done:!1}):(e.done=!0,{value:r,done:!1})}),k=function(e){var t,n,r,a,i,s,u=c(this),p=String(e);return t=f(u,RegExp),void 0===(n=u.flags)&&u instanceof RegExp&&!("flags"in b)&&(n=l.call(u)),r=void 0===n?"":String(n),a=new t(t===RegExp?u.source:u,r),i=!!~r.indexOf("g"),s=!!~r.indexOf("u"),a.lastIndex=o(u.lastIndex),new _(a,p,i,s)};r({target:"String",proto:!0},{matchAll:function(e){var t,n,r,a=i(this);return null!=e&&(void 0===(n=e[g])&&v&&"RegExp"==u(e)&&(n=k),null!=n)?s(n).call(e,a):(t=String(a),r=new RegExp(e,"g"),v?k.call(r,t):r[g](t))}}),v||g in b||p(b,g,k)},function(e,t,n){"use strict";var r=n(0),a=n(108).end;r({target:"String",proto:!0,forced:n(148)},{padEnd:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(0),a=n(108).start;r({target:"String",proto:!0,forced:n(148)},{padStart:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){n(0)({target:"String",proto:!0},{repeat:n(109)})},function(e,t,n){"use strict";var r=n(79),a=n(4),i=n(10),o=n(8),s=n(23),c=n(14),u=n(81),l=n(82),p=Math.max,d=Math.min,f=Math.floor,h=/\$([$&'`]|\d\d?|<[^>]*>)/g,m=/\$([$&'`]|\d\d?)/g;r("replace",2,function(e,t,n){return[function(n,r){var a=c(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,a,r):t.call(String(a),n,r)},function(e,i){var c=n(t,e,this,i);if(c.done)return c.value;var f=a(e),h=String(this),m="function"==typeof i;m||(i=String(i));var v=f.global;if(v){var g=f.unicode;f.lastIndex=0}for(var y=[];;){var x=l(f,h);if(null===x)break;if(y.push(x),!v)break;""===String(x[0])&&(f.lastIndex=u(h,o(f.lastIndex),g))}for(var b,w="",_=0,k=0;k<y.length;k++){x=y[k];for(var E=String(x[0]),S=p(d(s(x.index),h.length),0),R=[],T=1;T<x.length;T++)R.push(void 0===(b=x[T])?b:String(b));var A=x.groups;if(m){var D=[E].concat(R,S,h);void 0!==A&&D.push(A);var O=String(i.apply(void 0,D))}else O=r(E,h,S,R,A,i);S>=_&&(w+=h.slice(_,S)+O,_=S+E.length)}return w+h.slice(_)}];function r(e,n,r,a,o,s){var c=r+e.length,u=a.length,l=m;return void 0!==o&&(o=i(o),l=h),t.call(s,l,function(t,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":s=o[i.slice(1,-1)];break;default:var l=+i;if(0===l)return t;if(l>u){var p=f(l/10);return 0===p?t:p<=u?void 0===a[p-1]?i.charAt(1):a[p-1]+i.charAt(1):t}s=a[l-1]}return void 0===s?"":s})}})},function(e,t,n){"use strict";var r=n(79),a=n(4),i=n(14),o=n(139),s=n(82);r("search",1,function(e,t,n){return[function(t){var n=i(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var i=a(e),c=String(this),u=i.lastIndex;o(u,0)||(i.lastIndex=0);var l=s(i,c);return o(i.lastIndex,u)||(i.lastIndex=u),null===l?-1:l.index}]})},function(e,t,n){"use strict";var r=n(79),a=n(106),i=n(4),o=n(14),s=n(29),c=n(81),u=n(8),l=n(82),p=n(80),d=n(1),f=[].push,h=Math.min,m=!d(function(){return!RegExp(4294967295,"y")});r("split",2,function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=String(o(this)),i=void 0===n?4294967295:n>>>0;if(0===i)return[];if(void 0===e)return[r];if(!a(e))return t.call(r,e,i);for(var s,c,u,l=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,m=new RegExp(e.source,d+"g");(s=p.call(m,r))&&!((c=m.lastIndex)>h&&(l.push(r.slice(h,s.index)),s.length>1&&s.index<r.length&&f.apply(l,s.slice(1)),u=s[0].length,h=c,l.length>=i));)m.lastIndex===s.index&&m.lastIndex++;return h===r.length?!u&&m.test("")||l.push(""):l.push(r.slice(h)),l.length>i?l.slice(0,i):l}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:t.call(this,e,n)}:t,[function(t,n){var a=o(this),i=null==t?void 0:t[e];return void 0!==i?i.call(t,a,n):r.call(String(a),t,n)},function(e,a){var o=n(r,e,this,a,r!==t);if(o.done)return o.value;var p=i(e),d=String(this),f=s(p,RegExp),v=p.unicode,g=(p.ignoreCase?"i":"")+(p.multiline?"m":"")+(p.unicode?"u":"")+(m?"y":"g"),y=new f(m?p:"^(?:"+p.source+")",g),x=void 0===a?4294967295:a>>>0;if(0===x)return[];if(0===d.length)return null===l(y,d)?[d]:[];for(var b=0,w=0,_=[];w<d.length;){y.lastIndex=m?w:0;var k,E=l(y,m?d:d.slice(w));if(null===E||(k=h(u(y.lastIndex+(m?0:w)),d.length))===b)w=c(d,w,v);else{if(_.push(d.slice(b,w)),_.length===x)return _;for(var S=1;S<=E.length-1;S++)if(_.push(E[S]),_.length===x)return _;w=b=k}}return _.push(d.slice(b)),_}]},!m)},function(e,t,n){"use strict";var r=n(0),a=n(8),i=n(105),o=n(14),s=n(107),c="".startsWith,u=Math.min;r({target:"String",proto:!0,forced:!s("startsWith")},{startsWith:function(e){var t=String(o(this));i(e);var n=a(u(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return c?c.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";var r=n(0),a=n(50).trim;r({target:"String",proto:!0,forced:n(110)("trim")},{trim:function(){return a(this)}})},function(e,t,n){"use strict";var r=n(0),a=n(50).start,i=n(110)("trimStart"),o=i?function(){return a(this)}:"".trimStart;r({target:"String",proto:!0,forced:i},{trimStart:o,trimLeft:o})},function(e,t,n){"use strict";var r=n(0),a=n(50).end,i=n(110)("trimEnd"),o=i?function(){return a(this)}:"".trimEnd;r({target:"String",proto:!0,forced:i},{trimEnd:o,trimRight:o})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("anchor")},{anchor:function(e){return a(this,"a","name",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("big")},{big:function(){return a(this,"big","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("blink")},{blink:function(){return a(this,"blink","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("bold")},{bold:function(){return a(this,"b","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("fixed")},{fixed:function(){return a(this,"tt","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("fontcolor")},{fontcolor:function(e){return a(this,"font","color",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("fontsize")},{fontsize:function(e){return a(this,"font","size",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("italics")},{italics:function(){return a(this,"i","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("link")},{link:function(e){return a(this,"a","href",e)}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("small")},{small:function(){return a(this,"small","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("strike")},{strike:function(){return a(this,"strike","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("sub")},{sub:function(){return a(this,"sub","","")}})},function(e,t,n){"use strict";var r=n(0),a=n(21);r({target:"String",proto:!0,forced:n(22)("sup")},{sup:function(){return a(this,"sup","","")}})},function(e,t,n){var r=n(6),a=n(2),i=n(59),o=n(111),s=n(9).f,c=n(43).f,u=n(106),l=n(68),p=n(16),d=n(1),f=n(49),h=n(7)("match"),m=a.RegExp,v=m.prototype,g=/a/g,y=/a/g,x=new m(g)!==g;if(r&&i("RegExp",!x||d(function(){return y[h]=!1,m(g)!=g||m(y)==y||"/a/i"!=m(g,"i")}))){for(var b=function(e,t){var n=this instanceof b,r=u(e),a=void 0===t;return!n&&r&&e.constructor===b&&a?e:o(x?new m(r&&!a?e.source:e,t):m((r=e instanceof b)?e.source:e,r&&a?l.call(e):t),n?this:v,b)},w=function(e){e in b||s(b,e,{configurable:!0,get:function(){return m[e]},set:function(t){m[e]=t}})},_=c(m),k=0;_.length>k;)w(_[k++]);v.constructor=b,b.prototype=v,p(a,"RegExp",b)}f("RegExp")},function(e,t,n){"use strict";var r=n(0),a=n(80);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(e,t,n){var r=n(6),a=n(9),i=n(68);r&&"g"!=/./g.flags&&a.f(RegExp.prototype,"flags",{configurable:!0,get:i})},function(e,t,n){"use strict";var r=n(16),a=n(4),i=n(1),o=n(68),s=RegExp.prototype,c=s.toString,u=i(function(){return"/a/b"!=c.call({source:"a",flags:"b"})}),l="toString"!=c.name;(u||l)&&r(RegExp.prototype,"toString",function(){var e=a(this),t=String(e.source),n=e.flags;return"/"+t+"/"+String(void 0===n&&e instanceof RegExp&&!("flags"in s)?o.call(e):n)},{unsafe:!0})},function(e,t,n){var r=n(0),a=n(150);r({global:!0,forced:parseInt!=a},{parseInt:a})},function(e,t,n){var r=n(0),a=n(151);r({global:!0,forced:parseFloat!=a},{parseFloat:a})},function(e,t,n){"use strict";var r=n(6),a=n(2),i=n(59),o=n(16),s=n(11),c=n(24),u=n(111),l=n(25),p=n(1),d=n(35),f=n(43).f,h=n(15).f,m=n(9).f,v=n(50).trim,g=a.Number,y=g.prototype,x="Number"==c(d(y)),b=function(e){var t,n,r,a,i,o,s,c,u=l(e,!1);if("string"==typeof u&&u.length>2)if(43===(t=(u=v(u)).charCodeAt(0))||45===t){if(88===(n=u.charCodeAt(2))||120===n)return NaN}else if(48===t){switch(u.charCodeAt(1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+u}for(o=(i=u.slice(2)).length,s=0;s<o;s++)if((c=i.charCodeAt(s))<48||c>a)return NaN;return parseInt(i,r)}return+u};if(i("Number",!g(" 0o1")||!g("0b1")||g("+0x1"))){for(var w,_=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof _&&(x?p(function(){y.valueOf.call(n)}):"Number"!=c(n))?u(new g(b(t)),n,_):b(t)},k=r?f(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),E=0;k.length>E;E++)s(g,w=k[E])&&!s(_,w)&&m(_,w,h(g,w));_.prototype=y,y.constructor=_,o(a,"Number",_)}},function(e,t,n){n(0)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},function(e,t,n){n(0)({target:"Number",stat:!0},{isFinite:n(309)})},function(e,t,n){var r=n(2).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&r(e)}},function(e,t,n){n(0)({target:"Number",stat:!0},{isInteger:n(152)})},function(e,t,n){n(0)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(0),a=n(152),i=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(e){return a(e)&&i(e)<=9007199254740991}})},function(e,t,n){n(0)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){n(0)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(0),a=n(151);r({target:"Number",stat:!0,forced:Number.parseFloat!=a},{parseFloat:a})},function(e,t,n){var r=n(0),a=n(150);r({target:"Number",stat:!0,forced:Number.parseInt!=a},{parseInt:a})},function(e,t,n){"use strict";var r=n(0),a=n(23),i=n(153),o=n(109),s=n(1),c=1..toFixed,u=Math.floor,l=function(e,t,n){return 0===t?n:t%2==1?l(e,t-1,n*e):l(e*e,t/2,n)};r({target:"Number",proto:!0,forced:c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s(function(){c.call({})})},{toFixed:function(e){var t,n,r,s,c=i(this),p=a(e),d=[0,0,0,0,0,0],f="",h="0",m=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*d[n],d[n]=r%1e7,r=u(r/1e7)},v=function(e){for(var t=6,n=0;--t>=0;)n+=d[t],d[t]=u(n/e),n=n%e*1e7},g=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==d[e]){var n=String(d[e]);t=""===t?n:t+o.call("0",7-n.length)+n}return t};if(p<0||p>20)throw RangeError("Incorrect fraction digits");if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(f="-",c=-c),c>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(c*l(2,69,1))-69)<0?c*l(2,-t,1):c/l(2,t,1),n*=4503599627370496,(t=52-t)>0){for(m(0,n),r=p;r>=7;)m(1e7,0),r-=7;for(m(l(10,r,1),0),r=t-1;r>=23;)v(1<<23),r-=23;v(1<<r),m(1,1),v(2),h=g()}else m(0,n),m(1<<-t,0),h=g()+o.call("0",p);return h=p>0?f+((s=h.length)<=p?"0."+o.call("0",p-s)+h:h.slice(0,s-p)+"."+h.slice(s-p)):f+h}})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(153),o=1..toPrecision;r({target:"Number",proto:!0,forced:a(function(){return"1"!==o.call(1,void 0)})||!a(function(){o.call({})})},{toPrecision:function(e){return void 0===e?o.call(i(this)):o.call(i(this),e)}})},function(e,t,n){var r=n(0),a=n(154),i=Math.acosh,o=Math.log,s=Math.sqrt,c=Math.LN2;r({target:"Math",stat:!0,forced:!i||710!=Math.floor(i(Number.MAX_VALUE))||i(1/0)!=1/0},{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?o(e)+c:a(e-1+s(e-1)*s(e+1))}})},function(e,t,n){var r=n(0),a=Math.asinh,i=Math.log,o=Math.sqrt;r({target:"Math",stat:!0,forced:!(a&&1/a(0)>0)},{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):i(t+o(t*t+1)):t}})},function(e,t,n){var r=n(0),a=Math.atanh,i=Math.log;r({target:"Math",stat:!0,forced:!(a&&1/a(-0)<0)},{atanh:function(e){return 0==(e=+e)?e:i((1+e)/(1-e))/2}})},function(e,t,n){var r=n(0),a=n(112),i=Math.abs,o=Math.pow;r({target:"Math",stat:!0},{cbrt:function(e){return a(e=+e)*o(i(e),1/3)}})},function(e,t,n){var r=n(0),a=Math.floor,i=Math.log,o=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-a(i(e+.5)*o):32}})},function(e,t,n){var r=n(0),a=n(85),i=Math.cosh,o=Math.abs,s=Math.E;r({target:"Math",stat:!0,forced:!i||i(710)===1/0},{cosh:function(e){var t=a(o(e)-1)+1;return(t+1/(t*s*s))*(s/2)}})},function(e,t,n){var r=n(0),a=n(85);r({target:"Math",stat:!0,forced:a!=Math.expm1},{expm1:a})},function(e,t,n){n(0)({target:"Math",stat:!0},{fround:n(327)})},function(e,t,n){var r=n(112),a=Math.abs,i=Math.pow,o=i(2,-52),s=i(2,-23),c=i(2,127)*(2-s),u=i(2,-126);e.exports=Math.fround||function(e){var t,n,i=a(e),l=r(e);return i<u?l*(i/u/s+1/o-1/o)*u*s:(n=(t=(1+s/o)*i)-(t-i))>c||n!=n?l*(1/0):l*n}},function(e,t,n){var r=n(0),a=Math.abs,i=Math.sqrt;r({target:"Math",stat:!0},{hypot:function(e,t){for(var n,r,o=0,s=0,c=arguments.length,u=0;s<c;)u<(n=a(arguments[s++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*i(o)}})},function(e,t,n){var r=n(0),a=n(1),i=Math.imul;r({target:"Math",stat:!0,forced:a(function(){return-5!=i(4294967295,5)||2!=i.length})},{imul:function(e,t){var n=+e,r=+t,a=65535&n,i=65535&r;return 0|a*i+((65535&n>>>16)*i+a*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(0),a=Math.log,i=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(e){return a(e)*i}})},function(e,t,n){n(0)({target:"Math",stat:!0},{log1p:n(154)})},function(e,t,n){var r=n(0),a=Math.log,i=Math.LN2;r({target:"Math",stat:!0},{log2:function(e){return a(e)/i}})},function(e,t,n){n(0)({target:"Math",stat:!0},{sign:n(112)})},function(e,t,n){var r=n(0),a=n(1),i=n(85),o=Math.abs,s=Math.exp,c=Math.E;r({target:"Math",stat:!0,forced:a(function(){return-2e-17!=Math.sinh(-2e-17)})},{sinh:function(e){return o(e=+e)<1?(i(e)-i(-e))/2:(s(e-1)-s(-e-1))*(c/2)}})},function(e,t,n){var r=n(0),a=n(85),i=Math.exp;r({target:"Math",stat:!0},{tanh:function(e){var t=a(e=+e),n=a(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){n(26)(Math,"Math",!0)},function(e,t,n){var r=n(0),a=Math.ceil,i=Math.floor;r({target:"Math",stat:!0},{trunc:function(e){return(e>0?i:a)(e)}})},function(e,t,n){n(0)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(10),o=n(25);r({target:"Date",proto:!0,forced:a(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})},{toJSON:function(e){var t=i(this),n=o(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(0),a=n(341);r({target:"Date",proto:!0,forced:Date.prototype.toISOString!==a},{toISOString:a})},function(e,t,n){"use strict";var r=n(1),a=n(108).start,i=Math.abs,o=Date.prototype,s=o.getTime,c=o.toISOString;e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-5e13-1))})||!r(function(){c.call(new Date(NaN))})?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var e=this.getUTCFullYear(),t=this.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+a(i(e),n?6:4,0)+"-"+a(this.getUTCMonth()+1,2,0)+"-"+a(this.getUTCDate(),2,0)+"T"+a(this.getUTCHours(),2,0)+":"+a(this.getUTCMinutes(),2,0)+":"+a(this.getUTCSeconds(),2,0)+"."+a(t,3,0)+"Z"}:c},function(e,t,n){var r=n(16),a=Date.prototype,i=a.toString,o=a.getTime;new Date(NaN)+""!="Invalid Date"&&r(a,"toString",function(){var e=o.call(this);return e==e?i.call(this):"Invalid Date"})},function(e,t,n){var r=n(13),a=n(344),i=n(7)("toPrimitive"),o=Date.prototype;i in o||r(o,i,a)},function(e,t,n){"use strict";var r=n(4),a=n(25);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return a(r(this),"number"!==e)}},function(e,t,n){var r=n(2);n(26)(r.JSON,"JSON",!0)},function(e,t,n){"use strict";var r,a,i,o=n(0),s=n(32),c=n(2),u=n(47),l=n(51),p=n(26),d=n(49),f=n(3),h=n(20),m=n(38),v=n(24),g=n(63),y=n(75),x=n(29),b=n(113).set,w=n(155),_=n(156),k=n(347),E=n(157),S=n(348),R=n(83),T=n(19),A=n(59),D=n(7)("species"),O="Promise",I=T.get,j=T.set,C=T.getterFor(O),N=c.Promise,L=c.TypeError,q=c.document,U=c.process,P=c.fetch,M=U&&U.versions,F=M&&M.v8||"",z=E.f,B=z,V="process"==v(U),G=!!(q&&q.createEvent&&c.dispatchEvent),Y=A(O,function(){var e=N.resolve(1),t=function(){},n=(e.constructor={})[D]=function(e){e(t,t)};return!((V||"function"==typeof PromiseRejectionEvent)&&(!s||e.finally)&&e.then(t)instanceof n&&0!==F.indexOf("6.6")&&-1===R.indexOf("Chrome/66"))}),H=Y||!y(function(e){N.all(e).catch(function(){})}),W=function(e){var t;return!(!f(e)||"function"!=typeof(t=e.then))&&t},$=function(e,t,n){if(!t.notified){t.notified=!0;var r=t.reactions;w(function(){for(var a=t.value,i=1==t.state,o=0;r.length>o;){var s,c,u,l=r[o++],p=i?l.ok:l.fail,d=l.resolve,f=l.reject,h=l.domain;try{p?(i||(2===t.rejection&&K(e,t),t.rejection=1),!0===p?s=a:(h&&h.enter(),s=p(a),h&&(h.exit(),u=!0)),s===l.promise?f(L("Promise-chain cycle")):(c=W(s))?c.call(s,d,f):d(s)):f(a)}catch(e){h&&!u&&h.exit(),f(e)}}t.reactions=[],t.notified=!1,n&&!t.rejection&&Z(e,t)})}},J=function(e,t,n){var r,a;G?((r=q.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),c.dispatchEvent(r)):r={promise:t,reason:n},(a=c["on"+e])?a(r):"unhandledrejection"===e&&k("Unhandled promise rejection",n)},Z=function(e,t){b.call(c,function(){var n,r=t.value;if(X(t)&&(n=S(function(){V?U.emit("unhandledRejection",r,e):J("unhandledrejection",e,r)}),t.rejection=V||X(t)?2:1,n.error))throw n.value})},X=function(e){return 1!==e.rejection&&!e.parent},K=function(e,t){b.call(c,function(){V?U.emit("rejectionHandled",e):J("rejectionhandled",e,t.value)})},Q=function(e,t,n,r){return function(a){e(t,n,a,r)}},ee=function(e,t,n,r){t.done||(t.done=!0,r&&(t=r),t.value=n,t.state=2,$(e,t,!0))},te=function(e,t,n,r){if(!t.done){t.done=!0,r&&(t=r);try{if(e===n)throw L("Promise can't be resolved itself");var a=W(n);a?w(function(){var r={done:!1};try{a.call(n,Q(te,e,r,t),Q(ee,e,r,t))}catch(n){ee(e,r,n,t)}}):(t.value=n,t.state=1,$(e,t,!1))}catch(n){ee(e,{done:!1},n,t)}}};Y&&(N=function(e){m(this,N,O),h(e),r.call(this);var t=I(this);try{e(Q(te,this,t),Q(ee,this,t))}catch(e){ee(this,t,e)}},(r=function(e){j(this,{type:O,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=l(N.prototype,{then:function(e,t){var n=C(this),r=z(x(this,N));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=V?U.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&$(this,n,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new r,t=I(e);this.promise=e,this.resolve=Q(te,e,t),this.reject=Q(ee,e,t)},E.f=z=function(e){return e===N||e===i?new a(e):B(e)},s||"function"!=typeof P||o({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return _(N,P.apply(c,arguments))}})),o({global:!0,wrap:!0,forced:Y},{Promise:N}),p(N,O,!1,!0),d(O),i=u.Promise,o({target:O,stat:!0,forced:Y},{reject:function(e){var t=z(this);return t.reject.call(void 0,e),t.promise}}),o({target:O,stat:!0,forced:s||Y},{resolve:function(e){return _(s&&this===i?N:this,e)}}),o({target:O,stat:!0,forced:H},{all:function(e){var t=this,n=z(t),r=n.resolve,a=n.reject,i=S(function(){var n=h(t.resolve),i=[],o=0,s=1;g(e,function(e){var c=o++,u=!1;i.push(void 0),s++,n.call(t,e).then(function(e){u||(u=!0,i[c]=e,--s||r(i))},a)}),--s||r(i)});return i.error&&a(i.value),n.promise},race:function(e){var t=this,n=z(t),r=n.reject,a=S(function(){var a=h(t.resolve);g(e,function(e){a.call(t,e).then(n.resolve,r)})});return a.error&&r(a.value),n.promise}})},function(e,t,n){var r=n(2);e.exports=function(e,t){var n=r.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))}},function(e,t){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,t,n){"use strict";var r=n(0),a=n(33),i=n(29),o=n(156);r({target:"Promise",proto:!0,real:!0},{finally:function(e){var t=i(this,a("Promise")),n="function"==typeof e;return this.then(n?function(n){return o(t,e()).then(function(){return n})}:e,n?function(n){return o(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var r=n(86),a=n(158);e.exports=r("Map",function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},a,!0)},function(e,t,n){"use strict";var r=n(86),a=n(158);e.exports=r("Set",function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},a)},function(e,t,n){"use strict";var r,a=n(2),i=n(51),o=n(45),s=n(86),c=n(159),u=n(3),l=n(19).enforce,p=n(129),d=!a.ActiveXObject&&"ActiveXObject"in a,f=Object.isExtensible,h=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},m=e.exports=s("WeakMap",h,c,!0,!0);if(p&&d){r=c.getConstructor(h,"WeakMap",!0),o.REQUIRED=!0;var v=m.prototype,g=v.delete,y=v.has,x=v.get,b=v.set;i(v,{delete:function(e){if(u(e)&&!f(e)){var t=l(this);return t.frozen||(t.frozen=new r),g.call(this,e)||t.frozen.delete(e)}return g.call(this,e)},has:function(e){if(u(e)&&!f(e)){var t=l(this);return t.frozen||(t.frozen=new r),y.call(this,e)||t.frozen.has(e)}return y.call(this,e)},get:function(e){if(u(e)&&!f(e)){var t=l(this);return t.frozen||(t.frozen=new r),y.call(this,e)?x.call(this,e):t.frozen.get(e)}return x.call(this,e)},set:function(e,t){if(u(e)&&!f(e)){var n=l(this);n.frozen||(n.frozen=new r),y.call(this,e)?b.call(this,e,t):n.frozen.set(e,t)}else b.call(this,e,t);return this}})}},function(e,t,n){"use strict";n(86)("WeakSet",function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},n(159),!1,!0)},function(e,t,n){"use strict";var r=n(0),a=n(2),i=n(87),o=n(49),s=i.ArrayBuffer;r({global:!0,forced:a.ArrayBuffer!==s},{ArrayBuffer:s}),o("ArrayBuffer")},function(e,t,n){var r=n(0),a=n(5);r({target:"ArrayBuffer",stat:!0,forced:!a.NATIVE_ARRAY_BUFFER_VIEWS},{isView:a.isView})},function(e,t,n){"use strict";var r=n(0),a=n(1),i=n(87),o=n(4),s=n(34),c=n(8),u=n(29),l=i.ArrayBuffer,p=i.DataView,d=l.prototype.slice;r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:a(function(){return!new l(2).slice(1,void 0).byteLength})},{slice:function(e,t){if(void 0!==d&&void 0===t)return d.call(o(this),e);for(var n=o(this).byteLength,r=s(e,n),a=s(void 0===t?n:t,n),i=new(u(this,l))(c(a-r)),f=new p(this),h=new p(i),m=0;r<a;)h.setUint8(m++,f.getUint8(r++));return i}})},function(e,t,n){var r=n(0),a=n(87);r({global:!0,forced:!n(5).NATIVE_ARRAY_BUFFER},{DataView:a.DataView})},function(e,t,n){n(30)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(30)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(30)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){"use strict";var r=n(114),a=n(5),i=n(162);a.exportStatic("from",i,r)},function(e,t,n){"use strict";var r=n(5),a=n(114),i=r.aTypedArrayConstructor;r.exportStatic("of",function(){for(var e=0,t=arguments.length,n=new(i(this))(t);t>e;)n[e]=arguments[e++];return n},a)},function(e,t,n){"use strict";var r=n(5),a=n(143),i=r.aTypedArray;r.exportProto("copyWithin",function(e,t){return a.call(i(this),e,t,arguments.length>2?arguments[2]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(12).every,i=r.aTypedArray;r.exportProto("every",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(102),i=r.aTypedArray;r.exportProto("fill",function(e){return a.apply(i(this),arguments)})},function(e,t,n){"use strict";var r=n(5),a=n(12).filter,i=n(29),o=r.aTypedArray,s=r.aTypedArrayConstructor;r.exportProto("filter",function(e){for(var t=a(o(this),e,arguments.length>1?arguments[1]:void 0),n=i(this,this.constructor),r=0,c=t.length,u=new(s(n))(c);c>r;)u[r]=t[r++];return u})},function(e,t,n){"use strict";var r=n(5),a=n(12).find,i=r.aTypedArray;r.exportProto("find",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(12).findIndex,i=r.aTypedArray;r.exportProto("findIndex",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(12).forEach,i=r.aTypedArray;r.exportProto("forEach",function(e){a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(58).includes,i=r.aTypedArray;r.exportProto("includes",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(58).indexOf,i=r.aTypedArray;r.exportProto("indexOf",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(2),a=n(5),i=n(77),o=n(7)("iterator"),s=r.Uint8Array,c=i.values,u=i.keys,l=i.entries,p=a.aTypedArray,d=a.exportProto,f=s&&s.prototype[o],h=!!f&&("values"==f.name||null==f.name),m=function(){return c.call(p(this))};d("entries",function(){return l.call(p(this))}),d("keys",function(){return u.call(p(this))}),d("values",m,!h),d(o,m,!h)},function(e,t,n){"use strict";var r=n(5),a=r.aTypedArray,i=[].join;r.exportProto("join",function(e){return i.apply(a(this),arguments)})},function(e,t,n){"use strict";var r=n(5),a=n(146),i=r.aTypedArray;r.exportProto("lastIndexOf",function(e){return a.apply(i(this),arguments)})},function(e,t,n){"use strict";var r=n(5),a=n(12).map,i=n(29),o=r.aTypedArray,s=r.aTypedArrayConstructor;r.exportProto("map",function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0,function(e,t){return new(s(i(e,e.constructor)))(t)})})},function(e,t,n){"use strict";var r=n(5),a=n(76).left,i=r.aTypedArray;r.exportProto("reduce",function(e){return a(i(this),e,arguments.length,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=n(76).right,i=r.aTypedArray;r.exportProto("reduceRight",function(e){return a(i(this),e,arguments.length,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=r.aTypedArray,i=Math.floor;r.exportProto("reverse",function(){for(var e,t=a(this).length,n=i(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this})},function(e,t,n){"use strict";var r=n(5),a=n(8),i=n(161),o=n(10),s=n(1),c=r.aTypedArray,u=s(function(){new Int8Array(1).set({})});r.exportProto("set",function(e){c(this);var t=i(arguments.length>1?arguments[1]:void 0,1),n=this.length,r=o(e),s=a(r.length),u=0;if(s+t>n)throw RangeError("Wrong length");for(;u<s;)this[t+u]=r[u++]},u)},function(e,t,n){"use strict";var r=n(5),a=n(29),i=n(1),o=r.aTypedArray,s=r.aTypedArrayConstructor,c=[].slice,u=i(function(){new Int8Array(1).slice()});r.exportProto("slice",function(e,t){for(var n=c.call(o(this),e,t),r=a(this,this.constructor),i=0,u=n.length,l=new(s(r))(u);u>i;)l[i]=n[i++];return l},u)},function(e,t,n){"use strict";var r=n(5),a=n(12).some,i=r.aTypedArray;r.exportProto("some",function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0)})},function(e,t,n){"use strict";var r=n(5),a=r.aTypedArray,i=[].sort;r.exportProto("sort",function(e){return i.call(a(this),e)})},function(e,t,n){"use strict";var r=n(5),a=n(8),i=n(34),o=n(29),s=r.aTypedArray;r.exportProto("subarray",function(e,t){var n=s(this),r=n.length,c=i(e,r);return new(o(n,n.constructor))(n.buffer,n.byteOffset+c*n.BYTES_PER_ELEMENT,a((void 0===t?r:i(t,r))-c))})},function(e,t,n){"use strict";var r=n(2),a=n(5),i=n(1),o=r.Int8Array,s=a.aTypedArray,c=[].toLocaleString,u=[].slice,l=!!o&&i(function(){c.call(new o(1))}),p=i(function(){return[1,2].toLocaleString()!=new o([1,2]).toLocaleString()})||!i(function(){o.prototype.toLocaleString.call([1,2])});a.exportProto("toLocaleString",function(){return c.apply(l?u.call(s(this)):s(this),arguments)},p)},function(e,t,n){"use strict";var r=n(2),a=n(5),i=n(1),o=r.Uint8Array,s=o&&o.prototype,c=[].toString,u=[].join;i(function(){c.call({})})&&(c=function(){return u.call(this)}),a.exportProto("toString",c,(s||{}).toString!=c)},function(e,t,n){var r=n(0),a=n(33),i=n(20),o=n(4),s=n(1),c=a("Reflect","apply"),u=Function.apply;r({target:"Reflect",stat:!0,forced:!s(function(){c(function(){})})},{apply:function(e,t,n){return i(e),o(n),c?c(e,t,n):u.call(e,t,n)}})},function(e,t,n){var r=n(0),a=n(33),i=n(20),o=n(4),s=n(3),c=n(35),u=n(141),l=n(1),p=a("Reflect","construct"),d=l(function(){function e(){}return!(p(function(){},[],e)instanceof e)}),f=!l(function(){p(function(){})}),h=d||f;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(e,t){i(e),o(t);var n=arguments.length<3?e:i(arguments[2]);if(f&&!d)return p(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(u.apply(e,r))}var a=n.prototype,l=c(s(a)?a:Object.prototype),h=Function.apply.call(e,l,t);return s(h)?h:l}})},function(e,t,n){var r=n(0),a=n(6),i=n(4),o=n(25),s=n(9);r({target:"Reflect",stat:!0,forced:n(1)(function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})}),sham:!a},{defineProperty:function(e,t,n){i(e);var r=o(t,!0);i(n);try{return s.f(e,r,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),a=n(4),i=n(15).f;r({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var n=i(a(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){var r=n(0),a=n(3),i=n(4),o=n(11),s=n(15),c=n(27);r({target:"Reflect",stat:!0},{get:function e(t,n){var r,u,l=arguments.length<3?t:arguments[2];return i(t)===l?t[n]:(r=s.f(t,n))?o(r,"value")?r.value:void 0===r.get?void 0:r.get.call(l):a(u=c(t))?e(u,n,l):void 0}})},function(e,t,n){var r=n(0),a=n(6),i=n(4),o=n(15);r({target:"Reflect",stat:!0,sham:!a},{getOwnPropertyDescriptor:function(e,t){return o.f(i(e),t)}})},function(e,t,n){var r=n(0),a=n(4),i=n(27);r({target:"Reflect",stat:!0,sham:!n(101)},{getPrototypeOf:function(e){return i(a(e))}})},function(e,t,n){n(0)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},function(e,t,n){var r=n(0),a=n(4),i=Object.isExtensible;r({target:"Reflect",stat:!0},{isExtensible:function(e){return a(e),!i||i(e)}})},function(e,t,n){n(0)({target:"Reflect",stat:!0},{ownKeys:n(96)})},function(e,t,n){var r=n(0),a=n(33),i=n(4);r({target:"Reflect",stat:!0,sham:!n(62)},{preventExtensions:function(e){i(e);try{var t=a("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),a=n(4),i=n(3),o=n(11),s=n(9),c=n(15),u=n(27),l=n(42);r({target:"Reflect",stat:!0},{set:function e(t,n,r){var p,d,f=arguments.length<4?t:arguments[3],h=c.f(a(t),n);if(!h){if(i(d=u(t)))return e(d,n,r,f);h=l(0)}if(o(h,"value")){if(!1===h.writable||!i(f))return!1;if(p=c.f(f,n)){if(p.get||p.set||!1===p.writable)return!1;p.value=r,s.f(f,n,p)}else s.f(f,n,l(0,r));return!0}return void 0!==h.set&&(h.set.call(f,r),!0)}})},function(e,t,n){var r=n(0),a=n(4),i=n(140),o=n(48);o&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){a(e),i(t);try{return o(e,t),!0}catch(e){return!1}}})},function(e,t,n){n(406),n(407),n(408),n(409),n(410),n(411),n(414),n(165),e.exports=n(47)},function(e,t,n){var r=n(2),a=n(163),i=n(145),o=n(13);for(var s in a){var c=r[s],u=c&&c.prototype;if(u&&u.forEach!==i)try{o(u,"forEach",i)}catch(e){u.forEach=i}}},function(e,t,n){var r=n(2),a=n(163),i=n(77),o=n(13),s=n(7),c=s("iterator"),u=s("toStringTag"),l=i.values;for(var p in a){var d=r[p],f=d&&d.prototype;if(f){if(f[c]!==l)try{o(f,c,l)}catch(e){f[c]=l}if(f[u]||o(f,u,p),a[p])for(var h in i)if(f[h]!==i[h])try{o(f,h,i[h])}catch(e){f[h]=i[h]}}}},function(e,t,n){var r=n(2),a=n(113),i=!r.setImmediate||!r.clearImmediate;n(0)({global:!0,bind:!0,enumerable:!0,forced:i},{setImmediate:a.set,clearImmediate:a.clear})},function(e,t,n){var r=n(0),a=n(2),i=n(155),o=n(24),s=a.process,c="process"==o(s);r({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(e){var t=c&&s.domain;i(t?t.bind(e):e)}})},function(e,t,n){var r=n(0),a=n(2),i=n(83),o=[].slice,s=function(e){return function(t,n){var r=arguments.length>2,a=r?o.call(arguments,2):void 0;return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,a)}:t,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(i)},{setTimeout:s(a.setTimeout),setInterval:s(a.setInterval)})},function(e,t,n){"use strict";n(149);var r,a=n(0),i=n(6),o=n(164),s=n(2),c=n(99),u=n(16),l=n(38),p=n(11),d=n(136),f=n(142),h=n(78).codeAt,m=n(412),v=n(26),g=n(165),y=n(19),x=s.URL,b=g.URLSearchParams,w=g.getState,_=y.set,k=y.getterFor("URL"),E=Math.floor,S=Math.pow,R=/[A-Za-z]/,T=/[\d+\-.A-Za-z]/,A=/\d/,D=/^(0x|0X)/,O=/^[0-7]+$/,I=/^\d+$/,j=/^[\dA-Fa-f]+$/,C=/[\u0000\u0009\u000A\u000D #%\/:?@[\\]]/,N=/[\u0000\u0009\u000A\u000D #\/:?@[\\]]/,L=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,q=/[\u0009\u000A\u000D]/g,U=function(e,t){var n,r,a;if("["==t.charAt(0)){if("]"!=t.charAt(t.length-1))return"Invalid host";if(!(n=M(t.slice(1,-1))))return"Invalid host";e.host=n}else if(W(e)){if(t=m(t),C.test(t))return"Invalid host";if(null===(n=P(t)))return"Invalid host";e.host=n}else{if(N.test(t))return"Invalid host";for(n="",r=f(t),a=0;a<r.length;a++)n+=Y(r[a],z);e.host=n}},P=function(e){var t,n,r,a,i,o,s,c=e.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(t=c.length)>4)return e;for(n=[],r=0;r<t;r++){if(""==(a=c[r]))return e;if(i=10,a.length>1&&"0"==a.charAt(0)&&(i=D.test(a)?16:8,a=a.slice(8==i?1:2)),""===a)o=0;else{if(!(10==i?I:8==i?O:j).test(a))return e;o=parseInt(a,i)}n.push(o)}for(r=0;r<t;r++)if(o=n[r],r==t-1){if(o>=S(256,5-t))return null}else if(o>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*S(256,3-r);return s},M=function(e){var t,n,r,a,i,o,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,p=0,d=function(){return e.charAt(p)};if(":"==d()){if(":"!=e.charAt(1))return;p+=2,l=++u}for(;d();){if(8==u)return;if(":"!=d()){for(t=n=0;n<4&&j.test(d());)t=16*t+parseInt(d(),16),p++,n++;if("."==d()){if(0==n)return;if(p-=n,u>6)return;for(r=0;d();){if(a=null,r>0){if(!("."==d()&&r<4))return;p++}if(!A.test(d()))return;for(;A.test(d());){if(i=parseInt(d(),10),null===a)a=i;else{if(0==a)return;a=10*a+i}if(a>255)return;p++}c[u]=256*c[u]+a,2!=++r&&4!=r||u++}if(4!=r)return;break}if(":"==d()){if(p++,!d())return}else if(d())return;c[u++]=t}else{if(null!==l)return;p++,l=++u}}if(null!==l)for(o=u-l,u=7;0!=u&&o>0;)s=c[u],c[u--]=c[l+o-1],c[l+--o]=s;else if(8!=u)return;return c},F=function(e){var t,n,r,a;if("number"==typeof e){for(t=[],n=0;n<4;n++)t.unshift(e%256),e=E(e/256);return t.join(".")}if("object"==typeof e){for(t="",r=function(e){for(var t=null,n=1,r=null,a=0,i=0;i<8;i++)0!==e[i]?(a>n&&(t=r,n=a),r=null,a=0):(null===r&&(r=i),++a);return a>n&&(t=r,n=a),t}(e),n=0;n<8;n++)a&&0===e[n]||(a&&(a=!1),r===n?(t+=n?":":"::",a=!0):(t+=e[n].toString(16),n<7&&(t+=":")));return"["+t+"]"}return e},z={},B=d({},z,{" ":1,'"':1,"<":1,">":1,"`":1}),V=d({},B,{"#":1,"?":1,"{":1,"}":1}),G=d({},V,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),Y=function(e,t){var n=h(e,0);return n>32&&n<127&&!p(t,e)?e:encodeURIComponent(e)},H={ftp:21,file:null,gopher:70,http:80,https:443,ws:80,wss:443},W=function(e){return p(H,e.scheme)},$=function(e){return""!=e.username||""!=e.password},J=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},Z=function(e,t){var n;return 2==e.length&&R.test(e.charAt(0))&&(":"==(n=e.charAt(1))||!t&&"|"==n)},X=function(e){var t;return e.length>1&&Z(e.slice(0,2))&&(2==e.length||"/"===(t=e.charAt(2))||"\\"===t||"?"===t||"#"===t)},K=function(e){var t=e.path,n=t.length;!n||"file"==e.scheme&&1==n&&Z(t[0],!0)||t.pop()},Q=function(e){return"."===e||"%2e"===e.toLowerCase()},ee={},te={},ne={},re={},ae={},ie={},oe={},se={},ce={},ue={},le={},pe={},de={},fe={},he={},me={},ve={},ge={},ye={},xe={},be={},we=function(e,t,n,a){var i,o,s,c,u,l=n||ee,d=0,h="",m=!1,v=!1,g=!1;for(n||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,t=t.replace(L,"")),t=t.replace(q,""),i=f(t);d<=i.length;){switch(o=i[d],l){case ee:if(!o||!R.test(o)){if(n)return"Invalid scheme";l=ne;continue}h+=o.toLowerCase(),l=te;break;case te:if(o&&(T.test(o)||"+"==o||"-"==o||"."==o))h+=o.toLowerCase();else{if(":"!=o){if(n)return"Invalid scheme";h="",l=ne,d=0;continue}if(n&&(W(e)!=p(H,h)||"file"==h&&($(e)||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=h,n)return void(W(e)&&H[e.scheme]==e.port&&(e.port=null));h="","file"==e.scheme?l=fe:W(e)&&a&&a.scheme==e.scheme?l=re:W(e)?l=se:"/"==i[d+1]?(l=ae,d++):(e.cannotBeABaseURL=!0,e.path.push(""),l=ye)}break;case ne:if(!a||a.cannotBeABaseURL&&"#"!=o)return"Invalid scheme";if(a.cannotBeABaseURL&&"#"==o){e.scheme=a.scheme,e.path=a.path.slice(),e.query=a.query,e.fragment="",e.cannotBeABaseURL=!0,l=be;break}l="file"==a.scheme?fe:ie;continue;case re:if("/"!=o||"/"!=i[d+1]){l=ie;continue}l=ce,d++;break;case ae:if("/"==o){l=ue;break}l=ge;continue;case ie:if(e.scheme=a.scheme,o==r)e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.query=a.query;else if("/"==o||"\\"==o&&W(e))l=oe;else if("?"==o)e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.query="",l=xe;else{if("#"!=o){e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.path.pop(),l=ge;continue}e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,e.path=a.path.slice(),e.query=a.query,e.fragment="",l=be}break;case oe:if(!W(e)||"/"!=o&&"\\"!=o){if("/"!=o){e.username=a.username,e.password=a.password,e.host=a.host,e.port=a.port,l=ge;continue}l=ue}else l=ce;break;case se:if(l=ce,"/"!=o||"/"!=h.charAt(d+1))continue;d++;break;case ce:if("/"!=o&&"\\"!=o){l=ue;continue}break;case ue:if("@"==o){m&&(h="%40"+h),m=!0,s=f(h);for(var y=0;y<s.length;y++){var x=s[y];if(":"!=x||g){var b=Y(x,G);g?e.password+=b:e.username+=b}else g=!0}h=""}else if(o==r||"/"==o||"?"==o||"#"==o||"\\"==o&&W(e)){if(m&&""==h)return"Invalid authority";d-=f(h).length+1,h="",l=le}else h+=o;break;case le:case pe:if(n&&"file"==e.scheme){l=me;continue}if(":"!=o||v){if(o==r||"/"==o||"?"==o||"#"==o||"\\"==o&&W(e)){if(W(e)&&""==h)return"Invalid host";if(n&&""==h&&($(e)||null!==e.port))return;if(c=U(e,h))return c;if(h="",l=ve,n)return;continue}"["==o?v=!0:"]"==o&&(v=!1),h+=o}else{if(""==h)return"Invalid host";if(c=U(e,h))return c;if(h="",l=de,n==pe)return}break;case de:if(!A.test(o)){if(o==r||"/"==o||"?"==o||"#"==o||"\\"==o&&W(e)||n){if(""!=h){var w=parseInt(h,10);if(w>65535)return"Invalid port";e.port=W(e)&&w===H[e.scheme]?null:w,h=""}if(n)return;l=ve;continue}return"Invalid port"}h+=o;break;case fe:if(e.scheme="file","/"==o||"\\"==o)l=he;else{if(!a||"file"!=a.scheme){l=ge;continue}if(o==r)e.host=a.host,e.path=a.path.slice(),e.query=a.query;else if("?"==o)e.host=a.host,e.path=a.path.slice(),e.query="",l=xe;else{if("#"!=o){X(i.slice(d).join(""))||(e.host=a.host,e.path=a.path.slice(),K(e)),l=ge;continue}e.host=a.host,e.path=a.path.slice(),e.query=a.query,e.fragment="",l=be}}break;case he:if("/"==o||"\\"==o){l=me;break}a&&"file"==a.scheme&&!X(i.slice(d).join(""))&&(Z(a.path[0],!0)?e.path.push(a.path[0]):e.host=a.host),l=ge;continue;case me:if(o==r||"/"==o||"\\"==o||"?"==o||"#"==o){if(!n&&Z(h))l=ge;else if(""==h){if(e.host="",n)return;l=ve}else{if(c=U(e,h))return c;if("localhost"==e.host&&(e.host=""),n)return;h="",l=ve}continue}h+=o;break;case ve:if(W(e)){if(l=ge,"/"!=o&&"\\"!=o)continue}else if(n||"?"!=o)if(n||"#"!=o){if(o!=r&&(l=ge,"/"!=o))continue}else e.fragment="",l=be;else e.query="",l=xe;break;case ge:if(o==r||"/"==o||"\\"==o&&W(e)||!n&&("?"==o||"#"==o)){if(".."===(u=(u=h).toLowerCase())||"%2e."===u||".%2e"===u||"%2e%2e"===u?(K(e),"/"==o||"\\"==o&&W(e)||e.path.push("")):Q(h)?"/"==o||"\\"==o&&W(e)||e.path.push(""):("file"==e.scheme&&!e.path.length&&Z(h)&&(e.host&&(e.host=""),h=h.charAt(0)+":"),e.path.push(h)),h="","file"==e.scheme&&(o==r||"?"==o||"#"==o))for(;e.path.length>1&&""===e.path[0];)e.path.shift();"?"==o?(e.query="",l=xe):"#"==o&&(e.fragment="",l=be)}else h+=Y(o,V);break;case ye:"?"==o?(e.query="",l=xe):"#"==o?(e.fragment="",l=be):o!=r&&(e.path[0]+=Y(o,z));break;case xe:n||"#"!=o?o!=r&&("'"==o&&W(e)?e.query+="%27":e.query+="#"==o?"%23":Y(o,z)):(e.fragment="",l=be);break;case be:o!=r&&(e.fragment+=Y(o,B))}d++}},_e=function(e){var t,n,r=l(this,_e,"URL"),a=arguments.length>1?arguments[1]:void 0,o=String(e),s=_(r,{type:"URL"});if(void 0!==a)if(a instanceof _e)t=k(a);else if(n=we(t={},String(a)))throw TypeError(n);if(n=we(s,o,null,t))throw TypeError(n);var c=s.searchParams=new b,u=w(c);u.updateSearchParams(s.query),u.updateURL=function(){s.query=String(c)||null},i||(r.href=Ee.call(r),r.origin=Se.call(r),r.protocol=Re.call(r),r.username=Te.call(r),r.password=Ae.call(r),r.host=De.call(r),r.hostname=Oe.call(r),r.port=Ie.call(r),r.pathname=je.call(r),r.search=Ce.call(r),r.searchParams=Ne.call(r),r.hash=Le.call(r))},ke=_e.prototype,Ee=function(){var e=k(this),t=e.scheme,n=e.username,r=e.password,a=e.host,i=e.port,o=e.path,s=e.query,c=e.fragment,u=t+":";return null!==a?(u+="//",$(e)&&(u+=n+(r?":"+r:"")+"@"),u+=F(a),null!==i&&(u+=":"+i)):"file"==t&&(u+="//"),u+=e.cannotBeABaseURL?o[0]:o.length?"/"+o.join("/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},Se=function(){var e=k(this),t=e.scheme,n=e.port;if("blob"==t)try{return new URL(t.path[0]).origin}catch(e){return"null"}return"file"!=t&&W(e)?t+"://"+F(e.host)+(null!==n?":"+n:""):"null"},Re=function(){return k(this).scheme+":"},Te=function(){return k(this).username},Ae=function(){return k(this).password},De=function(){var e=k(this),t=e.host,n=e.port;return null===t?"":null===n?F(t):F(t)+":"+n},Oe=function(){var e=k(this).host;return null===e?"":F(e)},Ie=function(){var e=k(this).port;return null===e?"":String(e)},je=function(){var e=k(this),t=e.path;return e.cannotBeABaseURL?t[0]:t.length?"/"+t.join("/"):""},Ce=function(){var e=k(this).query;return e?"?"+e:""},Ne=function(){return k(this).searchParams},Le=function(){var e=k(this).fragment;return e?"#"+e:""},qe=function(e,t){return{get:e,set:t,configurable:!0,enumerable:!0}};if(i&&c(ke,{href:qe(Ee,function(e){var t=k(this),n=String(e),r=we(t,n);if(r)throw TypeError(r);w(t.searchParams).updateSearchParams(t.query)}),origin:qe(Se),protocol:qe(Re,function(e){var t=k(this);we(t,String(e)+":",ee)}),username:qe(Te,function(e){var t=k(this),n=f(String(e));if(!J(t)){t.username="";for(var r=0;r<n.length;r++)t.username+=Y(n[r],G)}}),password:qe(Ae,function(e){var t=k(this),n=f(String(e));if(!J(t)){t.password="";for(var r=0;r<n.length;r++)t.password+=Y(n[r],G)}}),host:qe(De,function(e){var t=k(this);t.cannotBeABaseURL||we(t,String(e),le)}),hostname:qe(Oe,function(e){var t=k(this);t.cannotBeABaseURL||we(t,String(e),pe)}),port:qe(Ie,function(e){var t=k(this);J(t)||(""==(e=String(e))?t.port=null:we(t,e,de))}),pathname:qe(je,function(e){var t=k(this);t.cannotBeABaseURL||(t.path=[],we(t,e+"",ve))}),search:qe(Ce,function(e){var t=k(this);""==(e=String(e))?t.query=null:("?"==e.charAt(0)&&(e=e.slice(1)),t.query="",we(t,e,xe)),w(t.searchParams).updateSearchParams(t.query)}),searchParams:qe(Ne),hash:qe(Le,function(e){var t=k(this);""!=(e=String(e))?("#"==e.charAt(0)&&(e=e.slice(1)),t.fragment="",we(t,e,be)):t.fragment=null})}),u(ke,"toJSON",function(){return Ee.call(this)},{enumerable:!0}),u(ke,"toString",function(){return Ee.call(this)},{enumerable:!0}),x){var Ue=x.createObjectURL,Pe=x.revokeObjectURL;Ue&&u(_e,"createObjectURL",function(e){return Ue.apply(x,arguments)}),Pe&&u(_e,"revokeObjectURL",function(e){return Pe.apply(x,arguments)})}v(_e,"URL"),a({global:!0,forced:!o,sham:!i},{URL:_e})},function(e,t,n){"use strict";var r=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,s=String.fromCharCode,c=function(e){return e+22+75*(e<26)},u=function(e,t,n){var r=0;for(e=n?o(e/700):e>>1,e+=o(e/t);e>455;r+=36)e=o(e/35);return o(r+36*e/(e+38))},l=function(e){var t,n,r=[],a=(e=function(e){for(var t=[],n=0,r=e.length;n<r;){var a=e.charCodeAt(n++);if(a>=55296&&a<=56319&&n<r){var i=e.charCodeAt(n++);56320==(64512&i)?t.push(((1023&a)<<10)+(1023&i)+65536):(t.push(a),n--)}else t.push(a)}return t}(e)).length,l=128,p=0,d=72;for(t=0;t<e.length;t++)(n=e[t])<128&&r.push(s(n));var f=r.length,h=f;for(f&&r.push("-");h<a;){var m=2147483647;for(t=0;t<e.length;t++)(n=e[t])>=l&&n<m&&(m=n);var v=h+1;if(m-l>o((2147483647-p)/v))throw RangeError(i);for(p+=(m-l)*v,l=m,t=0;t<e.length;t++){if((n=e[t])<l&&++p>2147483647)throw RangeError(i);if(n==l){for(var g=p,y=36;;y+=36){var x=y<=d?1:y>=d+26?26:y-d;if(g<x)break;var b=g-x,w=36-x;r.push(s(c(x+b%w))),g=o(b/w)}r.push(s(c(g))),d=u(p,v,h==f),p=0,++h}}++p,++l}return r.join("")};e.exports=function(e){var t,n,i=[],o=e.toLowerCase().replace(a,".").split(".");for(t=0;t<o.length;t++)n=o[t],i.push(r.test(n)?"xn--"+l(n):n);return i.join(".")}},function(e,t,n){var r=n(4),a=n(65);e.exports=function(e){var t=a(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return r(t.call(e))}},function(e,t,n){"use strict";n(0)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function c(e,t,n,r){var a=t&&t.prototype instanceof m?t:m,i=Object.create(a.prototype),o=new T(r||[]);return i._invoke=function(e,t,n){var r=l;return function(a,i){if(r===d)throw new Error("Generator is already running");if(r===f){if("throw"===a)throw i;return D()}for(n.method=a,n.arg=i;;){var o=n.delegate;if(o){var s=E(o,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=u(e,t,n);if("normal"===c.type){if(r=n.done?f:p,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=f,n.method="throw",n.arg=c.arg)}}}(e,n,o),i}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var l="suspendedStart",p="suspendedYield",d="executing",f="completed",h={};function m(){}function v(){}function g(){}var y={};y[i]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(A([])));b&&b!==n&&r.call(b,i)&&(y=b);var w=g.prototype=m.prototype=Object.create(y);function _(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function k(e){var t;this._invoke=function(n,a){function i(){return new Promise(function(t,i){!function t(n,a,i,o){var s=u(e[n],e,a);if("throw"!==s.type){var c=s.arg,l=c.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(e){t("next",e,i,o)},function(e){t("throw",e,i,o)}):Promise.resolve(l).then(function(e){c.value=e,i(c)},function(e){return t("throw",e,i,o)})}o(s.arg)}(n,a,t,i)})}return t=t?t.then(i,i):i()}}function E(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,E(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=u(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var i=a.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function A(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,o=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return o.next=o}}return{next:D}}function D(){return{value:t,done:!0}}return v.prototype=w.constructor=g,g.constructor=v,g[s]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},_(k.prototype),k.prototype[o]=function(){return this},e.AsyncIterator=k,e.async=function(t,n,r,a){var i=new k(c(t,n,r,a));return e.isGeneratorFunction(n)?i:i.next().then(function(e){return e.done?e.value:i.next()})},_(w),w[s]="Generator",w[i]=function(){return this},w.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(R),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return s.type="throw",s.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var c=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(c&&u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=e,o.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;R(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,r=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),a=new RegExp("^"+n.source+r.source+"*(?::"+n.source+r.source+"*)?$"),i=0,o=1,s=2,c=3,u=4,l=5,p=6,d=7;function f(){}function h(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function m(e,t,n,r,a,f){for(var h,m=++t,v=i;;){var g=e.charAt(m);switch(g){case"=":if(v===o)h=e.slice(t,m),v=c;else{if(v!==s)throw new Error("attribute equal must after attrName");v=c}break;case"'":case'"':if(v===c||v===o){if(v===o&&(f.warning('attribute value must after "="'),h=e.slice(t,m)),t=m+1,!((m=e.indexOf(g,t))>0))throw new Error("attribute value no end '"+g+"' match");y=e.slice(t,m).replace(/&#?\w+;/g,a),n.add(h,y,t-1),v=l}else{if(v!=u)throw new Error('attribute value must after "="');y=e.slice(t,m).replace(/&#?\w+;/g,a),n.add(h,y,t),f.warning('attribute "'+h+'" missed start quot('+g+")!!"),t=m+1,v=l}break;case"/":switch(v){case i:n.setTagName(e.slice(t,m));case l:case p:case d:v=d,n.closed=!0;case u:case o:case s:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return f.error("unexpected end of input"),v==i&&n.setTagName(e.slice(t,m)),m;case">":switch(v){case i:n.setTagName(e.slice(t,m));case l:case p:case d:break;case u:case o:"/"===(y=e.slice(t,m)).slice(-1)&&(n.closed=!0,y=y.slice(0,-1));case s:v===s&&(y=h),v==u?(f.warning('attribute "'+y+'" missed quot(")!!'),n.add(h,y.replace(/&#?\w+;/g,a),t)):("http://www.w3.org/1999/xhtml"===r[""]&&y.match(/^(?:disabled|checked|selected)$/i)||f.warning('attribute "'+y+'" missed value!! "'+y+'" instead!!'),n.add(y,y,t));break;case c:throw new Error("attribute value missed!!")}return m;case"":g=" ";default:if(g<=" ")switch(v){case i:n.setTagName(e.slice(t,m)),v=p;break;case o:h=e.slice(t,m),v=s;break;case u:var y=e.slice(t,m).replace(/&#?\w+;/g,a);f.warning('attribute "'+y+'" missed quot(")!!'),n.add(h,y,t);case l:v=p}else switch(v){case s:n.tagName;"http://www.w3.org/1999/xhtml"===r[""]&&h.match(/^(?:disabled|checked|selected)$/i)||f.warning('attribute "'+h+'" missed value!! "'+h+'" instead2!!'),n.add(h,h,t),t=m,v=o;break;case l:f.warning('attribute space is required"'+h+'"!!');case p:v=o,t=m;break;case c:v=u,t=m;break;case d:throw new Error("elements closed character '/' and '>' must be connected to")}}m++}}function v(e,t,n){for(var r=e.tagName,a=null,i=e.length;i--;){var o=e[i],s=o.qName,c=o.value;if((d=s.indexOf(":"))>0)var u=o.prefix=s.slice(0,d),l=s.slice(d+1),p="xmlns"===u&&l;else l=s,u=null,p="xmlns"===s&&"";o.localName=l,!1!==p&&(null==a&&(a={},x(n,n={})),n[p]=a[p]=c,o.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(p,c))}for(i=e.length;i--;){(u=(o=e[i]).prefix)&&("xml"===u&&(o.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==u&&(o.uri=n[u||""]))}var d;(d=r.indexOf(":"))>0?(u=e.prefix=r.slice(0,d),l=e.localName=r.slice(d+1)):(u=null,l=e.localName=r);var f=e.uri=n[u||""];if(t.startElement(f,l,r,e),!e.closed)return e.currentNSMap=n,e.localNSMap=a,!0;if(t.endElement(f,l,r),a)for(u in a)t.endPrefixMapping(u)}function g(e,t,n,r,a){if(/^(?:script|textarea)$/i.test(n)){var i=e.indexOf("</"+n+">",t),o=e.substring(t+1,i);if(/[&<]/.test(o))return/^script$/i.test(n)?(a.characters(o,0,o.length),i):(o=o.replace(/&#?\w+;/g,r),a.characters(o,0,o.length),i)}return t+1}function y(e,t,n,r){var a=r[n];return null==a&&((a=e.lastIndexOf("</"+n+">"))<t&&(a=e.lastIndexOf("</"+n)),r[n]=a),a<t}function x(e,t){for(var n in e)t[n]=e[n]}function b(e,t,n,r){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(a=e.indexOf("--\x3e",t+4))>t?(n.comment(e,t+4,a-t-4),a+3):(r.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var a=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,a-t-9),n.endCDATA(),a+3}var i=function(e,t){var n,r=[],a=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;a.lastIndex=t,a.exec(e);for(;n=a.exec(e);)if(r.push(n),n[1])return r}(e,t),o=i.length;if(o>1&&/!doctype/i.test(i[0][0])){var s=i[1][0],c=o>3&&/^public$/i.test(i[2][0])&&i[3][0],u=o>4&&i[4][0],l=i[o-1];return n.startDTD(s,c&&c.replace(/^(['"])(.*?)\1$/,"$2"),u&&u.replace(/^(['"])(.*?)\1$/,"$2")),n.endDTD(),l.index+l[0].length}}return-1}function w(e,t,n){var r=e.indexOf("?>",t);if(r){var a=e.substring(t,r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(a){a[0].length;return n.processingInstruction(a[1],a[2]),r+2}return-1}return-1}function _(e){}function k(e,t){return e.__proto__=t,e}f.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),x(t,t={}),function(e,t,n,r,a){function i(e){var t=e.slice(1,-1);return t in n?n[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(a.error("entity not found:"+e),e)}function o(t){if(t>x){var n=e.substring(x,t).replace(/&#?\w+;/g,i);p&&s(x),r.characters(n,0,t-x),x=t}}function s(t,n){for(;t>=u&&(n=l.exec(e));)c=n.index,u=c+n[0].length,p.lineNumber++;p.columnNumber=t-c+1}var c=0,u=0,l=/.*(?:\r\n?|\n)|.*$/g,p=r.locator,d=[{currentNSMap:t}],f={},x=0;for(;;){try{var k=e.indexOf("<",x);if(k<0){if(!e.substr(x).match(/^\s*$/)){var E=r.doc,S=E.createTextNode(e.substr(x));E.appendChild(S),r.currentElement=S}return}switch(k>x&&o(k),e.charAt(k+1)){case"/":var R=e.indexOf(">",k+3),T=e.substring(k+2,R),A=d.pop();R<0?(T=e.substring(k+2).replace(/[\s<].*/,""),a.error("end tag name: "+T+" is not complete:"+A.tagName),R=k+1+T.length):T.match(/\s</)&&(T=T.replace(/[\s<].*/,""),a.error("end tag name: "+T+" maybe not complete"),R=k+1+T.length);var D=A.localNSMap,O=A.tagName==T;if(O||A.tagName&&A.tagName.toLowerCase()==T.toLowerCase()){if(r.endElement(A.uri,A.localName,T),D)for(var I in D)r.endPrefixMapping(I);O||a.fatalError("end tag name: "+T+" is not match the current start tagName:"+A.tagName)}else d.push(A);R++;break;case"?":p&&s(k),R=w(e,k,r);break;case"!":p&&s(k),R=b(e,k,r,a);break;default:p&&s(k);var j=new _,C=d[d.length-1].currentNSMap,N=(R=m(e,k,j,C,i,a),j.length);if(!j.closed&&y(e,R,j.tagName,f)&&(j.closed=!0,n.nbsp||a.warning("unclosed xml attribute")),p&&N){for(var L=h(p,{}),q=0;q<N;q++){var U=j[q];s(U.offset),U.locator=h(p,{})}r.locator=L,v(j,r,C)&&d.push(j),r.locator=p}else v(j,r,C)&&d.push(j);"http://www.w3.org/1999/xhtml"!==j.uri||j.closed?R++:R=g(e,R,j.tagName,i,r)}}catch(e){a.error("element parse error: "+e),R=-1}R>x?x=R:o(Math.max(k,x)+1)}}(e,t,n,r,this.errorHandler),r.endDocument()}},_.prototype={setTagName:function(e){if(!a.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,n){if(!a.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},k({},k.prototype)instanceof k||(k=function(e,t){function n(){}for(t in n.prototype=t,n=new n,e)n[t]=e[t];return n}),t.XMLReader=f},function(e,t){var n,r;n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&r.rotl(e,8)|4278255360&r.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=r.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],n=0,r=0;n<e.length;n++,r+=8)t[r>>>5]|=e[n]<<24-r%32;return t},wordsToBytes:function(e){for(var t=[],n=0;n<32*e.length;n+=8)t.push(e[n>>>5]>>>24-n%32&255);return t},bytesToHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push((e[n]>>>4).toString(16)),t.push((15&e[n]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t},bytesToBase64:function(e){for(var t=[],r=0;r<e.length;r+=3)for(var a=e[r]<<16|e[r+1]<<8|e[r+2],i=0;i<4;i++)8*r+6*i<=8*e.length?t.push(n.charAt(a>>>6*(3-i)&63)):t.push("=");return t.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var t=[],r=0,a=0;r<e.length;a=++r%4)0!=a&&t.push((n.indexOf(e.charAt(r-1))&Math.pow(2,-2*a+8)-1)<<2*a|n.indexOf(e.charAt(r))>>>6-2*a);return t}},e.exports=r},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(420):e.exports=n(422)},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.log=function(){var e;return"object"===("undefined"==typeof console?"undefined":r(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,a=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(a=r))}),t.splice(a,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(173)(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,r=60*n,a=60*r,i=24*a,o=7*i,s=365.25*i;function c(e,t,n,r){var a=t>=1.5*n;return Math.round(e/n)+" "+r+(a?"s":"")}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var c=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*s;case"weeks":case"week":case"w":return c*o;case"days":case"day":case"d":return c*i;case"hours":case"hour":case"hrs":case"hr":case"h":return c*a;case"minutes":case"minute":case"mins":case"min":case"m":return c*r;case"seconds":case"second":case"secs":case"sec":case"s":return c*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=i)return c(e,t,i,"day");if(t>=a)return c(e,t,a,"hour");if(t>=r)return c(e,t,r,"minute");if(t>=n)return c(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=i)return Math.round(e/i)+"d";if(t>=a)return Math.round(e/a)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){"use strict";var r=n(423),a=n(31);t.init=function(e){e.inspectOpts={};for(var n=Object.keys(t.inspectOpts),r=0;r<n.length;r++)e.inspectOpts[n[r]]=t.inspectOpts[n[r]]},t.log=function(){return process.stderr.write(a.format.apply(a,arguments)+"\n")},t.formatArgs=function(n){var r=this.namespace;if(this.useColors){var a=this.color,i="[3"+(a<8?a:"8;5;"+a),o="  ".concat(i,";1m").concat(r," [0m");n[0]=o+n[0].split("\n").join("\n"+o),n.push(i+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+r+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):r.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{var i=n(424);i&&(i.stderr||i).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,t){var n=t.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,t){return t.toUpperCase()}),r=process.env[t];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[n]=r,e},{}),e.exports=n(173)(t);var o=e.exports.formatters;o.o=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts)}},function(e,t){e.exports=require("tty")},function(e,t,n){"use strict";const r=n(174),a=n(425),i=process.env;let o;function s(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(!1===o)return 0;if(a("color=16m")||a("color=full")||a("color=truecolor"))return 3;if(a("color=256"))return 2;if(e&&!e.isTTY&&!0!==o)return 0;const t=o?1:0;if("win32"===process.platform){const e=r.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in i)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in i)||"codeship"===i.CI_NAME?1:t;if("TEAMCITY_VERSION"in i)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(i.TEAMCITY_VERSION)?1:0;if("truecolor"===i.COLORTERM)return 3;if("TERM_PROGRAM"in i){const e=parseInt((i.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(i.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(i.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(i.TERM)?1:"COLORTERM"in i?1:(i.TERM,t)}(e))}a("no-color")||a("no-colors")||a("color=false")?o=!1:(a("color")||a("colors")||a("color=true")||a("color=always"))&&(o=!0),"FORCE_COLOR"in i&&(o=0===i.FORCE_COLOR.length||0!==parseInt(i.FORCE_COLOR,10)),e.exports={supportsColor:s,stdout:s(process.stdout),stderr:s(process.stderr)}},function(e,t,n){"use strict";e.exports=(e,t)=>{t=t||process.argv;const n=e.startsWith("-")?"":1===e.length?"-":"--",r=t.indexOf(n+e),a=t.indexOf("--");return-1!==r&&(-1===a||r<a)}},function(e,t,n){var r=n(427).IncomingForm;r.IncomingForm=r,e.exports=r},function(e,t,n){var r=n(175),a=n(70),i=n(31),o=n(90),s=n(428),c=n(429).MultipartParser,u=n(430).QuerystringParser,l=n(432).OctetParser,p=n(433).JSONParser,d=n(177).StringDecoder,f=n(119).EventEmitter,h=n(53).Stream,m=n(174);function v(e){return this instanceof v?(f.call(this),e=e||{},this.error=null,this.ended=!1,this.maxFields=e.maxFields||1e3,this.maxFieldsSize=e.maxFieldsSize||20971520,this.maxFileSize=e.maxFileSize||209715200,this.keepExtensions=e.keepExtensions||!1,this.uploadDir=e.uploadDir||m.tmpdir&&m.tmpdir()||m.tmpDir(),this.encoding=e.encoding||"utf-8",this.headers=null,this.type=null,this.hash=e.hash||!1,this.multiples=e.multiples||!1,this.bytesReceived=null,this.bytesExpected=null,this._parser=null,this._flushing=0,this._fieldsSize=0,this._fileSize=0,this.openedFiles=[],this):new v(e)}i.inherits(v,f),t.IncomingForm=v,v.prototype.parse=function(e,t){if(this.pause=function(){try{e.pause()}catch(e){return this.ended||this._error(e),!1}return!0},this.resume=function(){try{e.resume()}catch(e){return this.ended||this._error(e),!1}return!0},t){var n={},r={};this.on("field",function(e,t){n[e]=t}).on("file",function(e,t){this.multiples&&r[e]?(Array.isArray(r[e])||(r[e]=[r[e]]),r[e].push(t)):r[e]=t}).on("error",function(e){t(e,n,r)}).on("end",function(){t(null,n,r)})}this.writeHeaders(e.headers);var a=this;return e.on("error",function(e){a._error(e)}).on("aborted",function(){a.emit("aborted"),a._error(new Error("Request aborted"))}).on("data",function(e){a.write(e)}).on("end",function(){if(!a.error){var e=a._parser.end();e&&a._error(e)}}),this},v.prototype.writeHeaders=function(e){this.headers=e,this._parseContentLength(),this._parseContentType()},v.prototype.write=function(e){if(!this.error){if(this._parser){this.bytesReceived+=e.length,this.emit("progress",this.bytesReceived,this.bytesExpected);var t=this._parser.write(e);return t!==e.length&&this._error(new Error("parser error, "+t+" of "+e.length+" bytes parsed")),t}this._error(new Error("uninitialized parser"))}},v.prototype.pause=function(){return!1},v.prototype.resume=function(){return!1},v.prototype.onPart=function(e){this.handlePart(e)},v.prototype.handlePart=function(e){var t=this;if(void 0===e.filename){var n="",r=new d(this.encoding);return e.on("data",function(e){t._fieldsSize+=e.length,t._fieldsSize>t.maxFieldsSize?t._error(new Error("maxFieldsSize exceeded, received "+t._fieldsSize+" bytes of field data")):n+=r.write(e)}),void e.on("end",function(){t.emit("field",e.name,n)})}this._flushing++;var a=new s({path:this._uploadPath(e.filename),name:e.filename,type:e.mime,hash:t.hash});this.emit("fileBegin",e.name,a),a.open(),this.openedFiles.push(a),e.on("data",function(e){t._fileSize+=e.length,t._fileSize>t.maxFileSize?t._error(new Error("maxFileSize exceeded, received "+t._fileSize+" bytes of file data")):0!=e.length&&(t.pause(),a.write(e,function(){t.resume()}))}),e.on("end",function(){a.end(function(){t._flushing--,t.emit("file",e.name,a),t._maybeEnd()})})},v.prototype._parseContentType=function(){if(0!==this.bytesExpected)if(this.headers["content-type"])if(this.headers["content-type"].match(/octet-stream/i))this._initOctetStream();else if(this.headers["content-type"].match(/urlencoded/i))this._initUrlencoded();else if(this.headers["content-type"].match(/multipart/i)){var e=this.headers["content-type"].match(/boundary=(?:"([^"]+)"|([^;]+))/i);e?this._initMultipart(e[1]||e[2]):this._error(new Error("bad content-type header, no multipart boundary"))}else this.headers["content-type"].match(/json/i)?this._initJSONencoded():this._error(new Error("bad content-type header, unknown content-type: "+this.headers["content-type"]));else this._error(new Error("bad content-type header, no content-type"));else this._parser=function(e){return{end:function(){return e.ended=!0,e._maybeEnd(),null}}}(this)},v.prototype._error=function(e){this.error||this.ended||(this.error=e,this.emit("error",e),Array.isArray(this.openedFiles)&&this.openedFiles.forEach(function(e){e._writeStream.destroy(),setTimeout(a.unlink,0,e.path,function(e){})}))},v.prototype._parseContentLength=function(){this.bytesReceived=0,this.headers["content-length"]?this.bytesExpected=parseInt(this.headers["content-length"],10):void 0===this.headers["transfer-encoding"]&&(this.bytesExpected=0),null!==this.bytesExpected&&this.emit("progress",this.bytesReceived,this.bytesExpected)},v.prototype._newParser=function(){return new c},v.prototype._initMultipart=function(e){this.type="multipart";var t,n,r,a=new c,i=this;a.initWithBoundary(e),a.onPartBegin=function(){(r=new h).readable=!0,r.headers={},r.name=null,r.filename=null,r.mime=null,r.transferEncoding="binary",r.transferBuffer="",t="",n=""},a.onHeaderField=function(e,n,r){t+=e.toString(i.encoding,n,r)},a.onHeaderValue=function(e,t,r){n+=e.toString(i.encoding,t,r)},a.onHeaderEnd=function(){t=t.toLowerCase(),r.headers[t]=n;var e=n.match(/\bname=("([^"]*)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t\/]+))/i);"content-disposition"==t?(e&&(r.name=e[2]||e[3]||""),r.filename=i._fileName(n)):"content-type"==t?r.mime=n:"content-transfer-encoding"==t&&(r.transferEncoding=n.toLowerCase()),t="",n=""},a.onHeadersEnd=function(){switch(r.transferEncoding){case"binary":case"7bit":case"8bit":a.onPartData=function(e,t,n){r.emit("data",e.slice(t,n))},a.onPartEnd=function(){r.emit("end")};break;case"base64":a.onPartData=function(e,t,n){r.transferBuffer+=e.slice(t,n).toString("ascii");var a=4*parseInt(r.transferBuffer.length/4,10);r.emit("data",new Buffer(r.transferBuffer.substring(0,a),"base64")),r.transferBuffer=r.transferBuffer.substring(a)},a.onPartEnd=function(){r.emit("data",new Buffer(r.transferBuffer,"base64")),r.emit("end")};break;default:return i._error(new Error("unknown transfer-encoding"))}i.onPart(r)},a.onEnd=function(){i.ended=!0,i._maybeEnd()},this._parser=a},v.prototype._fileName=function(e){var t=e.match(/\bfilename=("(.*?)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t\/]+))($|;\s)/i);if(t){var n=t[2]||t[3]||"",r=n.substr(n.lastIndexOf("\\")+1);return r=(r=r.replace(/%22/g,'"')).replace(/&#([\d]{4});/g,function(e,t){return String.fromCharCode(t)})}},v.prototype._initUrlencoded=function(){this.type="urlencoded";var e=new u(this.maxFields),t=this;e.onField=function(e,n){t.emit("field",e,n)},e.onEnd=function(){t.ended=!0,t._maybeEnd()},this._parser=e},v.prototype._initOctetStream=function(){this.type="octet-stream";var e=this.headers["x-file-name"],t=this.headers["content-type"],n=new s({path:this._uploadPath(e),name:e,type:t});this.emit("fileBegin",e,n),n.open(),this.openedFiles.push(n),this._flushing++;var r=this;r._parser=new l;var a=0;r._parser.on("data",function(e){r.pause(),a++,n.write(e,function(){a--,r.resume(),r.ended&&r._parser.emit("doneWritingFile")})}),r._parser.on("end",function(){r._flushing--,r.ended=!0;var e=function(){n.end(function(){r.emit("file","file",n),r._maybeEnd()})};0===a?e():r._parser.once("doneWritingFile",e)})},v.prototype._initJSONencoded=function(){this.type="json";var e=new p(this),t=this;e.onField=function(e,n){t.emit("field",e,n)},e.onEnd=function(){t.ended=!0,t._maybeEnd()},this._parser=e},v.prototype._uploadPath=function(e){var t="upload_"+r.randomBytes(16).toString("hex");if(this.keepExtensions){var n=o.extname(e);t+=n=n.replace(/(\.[a-z0-9]+).*/i,"$1")}return o.join(this.uploadDir,t)},v.prototype._maybeEnd=function(){!this.ended||this._flushing||this.error||this.emit("end")}},function(e,t,n){var r=n(31),a=n(70),i=n(119).EventEmitter,o=n(175);function s(e){for(var t in i.call(this),this.size=0,this.path=null,this.name=null,this.type=null,this.hash=null,this.lastModifiedDate=null,this._writeStream=null,e)this[t]=e[t];"string"==typeof this.hash?this.hash=o.createHash(e.hash):this.hash=null}e.exports=s,r.inherits(s,i),s.prototype.open=function(){this._writeStream=new a.WriteStream(this.path)},s.prototype.toJSON=function(){var e={size:this.size,path:this.path,name:this.name,type:this.type,mtime:this.lastModifiedDate,length:this.length,filename:this.filename,mime:this.mime};return this.hash&&""!=this.hash&&(e.hash=this.hash),e},s.prototype.write=function(e,t){var n=this;if(n.hash&&n.hash.update(e),this._writeStream.closed)return t();this._writeStream.write(e,function(){n.lastModifiedDate=new Date,n.size+=e.length,n.emit("progress",n.size),t()})},s.prototype.end=function(e){var t=this;t.hash&&(t.hash=t.hash.digest("hex")),this._writeStream.end(function(){t.emit("end"),e()})}},function(e,t,n){var r=n(176).Buffer,a=0,i={PARSER_UNINITIALIZED:a++,START:a++,START_BOUNDARY:a++,HEADER_FIELD_START:a++,HEADER_FIELD:a++,HEADER_VALUE_START:a++,HEADER_VALUE:a++,HEADER_VALUE_ALMOST_DONE:a++,HEADERS_ALMOST_DONE:a++,PART_DATA_START:a++,PART_DATA:a++,PART_END:a++,END:a++},o=1,s=o,c=o*=2,u=function(e){return 32|e};for(a in i)t[a]=i[a];function l(){this.boundary=null,this.boundaryChars=null,this.lookbehind=null,this.state=i.PARSER_UNINITIALIZED,this.index=null,this.flags=0}t.MultipartParser=l,l.stateToString=function(e){for(var t in i){if(i[t]===e)return t}},l.prototype.initWithBoundary=function(e){this.boundary=new r(e.length+4),this.boundary.write("\r\n--",0),this.boundary.write(e,4),this.lookbehind=new r(this.boundary.length+8),this.state=i.START,this.boundaryChars={};for(var t=0;t<this.boundary.length;t++)this.boundaryChars[this.boundary[t]]=!0},l.prototype.write=function(e){var t,n,r=this,a=0,o=e.length,l=this.index,p=this.index,d=this.state,f=this.flags,h=this.lookbehind,m=this.boundary,v=this.boundaryChars,g=this.boundary.length,y=g-1,x=e.length,b=function(e){r[e+"Mark"]=a},w=function(e,t,n,a){if(void 0===n||n!==a){var i="on"+e.substr(0,1).toUpperCase()+e.substr(1);i in r&&r[i](t,n,a)}},_=function(t,n){var i=t+"Mark";i in r&&(n?(w(t,e,r[i],a),delete r[i]):(w(t,e,r[i],e.length),r[i]=0))};for(a=0;a<o;a++)switch(t=e[a],d){case i.PARSER_UNINITIALIZED:return a;case i.START:p=0,d=i.START_BOUNDARY;case i.START_BOUNDARY:if(p==m.length-2){if(45==t)f|=c;else if(13!=t)return a;p++;break}if(p-1==m.length-2){if(f&c&&45==t)w("end"),d=i.END,f=0;else{if(f&c||10!=t)return a;p=0,w("partBegin"),d=i.HEADER_FIELD_START}break}t!=m[p+2]&&(p=-2),t==m[p+2]&&p++;break;case i.HEADER_FIELD_START:d=i.HEADER_FIELD,b("headerField"),p=0;case i.HEADER_FIELD:if(13==t){delete r["headerField"+"Mark"],d=i.HEADERS_ALMOST_DONE;break}if(p++,45==t)break;if(58==t){if(1==p)return a;_("headerField",!0),d=i.HEADER_VALUE_START;break}if((n=u(t))<97||n>122)return a;break;case i.HEADER_VALUE_START:if(32==t)break;b("headerValue"),d=i.HEADER_VALUE;case i.HEADER_VALUE:13==t&&(_("headerValue",!0),w("headerEnd"),d=i.HEADER_VALUE_ALMOST_DONE);break;case i.HEADER_VALUE_ALMOST_DONE:if(10!=t)return a;d=i.HEADER_FIELD_START;break;case i.HEADERS_ALMOST_DONE:if(10!=t)return a;w("headersEnd"),d=i.PART_DATA_START;break;case i.PART_DATA_START:d=i.PART_DATA,b("partData");case i.PART_DATA:if(l=p,0===p){for(a+=y;a<x&&!(e[a]in v);)a+=g;t=e[a-=y]}if(p<m.length)m[p]==t?(0===p&&_("partData",!0),p++):p=0;else if(p==m.length)p++,13==t?f|=s:45==t?f|=c:p=0;else if(p-1==m.length)if(f&s){if(p=0,10==t){f&=~s,w("partEnd"),w("partBegin"),d=i.HEADER_FIELD_START;break}}else f&c&&45==t?(w("partEnd"),w("end"),d=i.END,f=0):p=0;p>0?h[p-1]=t:l>0&&(w("partData",h,0,l),l=0,b("partData"),a--);break;case i.END:break;default:return a}return _("headerField"),_("headerValue"),_("partData"),this.index=p,this.state=d,this.flags=f,o},l.prototype.end=function(){var e=function(e,t){var n="on"+t.substr(0,1).toUpperCase()+t.substr(1);n in e&&e[n]()};if(this.state==i.HEADER_FIELD_START&&0===this.index||this.state==i.PART_DATA&&this.index==this.boundary.length)e(this,"partEnd"),e(this,"end");else if(this.state!=i.END)return new Error("MultipartParser.end(): stream ended unexpectedly: "+this.explain())},l.prototype.explain=function(){return"state = "+l.stateToString(this.state)}},function(e,t,n){var r=n(431);function a(e){this.maxKeys=e,this.buffer=""}t.QuerystringParser=a,a.prototype.write=function(e){return this.buffer+=e.toString("ascii"),e.length},a.prototype.end=function(){var e=r.parse(this.buffer,"&","=",{maxKeys:this.maxKeys});for(var t in e)this.onField(t,e[t]);this.buffer="",this.onEnd()}},function(e,t){e.exports=require("querystring")},function(e,t,n){var r=n(119).EventEmitter;function a(e){if(!(this instanceof a))return new a(e);r.call(this)}n(31).inherits(a,r),t.OctetParser=a,a.prototype.write=function(e){return this.emit("data",e),e.length},a.prototype.end=function(){this.emit("end")}},function(e,t,n){var r=n(176).Buffer;function a(e){this.parent=e,this.chunks=[],this.bytesWritten=0}t.JSONParser=a,a.prototype.write=function(e){return this.bytesWritten+=e.length,this.chunks.push(e),e.length},a.prototype.end=function(){try{var e=JSON.parse(r.concat(this.chunks));for(var t in e)this.onField(t,e[t])}catch(e){this.parent.emit("error",e)}this.data=null,this.onEnd()}},function(e,t,n){var r=n(435),a=n(31),i=n(90),o=n(120),s=n(178),c=n(71).parse,u=n(70),l=n(438),p=n(441),d=n(445);function f(e){if(!(this instanceof f))return new f;for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],r.call(this),e=e||{})this[t]=e[t]}e.exports=f,a.inherits(f,r),f.LINE_BREAK="\r\n",f.DEFAULT_CONTENT_TYPE="application/octet-stream",f.prototype.append=function(e,t,n){"string"==typeof(n=n||{})&&(n={filename:n});var i=r.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),a.isArray(t))this._error(new Error("Arrays are not supported."));else{var o=this._multiPartHeader(e,t,n),s=this._multiPartFooter();i(o),i(t),i(s),this._trackLength(o,t,n)}},f.prototype._trackLength=function(e,t,n){var r=0;null!=n.knownLength?r+=+n.knownLength:Buffer.isBuffer(t)?r=t.length:"string"==typeof t&&(r=Buffer.byteLength(t)),this._valueLength+=r,this._overheadLength+=Buffer.byteLength(e)+f.LINE_BREAK.length,t&&(t.path||t.readable&&t.hasOwnProperty("httpVersion"))&&(n.knownLength||this._valuesToMeasure.push(t))},f.prototype._lengthRetriever=function(e,t){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?t(null,e.end+1-(e.start?e.start:0)):u.stat(e.path,function(n,r){var a;n?t(n):(a=r.size-(e.start?e.start:0),t(null,a))}):e.hasOwnProperty("httpVersion")?t(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",function(n){e.pause(),t(null,+n.headers["content-length"])}),e.resume()):t("Unknown stream")},f.prototype._multiPartHeader=function(e,t,n){if("string"==typeof n.header)return n.header;var r,a=this._getContentDisposition(t,n),i=this._getContentType(t,n),o="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(a||[]),"Content-Type":[].concat(i||[])};for(var c in"object"==typeof n.header&&d(s,n.header),s)s.hasOwnProperty(c)&&null!=(r=s[c])&&(Array.isArray(r)||(r=[r]),r.length&&(o+=c+": "+r.join("; ")+f.LINE_BREAK));return"--"+this.getBoundary()+f.LINE_BREAK+o+f.LINE_BREAK},f.prototype._getContentDisposition=function(e,t){var n,r;return"string"==typeof t.filepath?n=i.normalize(t.filepath).replace(/\\/g,"/"):t.filename||e.name||e.path?n=i.basename(t.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(n=i.basename(e.client._httpMessage.path)),n&&(r='filename="'+n+'"'),r},f.prototype._getContentType=function(e,t){var n=t.contentType;return!n&&e.name&&(n=l.lookup(e.name)),!n&&e.path&&(n=l.lookup(e.path)),!n&&e.readable&&e.hasOwnProperty("httpVersion")&&(n=e.headers["content-type"]),n||!t.filepath&&!t.filename||(n=l.lookup(t.filepath||t.filename)),n||"object"!=typeof e||(n=f.DEFAULT_CONTENT_TYPE),n},f.prototype._multiPartFooter=function(){return function(e){var t=f.LINE_BREAK;0===this._streams.length&&(t+=this._lastBoundary()),e(t)}.bind(this)},f.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+f.LINE_BREAK},f.prototype.getHeaders=function(e){var t,n={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(t in e)e.hasOwnProperty(t)&&(n[t.toLowerCase()]=e[t]);return n},f.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},f.prototype._generateBoundary=function(){for(var e="--------------------------",t=0;t<24;t++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},f.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},f.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},f.prototype.getLength=function(e){var t=this._overheadLength+this._valueLength;this._streams.length&&(t+=this._lastBoundary().length),this._valuesToMeasure.length?p.parallel(this._valuesToMeasure,this._lengthRetriever,function(n,r){n?e(n):(r.forEach(function(e){t+=e}),e(null,t))}):process.nextTick(e.bind(this,null,t))},f.prototype.submit=function(e,t){var n,r,a={method:"post"};return"string"==typeof e?(e=c(e),r=d({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},a)):(r=d(e,a)).port||(r.port="https:"==r.protocol?443:80),r.headers=this.getHeaders(e.headers),n="https:"==r.protocol?s.request(r):o.request(r),this.getLength(function(e,r){e?this._error(e):(n.setHeader("Content-Length",r),this.pipe(n),t&&(n.on("error",t),n.on("response",t.bind(this,null))))}.bind(this)),n},f.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},f.prototype.toString=function(){return"[object FormData]"}},function(e,t,n){var r=n(31),a=n(53).Stream,i=n(436),o=n(437);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null}e.exports=s,r.inherits(s,a),s.create=function(e){var t=new this;for(var n in e=e||{})t[n]=e[n];return t},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof i)){var t=i.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=t}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,t){return a.prototype.pipe.call(this,e,t),this.resume(),e},s.prototype._getNext=function(){this._currentStream=null;var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),o(this._pipeNext.bind(this,e))}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var t=e;this.write(t),this._getNext()},s.prototype._handleErrors=function(e){var t=this;e.on("error",function(e){t._emitError(e)})},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach(function(t){t.dataSize&&(e.dataSize+=t.dataSize)}),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},function(e,t,n){var r=n(53).Stream,a=n(31);function i(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=i,a.inherits(i,r),i.create=function(e,t){var n=new this;for(var r in t=t||{})n[r]=t[r];n.source=e;var a=e.emit;return e.emit=function(){return n._handleEmit(arguments),a.apply(e,arguments)},e.on("error",function(){}),n.pauseStream&&e.pause(),n},Object.defineProperty(i.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),i.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},i.prototype.resume=function(){this._released||this.release(),this.source.resume()},i.prototype.pause=function(){this.source.pause()},i.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},i.prototype.pipe=function(){var e=r.prototype.pipe.apply(this,arguments);return this.resume(),e},i.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},i.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,n){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r,a,i,o=n(439),s=n(90).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,u=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),n=t&&o[t[1].toLowerCase()];return n&&n.charset?n.charset:!(!t||!u.test(t[1]))&&"UTF-8"}t.charset=l,t.charsets={lookup:l},t.contentType=function(e){if(!e||"string"!=typeof e)return!1;var n=-1===e.indexOf("/")?t.lookup(e):e;if(!n)return!1;if(-1===n.indexOf("charset")){var r=t.charset(n);r&&(n+="; charset="+r.toLowerCase())}return n},t.extension=function(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),r=n&&t.extensions[n[1].toLowerCase()];if(!r||!r.length)return!1;return r[0]},t.extensions=Object.create(null),t.lookup=function(e){if(!e||"string"!=typeof e)return!1;var n=s("x."+e).toLowerCase().substr(1);if(!n)return!1;return t.types[n]||!1},t.types=Object.create(null),r=t.extensions,a=t.types,i=["nginx","apache",void 0,"iana"],Object.keys(o).forEach(function(e){var t=o[e],n=t.extensions;if(n&&n.length){r[e]=n;for(var s=0;s<n.length;s++){var c=n[s];if(a[c]){var u=i.indexOf(o[a[c]].source),l=i.indexOf(t.source);if("application/octet-stream"!==a[c]&&(u>l||u===l&&"application/"===a[c].substr(0,12)))continue}a[c]=e}}})},function(e,t,n){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=n(440)},function(e){e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cbor":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma","es"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true},"application/fhir+json":{"source":"iana","compressible":true},"application/fhir+xml":{"source":"iana","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mmt-usd+xml":{"source":"iana","compressible":true},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","compressible":true},"application/msc-mixer+xml":{"source":"iana","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana"},"application/n-triples":{"source":"iana"},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana"},"application/news-groupinfo":{"source":"iana"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana"},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","compressible":true},"application/pidf-diff+xml":{"source":"iana","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true},"application/route-s-tsid+xml":{"source":"iana","compressible":true},"application/route-usd+xml":{"source":"iana","compressible":true},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana"},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true},"application/tve-trigger":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true},"application/urc-targetdesc+xml":{"source":"iana","compressible":true},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["keynote"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","compressible":true},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"apache","extensions":["der","crt","pem"]},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true},"application/xcap-caps+xml":{"source":"iana","compressible":true},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana"},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/stl":{"source":"iana"},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana"},"model/vnd.parasolid.transmit.binary":{"source":"iana"},"model/vnd.parasolid.transmit.text":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.usdz+zip":{"source":"iana","compressible":false},"model/vnd.valve.source.compiled-map":{"source":"iana"},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana"},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana"},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana","compressible":false},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},function(e,t,n){e.exports={parallel:n(442),serial:n(444),serialOrdered:n(184)}},function(e,t,n){var r=n(179),a=n(182),i=n(183);e.exports=function(e,t,n){var o=a(e);for(;o.index<(o.keyedList||e).length;)r(e,t,o,function(e,t){e?n(e,t):0!==Object.keys(o.jobs).length||n(null,o.results)}),o.index++;return i.bind(o,n)}},function(e,t){e.exports=function(e){var t="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;t?t(e):setTimeout(e,0)}},function(e,t,n){var r=n(184);e.exports=function(e,t,n){return r(e,t,null,n)}},function(e,t){e.exports=function(e,t){return Object.keys(t).forEach(function(n){e[n]=e[n]||t[n]}),e}},function(e,t,n){"use strict";const r=n(31),a=n(53),i=n(447);function o(e){a.call(this);const t=this.res=e.res;this.request=e,this.req=e.req,this.text=t.text,this.body=void 0!==t.body?t.body:{},this.files=t.files||{},this.buffered="string"==typeof this.text,this.header=this.headers=t.headers,this._setStatusProperties(t.statusCode),this._setHeaderProperties(this.header),this.setEncoding=t.setEncoding.bind(t),t.on("data",this.emit.bind(this,"data")),t.on("end",this.emit.bind(this,"end")),t.on("close",this.emit.bind(this,"close")),t.on("error",this.emit.bind(this,"error"))}e.exports=o,r.inherits(o,a),i(o.prototype),o.prototype.destroy=function(e){this.res.destroy(e)},o.prototype.pause=function(){this.res.pause()},o.prototype.resume=function(){this.res.resume()},o.prototype.toError=function(){const e=this.req,t=e.method,n=e.path,r=`cannot ${t} ${n} (${this.status})`,a=new Error(r);return a.status=this.status,a.text=this.text,a.method=t,a.path=n,a},o.prototype.setStatusProperties=function(e){return console.warn("In superagent 2.x setStatusProperties is a private method"),this._setStatusProperties(e)},o.prototype.toJSON=function(){return{req:this.request.toJSON(),header:this.header,status:this.status,text:this.text}}},function(e,t,n){"use strict";var r=n(185);function a(e){if(e)return function(e){for(var t in a.prototype)e[t]=a.prototype[t];return e}(e)}e.exports=a,a.prototype.get=function(e){return this.header[e.toLowerCase()]},a.prototype._setHeaderProperties=function(e){var t=e["content-type"]||"";this.type=r.type(t);var n=r.params(t);for(var a in n)this[a]=n[a];this.links={};try{e.link&&(this.links=r.parseLinks(e.link))}catch(e){}},a.prototype._setStatusProperties=function(e){var t=e/100|0;this.status=this.statusCode=e,this.statusType=t,this.info=1==t,this.ok=2==t,this.redirect=3==t,this.clientError=4==t,this.serverError=5==t,this.error=(4==t||5==t)&&this.toError(),this.created=201==e,this.accepted=202==e,this.noContent=204==e,this.badRequest=400==e,this.unauthorized=401==e,this.notAcceptable=406==e,this.forbidden=403==e,this.notFound=404==e,this.unprocessableEntity=422==e}},function(e,t,n){"use strict";const r=n(177).StringDecoder,a=n(53),i=n(187);t.unzip=(e,t)=>{const n=i.createUnzip(),o=new a;let s;o.req=e,n.on("error",e=>{e&&"Z_BUF_ERROR"===e.code?o.emit("end"):o.emit("error",e)}),t.pipe(n),t.setEncoding=e=>{s=new r(e)},n.on("data",e=>{if(s){const t=s.write(e);t.length&&o.emit("data",t)}else o.emit("data",e)}),n.on("end",()=>{o.emit("end")});const c=t.on;t.on=function(e,n){return"data"==e||"end"==e?o.on(e,n):"error"==e?(o.on(e,n),c.call(t,e,n)):c.call(t,e,n),this}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===a.call(e)},c=function(e){if(!e||"[object Object]"!==a.call(e))return!1;var t,n=r.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&r.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!i)return!1;for(t in e);return void 0===t||r.call(e,t)},u=function(e,t){i&&"__proto__"===t.name?i(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},l=function(e,t){if("__proto__"===t){if(!r.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var t,n,r,a,i,o,p=arguments[0],d=1,f=arguments.length,h=!1;for("boolean"==typeof p&&(h=p,p=arguments[1]||{},d=2),(null==p||"object"!=typeof p&&"function"!=typeof p)&&(p={});d<f;++d)if(null!=(t=arguments[d]))for(n in t)r=l(p,n),p!==(a=l(t,n))&&(h&&a&&(c(a)||(i=s(a)))?(i?(i=!1,o=r&&s(r)?r:[]):o=r&&c(r)?r:{},u(p,{name:n,newValue:e(h,o,a)})):void 0!==a&&u(p,{name:n,newValue:a}));return p}},function(e,t,n){n(90);var r=n(70);function a(){this.types=Object.create(null),this.extensions=Object.create(null)}a.prototype.define=function(e){for(var t in e){for(var n=e[t],r=0;r<n.length;r++)process.env.DEBUG_MIME&&this.types[n[r]]&&console.warn((this._loading||"define()").replace(/.*\//,""),'changes "'+n[r]+'" extension type from '+this.types[n[r]]+" to "+t),this.types[n[r]]=t;this.extensions[t]||(this.extensions[t]=n[0])}},a.prototype.load=function(e){this._loading=e;var t={};r.readFileSync(e,"ascii").split(/[\r\n]+/).forEach(function(e){var n=e.replace(/\s*#.*|^\s*|\s*$/g,"").split(/\s+/);t[n.shift()]=n}),this.define(t),this._loading=null},a.prototype.lookup=function(e,t){var n=e.replace(/^.*[\.\/\\]/,"").toLowerCase();return this.types[n]||t||this.default_type},a.prototype.extension=function(e){var t=e.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[t]};var i=new a;i.define(n(451)),i.default_type=i.lookup("bin"),i.Mime=a,i.charsets={lookup:function(e,t){return/^text\/|^application\/(javascript|json)/.test(e)?"UTF-8":t}},e.exports=i},function(e){e.exports=JSON.parse('{"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":[],"application/font-woff2":[],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":[],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":[],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":[],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":[],"application/x-msdownload":["com","bat"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":[],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":[],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":[],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":[],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":[],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":[],"audio/x-wav":[],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":[],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":[],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":[],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":[],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":[],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}')},function(e,t,n){"use strict";var r=n(189),a=n(190),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},o=Array.isArray,s=Array.prototype.push,c=function(e,t){s.apply(e,o(t)?t:[t])},u=Date.prototype.toISOString,l={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:r.encode,encodeValuesOnly:!1,indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},p=function e(t,n,a,i,o,s,u,p,d,f,h,m,v){var g=t;if("function"==typeof u?g=u(n,g):g instanceof Date&&(g=f(g)),null===g){if(i)return s&&!m?s(n,l.encoder,v):n;g=""}if("string"==typeof g||"number"==typeof g||"boolean"==typeof g||r.isBuffer(g))return s?[h(m?n:s(n,l.encoder,v))+"="+h(s(g,l.encoder,v))]:[h(n)+"="+h(String(g))];var y,x=[];if(void 0===g)return x;if(Array.isArray(u))y=u;else{var b=Object.keys(g);y=p?b.sort(p):b}for(var w=0;w<y.length;++w){var _=y[w];o&&null===g[_]||(Array.isArray(g)?c(x,e(g[_],a(n,_),a,i,o,s,u,p,d,f,h,m,v)):c(x,e(g[_],n+(d?"."+_:"["+_+"]"),a,i,o,s,u,p,d,f,h,m,v)))}return x};e.exports=function(e,t){var n=e,o=t?r.assign({},t):{};if(null!==o.encoder&&void 0!==o.encoder&&"function"!=typeof o.encoder)throw new TypeError("Encoder has to be a function.");var s=void 0===o.delimiter?l.delimiter:o.delimiter,u="boolean"==typeof o.strictNullHandling?o.strictNullHandling:l.strictNullHandling,d="boolean"==typeof o.skipNulls?o.skipNulls:l.skipNulls,f="boolean"==typeof o.encode?o.encode:l.encode,h="function"==typeof o.encoder?o.encoder:l.encoder,m="function"==typeof o.sort?o.sort:null,v=void 0===o.allowDots?l.allowDots:!!o.allowDots,g="function"==typeof o.serializeDate?o.serializeDate:l.serializeDate,y="boolean"==typeof o.encodeValuesOnly?o.encodeValuesOnly:l.encodeValuesOnly,x=o.charset||l.charset;if(void 0!==o.charset&&"utf-8"!==o.charset&&"iso-8859-1"!==o.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===o.format)o.format=a.default;else if(!Object.prototype.hasOwnProperty.call(a.formatters,o.format))throw new TypeError("Unknown format option provided.");var b,w,_=a.formatters[o.format];"function"==typeof o.filter?n=(w=o.filter)("",n):Array.isArray(o.filter)&&(b=w=o.filter);var k,E=[];if("object"!=typeof n||null===n)return"";k=o.arrayFormat in i?o.arrayFormat:"indices"in o?o.indices?"indices":"repeat":"indices";var S=i[k];b||(b=Object.keys(n)),m&&b.sort(m);for(var R=0;R<b.length;++R){var T=b[R];d&&null===n[T]||c(E,p(n[T],T,S,u,d,f?h:null,w,m,v,g,_,y,x))}var A=E.join(s),D=!0===o.addQueryPrefix?"?":"";return o.charsetSentinel&&(D+="iso-8859-1"===x?"utf8=%26%2310003%3B&":"utf8=%E2%9C%93&"),A.length>0?D+A:""}},function(e,t,n){"use strict";var r=n(189),a=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},o=function(e){return e.replace(/&#(\d+);/g,function(e,t){return String.fromCharCode(parseInt(t,10))})},s=function(e,t,n){if(e){var r=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,o=/(\[[^[\]]*])/.exec(r),s=o?r.slice(0,o.index):r,c=[];if(s){if(!n.plainObjects&&a.call(Object.prototype,s)&&!n.allowPrototypes)return;c.push(s)}for(var u=0;null!==(o=i.exec(r))&&u<n.depth;){if(u+=1,!n.plainObjects&&a.call(Object.prototype,o[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(o[1])}return o&&c.push("["+r.slice(o.index)+"]"),function(e,t,n){for(var r=t,a=e.length-1;a>=0;--a){var i,o=e[a];if("[]"===o&&n.parseArrays)i=[].concat(r);else{i=n.plainObjects?Object.create(null):{};var s="["===o.charAt(0)&&"]"===o.charAt(o.length-1)?o.slice(1,-1):o,c=parseInt(s,10);n.parseArrays||""!==s?!isNaN(c)&&o!==s&&String(c)===s&&c>=0&&n.parseArrays&&c<=n.arrayLimit?(i=[])[c]=r:i[s]=r:i={0:r}}r=i}return r}(c,t,n)}};e.exports=function(e,t){var n=t?r.assign({},t):{};if(null!==n.decoder&&void 0!==n.decoder&&"function"!=typeof n.decoder)throw new TypeError("Decoder has to be a function.");if(n.ignoreQueryPrefix=!0===n.ignoreQueryPrefix,n.delimiter="string"==typeof n.delimiter||r.isRegExp(n.delimiter)?n.delimiter:i.delimiter,n.depth="number"==typeof n.depth?n.depth:i.depth,n.arrayLimit="number"==typeof n.arrayLimit?n.arrayLimit:i.arrayLimit,n.parseArrays=!1!==n.parseArrays,n.decoder="function"==typeof n.decoder?n.decoder:i.decoder,n.allowDots=void 0===n.allowDots?i.allowDots:!!n.allowDots,n.plainObjects="boolean"==typeof n.plainObjects?n.plainObjects:i.plainObjects,n.allowPrototypes="boolean"==typeof n.allowPrototypes?n.allowPrototypes:i.allowPrototypes,n.parameterLimit="number"==typeof n.parameterLimit?n.parameterLimit:i.parameterLimit,n.strictNullHandling="boolean"==typeof n.strictNullHandling?n.strictNullHandling:i.strictNullHandling,void 0!==n.charset&&"utf-8"!==n.charset&&"iso-8859-1"!==n.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0===n.charset&&(n.charset=i.charset),""===e||null==e)return n.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var n,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=t.parameterLimit===1/0?void 0:t.parameterLimit,l=c.split(t.delimiter,u),p=-1,d=t.charset;if(t.charsetSentinel)for(n=0;n<l.length;++n)0===l[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===l[n]?d="utf-8":"utf8=%26%2310003%3B"===l[n]&&(d="iso-8859-1"),p=n,n=l.length);for(n=0;n<l.length;++n)if(n!==p){var f,h,m=l[n],v=m.indexOf("]="),g=-1===v?m.indexOf("="):v+1;-1===g?(f=t.decoder(m,i.decoder,d),h=t.strictNullHandling?null:""):(f=t.decoder(m.slice(0,g),i.decoder,d),h=t.decoder(m.slice(g+1),i.decoder,d)),h&&t.interpretNumericEntities&&"iso-8859-1"===d&&(h=o(h)),a.call(s,f)?s[f]=r.combine(s[f],h):s[f]=h}return s}(e,n):e,u=n.plainObjects?Object.create(null):{},l=Object.keys(c),p=0;p<l.length;++p){var d=l[p],f=s(d,c[d],n);u=r.merge(u,f,n)}return r.compact(u)}},function(e){e.exports=JSON.parse('{"name":"superagent","version":"3.8.3","description":"elegant & feature rich browser / node HTTP with a fluent API","scripts":{"prepare":"make all","test":"make test"},"keywords":["http","ajax","request","agent"],"license":"MIT","author":"TJ Holowaychuk <tj@vision-media.ca>","contributors":["Kornel Lesiński <kornel@geekhood.net>","Peter Lyons <pete@peterlyons.com>","Hunter Loftis <hunter@hunterloftis.com>"],"repository":{"type":"git","url":"git://github.com/visionmedia/superagent.git"},"dependencies":{"component-emitter":"^1.2.0","cookiejar":"^2.1.0","debug":"^3.1.0","extend":"^3.0.0","form-data":"^2.3.1","formidable":"^1.2.0","methods":"^1.1.1","mime":"^1.4.1","qs":"^6.5.1","readable-stream":"^2.3.5"},"devDependencies":{"Base64":"^1.0.1","basic-auth-connect":"^1.0.0","body-parser":"^1.18.2","browserify":"^14.1.0","cookie-parser":"^1.4.3","express":"^4.16.3","express-session":"^1.15.6","marked":"0.3.12","mocha":"^3.5.3","multer":"^1.3.0","should":"^11.2.0","should-http":"^0.1.1","zuul":"^3.11.1"},"browser":{"./lib/node/index.js":"./lib/client.js","./test/support/server.js":"./test/support/blank.js"},"component":{"scripts":{"superagent":"lib/client.js"}},"main":"./lib/node/index.js","engines":{"node":">= 4.0"}}')},function(e,t,n){"use strict";var r=n(456);function a(e){if(e)return function(e){for(var t in a.prototype)e[t]=a.prototype[t];return e}(e)}e.exports=a,a.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},a.prototype.parse=function(e){return this._parser=e,this},a.prototype.responseType=function(e){return this._responseType=e,this},a.prototype.serialize=function(e){return this._serializer=e,this},a.prototype.timeout=function(e){if(!e||"object"!=typeof e)return this._timeout=e,this._responseTimeout=0,this;for(var t in e)switch(t){case"deadline":this._timeout=e.deadline;break;case"response":this._responseTimeout=e.response;break;default:console.warn("Unknown timeout option",t)}return this},a.prototype.retry=function(e,t){return 0!==arguments.length&&!0!==e||(e=1),e<=0&&(e=0),this._maxRetries=e,this._retries=0,this._retryCallback=t,this};var i=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];a.prototype._shouldRetry=function(e,t){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{var n=this._retryCallback(e,t);if(!0===n)return!0;if(!1===n)return!1}catch(e){console.error(e)}if(t&&t.status&&t.status>=500&&501!=t.status)return!0;if(e){if(e.code&&~i.indexOf(e.code))return!0;if(e.timeout&&"ECONNABORTED"==e.code)return!0;if(e.crossDomain)return!0}return!1},a.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},a.prototype.then=function(e,t){if(!this._fullfilledPromise){var n=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise(function(e,t){n.end(function(n,r){n?t(n):e(r)})})}return this._fullfilledPromise.then(e,t)},a.prototype.catch=function(e){return this.then(void 0,e)},a.prototype.use=function(e){return e(this),this},a.prototype.ok=function(e){if("function"!=typeof e)throw Error("Callback required");return this._okCallback=e,this},a.prototype._isResponseOK=function(e){return!!e&&(this._okCallback?this._okCallback(e):e.status>=200&&e.status<300)},a.prototype.get=function(e){return this._header[e.toLowerCase()]},a.prototype.getHeader=a.prototype.get,a.prototype.set=function(e,t){if(r(e)){for(var n in e)this.set(n,e[n]);return this}return this._header[e.toLowerCase()]=t,this.header[e]=t,this},a.prototype.unset=function(e){return delete this._header[e.toLowerCase()],delete this.header[e],this},a.prototype.field=function(e,t){if(null==e)throw new Error(".field(name, val) name can not be empty");if(this._data&&console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"),r(e)){for(var n in e)this.field(n,e[n]);return this}if(Array.isArray(t)){for(var a in t)this.field(e,t[a]);return this}if(null==t)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof t&&(t=""+t),this._getFormData().append(e,t),this},a.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},a.prototype._auth=function(e,t,n,r){switch(n.type){case"basic":this.set("Authorization","Basic "+r(e+":"+t));break;case"auto":this.username=e,this.password=t;break;case"bearer":this.set("Authorization","Bearer "+e)}return this},a.prototype.withCredentials=function(e){return null==e&&(e=!0),this._withCredentials=e,this},a.prototype.redirects=function(e){return this._maxRedirects=e,this},a.prototype.maxResponseSize=function(e){if("number"!=typeof e)throw TypeError("Invalid argument");return this._maxResponseSize=e,this},a.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},a.prototype.send=function(e){var t=r(e),n=this._header["content-type"];if(this._formData&&console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"),t&&!this._data)Array.isArray(e)?this._data=[]:this._isHost(e)||(this._data={});else if(e&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(t&&r(this._data))for(var a in e)this._data[a]=e[a];else"string"==typeof e?(n||this.type("form"),n=this._header["content-type"],this._data="application/x-www-form-urlencoded"==n?this._data?this._data+"&"+e:e:(this._data||"")+e):this._data=e;return!t||this._isHost(e)?this:(n||this.type("json"),this)},a.prototype.sortQuery=function(e){return this._sort=void 0===e||e,this},a.prototype._finalizeQueryString=function(){var e=this._query.join("&");if(e&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+e),this._query.length=0,this._sort){var t=this.url.indexOf("?");if(t>=0){var n=this.url.substring(t+1).split("&");"function"==typeof this._sort?n.sort(this._sort):n.sort(),this.url=this.url.substring(0,t)+"?"+n.join("&")}}},a.prototype._appendQueryString=function(){console.trace("Unsupported")},a.prototype._timeoutError=function(e,t,n){if(!this._aborted){var r=new Error(e+t+"ms exceeded");r.timeout=t,r.code="ECONNABORTED",r.errno=n,this.timedout=!0,this.abort(),this.callback(r)}},a.prototype._setTimeouts=function(){var e=this;this._timeout&&!this._timer&&(this._timer=setTimeout(function(){e._timeoutError("Timeout of ",e._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(function(){e._timeoutError("Response timeout of ",e._responseTimeout,"ETIMEDOUT")},this._responseTimeout))}},function(e,t,n){"use strict";e.exports=function(e){return null!==e&&"object"==typeof e}},function(e,t,n){"use strict";const r=n(121).CookieJar,a=n(121).CookieAccessInfo,i=n(71).parse,o=n(172),s=n(458);let c=n(186);function u(e){if(!(this instanceof u))return new u(e);s.call(this),this.jar=new r,e&&(e.ca&&this.ca(e.ca),e.key&&this.key(e.key),e.pfx&&this.pfx(e.pfx),e.cert&&this.cert(e.cert))}e.exports=u,u.prototype=Object.create(s.prototype),u.prototype._saveCookies=function(e){const t=e.headers["set-cookie"];t&&this.jar.setCookies(t)},u.prototype._attachCookies=function(e){const t=i(e.url),n=a(t.hostname,t.pathname,"https:"==t.protocol),r=this.jar.getCookies(n).toValueString();e.cookies=r},c.forEach(e=>{const t=e.toUpperCase();u.prototype[e]=function(e,n){const r=new o.Request(t,e);return r.on("response",this._saveCookies.bind(this)),r.on("redirect",this._saveCookies.bind(this)),r.on("redirect",this._attachCookies.bind(this,r)),this._attachCookies(r),this._setDefaults(r),n&&r.end(n),r}}),u.prototype.del=u.prototype.delete},function(e,t){function n(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach(function(e){n.prototype[e]=function(){return this._defaults.push({fn:e,arguments:arguments}),this}}),n.prototype._setDefaults=function(e){this._defaults.forEach(function(t){e[t.fn].apply(e,t.arguments)})},e.exports=n},function(e,t,n){"use strict";t["application/x-www-form-urlencoded"]=n(460),t["application/json"]=n(461),t.text=n(462);const r=n(463);t["application/octet-stream"]=r,t["application/pdf"]=r,t.image=r},function(e,t,n){"use strict";const r=n(188);e.exports=function(e,t){e.text="",e.setEncoding("ascii"),e.on("data",t=>{e.text+=t}),e.on("end",()=>{try{t(null,r.parse(e.text))}catch(e){t(e)}})}},function(e,t,n){"use strict";e.exports=function(e,t){e.text="",e.setEncoding("utf8"),e.on("data",t=>{e.text+=t}),e.on("end",()=>{try{var n=e.text&&JSON.parse(e.text)}catch(t){var r=t;r.rawResponse=e.text||null,r.statusCode=e.statusCode}finally{t(r,n)}})}},function(e,t,n){"use strict";e.exports=function(e,t){e.text="",e.setEncoding("utf8"),e.on("data",t=>{e.text+=t}),e.on("end",t)}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=[];e.on("data",e=>{n.push(e)}),e.on("end",()=>{t(null,Buffer.concat(n))})}},function(e,t,n){"use strict";var r,a=function(e){var t=e.script,n=e.callbackName,r=e.timeout;t&&t.parentNode&&t.parentNode.removeChild(t),delete window[n],clearTimeout(r)},i=function e(t){var n=function(n){return"undefined"==typeof window?n:(n.end=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(n){var r=this,a=t.callbackParam||"callback",i=t.callbackName||"superagentCallback"+((new Date).valueOf()+parseInt(1e3*Math.random(),10)),o=t.timeout||1e3,s=setTimeout(e.errorWrapper.bind(this),o);this._jsonp={callbackName:i,callback:n,timeout:s},window[i]=e.callbackWrapper.bind(this),this._query.push(encodeURIComponent(a)+"="+encodeURIComponent(i));var c=this._query.join("&"),u=document.createElement("script"),l=this.url.indexOf("?")>-1?"&":"?",p=this.url+l+c;return u.src=p,u.onerror=function(t){e.errorWrapper.call(r,t)},document.head.appendChild(u),this._jsonp.script=u,this}}.call(n,t),n)};return"function"==typeof t.end?n(t):n};i.callbackWrapper=function(e){var t={body:e};a(this._jsonp),this._jsonp.callback.call(this,null,t)},i.errorWrapper=function(e){var t=new Error("404 Not found");e&&e instanceof Event&&"error"===e.type&&(t=new Error("Connection issue")),a(this._jsonp),this._jsonp.callback.call(this,t,null)},void 0!==e.exports?e.exports=i:void 0===(r=function(){return{jsonp:i}}.apply(t,[]))||(e.exports=r)},function(e,t,n){(function(e){var r;/*! https://mths.be/he v1.2.0 by @mathias | MIT license */!function(a){var i=t,o=(e&&e.exports,"object"==typeof global&&global);o.global!==o&&o.window;var s=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,c=/[\x01-\x7F]/g,u=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,l=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,p={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","\t":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon","ˆ":"circ","ˇ":"caron","°":"deg","©":"copy","®":"reg","℗":"copysr","℘":"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78","𝒶":"ascr","𝕒":"aopf","𝔞":"afr","𝔸":"Aopf","𝔄":"Afr","𝒜":"Ascr","ª":"ordf","á":"aacute","Á":"Aacute","à":"agrave","À":"Agrave","ă":"abreve","Ă":"Abreve","â":"acirc","Â":"Acirc","å":"aring","Å":"angst","ä":"auml","Ä":"Auml","ã":"atilde","Ã":"Atilde","ą":"aogon","Ą":"Aogon","ā":"amacr","Ā":"Amacr","æ":"aelig","Æ":"AElig","𝒷":"bscr","𝕓":"bopf","𝔟":"bfr","𝔹":"Bopf","ℬ":"Bscr","𝔅":"Bfr","𝔠":"cfr","𝒸":"cscr","𝕔":"copf","ℭ":"Cfr","𝒞":"Cscr","ℂ":"Copf","ć":"cacute","Ć":"Cacute","ĉ":"ccirc","Ĉ":"Ccirc","č":"ccaron","Č":"Ccaron","ċ":"cdot","Ċ":"Cdot","ç":"ccedil","Ç":"Ccedil","℅":"incare","𝔡":"dfr","ⅆ":"dd","𝕕":"dopf","𝒹":"dscr","𝒟":"Dscr","𝔇":"Dfr","ⅅ":"DD","𝔻":"Dopf","ď":"dcaron","Ď":"Dcaron","đ":"dstrok","Đ":"Dstrok","ð":"eth","Ð":"ETH","ⅇ":"ee","ℯ":"escr","𝔢":"efr","𝕖":"eopf","ℰ":"Escr","𝔈":"Efr","𝔼":"Eopf","é":"eacute","É":"Eacute","è":"egrave","È":"Egrave","ê":"ecirc","Ê":"Ecirc","ě":"ecaron","Ě":"Ecaron","ë":"euml","Ë":"Euml","ė":"edot","Ė":"Edot","ę":"eogon","Ę":"Eogon","ē":"emacr","Ē":"Emacr","𝔣":"ffr","𝕗":"fopf","𝒻":"fscr","𝔉":"Ffr","𝔽":"Fopf","ℱ":"Fscr","ﬀ":"fflig","ﬃ":"ffilig","ﬄ":"ffllig","ﬁ":"filig",fj:"fjlig","ﬂ":"fllig","ƒ":"fnof","ℊ":"gscr","𝕘":"gopf","𝔤":"gfr","𝒢":"Gscr","𝔾":"Gopf","𝔊":"Gfr","ǵ":"gacute","ğ":"gbreve","Ğ":"Gbreve","ĝ":"gcirc","Ĝ":"Gcirc","ġ":"gdot","Ġ":"Gdot","Ģ":"Gcedil","𝔥":"hfr","ℎ":"planckh","𝒽":"hscr","𝕙":"hopf","ℋ":"Hscr","ℌ":"Hfr","ℍ":"Hopf","ĥ":"hcirc","Ĥ":"Hcirc","ℏ":"hbar","ħ":"hstrok","Ħ":"Hstrok","𝕚":"iopf","𝔦":"ifr","𝒾":"iscr","ⅈ":"ii","𝕀":"Iopf","ℐ":"Iscr","ℑ":"Im","í":"iacute","Í":"Iacute","ì":"igrave","Ì":"Igrave","î":"icirc","Î":"Icirc","ï":"iuml","Ï":"Iuml","ĩ":"itilde","Ĩ":"Itilde","İ":"Idot","į":"iogon","Į":"Iogon","ī":"imacr","Ī":"Imacr","ĳ":"ijlig","Ĳ":"IJlig","ı":"imath","𝒿":"jscr","𝕛":"jopf","𝔧":"jfr","𝒥":"Jscr","𝔍":"Jfr","𝕁":"Jopf","ĵ":"jcirc","Ĵ":"Jcirc","ȷ":"jmath","𝕜":"kopf","𝓀":"kscr","𝔨":"kfr","𝒦":"Kscr","𝕂":"Kopf","𝔎":"Kfr","ķ":"kcedil","Ķ":"Kcedil","𝔩":"lfr","𝓁":"lscr","ℓ":"ell","𝕝":"lopf","ℒ":"Lscr","𝔏":"Lfr","𝕃":"Lopf","ĺ":"lacute","Ĺ":"Lacute","ľ":"lcaron","Ľ":"Lcaron","ļ":"lcedil","Ļ":"Lcedil","ł":"lstrok","Ł":"Lstrok","ŀ":"lmidot","Ŀ":"Lmidot","𝔪":"mfr","𝕞":"mopf","𝓂":"mscr","𝔐":"Mfr","𝕄":"Mopf","ℳ":"Mscr","𝔫":"nfr","𝕟":"nopf","𝓃":"nscr","ℕ":"Nopf","𝒩":"Nscr","𝔑":"Nfr","ń":"nacute","Ń":"Nacute","ň":"ncaron","Ň":"Ncaron","ñ":"ntilde","Ñ":"Ntilde","ņ":"ncedil","Ņ":"Ncedil","№":"numero","ŋ":"eng","Ŋ":"ENG","𝕠":"oopf","𝔬":"ofr","ℴ":"oscr","𝒪":"Oscr","𝔒":"Ofr","𝕆":"Oopf","º":"ordm","ó":"oacute","Ó":"Oacute","ò":"ograve","Ò":"Ograve","ô":"ocirc","Ô":"Ocirc","ö":"ouml","Ö":"Ouml","ő":"odblac","Ő":"Odblac","õ":"otilde","Õ":"Otilde","ø":"oslash","Ø":"Oslash","ō":"omacr","Ō":"Omacr","œ":"oelig","Œ":"OElig","𝔭":"pfr","𝓅":"pscr","𝕡":"popf","ℙ":"Popf","𝔓":"Pfr","𝒫":"Pscr","𝕢":"qopf","𝔮":"qfr","𝓆":"qscr","𝒬":"Qscr","𝔔":"Qfr","ℚ":"Qopf","ĸ":"kgreen","𝔯":"rfr","𝕣":"ropf","𝓇":"rscr","ℛ":"Rscr","ℜ":"Re","ℝ":"Ropf","ŕ":"racute","Ŕ":"Racute","ř":"rcaron","Ř":"Rcaron","ŗ":"rcedil","Ŗ":"Rcedil","𝕤":"sopf","𝓈":"sscr","𝔰":"sfr","𝕊":"Sopf","𝔖":"Sfr","𝒮":"Sscr","Ⓢ":"oS","ś":"sacute","Ś":"Sacute","ŝ":"scirc","Ŝ":"Scirc","š":"scaron","Š":"Scaron","ş":"scedil","Ş":"Scedil","ß":"szlig","𝔱":"tfr","𝓉":"tscr","𝕥":"topf","𝒯":"Tscr","𝔗":"Tfr","𝕋":"Topf","ť":"tcaron","Ť":"Tcaron","ţ":"tcedil","Ţ":"Tcedil","™":"trade","ŧ":"tstrok","Ŧ":"Tstrok","𝓊":"uscr","𝕦":"uopf","𝔲":"ufr","𝕌":"Uopf","𝔘":"Ufr","𝒰":"Uscr","ú":"uacute","Ú":"Uacute","ù":"ugrave","Ù":"Ugrave","ŭ":"ubreve","Ŭ":"Ubreve","û":"ucirc","Û":"Ucirc","ů":"uring","Ů":"Uring","ü":"uuml","Ü":"Uuml","ű":"udblac","Ű":"Udblac","ũ":"utilde","Ũ":"Utilde","ų":"uogon","Ų":"Uogon","ū":"umacr","Ū":"Umacr","𝔳":"vfr","𝕧":"vopf","𝓋":"vscr","𝔙":"Vfr","𝕍":"Vopf","𝒱":"Vscr","𝕨":"wopf","𝓌":"wscr","𝔴":"wfr","𝒲":"Wscr","𝕎":"Wopf","𝔚":"Wfr","ŵ":"wcirc","Ŵ":"Wcirc","𝔵":"xfr","𝓍":"xscr","𝕩":"xopf","𝕏":"Xopf","𝔛":"Xfr","𝒳":"Xscr","𝔶":"yfr","𝓎":"yscr","𝕪":"yopf","𝒴":"Yscr","𝔜":"Yfr","𝕐":"Yopf","ý":"yacute","Ý":"Yacute","ŷ":"ycirc","Ŷ":"Ycirc","ÿ":"yuml","Ÿ":"Yuml","𝓏":"zscr","𝔷":"zfr","𝕫":"zopf","ℨ":"Zfr","ℤ":"Zopf","𝒵":"Zscr","ź":"zacute","Ź":"Zacute","ž":"zcaron","Ž":"Zcaron","ż":"zdot","Ż":"Zdot","Ƶ":"imped","þ":"thorn","Þ":"THORN","ŉ":"napos","α":"alpha","Α":"Alpha","β":"beta","Β":"Beta","γ":"gamma","Γ":"Gamma","δ":"delta","Δ":"Delta","ε":"epsi","ϵ":"epsiv","Ε":"Epsilon","ϝ":"gammad","Ϝ":"Gammad","ζ":"zeta","Ζ":"Zeta","η":"eta","Η":"Eta","θ":"theta","ϑ":"thetav","Θ":"Theta","ι":"iota","Ι":"Iota","κ":"kappa","ϰ":"kappav","Κ":"Kappa","λ":"lambda","Λ":"Lambda","μ":"mu","µ":"micro","Μ":"Mu","ν":"nu","Ν":"Nu","ξ":"xi","Ξ":"Xi","ο":"omicron","Ο":"Omicron","π":"pi","ϖ":"piv","Π":"Pi","ρ":"rho","ϱ":"rhov","Ρ":"Rho","σ":"sigma","Σ":"Sigma","ς":"sigmaf","τ":"tau","Τ":"Tau","υ":"upsi","Υ":"Upsilon","ϒ":"Upsi","φ":"phi","ϕ":"phiv","Φ":"Phi","χ":"chi","Χ":"Chi","ψ":"psi","Ψ":"Psi","ω":"omega","Ω":"ohm","а":"acy","А":"Acy","б":"bcy","Б":"Bcy","в":"vcy","В":"Vcy","г":"gcy","Г":"Gcy","ѓ":"gjcy","Ѓ":"GJcy","д":"dcy","Д":"Dcy","ђ":"djcy","Ђ":"DJcy","е":"iecy","Е":"IEcy","ё":"iocy","Ё":"IOcy","є":"jukcy","Є":"Jukcy","ж":"zhcy","Ж":"ZHcy","з":"zcy","З":"Zcy","ѕ":"dscy","Ѕ":"DScy","и":"icy","И":"Icy","і":"iukcy","І":"Iukcy","ї":"yicy","Ї":"YIcy","й":"jcy","Й":"Jcy","ј":"jsercy","Ј":"Jsercy","к":"kcy","К":"Kcy","ќ":"kjcy","Ќ":"KJcy","л":"lcy","Л":"Lcy","љ":"ljcy","Љ":"LJcy","м":"mcy","М":"Mcy","н":"ncy","Н":"Ncy","њ":"njcy","Њ":"NJcy","о":"ocy","О":"Ocy","п":"pcy","П":"Pcy","р":"rcy","Р":"Rcy","с":"scy","С":"Scy","т":"tcy","Т":"Tcy","ћ":"tshcy","Ћ":"TSHcy","у":"ucy","У":"Ucy","ў":"ubrcy","Ў":"Ubrcy","ф":"fcy","Ф":"Fcy","х":"khcy","Х":"KHcy","ц":"tscy","Ц":"TScy","ч":"chcy","Ч":"CHcy","џ":"dzcy","Џ":"DZcy","ш":"shcy","Ш":"SHcy","щ":"shchcy","Щ":"SHCHcy","ъ":"hardcy","Ъ":"HARDcy","ы":"ycy","Ы":"Ycy","ь":"softcy","Ь":"SOFTcy","э":"ecy","Э":"Ecy","ю":"yucy","Ю":"YUcy","я":"yacy","Я":"YAcy","ℵ":"aleph","ℶ":"beth","ℷ":"gimel","ℸ":"daleth"},d=/["&'<>`]/g,f={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},h=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,m=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,v=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,g={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},y={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},x={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},b=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],w=String.fromCharCode,_={}.hasOwnProperty,k=function(e,t){return _.call(e,t)},E=function(e,t){if(!e)return t;var n,r={};for(n in t)r[n]=k(e,n)?e[n]:t[n];return r},S=function(e,t){var n="";return e>=55296&&e<=57343||e>1114111?(t&&A("character reference outside the permissible Unicode range"),"�"):k(x,e)?(t&&A("disallowed character reference"),x[e]):(t&&function(e,t){for(var n=-1,r=e.length;++n<r;)if(e[n]==t)return!0;return!1}(b,e)&&A("disallowed character reference"),e>65535&&(n+=w((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=w(e))},R=function(e){return"&#x"+e.toString(16).toUpperCase()+";"},T=function(e){return"&#"+e+";"},A=function(e){throw Error("Parse error: "+e)},D=function(e,t){(t=E(t,D.options)).strict&&m.test(e)&&A("forbidden code point");var n=t.encodeEverything,r=t.useNamedReferences,a=t.allowUnsafeSymbols,i=t.decimal?T:R,o=function(e){return i(e.charCodeAt(0))};return n?(e=e.replace(c,function(e){return r&&k(p,e)?"&"+p[e]+";":o(e)}),r&&(e=e.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),r&&(e=e.replace(l,function(e){return"&"+p[e]+";"}))):r?(a||(e=e.replace(d,function(e){return"&"+p[e]+";"})),e=(e=e.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;")).replace(l,function(e){return"&"+p[e]+";"})):a||(e=e.replace(d,o)),e.replace(s,function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return i(1024*(t-55296)+n-56320+65536)}).replace(u,o)};D.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var O=function(e,t){var n=(t=E(t,O.options)).strict;return n&&h.test(e)&&A("malformed character reference"),e.replace(v,function(e,r,a,i,o,s,c,u,l){var p,d,f,h,m,v;return r?g[m=r]:a?(m=a,(v=i)&&t.isAttributeValue?(n&&"="==v&&A("`&` did not start a character reference"),e):(n&&A("named character reference was not terminated by a semicolon"),y[m]+(v||""))):o?(f=o,d=s,n&&!d&&A("character reference was not terminated by a semicolon"),p=parseInt(f,10),S(p,n)):c?(h=c,d=u,n&&!d&&A("character reference was not terminated by a semicolon"),p=parseInt(h,16),S(p,n)):(n&&A("named character reference was not terminated by a semicolon"),e)})};O.options={isAttributeValue:!1,strict:!1};var I={version:"1.2.0",encode:D,decode:O,escape:function(e){return e.replace(d,function(e){return f[e]})},unescape:O};void 0===(r=function(){return I}.call(t,n,t,e))||(e.exports=r)}()}).call(this,n(192)(e))},function(e){e.exports=JSON.parse('{"name":"entrystore-js","version":"4.8.0-SNAPSHOT","main":"dist/EntryStore.node.js","module":"src/index.js","dependencies":{"blueimp-md5":"^2.10.0","core-js":"^3.1.4","he":"^1.2.0","lodash":"^4.17.10","moment":"^2.22.2","rdfjson":"https://bitbucket.org/metasolutions/rdfjson.git#develop","regenerator-runtime":"^0.13.3","superagent":"^3.8.3","superagent-jsonp":"^0.2.1","xmldom":"^0.1.27"},"devDependencies":{"@babel/cli":"^7.5.5","@babel/core":"^7.5.5","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/preset-env":"^7.5.5","babel-loader":"^8.0.6","clean-webpack-plugin":"^0.1.19","eslint":"^5.6.0","eslint-config-airbnb-base":"^13.1.0","eslint-plugin-import":"^2.14.0","jaguarjs-jsdoc":"0.0.1","nodeunit":"^0.11.2","print-licenses":"https://bitbucket.org/metasolutions/print-licenses#master","webpack":"^4.39.1","webpack-cli":"^3.2.1","webpack-merge":"^4.1.4"},"description":"Store is a JS-library for working EntryStore.","licenses":[{"type":"LGPL-3.0-only","url":"https://www.gnu.org/licenses/lgpl-3.0.en.html"}],"repository":"https://bitbucket.org/metasolutions/entrystore.js.git","homepage":"https://bitbucket.org/metasolutions/entrystore.js","scripts":{"build":"webpack --config webpack.all.js --mode production","build:dev":"webpack --config webpack.all.js --mode development","test":"nodeunit ./tests/executeTests.js","eslint":"eslint \'src/**/*.js\'","print-licenses":"print-licenses"}}')},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,n;function r(){return t.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function p(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function d(e,t,n,r){return Dt(e,t,n,r,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){if(null==e._isValid){var t=f(e),r=n.call(t.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&r);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function m(e){var t=d(NaN);return null!=e?p(f(t),e):f(t).userInvalidated=!0,t}n=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var v=r.momentProperties=[];function g(e,t){var n,r,a;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=f(t)),o(t._locale)||(e._locale=t._locale),v.length>0)for(n=0;n<v.length;n++)o(a=t[r=v[n]])||(e[r]=a);return e}var y=!1;function x(e){g(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,r.updateOffset(this),y=!1)}function b(e){return e instanceof x||null!=e&&null!=e._isAMomentObject}function w(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function _(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=w(t)),n}function k(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&_(e[r])!==_(t[r]))&&o++;return o+i}function E(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function S(e,t){var n=!0;return p(function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){for(var a,i=[],o=0;o<arguments.length;o++){if(a="","object"==typeof arguments[o]){for(var s in a+="\n["+o+"] ",arguments[0])a+=s+": "+arguments[0][s]+", ";a=a.slice(0,-2)}else a=arguments[o];i.push(a)}E(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var R,T={};function A(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),T[e]||(E(t),T[e]=!0)}function D(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function O(e,t){var n,r=p({},e);for(n in t)l(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},p(r[n],e[n]),p(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)l(e,n)&&!l(t,n)&&i(e[n])&&(r[n]=p({},r[n]));return r}function I(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,R=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n};var j={};function C(e,t){var n=e.toLowerCase();j[n]=j[n+"s"]=j[t]=e}function N(e){return"string"==typeof e?j[e]||j[e.toLowerCase()]:void 0}function L(e){var t,n,r={};for(n in e)l(e,n)&&(t=N(n))&&(r[t]=e[n]);return r}var q={};function U(e,t){q[e]=t}function P(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var M=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,z={},B={};function V(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(B[e]=a),t&&(B[t[0]]=function(){return P(a.apply(this,arguments),t[1],t[2])}),n&&(B[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function G(e,t){return e.isValid()?(t=Y(t,e.localeData()),z[t]=z[t]||function(e){var t,n,r,a=e.match(M);for(t=0,n=a.length;t<n;t++)B[a[t]]?a[t]=B[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=D(a[r])?a[r].call(t,e):a[r];return i}}(t),z[t](e)):e.localeData().invalidDate()}function Y(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,r),F.lastIndex=0,n-=1;return e}var H=/\d/,W=/\d\d/,$=/\d{3}/,J=/\d{4}/,Z=/[+-]?\d{6}/,X=/\d\d?/,K=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,ne=/[+-]?\d{1,6}/,re=/\d+/,ae=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,se=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ce={};function ue(e,t,n){ce[e]=D(t)?t:function(e,r){return e&&n?n:t}}function le(e,t){return l(ce,e)?ce[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,a){return t||n||r||a})))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var de={};function fe(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),s(t)&&(r=function(e,n){n[t]=_(e)}),n=0;n<e.length;n++)de[e[n]]=r}function he(e,t){fe(e,function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)})}function me(e,t,n){null!=t&&l(de,e)&&de[e](t,n._a,n,e)}var ve=0,ge=1,ye=2,xe=3,be=4,we=5,_e=6,ke=7,Ee=8;function Se(e){return Re(e)?366:365}function Re(e){return e%4==0&&e%100!=0||e%400==0}V("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),V(0,["YY",2],0,function(){return this.year()%100}),V(0,["YYYY",4],0,"year"),V(0,["YYYYY",5],0,"year"),V(0,["YYYYYY",6,!0],0,"year"),C("year","y"),U("year",1),ue("Y",ae),ue("YY",X,W),ue("YYYY",te,J),ue("YYYYY",ne,Z),ue("YYYYYY",ne,Z),fe(["YYYYY","YYYYYY"],ve),fe("YYYY",function(e,t){t[ve]=2===e.length?r.parseTwoDigitYear(e):_(e)}),fe("YY",function(e,t){t[ve]=r.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[ve]=parseInt(e,10)}),r.parseTwoDigitYear=function(e){return _(e)+(_(e)>68?1900:2e3)};var Te,Ae=De("FullYear",!0);function De(e,t){return function(n){return null!=n?(Ie(this,e,n),r.updateOffset(this,t),this):Oe(this,e)}}function Oe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Ie(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&Re(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),je(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function je(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?Re(e)?29:28:31-r%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},V("M",["MM",2],"Mo",function(){return this.month()+1}),V("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),V("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),U("month",8),ue("M",X),ue("MM",X,W),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ge]=_(e)-1}),fe(["MMM","MMMM"],function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ge]=a:f(n).invalidMonth=e});var Ce=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ne="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Le="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function qe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=_(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),je(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ue(e){return null!=e?(qe(this,e),r.updateOffset(this,!0),this):Oe(this,"Month")}var Pe=se,Me=se;function Fe(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=d([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=pe(r[t]),a[t]=pe(a[t]);for(t=0;t<24;t++)i[t]=pe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function ze(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Be(e,t,n){var r=7+t-n;return-(7+ze(e,0,r).getUTCDay()-t)%7+r-1}function Ve(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+Be(e,r,a);return s<=0?o=Se(i=e-1)+s:s>Se(e)?(i=e+1,o=s-Se(e)):(i=e,o=s),{year:i,dayOfYear:o}}function Ge(e,t,n){var r,a,i=Be(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+Ye(a=e.year()-1,t,n):o>Ye(e.year(),t,n)?(r=o-Ye(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function Ye(e,t,n){var r=Be(e,t,n),a=Be(e+1,t,n);return(Se(e)-r+a)/7}function He(e,t){return e.slice(t,7).concat(e.slice(0,t))}V("w",["ww",2],"wo","week"),V("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),U("week",5),U("isoWeek",5),ue("w",X),ue("ww",X,W),ue("W",X),ue("WW",X,W),he(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=_(e)}),V("d",0,"do","day"),V("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),V("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),V("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),V("e",0,0,"weekday"),V("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),U("day",11),U("weekday",11),U("isoWeekday",11),ue("d",X),ue("e",X),ue("E",X),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),he(["dd","ddd","dddd"],function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:f(n).invalidWeekday=e}),he(["d","e","E"],function(e,t,n,r){t[r]=_(e)});var We="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),$e="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Je="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ze=se,Xe=se,Ke=se;function Qe(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],c=[],u=[];for(t=0;t<7;t++)n=d([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),o.push(r),s.push(a),c.push(i),u.push(r),u.push(a),u.push(i);for(o.sort(e),s.sort(e),c.sort(e),u.sort(e),t=0;t<7;t++)s[t]=pe(s[t]),c[t]=pe(c[t]),u[t]=pe(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){V(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function nt(e,t){return t._meridiemParse}V("H",["HH",2],0,"hour"),V("h",["hh",2],0,et),V("k",["kk",2],0,function(){return this.hours()||24}),V("hmm",0,0,function(){return""+et.apply(this)+P(this.minutes(),2)}),V("hmmss",0,0,function(){return""+et.apply(this)+P(this.minutes(),2)+P(this.seconds(),2)}),V("Hmm",0,0,function(){return""+this.hours()+P(this.minutes(),2)}),V("Hmmss",0,0,function(){return""+this.hours()+P(this.minutes(),2)+P(this.seconds(),2)}),tt("a",!0),tt("A",!1),C("hour","h"),U("hour",13),ue("a",nt),ue("A",nt),ue("H",X),ue("h",X),ue("k",X),ue("HH",X,W),ue("hh",X,W),ue("kk",X,W),ue("hmm",K),ue("hmmss",Q),ue("Hmm",K),ue("Hmmss",Q),fe(["H","HH"],xe),fe(["k","kk"],function(e,t,n){var r=_(e);t[xe]=24===r?0:r}),fe(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),fe(["h","hh"],function(e,t,n){t[xe]=_(e),f(n).bigHour=!0}),fe("hmm",function(e,t,n){var r=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r)),f(n).bigHour=!0}),fe("hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r,2)),t[we]=_(e.substr(a)),f(n).bigHour=!0}),fe("Hmm",function(e,t,n){var r=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r))}),fe("Hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[xe]=_(e.substr(0,r)),t[be]=_(e.substr(r,2)),t[we]=_(e.substr(a))});var rt,at=De("Hours",!0),it={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ne,monthsShort:Le,week:{dow:0,doy:6},weekdays:We,weekdaysMin:Je,weekdaysShort:$e,meridiemParse:/[ap]\.?m?\.?/i},ot={},st={};function ct(e){return e?e.toLowerCase().replace("_","-"):e}function ut(t){var n=null;if(!ot[t]&&void 0!==e&&e&&e.exports)try{n=rt._abbr,!function(){var e=new Error("Cannot find module 'undefined'");throw e.code="MODULE_NOT_FOUND",e}(),lt(n)}catch(e){}return ot[t]}function lt(e,t){var n;return e&&((n=o(t)?dt(e):pt(e,t))?rt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),rt._abbr}function pt(e,t){if(null!==t){var n,r=it;if(t.abbr=e,null!=ot[e])A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])r=ot[t.parentLocale]._config;else{if(null==(n=ut(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;r=n._config}return ot[e]=new I(O(r,t)),st[e]&&st[e].forEach(function(e){pt(e.name,e.config)}),lt(e),ot[e]}return delete ot[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return rt;if(!a(e)){if(t=ut(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=ct(e[i]).split("-")).length,n=(n=ct(e[i+1]))?n.split("-"):null;t>0;){if(r=ut(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&k(a,n,!0)>=t-1)break;t--}i++}return rt}(e)}function ft(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[ge]<0||n[ge]>11?ge:n[ye]<1||n[ye]>je(n[ve],n[ge])?ye:n[xe]<0||n[xe]>24||24===n[xe]&&(0!==n[be]||0!==n[we]||0!==n[_e])?xe:n[be]<0||n[be]>59?be:n[we]<0||n[we]>59?we:n[_e]<0||n[_e]>999?_e:-1,f(e)._overflowDayOfYear&&(t<ve||t>ye)&&(t=ye),f(e)._overflowWeeks&&-1===t&&(t=ke),f(e)._overflowWeekday&&-1===t&&(t=Ee),f(e).overflow=t),e}function ht(e,t,n){return null!=e?e:null!=t?t:n}function mt(e){var t,n,a,i,o,s=[];if(!e._d){for(a=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ye]&&null==e._a[ge]&&function(e){var t,n,r,a,i,o,s,c;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,o=4,n=ht(t.GG,e._a[ve],Ge(Ot(),1,4).year),r=ht(t.W,1),((a=ht(t.E,1))<1||a>7)&&(c=!0);else{i=e._locale._week.dow,o=e._locale._week.doy;var u=Ge(Ot(),i,o);n=ht(t.gg,e._a[ve],u.year),r=ht(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(c=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(c=!0)):a=i}r<1||r>Ye(n,i,o)?f(e)._overflowWeeks=!0:null!=c?f(e)._overflowWeekday=!0:(s=Ve(n,r,a,i,o),e._a[ve]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=ht(e._a[ve],a[ve]),(e._dayOfYear>Se(o)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=ze(o,0,e._dayOfYear),e._a[ge]=n.getUTCMonth(),e._a[ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=a[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[xe]&&0===e._a[be]&&0===e._a[we]&&0===e._a[_e]&&(e._nextDay=!0,e._a[xe]=0),e._d=(e._useUTC?ze:function(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[xe]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(f(e).weekdayMismatch=!0)}}var vt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,xt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],bt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((\-?\d+)/i;function _t(e){var t,n,r,a,i,o,s=e._i,c=vt.exec(s)||gt.exec(s);if(c){for(f(e).iso=!0,t=0,n=xt.length;t<n;t++)if(xt[t][1].exec(c[1])){a=xt[t][0],r=!1!==xt[t][2];break}if(null==a)return void(e._isValid=!1);if(c[3]){for(t=0,n=bt.length;t<n;t++)if(bt[t][1].exec(c[3])){i=(c[2]||" ")+bt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(c[4]){if(!yt.exec(c[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),Tt(e)}else e._isValid=!1}var kt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Et(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var St={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Rt(e){var t,n,r,a,i,o,s,c=kt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(c){var u=(t=c[4],n=c[3],r=c[2],a=c[5],i=c[6],o=c[7],s=[Et(t),Le.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],o&&s.push(parseInt(o,10)),s);if(!function(e,t,n){return!e||$e.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(c[1],u,e))return;e._a=u,e._tzm=function(e,t,n){if(e)return St[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(c[8],c[9],c[10]),e._d=ze.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Tt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],f(e).empty=!0;var t,n,a,i,o,s=""+e._i,c=s.length,u=0;for(a=Y(e._f,e._locale).match(M)||[],t=0;t<a.length;t++)i=a[t],(n=(s.match(le(i,e))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&f(e).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),u+=n.length),B[i]?(n?f(e).empty=!1:f(e).unusedTokens.push(i),me(i,n,e)):e._strict&&!n&&f(e).unusedTokens.push(i);f(e).charsLeftOver=c-u,s.length>0&&f(e).unusedInput.push(s),e._a[xe]<=12&&!0===f(e).bigHour&&e._a[xe]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[xe]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[xe],e._meridiem),mt(e),ft(e)}else Rt(e);else _t(e)}function At(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?m({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new x(ft(t)):(c(t)?e._d=t:a(n)?function(e){var t,n,r,a,i;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,t=g({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Tt(t),h(t)&&(i+=f(t).charsLeftOver,i+=10*f(t).unusedTokens.length,f(t).score=i,(null==r||i<r)&&(r=i,n=t));p(e,n||t)}(e):n?Tt(e):function(e){var t=e._i;o(t)?e._d=new Date(r.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(_t(e),!1===e._isValid&&(delete e._isValid,Rt(e),!1===e._isValid&&(delete e._isValid,r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):a(t)?(e._a=u(t.slice(0),function(e){return parseInt(e,10)}),mt(e)):i(t)?function(e){if(!e._d){var t=L(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),mt(e)}}(e):s(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function Dt(e,t,n,r,o){var s,c={};return!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||a(e)&&0===e.length)&&(e=void 0),c._isAMomentObject=!0,c._useUTC=c._isUTC=o,c._l=n,c._i=e,c._f=t,c._strict=r,(s=new x(ft(At(c))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Ot(e,t,n,r){return Dt(e,t,n,r,!1)}r.createFromInputFallback=S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),r.ISO_8601=function(){},r.RFC_2822=function(){};var It=S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:m()}),jt=S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:m()});function Ct(e,t){var n,r;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return Ot();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Nt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Lt(e){var t=L(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,c=t.minute||0,u=t.second||0,l=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Nt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Nt.length;++r)if(e[Nt[r]]){if(n)return!1;parseFloat(e[Nt[r]])!==_(e[Nt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+l+1e3*u+6e4*c+1e3*s*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=dt(),this._bubble()}function qt(e){return e instanceof Lt}function Ut(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Pt(e,t){V(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+P(~~(e/60),2)+t+P(~~e%60,2)})}Pt("Z",":"),Pt("ZZ",""),ue("Z",oe),ue("ZZ",oe),fe(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Ft(oe,e)});var Mt=/([\+\-]|\d\d)/gi;function Ft(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(Mt)||["-",0,0],a=60*r[1]+_(r[2]);return 0===a?0:"+"===r[0]?a:-a}function zt(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(b(e)||c(e)?e.valueOf():Ot(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),r.updateOffset(n,!1),n):Ot(e).local()}function Bt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Vt(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Gt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Yt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ht(e,t){var n,r,a,i,o,c,u=e,p=null;return qt(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(u={},t?u[t]=e:u.milliseconds=e):(p=Gt.exec(e))?(n="-"===p[1]?-1:1,u={y:0,d:_(p[ye])*n,h:_(p[xe])*n,m:_(p[be])*n,s:_(p[we])*n,ms:_(Ut(1e3*p[_e]))*n}):(p=Yt.exec(e))?(n="-"===p[1]?-1:1,u={y:Wt(p[2],n),M:Wt(p[3],n),w:Wt(p[4],n),d:Wt(p[5],n),h:Wt(p[6],n),m:Wt(p[7],n),s:Wt(p[8],n)}):null==u?u={}:"object"==typeof u&&("from"in u||"to"in u)&&(i=Ot(u.from),o=Ot(u.to),a=i.isValid()&&o.isValid()?(o=zt(o,i),i.isBefore(o)?c=$t(i,o):((c=$t(o,i)).milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0},(u={}).ms=a.milliseconds,u.M=a.months),r=new Lt(u),qt(e)&&l(e,"_locale")&&(r._locale=e._locale),r}function Wt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function $t(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Jt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Zt(this,Ht(n="string"==typeof n?+n:n,r),e),this}}function Zt(e,t,n,a){var i=t._milliseconds,o=Ut(t._days),s=Ut(t._months);e.isValid()&&(a=null==a||a,s&&qe(e,Oe(e,"Month")+s*n),o&&Ie(e,"Date",Oe(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),a&&r.updateOffset(e,o||s))}Ht.fn=Lt.prototype,Ht.invalid=function(){return Ht(NaN)};var Xt=Jt(1,"add"),Kt=Jt(-1,"subtract");function Qt(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function en(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var tn=S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function nn(){return this._locale}var rn=1e3,an=60*rn,on=60*an,sn=3506328*on;function cn(e,t){return(e%t+t)%t}function un(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function pn(e,t){V(0,[e,e.length],0,t)}function dn(e,t,n,r,a){var i;return null==e?Ge(this,r,a).year:(t>(i=Ye(e,r,a))&&(t=i),function(e,t,n,r,a){var i=Ve(e,t,n,r,a),o=ze(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,e,t,n,r,a))}V(0,["gg",2],0,function(){return this.weekYear()%100}),V(0,["GG",2],0,function(){return this.isoWeekYear()%100}),pn("gggg","weekYear"),pn("ggggg","weekYear"),pn("GGGG","isoWeekYear"),pn("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),U("weekYear",1),U("isoWeekYear",1),ue("G",ae),ue("g",ae),ue("GG",X,W),ue("gg",X,W),ue("GGGG",te,J),ue("gggg",te,J),ue("GGGGG",ne,Z),ue("ggggg",ne,Z),he(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=_(e)}),he(["gg","GG"],function(e,t,n,a){t[a]=r.parseTwoDigitYear(e)}),V("Q",0,"Qo","quarter"),C("quarter","Q"),U("quarter",7),ue("Q",H),fe("Q",function(e,t){t[ge]=3*(_(e)-1)}),V("D",["DD",2],"Do","date"),C("date","D"),U("date",9),ue("D",X),ue("DD",X,W),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ye),fe("Do",function(e,t){t[ye]=_(e.match(X)[0])});var fn=De("Date",!0);V("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),U("dayOfYear",4),ue("DDD",ee),ue("DDDD",$),fe(["DDD","DDDD"],function(e,t,n){n._dayOfYear=_(e)}),V("m",["mm",2],0,"minute"),C("minute","m"),U("minute",14),ue("m",X),ue("mm",X,W),fe(["m","mm"],be);var hn=De("Minutes",!1);V("s",["ss",2],0,"second"),C("second","s"),U("second",15),ue("s",X),ue("ss",X,W),fe(["s","ss"],we);var mn,vn=De("Seconds",!1);for(V("S",0,0,function(){return~~(this.millisecond()/100)}),V(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),V(0,["SSS",3],0,"millisecond"),V(0,["SSSS",4],0,function(){return 10*this.millisecond()}),V(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),V(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),V(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),V(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),V(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),U("millisecond",16),ue("S",ee,H),ue("SS",ee,W),ue("SSS",ee,$),mn="SSSS";mn.length<=9;mn+="S")ue(mn,re);function gn(e,t){t[_e]=_(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")fe(mn,gn);var yn=De("Milliseconds",!1);V("z",0,0,"zoneAbbr"),V("zz",0,0,"zoneName");var xn=x.prototype;function bn(e){return e}xn.add=Xt,xn.calendar=function(e,t){var n=e||Ot(),a=zt(n,this).startOf("day"),i=r.calendarFormat(this,a)||"sameElse",o=t&&(D(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Ot(n)))},xn.clone=function(){return new x(this)},xn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=zt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=N(t)){case"year":i=Qt(this,r)/12;break;case"month":i=Qt(this,r);break;case"quarter":i=Qt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:w(i)},xn.endOf=function(e){var t;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?ln:un;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=on-cn(t+(this._isUTC?0:this.utcOffset()*an),on)-1;break;case"minute":t=this._d.valueOf(),t+=an-cn(t,an)-1;break;case"second":t=this._d.valueOf(),t+=rn-cn(t,rn)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},xn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=G(this,e);return this.localeData().postformat(t)},xn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Ot(e).isValid())?Ht({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},xn.fromNow=function(e){return this.from(Ot(),e)},xn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Ot(e).isValid())?Ht({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},xn.toNow=function(e){return this.to(Ot(),e)},xn.get=function(e){return D(this[e=N(e)])?this[e]():this},xn.invalidAt=function(){return f(this).overflow},xn.isAfter=function(e,t){var n=b(e)?e:Ot(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},xn.isBefore=function(e,t){var n=b(e)?e:Ot(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},xn.isBetween=function(e,t,n,r){var a=b(e)?e:Ot(e),i=b(t)?t:Ot(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},xn.isSame=function(e,t){var n,r=b(e)?e:Ot(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},xn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},xn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},xn.isValid=function(){return h(this)},xn.lang=tn,xn.locale=en,xn.localeData=nn,xn.max=jt,xn.min=It,xn.parsingFlags=function(){return p({},f(this))},xn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:q[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=L(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(D(this[e=N(e)]))return this[e](t);return this},xn.startOf=function(e){var t;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?ln:un;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=cn(t+(this._isUTC?0:this.utcOffset()*an),on);break;case"minute":t=this._d.valueOf(),t-=cn(t,an);break;case"second":t=this._d.valueOf(),t-=cn(t,rn)}return this._d.setTime(t),r.updateOffset(this,!0),this},xn.subtract=Kt,xn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},xn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},xn.toDate=function(){return new Date(this.valueOf())},xn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?G(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):D(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",G(n,"Z")):G(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},xn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},xn.toJSON=function(){return this.isValid()?this.toISOString():null},xn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},xn.unix=function(){return Math.floor(this.valueOf()/1e3)},xn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},xn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},xn.year=Ae,xn.isLeapYear=function(){return Re(this.year())},xn.weekYear=function(e){return dn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},xn.isoWeekYear=function(e){return dn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},xn.quarter=xn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},xn.month=Ue,xn.daysInMonth=function(){return je(this.year(),this.month())},xn.week=xn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},xn.isoWeek=xn.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},xn.weeksInYear=function(){var e=this.localeData()._week;return Ye(this.year(),e.dow,e.doy)},xn.isoWeeksInYear=function(){return Ye(this.year(),1,4)},xn.date=fn,xn.day=xn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},xn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},xn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},xn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},xn.hour=xn.hours=at,xn.minute=xn.minutes=hn,xn.second=xn.seconds=vn,xn.millisecond=xn.milliseconds=yn,xn.utcOffset=function(e,t,n){var a,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ft(oe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Bt(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),i!==e&&(!t||this._changeInProgress?Zt(this,Ht(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Bt(this)},xn.utc=function(e){return this.utcOffset(0,e)},xn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},xn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ft(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},xn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Ot(e).utcOffset():0,(this.utcOffset()-e)%60==0)},xn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},xn.isLocal=function(){return!!this.isValid()&&!this._isUTC},xn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},xn.isUtc=Vt,xn.isUTC=Vt,xn.zoneAbbr=function(){return this._isUTC?"UTC":""},xn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},xn.dates=S("dates accessor is deprecated. Use date instead.",fn),xn.months=S("months accessor is deprecated. Use month instead",Ue),xn.years=S("years accessor is deprecated. Use year instead",Ae),xn.zone=S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),xn.isDSTShifted=S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(g(e,this),(e=At(e))._a){var t=e._isUTC?d(e._a):Ot(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var wn=I.prototype;function _n(e,t,n,r){var a=dt(),i=d().set(r,t);return a[n](i,e)}function kn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return _n(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=_n(e,r,n,"month");return a}function En(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var a,i=dt(),o=e?i._week.dow:0;if(null!=n)return _n(t,(n+o)%7,r,"day");var c=[];for(a=0;a<7;a++)c[a]=_n(t,(a+o)%7,r,"day");return c}wn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return D(r)?r.call(t,n):r},wn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},wn.invalidDate=function(){return this._invalidDate},wn.ordinal=function(e){return this._ordinal.replace("%d",e)},wn.preparse=bn,wn.postformat=bn,wn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return D(a)?a(e,t,n,r):a.replace(/%d/i,e)},wn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return D(n)?n(t):n.replace(/%s/i,t)},wn.set=function(e){var t,n;for(n in e)D(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},wn.months=function(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ce).test(t)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone},wn.monthsShort=function(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ce.test(t)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},wn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return function(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=d([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Te.call(this._shortMonthsParse,o))?a:null:-1!==(a=Te.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Te.call(this._shortMonthsParse,o))?a:-1!==(a=Te.call(this._longMonthsParse,o))?a:null:-1!==(a=Te.call(this._longMonthsParse,o))?a:-1!==(a=Te.call(this._shortMonthsParse,o))?a:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=d([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},wn.monthsRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||Fe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=Me),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},wn.monthsShortRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||Fe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=Pe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},wn.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},wn.firstDayOfYear=function(){return this._week.doy},wn.firstDayOfWeek=function(){return this._week.dow},wn.weekdays=function(e,t){var n=a(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?He(n,this._week.dow):e?n[e.day()]:n},wn.weekdaysMin=function(e){return!0===e?He(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},wn.weekdaysShort=function(e){return!0===e?He(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},wn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return function(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=d([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Te.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=d([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},wn.weekdaysRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=Ze),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},wn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Xe),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},wn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ke),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},wn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},wn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},lt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===_(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=S("moment.lang is deprecated. Use moment.locale instead.",lt),r.langData=S("moment.langData is deprecated. Use moment.localeData instead.",dt);var Sn=Math.abs;function Rn(e,t,n,r){var a=Ht(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Tn(e){return e<0?Math.floor(e):Math.ceil(e)}function An(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function On(e){return function(){return this.as(e)}}var In=On("ms"),jn=On("s"),Cn=On("m"),Nn=On("h"),Ln=On("d"),qn=On("w"),Un=On("M"),Pn=On("Q"),Mn=On("y");function Fn(e){return function(){return this.isValid()?this._data[e]:NaN}}var zn=Fn("milliseconds"),Bn=Fn("seconds"),Vn=Fn("minutes"),Gn=Fn("hours"),Yn=Fn("days"),Hn=Fn("months"),Wn=Fn("years"),$n=Math.round,Jn={ss:44,s:45,m:45,h:22,d:26,M:11},Zn=Math.abs;function Xn(e){return(e>0)-(e<0)||+e}function Kn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Zn(this._milliseconds)/1e3,r=Zn(this._days),a=Zn(this._months);e=w(n/60),t=w(e/60),n%=60,e%=60;var i=w(a/12),o=a%=12,s=r,c=t,u=e,l=n?n.toFixed(3).replace(/\.?0+$/,""):"",p=this.asSeconds();if(!p)return"P0D";var d=p<0?"-":"",f=Xn(this._months)!==Xn(p)?"-":"",h=Xn(this._days)!==Xn(p)?"-":"",m=Xn(this._milliseconds)!==Xn(p)?"-":"";return d+"P"+(i?f+i+"Y":"")+(o?f+o+"M":"")+(s?h+s+"D":"")+(c||u||l?"T":"")+(c?m+c+"H":"")+(u?m+u+"M":"")+(l?m+l+"S":"")}var Qn=Lt.prototype;return Qn.isValid=function(){return this._isValid},Qn.abs=function(){var e=this._data;return this._milliseconds=Sn(this._milliseconds),this._days=Sn(this._days),this._months=Sn(this._months),e.milliseconds=Sn(e.milliseconds),e.seconds=Sn(e.seconds),e.minutes=Sn(e.minutes),e.hours=Sn(e.hours),e.months=Sn(e.months),e.years=Sn(e.years),this},Qn.add=function(e,t){return Rn(this,e,t,1)},Qn.subtract=function(e,t){return Rn(this,e,t,-1)},Qn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=N(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+An(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Qn.asMilliseconds=In,Qn.asSeconds=jn,Qn.asMinutes=Cn,Qn.asHours=Nn,Qn.asDays=Ln,Qn.asWeeks=qn,Qn.asMonths=Un,Qn.asQuarters=Pn,Qn.asYears=Mn,Qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*_(this._months/12):NaN},Qn._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,c=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*Tn(Dn(s)+o),o=0,s=0),c.milliseconds=i%1e3,e=w(i/1e3),c.seconds=e%60,t=w(e/60),c.minutes=t%60,n=w(t/60),c.hours=n%24,o+=w(n/24),a=w(An(o)),s+=a,o-=Tn(Dn(a)),r=w(s/12),s%=12,c.days=o,c.months=s,c.years=r,this},Qn.clone=function(){return Ht(this)},Qn.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},Qn.milliseconds=zn,Qn.seconds=Bn,Qn.minutes=Vn,Qn.hours=Gn,Qn.days=Yn,Qn.weeks=function(){return w(this.days()/7)},Qn.months=Hn,Qn.years=Wn,Qn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Ht(e).abs(),a=$n(r.as("s")),i=$n(r.as("m")),o=$n(r.as("h")),s=$n(r.as("d")),c=$n(r.as("M")),u=$n(r.as("y")),l=a<=Jn.ss&&["s",a]||a<Jn.s&&["ss",a]||i<=1&&["m"]||i<Jn.m&&["mm",i]||o<=1&&["h"]||o<Jn.h&&["hh",o]||s<=1&&["d"]||s<Jn.d&&["dd",s]||c<=1&&["M"]||c<Jn.M&&["MM",c]||u<=1&&["y"]||["yy",u];return l[2]=t,l[3]=+e>0,l[4]=n,function(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}.apply(null,l)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Qn.toISOString=Kn,Qn.toString=Kn,Qn.toJSON=Kn,Qn.locale=en,Qn.localeData=nn,Qn.toIsoString=S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Kn),Qn.lang=tn,V("X",0,0,"unix"),V("x",0,0,"valueOf"),ue("x",ae),ue("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,n){n._d=new Date(_(e))}),r.version="2.24.0",t=Ot,r.fn=xn,r.min=function(){return Ct("isBefore",[].slice.call(arguments,0))},r.max=function(){return Ct("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=d,r.unix=function(e){return Ot(1e3*e)},r.months=function(e,t){return kn(e,t,"months")},r.isDate=c,r.locale=lt,r.invalid=m,r.duration=Ht,r.isMoment=b,r.weekdays=function(e,t,n){return En(e,t,n,"weekdays")},r.parseZone=function(){return Ot.apply(null,arguments).parseZone()},r.localeData=dt,r.isDuration=qt,r.monthsShort=function(e,t){return kn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return En(e,t,n,"weekdaysMin")},r.defineLocale=pt,r.updateLocale=function(e,t){if(null!=t){var n,r,a=it;null!=(r=ut(e))&&(a=r._config),t=O(a,t),(n=new I(t)).parentLocale=ot[e],ot[e]=n,lt(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},r.locales=function(){return R(ot)},r.weekdaysShort=function(e,t,n){return En(e,t,n,"weekdaysShort")},r.normalizeUnits=N,r.relativeTimeRounding=function(e){return void 0===e?$n:"function"==typeof e&&($n=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Jn[e]&&(void 0===t?Jn[e]:(Jn[e]=t,"s"===e&&(Jn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=xn,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()}).call(this,n(192)(e))},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(41),a={metadataTable:function(e){for(var t=r.print.prettyTree(e.getMetadata(),e.getResourceURI()),n=[],a=0;a<t.length;a++){var i=t[a],o=i.stmt;n.push("".concat("<tr><td class='rdf_subject'>").concat(o.isSubjectBlank()?i.s:"<a href='".concat(o.getSubject(),"'>").concat(i.s,"</a>"),"</td>")+"<td class='rdf_predicate'><a href='".concat(o.getPredicate(),"'>").concat(i.p,"</a></td>")+"<td class='rdf_object'>".concat("uri"===o.getType()?"<a href='".concat(o.getValue(),"'>").concat(i.o,"</a>"):i.o,"</td></tr>"))}return n.join("\n")}},i={},o=function(e){if(!i[e]){for(var t="",n=1;n<e;n++)t+="<span class='rdf_indent'></span>";i[e]=t}return i[e]};a.metadataIndent=function(e,t){for(var n=r.print.prettyTree(e,t),a=[],i=0;i<n.length;i++){var s=n[i],c=s.stmt;a.push("<div class='rdf_statement'>".concat(o(s.indent),"<span class='rdf_subject'>").concat(c.isSubjectBlank()?s.s:"<a href='".concat(c.getSubject(),"'>").concat(s.s,"</a>"),"</span>")+"<span class='rdf_predicate'><a href='".concat(c.getPredicate(),"'>").concat(s.p,"</a></span>")+"<span class='rdf_object'>".concat("uri"===c.getType()?"<a href='".concat(c.getValue(),"'>").concat(s.o,"</a>"):s.o,"</span></div>"))}return a.join("\n")},a.entryInfo=function(e){return"<span class='info entrytype'><label>EntryType:</label> ".concat(e.getEntryType(),"</span>")+"<span class='info resourceType'><label>ResourceType:</label> ".concat(e.getResourceType(),"</span>")+"<span class='info graphType'><label>GraphType:</label> ".concat(e.getGraphType(),"</span>")},a.print=function(e){var t=["".concat("<div class='entry'><h3>Context: <a class='contextURI' href='").concat(e.getContext().getEntryURI(),"'>").concat(e.getContext().getId(),"</a> <span></span> ")+"Entry: <a class='entryURI' href='".concat(e.getURI(),"'>").concat(e.getId(),"</a></h3>")+"<div>"+"<div class='entryInfo'>".concat(a.entryInfo(e.getEntryInfo()),"</div>")],n=e.getMetadata();n&&!n.isEmpty()&&t.push("<h4>Local metadata:</h4><div class='metadata'>".concat(a.metadataIndent(n,e.getResourceURI()),"</div>"));var r=e.getCachedExternalMetadata();return r&&!r.isEmpty()&&t.push("<h4>Cached external metadata:</h4><div class='metadata'>".concat(a.metadataIndent(r,e.getResourceURI()),"</div>")),t.push("</div></div>"),t.join("")};var s=a;t.default=s},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={forEach:function(e,t){return new Promise(function(a,i){var o,s,c=function(e){i(e)};if(Array.isArray(e)){var u=[];o=e.slice(),s=function(e){if(u.push(e),o.length>0)return r.toPromise(t(o.shift())).then(s,c);a(u)},0===o.length?a(u):r.toPromise(t(o.shift())).then(s,c)}else if("object"===n(e)){var l;o=Object.keys(e);var p=function(t){e[l]=t,s()};(s=function(){o.length>0?(l=o.shift(),r.toPromise(t(e[l])).then(p,c)):a(e)})()}})},toPromise:function(e){return"object"===n(e)&&null!==e&&"function"==typeof e.then?e:!1===e?Promise.reject(e):Promise.resolve(e)},delay:function(e){return new Promise(function(t){return setTimeout(t,e)})}},a=r;t.default=a},function(e,t){function n(e,t,n,r,a,i,o){try{var s=e[i](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function r(e){return function(){var t=this,r=arguments;return new Promise(function(a,i){var o=e.apply(t,r);function s(e){n(o,a,i,s,c,"next",e)}function c(e){n(o,a,i,s,c,"throw",e)}s(void 0)})}}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._entrystore=t,this._preloadIdx=new Map}var t,n,i,o,s,c,u;return t=e,(n=[{key:"getEntryStore",value:function(){return this._entrystore}},{key:"preloadEntries",value:function(e,t){var n,r=this._preloadIdx.get(e);if(r){if(t){if(n=r[t.getEntryURI()])return n}else if(r.noContext)return r.noContext}else r={},this._preloadIdx.set(e,r);var a=this._entrystore.newSolrQuery().resourceType(e).limit(100);return t&&a.context(t),n=a.list().getEntries(0),t?r[t.getEntryURI()]=n:r.noContext=n,n}},{key:"clearPreloadEntriesDuplicateCheck",value:function(e,t){if(e){var n=this._preloadIdx.get(e);n&&t?delete n[t.getEntryURI()]:this._preloadIdx.delete(e)}else this._preloadIdx=new Map}},{key:"getEntryByResourceURI",value:(u=r(regeneratorRuntime.mark(function e(t,n,r){var a,i,o,s,c,u,l,p,d,f;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(a=this._entrystore.getCache(),i=a.getByResourceURI(t),!n){e.next=29;break}o=!0,s=!1,c=void 0,e.prev=6,u=i[Symbol.iterator]();case 8:if(o=(l=u.next()).done){e.next=15;break}if((p=l.value).getContext().getId()!==n.getId()){e.next=12;break}return e.abrupt("return",Promise.resolve(p));case 12:o=!0,e.next=8;break;case 15:e.next=21;break;case 17:e.prev=17,e.t0=e.catch(6),s=!0,c=e.t0;case 21:e.prev=21,e.prev=22,o||null==u.return||u.return();case 24:if(e.prev=24,!s){e.next=27;break}throw c;case 27:return e.finish(24);case 28:return e.finish(21);case 29:return d=this._entrystore.newSolrQuery().resource(t).limit(1),n&&d.context(n),e.next=33,d.list(r).getEntries(0);case 33:if(!((f=e.sent).length>0)){e.next=36;break}return e.abrupt("return",f[0]);case 36:throw new Error("No entries for resource with URI: ".concat(t));case 37:case"end":return e.stop()}},e,this,[[6,17,21,29],[22,,24,28]])})),function(e,t,n){return u.apply(this,arguments)})},{key:"getEntryListByResourceURI",value:function(e){return this._entrystore.newSolrQuery().resource(e).list()}},{key:"getEntryByType",value:(c=r(regeneratorRuntime.mark(function e(t,n,r){var a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=this._entrystore.newSolrQuery().rdfType(t).limit(2),n&&a.context(n),e.next=4,a.list(r).getEntries(0);case 4:if(1!==(i=e.sent).length){e.next=7;break}return e.abrupt("return",i[0]);case 7:throw new Error("Wrong number of entries in context / repository");case 8:case"end":return e.stop()}},e,this)})),function(e,t,n){return c.apply(this,arguments)})},{key:"getEntryByGraphType",value:(s=r(regeneratorRuntime.mark(function e(t,n,r){var a,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=this._entrystore.newSolrQuery().graphType(t).limit(2),n&&a.context(n),e.next=4,a.list(r).getEntries(0);case 4:if(!((i=e.sent).length>0)){e.next=7;break}return e.abrupt("return",i[0]);case 7:throw new Error("No entries in ".concat(n?"context":"repository"," context with graphType ").concat(t));case 8:case"end":return e.stop()}},e,this)})),function(e,t,n){return s.apply(this,arguments)})},{key:"removeAll",value:(o=r(regeneratorRuntime.mark(function e(t){var n,a,i,o,s,c;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=[],a=this._entrystore,i=a.getCache(),o=a.getREST(),s=function(){var e=r(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n.length>0)){e.next=11;break}return t=n.pop(),e.prev=2,e.next=5,o.del(t);case 5:e.next=10;break;case 7:e.prev=7,e.t0=e.catch(2),console.log("Could not remove entry with uri: ".concat(t," continuing anyway."));case 10:s();case 11:return e.abrupt("return",void 0);case 12:case"end":return e.stop()}},e,null,[[2,7]])}));return function(){return e.apply(this,arguments)}}(),e.next=7,t.forEach(function(e){n.push(e.getURI()),i.unCache(e)});case 7:c=e.sent,s(c);case 9:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})}])&&a(t.prototype,n),i&&a(t,i),e}();t.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,